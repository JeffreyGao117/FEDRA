//
// File generated by rootcint at Thu Dec 19 18:18:07 2019

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME EbaseCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "EbaseCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void EdbID_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbID(void *p = 0);
   static void *newArray_EdbID(Long_t size, void *p);
   static void delete_EdbID(void *p);
   static void deleteArray_EdbID(void *p);
   static void destruct_EdbID(void *p);
   static void streamer_EdbID(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbID*)
   {
      ::EdbID *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbID >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbID", ::EdbID::Class_Version(), "./EdbID.h", 7,
                  typeid(::EdbID), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbID::Dictionary, isa_proxy, 0,
                  sizeof(::EdbID) );
      instance.SetNew(&new_EdbID);
      instance.SetNewArray(&newArray_EdbID);
      instance.SetDelete(&delete_EdbID);
      instance.SetDeleteArray(&deleteArray_EdbID);
      instance.SetDestructor(&destruct_EdbID);
      instance.SetStreamerFunc(&streamer_EdbID);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbID*)
   {
      return GenerateInitInstanceLocal((::EdbID*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbID*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbSegP_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbSegP(void *p = 0);
   static void *newArray_EdbSegP(Long_t size, void *p);
   static void delete_EdbSegP(void *p);
   static void deleteArray_EdbSegP(void *p);
   static void destruct_EdbSegP(void *p);
   static void streamer_EdbSegP(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbSegP*)
   {
      ::EdbSegP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbSegP >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbSegP", ::EdbSegP::Class_Version(), "./EdbSegP.h", 18,
                  typeid(::EdbSegP), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbSegP::Dictionary, isa_proxy, 0,
                  sizeof(::EdbSegP) );
      instance.SetNew(&new_EdbSegP);
      instance.SetNewArray(&newArray_EdbSegP);
      instance.SetDelete(&delete_EdbSegP);
      instance.SetDeleteArray(&deleteArray_EdbSegP);
      instance.SetDestructor(&destruct_EdbSegP);
      instance.SetStreamerFunc(&streamer_EdbSegP);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbSegP*)
   {
      return GenerateInitInstanceLocal((::EdbSegP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbSegP*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbSegCorr_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbSegCorr(void *p = 0);
   static void *newArray_EdbSegCorr(Long_t size, void *p);
   static void delete_EdbSegCorr(void *p);
   static void deleteArray_EdbSegCorr(void *p);
   static void destruct_EdbSegCorr(void *p);
   static void streamer_EdbSegCorr(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbSegCorr*)
   {
      ::EdbSegCorr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbSegCorr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbSegCorr", ::EdbSegCorr::Class_Version(), "./EdbSegCorr.h", 8,
                  typeid(::EdbSegCorr), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbSegCorr::Dictionary, isa_proxy, 0,
                  sizeof(::EdbSegCorr) );
      instance.SetNew(&new_EdbSegCorr);
      instance.SetNewArray(&newArray_EdbSegCorr);
      instance.SetDelete(&delete_EdbSegCorr);
      instance.SetDeleteArray(&deleteArray_EdbSegCorr);
      instance.SetDestructor(&destruct_EdbSegCorr);
      instance.SetStreamerFunc(&streamer_EdbSegCorr);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbSegCorr*)
   {
      return GenerateInitInstanceLocal((::EdbSegCorr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbSegCorr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbLayer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbLayer(void *p = 0);
   static void *newArray_EdbLayer(Long_t size, void *p);
   static void delete_EdbLayer(void *p);
   static void deleteArray_EdbLayer(void *p);
   static void destruct_EdbLayer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbLayer*)
   {
      ::EdbLayer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbLayer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbLayer", ::EdbLayer::Class_Version(), "./EdbLayer.h", 38,
                  typeid(::EdbLayer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbLayer::Dictionary, isa_proxy, 4,
                  sizeof(::EdbLayer) );
      instance.SetNew(&new_EdbLayer);
      instance.SetNewArray(&newArray_EdbLayer);
      instance.SetDelete(&delete_EdbLayer);
      instance.SetDeleteArray(&deleteArray_EdbLayer);
      instance.SetDestructor(&destruct_EdbLayer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbLayer*)
   {
      return GenerateInitInstanceLocal((::EdbLayer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbLayer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbCorrectionMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbCorrectionMap(void *p = 0);
   static void *newArray_EdbCorrectionMap(Long_t size, void *p);
   static void delete_EdbCorrectionMap(void *p);
   static void deleteArray_EdbCorrectionMap(void *p);
   static void destruct_EdbCorrectionMap(void *p);
   static void streamer_EdbCorrectionMap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbCorrectionMap*)
   {
      ::EdbCorrectionMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbCorrectionMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbCorrectionMap", ::EdbCorrectionMap::Class_Version(), "./EdbLayer.h", 13,
                  typeid(::EdbCorrectionMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbCorrectionMap::Dictionary, isa_proxy, 0,
                  sizeof(::EdbCorrectionMap) );
      instance.SetNew(&new_EdbCorrectionMap);
      instance.SetNewArray(&newArray_EdbCorrectionMap);
      instance.SetDelete(&delete_EdbCorrectionMap);
      instance.SetDeleteArray(&deleteArray_EdbCorrectionMap);
      instance.SetDestructor(&destruct_EdbCorrectionMap);
      instance.SetStreamerFunc(&streamer_EdbCorrectionMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbCorrectionMap*)
   {
      return GenerateInitInstanceLocal((::EdbCorrectionMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbCorrectionMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbScanCond_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbScanCond(void *p = 0);
   static void *newArray_EdbScanCond(Long_t size, void *p);
   static void delete_EdbScanCond(void *p);
   static void deleteArray_EdbScanCond(void *p);
   static void destruct_EdbScanCond(void *p);
   static void streamer_EdbScanCond(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbScanCond*)
   {
      ::EdbScanCond *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbScanCond >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbScanCond", ::EdbScanCond::Class_Version(), "./EdbScanCond.h", 10,
                  typeid(::EdbScanCond), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbScanCond::Dictionary, isa_proxy, 0,
                  sizeof(::EdbScanCond) );
      instance.SetNew(&new_EdbScanCond);
      instance.SetNewArray(&newArray_EdbScanCond);
      instance.SetDelete(&delete_EdbScanCond);
      instance.SetDeleteArray(&deleteArray_EdbScanCond);
      instance.SetDestructor(&destruct_EdbScanCond);
      instance.SetStreamerFunc(&streamer_EdbScanCond);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbScanCond*)
   {
      return GenerateInitInstanceLocal((::EdbScanCond*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbScanCond*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPlateP_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPlateP(void *p = 0);
   static void *newArray_EdbPlateP(Long_t size, void *p);
   static void delete_EdbPlateP(void *p);
   static void deleteArray_EdbPlateP(void *p);
   static void destruct_EdbPlateP(void *p);
   static void streamer_EdbPlateP(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPlateP*)
   {
      ::EdbPlateP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPlateP >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPlateP", ::EdbPlateP::Class_Version(), "./EdbBrick.h", 13,
                  typeid(::EdbPlateP), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPlateP::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPlateP) );
      instance.SetNew(&new_EdbPlateP);
      instance.SetNewArray(&newArray_EdbPlateP);
      instance.SetDelete(&delete_EdbPlateP);
      instance.SetDeleteArray(&deleteArray_EdbPlateP);
      instance.SetDestructor(&destruct_EdbPlateP);
      instance.SetStreamerFunc(&streamer_EdbPlateP);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPlateP*)
   {
      return GenerateInitInstanceLocal((::EdbPlateP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPlateP*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbBrickP_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbBrickP(void *p = 0);
   static void *newArray_EdbBrickP(Long_t size, void *p);
   static void delete_EdbBrickP(void *p);
   static void deleteArray_EdbBrickP(void *p);
   static void destruct_EdbBrickP(void *p);
   static void streamer_EdbBrickP(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbBrickP*)
   {
      ::EdbBrickP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbBrickP >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbBrickP", ::EdbBrickP::Class_Version(), "./EdbBrick.h", 37,
                  typeid(::EdbBrickP), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbBrickP::Dictionary, isa_proxy, 0,
                  sizeof(::EdbBrickP) );
      instance.SetNew(&new_EdbBrickP);
      instance.SetNewArray(&newArray_EdbBrickP);
      instance.SetDelete(&delete_EdbBrickP);
      instance.SetDeleteArray(&deleteArray_EdbBrickP);
      instance.SetDestructor(&destruct_EdbBrickP);
      instance.SetStreamerFunc(&streamer_EdbBrickP);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbBrickP*)
   {
      return GenerateInitInstanceLocal((::EdbBrickP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbBrickP*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbScanSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbScanSet(void *p = 0);
   static void *newArray_EdbScanSet(Long_t size, void *p);
   static void delete_EdbScanSet(void *p);
   static void deleteArray_EdbScanSet(void *p);
   static void destruct_EdbScanSet(void *p);
   static void streamer_EdbScanSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbScanSet*)
   {
      ::EdbScanSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbScanSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbScanSet", ::EdbScanSet::Class_Version(), "./EdbScanSet.h", 11,
                  typeid(::EdbScanSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbScanSet::Dictionary, isa_proxy, 0,
                  sizeof(::EdbScanSet) );
      instance.SetNew(&new_EdbScanSet);
      instance.SetNewArray(&newArray_EdbScanSet);
      instance.SetDelete(&delete_EdbScanSet);
      instance.SetDeleteArray(&deleteArray_EdbScanSet);
      instance.SetDestructor(&destruct_EdbScanSet);
      instance.SetStreamerFunc(&streamer_EdbScanSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbScanSet*)
   {
      return GenerateInitInstanceLocal((::EdbScanSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbScanSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbSigma_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbSigma(void *p = 0);
   static void *newArray_EdbSigma(Long_t size, void *p);
   static void delete_EdbSigma(void *p);
   static void deleteArray_EdbSigma(void *p);
   static void destruct_EdbSigma(void *p);
   static void streamer_EdbSigma(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbSigma*)
   {
      ::EdbSigma *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbSigma >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbSigma", ::EdbSigma::Class_Version(), "./EdbSigma.h", 8,
                  typeid(::EdbSigma), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbSigma::Dictionary, isa_proxy, 0,
                  sizeof(::EdbSigma) );
      instance.SetNew(&new_EdbSigma);
      instance.SetNewArray(&newArray_EdbSigma);
      instance.SetDelete(&delete_EdbSigma);
      instance.SetDeleteArray(&deleteArray_EdbSigma);
      instance.SetDestructor(&destruct_EdbSigma);
      instance.SetStreamerFunc(&streamer_EdbSigma);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbSigma*)
   {
      return GenerateInitInstanceLocal((::EdbSigma*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbSigma*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbSEQ_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbSEQ(void *p = 0);
   static void *newArray_EdbSEQ(Long_t size, void *p);
   static void delete_EdbSEQ(void *p);
   static void deleteArray_EdbSEQ(void *p);
   static void destruct_EdbSEQ(void *p);
   static void streamer_EdbSEQ(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbSEQ*)
   {
      ::EdbSEQ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbSEQ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbSEQ", ::EdbSEQ::Class_Version(), "./EdbSEQ.h", 12,
                  typeid(::EdbSEQ), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbSEQ::Dictionary, isa_proxy, 0,
                  sizeof(::EdbSEQ) );
      instance.SetNew(&new_EdbSEQ);
      instance.SetNewArray(&newArray_EdbSEQ);
      instance.SetDelete(&delete_EdbSEQ);
      instance.SetDeleteArray(&deleteArray_EdbSEQ);
      instance.SetDestructor(&destruct_EdbSEQ);
      instance.SetStreamerFunc(&streamer_EdbSEQ);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbSEQ*)
   {
      return GenerateInitInstanceLocal((::EdbSEQ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbSEQ*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbSegCouple_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbSegCouple(void *p = 0);
   static void *newArray_EdbSegCouple(Long_t size, void *p);
   static void delete_EdbSegCouple(void *p);
   static void deleteArray_EdbSegCouple(void *p);
   static void destruct_EdbSegCouple(void *p);
   static void streamer_EdbSegCouple(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbSegCouple*)
   {
      ::EdbSegCouple *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbSegCouple >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbSegCouple", ::EdbSegCouple::Class_Version(), "./EdbSegCouple.h", 14,
                  typeid(::EdbSegCouple), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbSegCouple::Dictionary, isa_proxy, 0,
                  sizeof(::EdbSegCouple) );
      instance.SetNew(&new_EdbSegCouple);
      instance.SetNewArray(&newArray_EdbSegCouple);
      instance.SetDelete(&delete_EdbSegCouple);
      instance.SetDeleteArray(&deleteArray_EdbSegCouple);
      instance.SetDestructor(&destruct_EdbSegCouple);
      instance.SetStreamerFunc(&streamer_EdbSegCouple);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbSegCouple*)
   {
      return GenerateInitInstanceLocal((::EdbSegCouple*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbSegCouple*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbCouplesTree_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbCouplesTree(void *p = 0);
   static void *newArray_EdbCouplesTree(Long_t size, void *p);
   static void delete_EdbCouplesTree(void *p);
   static void deleteArray_EdbCouplesTree(void *p);
   static void destruct_EdbCouplesTree(void *p);
   static void streamer_EdbCouplesTree(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbCouplesTree*)
   {
      ::EdbCouplesTree *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbCouplesTree >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbCouplesTree", ::EdbCouplesTree::Class_Version(), "./EdbCouplesTree.h", 17,
                  typeid(::EdbCouplesTree), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbCouplesTree::Dictionary, isa_proxy, 0,
                  sizeof(::EdbCouplesTree) );
      instance.SetNew(&new_EdbCouplesTree);
      instance.SetNewArray(&newArray_EdbCouplesTree);
      instance.SetDelete(&delete_EdbCouplesTree);
      instance.SetDeleteArray(&deleteArray_EdbCouplesTree);
      instance.SetDestructor(&destruct_EdbCouplesTree);
      instance.SetStreamerFunc(&streamer_EdbCouplesTree);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbCouplesTree*)
   {
      return GenerateInitInstanceLocal((::EdbCouplesTree*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbCouplesTree*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbSegmentCut_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbSegmentCut(void *p = 0);
   static void *newArray_EdbSegmentCut(Long_t size, void *p);
   static void delete_EdbSegmentCut(void *p);
   static void deleteArray_EdbSegmentCut(void *p);
   static void destruct_EdbSegmentCut(void *p);
   static void streamer_EdbSegmentCut(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbSegmentCut*)
   {
      ::EdbSegmentCut *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbSegmentCut >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbSegmentCut", ::EdbSegmentCut::Class_Version(), "./EdbSegmentCut.h", 6,
                  typeid(::EdbSegmentCut), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbSegmentCut::Dictionary, isa_proxy, 0,
                  sizeof(::EdbSegmentCut) );
      instance.SetNew(&new_EdbSegmentCut);
      instance.SetNewArray(&newArray_EdbSegmentCut);
      instance.SetDelete(&delete_EdbSegmentCut);
      instance.SetDeleteArray(&deleteArray_EdbSegmentCut);
      instance.SetDestructor(&destruct_EdbSegmentCut);
      instance.SetStreamerFunc(&streamer_EdbSegmentCut);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbSegmentCut*)
   {
      return GenerateInitInstanceLocal((::EdbSegmentCut*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbSegmentCut*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr EdbID::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbID::Class_Name()
{
   return "EdbID";
}

//______________________________________________________________________________
const char *EdbID::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbID*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbID::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbID*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbID::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbID*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbID::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbID*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbSegP::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbSegP::Class_Name()
{
   return "EdbSegP";
}

//______________________________________________________________________________
const char *EdbSegP::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegP*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbSegP::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegP*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbSegP::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegP*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbSegP::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegP*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbSegCorr::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbSegCorr::Class_Name()
{
   return "EdbSegCorr";
}

//______________________________________________________________________________
const char *EdbSegCorr::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegCorr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbSegCorr::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegCorr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbSegCorr::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegCorr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbSegCorr::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegCorr*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbLayer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbLayer::Class_Name()
{
   return "EdbLayer";
}

//______________________________________________________________________________
const char *EdbLayer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbLayer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbLayer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbLayer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbLayer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbLayer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbLayer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbLayer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbCorrectionMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbCorrectionMap::Class_Name()
{
   return "EdbCorrectionMap";
}

//______________________________________________________________________________
const char *EdbCorrectionMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbCorrectionMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbCorrectionMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbCorrectionMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbScanCond::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbScanCond::Class_Name()
{
   return "EdbScanCond";
}

//______________________________________________________________________________
const char *EdbScanCond::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanCond*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbScanCond::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanCond*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbScanCond::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanCond*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbScanCond::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanCond*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPlateP::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPlateP::Class_Name()
{
   return "EdbPlateP";
}

//______________________________________________________________________________
const char *EdbPlateP::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateP*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPlateP::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateP*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPlateP::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateP*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPlateP::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateP*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbBrickP::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbBrickP::Class_Name()
{
   return "EdbBrickP";
}

//______________________________________________________________________________
const char *EdbBrickP::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBrickP*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbBrickP::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBrickP*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbBrickP::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBrickP*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbBrickP::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBrickP*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbScanSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbScanSet::Class_Name()
{
   return "EdbScanSet";
}

//______________________________________________________________________________
const char *EdbScanSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbScanSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbScanSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbScanSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbSigma::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbSigma::Class_Name()
{
   return "EdbSigma";
}

//______________________________________________________________________________
const char *EdbSigma::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSigma*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbSigma::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSigma*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbSigma::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSigma*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbSigma::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSigma*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbSEQ::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbSEQ::Class_Name()
{
   return "EdbSEQ";
}

//______________________________________________________________________________
const char *EdbSEQ::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSEQ*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbSEQ::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSEQ*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbSEQ::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSEQ*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbSEQ::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSEQ*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbSegCouple::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbSegCouple::Class_Name()
{
   return "EdbSegCouple";
}

//______________________________________________________________________________
const char *EdbSegCouple::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegCouple*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbSegCouple::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegCouple*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbSegCouple::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegCouple*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbSegCouple::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegCouple*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbCouplesTree::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbCouplesTree::Class_Name()
{
   return "EdbCouplesTree";
}

//______________________________________________________________________________
const char *EdbCouplesTree::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCouplesTree*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbCouplesTree::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCouplesTree*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbCouplesTree::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCouplesTree*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbCouplesTree::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCouplesTree*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbSegmentCut::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbSegmentCut::Class_Name()
{
   return "EdbSegmentCut";
}

//______________________________________________________________________________
const char *EdbSegmentCut::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegmentCut*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbSegmentCut::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegmentCut*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbSegmentCut::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegmentCut*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbSegmentCut::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegmentCut*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void EdbLayer::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbLayer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(EdbLayer::Class(),this);
   } else {
      R__b.WriteClassBuffer(EdbLayer::Class(),this);
   }
}

//______________________________________________________________________________
void EdbLayer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbLayer.
      TClass *R__cl = ::EdbLayer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID", &eID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ", &eZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZmin", &eZmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZmax", &eZmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX", &eX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY", &eY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDX", &eDX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDY", &eDY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTX", &eTX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTY", &eTY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eShr", &eShr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAffXY", &eAffXY);
      R__insp.InspectMember(eAffXY, "eAffXY.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAffTXTY", &eAffTXTY);
      R__insp.InspectMember(eAffTXTY, "eAffTXTY.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZcorr", &eZcorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNcp", &eNcp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMap", &eMap);
      R__insp.InspectMember(eMap, "eMap.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbLayer(void *p) {
      return  p ? new(p) ::EdbLayer : new ::EdbLayer;
   }
   static void *newArray_EdbLayer(Long_t nElements, void *p) {
      return p ? new(p) ::EdbLayer[nElements] : new ::EdbLayer[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbLayer(void *p) {
      delete ((::EdbLayer*)p);
   }
   static void deleteArray_EdbLayer(void *p) {
      delete [] ((::EdbLayer*)p);
   }
   static void destruct_EdbLayer(void *p) {
      typedef ::EdbLayer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::EdbLayer

//______________________________________________________________________________
void EdbPlateP::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPlateP.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbLayer::Streamer(R__b);
      eLayers.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbPlateP::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPlateP::IsA(), kTRUE);
      EdbLayer::Streamer(R__b);
      eLayers.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPlateP::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPlateP.
      TClass *R__cl = ::EdbPlateP::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eLayers", &eLayers);
      R__insp.InspectMember(eLayers, "eLayers.");
      EdbLayer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPlateP(void *p) {
      return  p ? new(p) ::EdbPlateP : new ::EdbPlateP;
   }
   static void *newArray_EdbPlateP(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPlateP[nElements] : new ::EdbPlateP[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPlateP(void *p) {
      delete ((::EdbPlateP*)p);
   }
   static void deleteArray_EdbPlateP(void *p) {
      delete [] ((::EdbPlateP*)p);
   }
   static void destruct_EdbPlateP(void *p) {
      typedef ::EdbPlateP current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPlateP(TBuffer &buf, void *obj) {
      ((::EdbPlateP*)obj)->::EdbPlateP::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPlateP

//______________________________________________________________________________
void EdbBrickP::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbBrickP.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbLayer::Streamer(R__b);
      ePlates.Streamer(R__b);
      eSpacers.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbBrickP::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbBrickP::IsA(), kTRUE);
      EdbLayer::Streamer(R__b);
      ePlates.Streamer(R__b);
      eSpacers.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbBrickP::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbBrickP.
      TClass *R__cl = ::EdbBrickP::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePlates", &ePlates);
      R__insp.InspectMember(ePlates, "ePlates.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSpacers", &eSpacers);
      R__insp.InspectMember(eSpacers, "eSpacers.");
      EdbLayer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbBrickP(void *p) {
      return  p ? new(p) ::EdbBrickP : new ::EdbBrickP;
   }
   static void *newArray_EdbBrickP(Long_t nElements, void *p) {
      return p ? new(p) ::EdbBrickP[nElements] : new ::EdbBrickP[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbBrickP(void *p) {
      delete ((::EdbBrickP*)p);
   }
   static void deleteArray_EdbBrickP(void *p) {
      delete [] ((::EdbBrickP*)p);
   }
   static void destruct_EdbBrickP(void *p) {
      typedef ::EdbBrickP current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbBrickP(TBuffer &buf, void *obj) {
      ((::EdbBrickP*)obj)->::EdbBrickP::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbBrickP

//______________________________________________________________________________
void EdbCorrectionMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbCorrectionMap.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbCell2::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbCorrectionMap::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbCorrectionMap::IsA(), kTRUE);
      EdbCell2::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbCorrectionMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbCorrectionMap.
      TClass *R__cl = ::EdbCorrectionMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      EdbCell2::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbCorrectionMap(void *p) {
      return  p ? new(p) ::EdbCorrectionMap : new ::EdbCorrectionMap;
   }
   static void *newArray_EdbCorrectionMap(Long_t nElements, void *p) {
      return p ? new(p) ::EdbCorrectionMap[nElements] : new ::EdbCorrectionMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbCorrectionMap(void *p) {
      delete ((::EdbCorrectionMap*)p);
   }
   static void deleteArray_EdbCorrectionMap(void *p) {
      delete [] ((::EdbCorrectionMap*)p);
   }
   static void destruct_EdbCorrectionMap(void *p) {
      typedef ::EdbCorrectionMap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbCorrectionMap(TBuffer &buf, void *obj) {
      ((::EdbCorrectionMap*)obj)->::EdbCorrectionMap::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbCorrectionMap

//______________________________________________________________________________
void EdbScanCond::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbScanCond.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> eSigmaXgr;
      R__b >> eSigmaYgr;
      R__b >> eSigmaZgr;
      R__b >> eDegrad;
      R__b >> eSigmaX0;
      R__b >> eSigmaY0;
      R__b >> eSigmaZ0;
      R__b >> eSigmaTX0;
      R__b >> eSigmaTY0;
      R__b.ReadStaticArray((float*)ePuls0);
      R__b.ReadStaticArray((float*)ePuls04);
      R__b >> eBinX;
      R__b >> eBinY;
      R__b >> eBinTX;
      R__b >> eBinTY;
      R__b >> eChi2Max;
      R__b >> eChi2PMax;
      R__b >> eChi2Mode;
      R__b >> eOffX;
      R__b >> eOffY;
      R__b >> eRadX0;
      R__b >> eLikelihoodMT;
      R__b.CheckByteCount(R__s, R__c, EdbScanCond::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbScanCond::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << eSigmaXgr;
      R__b << eSigmaYgr;
      R__b << eSigmaZgr;
      R__b << eDegrad;
      R__b << eSigmaX0;
      R__b << eSigmaY0;
      R__b << eSigmaZ0;
      R__b << eSigmaTX0;
      R__b << eSigmaTY0;
      R__b.WriteArray(ePuls0, 2);
      R__b.WriteArray(ePuls04, 2);
      R__b << eBinX;
      R__b << eBinY;
      R__b << eBinTX;
      R__b << eBinTY;
      R__b << eChi2Max;
      R__b << eChi2PMax;
      R__b << eChi2Mode;
      R__b << eOffX;
      R__b << eOffY;
      R__b << eRadX0;
      R__b << eLikelihoodMT;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbScanCond::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbScanCond.
      TClass *R__cl = ::EdbScanCond::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaXgr", &eSigmaXgr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaYgr", &eSigmaYgr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaZgr", &eSigmaZgr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDegrad", &eDegrad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaX0", &eSigmaX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaY0", &eSigmaY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaZ0", &eSigmaZ0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaTX0", &eSigmaTX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaTY0", &eSigmaTY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePuls0[2]", ePuls0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePuls04[2]", ePuls04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinX", &eBinX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinY", &eBinY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinTX", &eBinTX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinTY", &eBinTY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2Max", &eChi2Max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2PMax", &eChi2PMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2Mode", &eChi2Mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eOffX", &eOffX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eOffY", &eOffY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRadX0", &eRadX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eLikelihoodMT", &eLikelihoodMT);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbScanCond(void *p) {
      return  p ? new(p) ::EdbScanCond : new ::EdbScanCond;
   }
   static void *newArray_EdbScanCond(Long_t nElements, void *p) {
      return p ? new(p) ::EdbScanCond[nElements] : new ::EdbScanCond[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbScanCond(void *p) {
      delete ((::EdbScanCond*)p);
   }
   static void deleteArray_EdbScanCond(void *p) {
      delete [] ((::EdbScanCond*)p);
   }
   static void destruct_EdbScanCond(void *p) {
      typedef ::EdbScanCond current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbScanCond(TBuffer &buf, void *obj) {
      ((::EdbScanCond*)obj)->::EdbScanCond::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbScanCond

//______________________________________________________________________________
void EdbSegmentCut::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbSegmentCut.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eXI;
      R__b.ReadStaticArray((float*)eMin);
      R__b.ReadStaticArray((float*)eMax);
      R__b.CheckByteCount(R__s, R__c, EdbSegmentCut::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbSegmentCut::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eXI;
      R__b.WriteArray(eMin, 5);
      R__b.WriteArray(eMax, 5);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbSegmentCut::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbSegmentCut.
      TClass *R__cl = ::EdbSegmentCut::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXI", &eXI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMin[5]", eMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMax[5]", eMax);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbSegmentCut(void *p) {
      return  p ? new(p) ::EdbSegmentCut : new ::EdbSegmentCut;
   }
   static void *newArray_EdbSegmentCut(Long_t nElements, void *p) {
      return p ? new(p) ::EdbSegmentCut[nElements] : new ::EdbSegmentCut[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbSegmentCut(void *p) {
      delete ((::EdbSegmentCut*)p);
   }
   static void deleteArray_EdbSegmentCut(void *p) {
      delete [] ((::EdbSegmentCut*)p);
   }
   static void destruct_EdbSegmentCut(void *p) {
      typedef ::EdbSegmentCut current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbSegmentCut(TBuffer &buf, void *obj) {
      ((::EdbSegmentCut*)obj)->::EdbSegmentCut::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbSegmentCut

//______________________________________________________________________________
void EdbID::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbID.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eBrick;
      R__b >> ePlate;
      R__b >> eMajor;
      R__b >> eMinor;
      R__b.CheckByteCount(R__s, R__c, EdbID::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbID::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eBrick;
      R__b << ePlate;
      R__b << eMajor;
      R__b << eMinor;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbID::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbID.
      TClass *R__cl = ::EdbID::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBrick", &eBrick);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePlate", &ePlate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMajor", &eMajor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMinor", &eMinor);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbID(void *p) {
      return  p ? new(p) ::EdbID : new ::EdbID;
   }
   static void *newArray_EdbID(Long_t nElements, void *p) {
      return p ? new(p) ::EdbID[nElements] : new ::EdbID[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbID(void *p) {
      delete ((::EdbID*)p);
   }
   static void deleteArray_EdbID(void *p) {
      delete [] ((::EdbID*)p);
   }
   static void destruct_EdbID(void *p) {
      typedef ::EdbID current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbID(TBuffer &buf, void *obj) {
      ((::EdbID*)obj)->::EdbID::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbID

//______________________________________________________________________________
void EdbScanSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbScanSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      eB.Streamer(R__b);
      ePID.Streamer(R__b);
      ePC.Streamer(R__b);
      eIDS.Streamer(R__b);
      R__b >> eReferencePlate;
      eID.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbScanSet::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbScanSet::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      eB.Streamer(R__b);
      ePID.Streamer(R__b);
      ePC.Streamer(R__b);
      eIDS.Streamer(R__b);
      R__b << eReferencePlate;
      eID.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbScanSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbScanSet.
      TClass *R__cl = ::EdbScanSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eB", &eB);
      R__insp.InspectMember(eB, "eB.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePID", &ePID);
      R__insp.InspectMember(ePID, "ePID.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePC", &ePC);
      R__insp.InspectMember(ePC, "ePC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eIDS", &eIDS);
      R__insp.InspectMember(eIDS, "eIDS.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eReferencePlate", &eReferencePlate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID", &eID);
      R__insp.InspectMember(eID, "eID.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbScanSet(void *p) {
      return  p ? new(p) ::EdbScanSet : new ::EdbScanSet;
   }
   static void *newArray_EdbScanSet(Long_t nElements, void *p) {
      return p ? new(p) ::EdbScanSet[nElements] : new ::EdbScanSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbScanSet(void *p) {
      delete ((::EdbScanSet*)p);
   }
   static void deleteArray_EdbScanSet(void *p) {
      delete [] ((::EdbScanSet*)p);
   }
   static void destruct_EdbScanSet(void *p) {
      typedef ::EdbScanSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbScanSet(TBuffer &buf, void *obj) {
      ((::EdbScanSet*)obj)->::EdbScanSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbScanSet

//______________________________________________________________________________
void EdbSegP::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbSegP.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      EdbTrack2D::Streamer(R__b);
      R__b >> ePID;
      R__b >> eID;
      R__b.ReadStaticArray((int*)eVid);
      R__b.ReadStaticArray((int*)eAid);
      R__b >> eFlag;
      R__b >> eTrack;
      R__b >> eX;
      R__b >> eY;
      R__b >> eZ;
      R__b >> eTX;
      R__b >> eTY;
      R__b >> eSZ;
      R__b >> eChi2;
      R__b >> eProb;
      R__b >> eW;
      R__b >> eVolume;
      R__b >> eDZ;
      R__b >> eDZem;
      R__b >> eP;
      R__b >> eMCTrack;
      R__b >> eMCEvt;
      eScanID.Streamer(R__b);
      R__b >> eCOV;
      R__b.CheckByteCount(R__s, R__c, EdbSegP::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbSegP::IsA(), kTRUE);
      TObject::Streamer(R__b);
      EdbTrack2D::Streamer(R__b);
      R__b << ePID;
      R__b << eID;
      R__b.WriteArray(eVid, 2);
      R__b.WriteArray(eAid, 2);
      R__b << eFlag;
      R__b << eTrack;
      R__b << eX;
      R__b << eY;
      R__b << eZ;
      R__b << eTX;
      R__b << eTY;
      R__b << eSZ;
      R__b << eChi2;
      R__b << eProb;
      R__b << eW;
      R__b << eVolume;
      R__b << eDZ;
      R__b << eDZem;
      R__b << eP;
      R__b << eMCTrack;
      R__b << eMCEvt;
      eScanID.Streamer(R__b);
      R__b << eCOV;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbSegP::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbSegP.
      TClass *R__cl = ::EdbSegP::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePID", &ePID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID", &eID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVid[2]", eVid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAid[2]", eAid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFlag", &eFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTrack", &eTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX", &eX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY", &eY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ", &eZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTX", &eTX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTY", &eTY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSZ", &eSZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2", &eChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eProb", &eProb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eW", &eW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVolume", &eVolume);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZ", &eDZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZem", &eDZem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eP", &eP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMCTrack", &eMCTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMCEvt", &eMCEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eEMULDigitArray", &eEMULDigitArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eScanID", &eScanID);
      R__insp.InspectMember(eScanID, "eScanID.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCOV", &eCOV);
      TObject::ShowMembers(R__insp);
      EdbTrack2D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbSegP(void *p) {
      return  p ? new(p) ::EdbSegP : new ::EdbSegP;
   }
   static void *newArray_EdbSegP(Long_t nElements, void *p) {
      return p ? new(p) ::EdbSegP[nElements] : new ::EdbSegP[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbSegP(void *p) {
      delete ((::EdbSegP*)p);
   }
   static void deleteArray_EdbSegP(void *p) {
      delete [] ((::EdbSegP*)p);
   }
   static void destruct_EdbSegP(void *p) {
      typedef ::EdbSegP current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbSegP(TBuffer &buf, void *obj) {
      ((::EdbSegP*)obj)->::EdbSegP::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbSegP

//______________________________________________________________________________
void EdbSigma::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbSigma.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eSxy;
      R__b >> eSz;
      R__b >> eDZem;
      R__b >> eDZbase;
      R__b >> eDZcell;
      R__b >> eSxyZone;
      R__b >> eSaZone;
      R__b >> eSxyPlate;
      R__b >> eSaPlate;
      R__b.CheckByteCount(R__s, R__c, EdbSigma::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbSigma::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eSxy;
      R__b << eSz;
      R__b << eDZem;
      R__b << eDZbase;
      R__b << eDZcell;
      R__b << eSxyZone;
      R__b << eSaZone;
      R__b << eSxyPlate;
      R__b << eSaPlate;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbSigma::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbSigma.
      TClass *R__cl = ::EdbSigma::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSxy", &eSxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSz", &eSz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZem", &eDZem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZbase", &eDZbase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZcell", &eDZcell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSxyZone", &eSxyZone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSaZone", &eSaZone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSxyPlate", &eSxyPlate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSaPlate", &eSaPlate);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbSigma(void *p) {
      return  p ? new(p) ::EdbSigma : new ::EdbSigma;
   }
   static void *newArray_EdbSigma(Long_t nElements, void *p) {
      return p ? new(p) ::EdbSigma[nElements] : new ::EdbSigma[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbSigma(void *p) {
      delete ((::EdbSigma*)p);
   }
   static void deleteArray_EdbSigma(void *p) {
      delete [] ((::EdbSigma*)p);
   }
   static void destruct_EdbSigma(void *p) {
      typedef ::EdbSigma current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbSigma(TBuffer &buf, void *obj) {
      ((::EdbSigma*)obj)->::EdbSigma::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbSigma

//______________________________________________________________________________
void EdbSEQ::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbSEQ.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbSigma::Streamer(R__b);
      R__b >> eS0mt;
      R__b >> eNsigma;
      R__b >> eArea;
      R__b >> eNP;
      eExcludeThetaRange.Streamer(R__b);
      eHEq.Streamer(R__b);
      R__b >> eXLimits;
      R__b >> eYLimits;
      R__b >> eThetaLimits;
      R__b >> eWLimits;
      R__b >> eChiLimits;
      R__b.CheckByteCount(R__s, R__c, EdbSEQ::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbSEQ::IsA(), kTRUE);
      EdbSigma::Streamer(R__b);
      R__b << eS0mt;
      R__b << eNsigma;
      R__b << eArea;
      R__b << eNP;
      eExcludeThetaRange.Streamer(R__b);
      eHEq.Streamer(R__b);
      R__b << eXLimits;
      R__b << eYLimits;
      R__b << eThetaLimits;
      R__b << eWLimits;
      R__b << eChiLimits;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbSEQ::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbSEQ.
      TClass *R__cl = ::EdbSEQ::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS0mt", &eS0mt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNsigma", &eNsigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eArea", &eArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNP", &eNP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eExcludeThetaRange", &eExcludeThetaRange);
      R__insp.InspectMember(eExcludeThetaRange, "eExcludeThetaRange.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHEq", &eHEq);
      R__insp.InspectMember(eHEq, "eHEq.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eXLimits", &eXLimits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eYLimits", &eYLimits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eThetaLimits", &eThetaLimits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eWLimits", &eWLimits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eChiLimits", &eChiLimits);
      EdbSigma::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbSEQ(void *p) {
      return  p ? new(p) ::EdbSEQ : new ::EdbSEQ;
   }
   static void *newArray_EdbSEQ(Long_t nElements, void *p) {
      return p ? new(p) ::EdbSEQ[nElements] : new ::EdbSEQ[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbSEQ(void *p) {
      delete ((::EdbSEQ*)p);
   }
   static void deleteArray_EdbSEQ(void *p) {
      delete [] ((::EdbSEQ*)p);
   }
   static void destruct_EdbSEQ(void *p) {
      typedef ::EdbSEQ current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbSEQ(TBuffer &buf, void *obj) {
      ((::EdbSEQ*)obj)->::EdbSEQ::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbSEQ

//______________________________________________________________________________
void EdbCouplesTree::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbCouplesTree.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eS1;
      R__b >> eS2;
      R__b >> eS;
      R__b >> eCP;
      R__b >> eXv;
      R__b >> eYv;
      R__b >> ePid1;
      R__b >> ePid2;
      R__b >> eTree;
      R__b >> eEraseMask;
      R__b >> eAcceptMask;
      eCut.Streamer(R__b);
      R__b >> eApplyCorrections;
      ePlate.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbCouplesTree::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbCouplesTree::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eS1;
      R__b << eS2;
      R__b << eS;
      R__b << eCP;
      R__b << eXv;
      R__b << eYv;
      R__b << ePid1;
      R__b << ePid2;
      R__b << eTree;
      R__b << eEraseMask;
      R__b << eAcceptMask;
      eCut.Streamer(R__b);
      R__b << eApplyCorrections;
      ePlate.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbCouplesTree::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbCouplesTree.
      TClass *R__cl = ::EdbCouplesTree::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eS1", &eS1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eS2", &eS2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eS", &eS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCP", &eCP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXv", &eXv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYv", &eYv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePid1", &ePid1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePid2", &ePid2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eTree", &eTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eEraseMask", &eEraseMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eAcceptMask", &eAcceptMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCut", &eCut);
      R__insp.InspectMember(eCut, "eCut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eApplyCorrections", &eApplyCorrections);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePlate", &ePlate);
      R__insp.InspectMember(ePlate, "ePlate.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbCouplesTree(void *p) {
      return  p ? new(p) ::EdbCouplesTree : new ::EdbCouplesTree;
   }
   static void *newArray_EdbCouplesTree(Long_t nElements, void *p) {
      return p ? new(p) ::EdbCouplesTree[nElements] : new ::EdbCouplesTree[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbCouplesTree(void *p) {
      delete ((::EdbCouplesTree*)p);
   }
   static void deleteArray_EdbCouplesTree(void *p) {
      delete [] ((::EdbCouplesTree*)p);
   }
   static void destruct_EdbCouplesTree(void *p) {
      typedef ::EdbCouplesTree current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbCouplesTree(TBuffer &buf, void *obj) {
      ((::EdbCouplesTree*)obj)->::EdbCouplesTree::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbCouplesTree

//______________________________________________________________________________
void EdbSegCouple::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbSegCouple.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eID1;
      R__b >> eID2;
      R__b >> eCHI2;
      R__b >> eCHI2P;
      R__b >> eN1;
      R__b >> eN2;
      R__b >> eN1tot;
      R__b >> eN2tot;
      R__b.CheckByteCount(R__s, R__c, EdbSegCouple::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbSegCouple::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eID1;
      R__b << eID2;
      R__b << eCHI2;
      R__b << eCHI2P;
      R__b << eN1;
      R__b << eN2;
      R__b << eN1tot;
      R__b << eN2tot;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbSegCouple::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbSegCouple.
      TClass *R__cl = ::EdbSegCouple::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID1", &eID1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID2", &eID2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCHI2", &eCHI2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCHI2P", &eCHI2P);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eN1", &eN1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eN2", &eN2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eN1tot", &eN1tot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eN2tot", &eN2tot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eS", &eS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eS1", &eS1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eS2", &eS2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eIsOwner", &eIsOwner);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbSegCouple(void *p) {
      return  p ? new(p) ::EdbSegCouple : new ::EdbSegCouple;
   }
   static void *newArray_EdbSegCouple(Long_t nElements, void *p) {
      return p ? new(p) ::EdbSegCouple[nElements] : new ::EdbSegCouple[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbSegCouple(void *p) {
      delete ((::EdbSegCouple*)p);
   }
   static void deleteArray_EdbSegCouple(void *p) {
      delete [] ((::EdbSegCouple*)p);
   }
   static void destruct_EdbSegCouple(void *p) {
      typedef ::EdbSegCouple current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbSegCouple(TBuffer &buf, void *obj) {
      ((::EdbSegCouple*)obj)->::EdbSegCouple::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbSegCouple

//______________________________________________________________________________
void EdbSegCorr::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbSegCorr.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      eV.Streamer(R__b);
      R__b >> eApplyCorr;
      R__b.CheckByteCount(R__s, R__c, EdbSegCorr::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbSegCorr::IsA(), kTRUE);
      TObject::Streamer(R__b);
      eV.Streamer(R__b);
      R__b << eApplyCorr;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbSegCorr::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbSegCorr.
      TClass *R__cl = ::EdbSegCorr::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eV", &eV);
      R__insp.InspectMember(eV, "eV.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eApplyCorr", &eApplyCorr);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbSegCorr(void *p) {
      return  p ? new(p) ::EdbSegCorr : new ::EdbSegCorr;
   }
   static void *newArray_EdbSegCorr(Long_t nElements, void *p) {
      return p ? new(p) ::EdbSegCorr[nElements] : new ::EdbSegCorr[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbSegCorr(void *p) {
      delete ((::EdbSegCorr*)p);
   }
   static void deleteArray_EdbSegCorr(void *p) {
      delete [] ((::EdbSegCorr*)p);
   }
   static void destruct_EdbSegCorr(void *p) {
      typedef ::EdbSegCorr current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbSegCorr(TBuffer &buf, void *obj) {
      ((::EdbSegCorr*)obj)->::EdbSegCorr::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbSegCorr

/********************************************************
* EbaseCint.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableEbaseCint();

extern "C" void G__set_cpp_environmentEbaseCint() {
  G__cpp_reset_tagtableEbaseCint();
}
#include <new>
extern "C" int G__cpp_dllrevEbaseCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* EdbID */
static int G__EbaseCint_242_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbID* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbID(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbID(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbID(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbID(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbID((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbID((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbID((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbID((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbID[n];
       } else {
         p = new((void*) gvp) EdbID[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbID;
       } else {
         p = new((void*) gvp) EdbID;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbID* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbID((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbID((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbID* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbID((Int_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbID((Int_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbID*) G__getstructoffset())->operator==(*(EdbID*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbID*) G__getstructoffset())->operator!=(*(EdbID*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbID*) G__getstructoffset())->Set((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbID*) G__getstructoffset())->Set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbID*) G__getstructoffset())->Set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbID*) G__getstructoffset())->Set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbID*) G__getstructoffset())->Set((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbID*) G__getstructoffset())->Set();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbID*) G__getstructoffset())->Set((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbID*) G__getstructoffset())->Get((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbID*) G__getstructoffset())->GetPlate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbID*) G__getstructoffset())->AsString());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbID*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbID::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbID::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbID::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbID::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbID*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbID::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbID::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbID::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_242_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbID::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EbaseCint_242_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbID* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbID(*(EdbID*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbID));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbID G__TEdbID;
static int G__EbaseCint_242_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbID*) (soff+(sizeof(EdbID)*i)))->~G__TEdbID();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbID*) (soff))->~G__TEdbID();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EbaseCint_242_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbID* dest = (EdbID*) G__getstructoffset();
   *dest = *(EdbID*) libp->para[0].ref;
   const EdbID& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbSegP */
static int G__EbaseCint_243_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegP* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegP[n];
     } else {
       p = new((void*) gvp) EdbSegP[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegP;
     } else {
       p = new((void*) gvp) EdbSegP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegP* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegP(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) EdbSegP(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegP(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) EdbSegP(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegP(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) EdbSegP(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegP* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbSegP(*(EdbSegP*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbSegP(*(EdbSegP*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbSegP::LinkMT((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (EdbSegP*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->PropagateToDZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->PropagateTo((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->PropagateToCOV((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->MergeTo(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegP*) G__getstructoffset())->ProbLink(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const EdbSegP*) G__getstructoffset())->IsCompatible(*(EdbSegP*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->addEMULDigit((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbSegP*) G__getstructoffset())->EMULDigitArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->Copy(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->Set(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetErrors0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetErrors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((EdbSegP*) G__getstructoffset())->SetErrors((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbSegP*) G__getstructoffset())->SetErrors((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((EdbSegP*) G__getstructoffset())->SetErrorsCOV((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbSegP*) G__getstructoffset())->SetErrorsCOV((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetErrorP((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetCOV(*(TMatrixD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbSegP*) G__getstructoffset())->SetCOV((double*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbSegP*) G__getstructoffset())->SetCOV((double*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixD& obj = ((const EdbSegP*) G__getstructoffset())->COV();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetSZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetDZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetDZem((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetPID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetFlag((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetTrack((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetW((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetP((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetProb((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetChi2((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetVolume((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetVid((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbSegP*) G__getstructoffset())->SetAid((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbSegP*) G__getstructoffset())->SetAid((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbSegP*) G__getstructoffset())->SetSide((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbSegP*) G__getstructoffset())->SetSide();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetProbability((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetMC((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetPlate((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->SetScanID(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegP*) G__getstructoffset())->MCEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegP*) G__getstructoffset())->MCTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegP*) G__getstructoffset())->ID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegP*) G__getstructoffset())->PID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegP*) G__getstructoffset())->Flag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegP*) G__getstructoffset())->Track());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->W());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->P());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->DZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->DZem());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->Prob());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->Chi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->Volume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegP*) G__getstructoffset())->Plate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const EdbID* pobj;
         const EdbID xobj = ((const EdbSegP*) G__getstructoffset())->ScanID();
         pobj = new EdbID(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->SX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->SY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->STX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->STY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->SP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->SZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegP*) G__getstructoffset())->Vid((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegP*) G__getstructoffset())->Aid((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegP*) G__getstructoffset())->Side());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->Phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->Theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbSegP::Distance(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbSegP::Angle(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->DeltaTheta((EdbSegP*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegP*) G__getstructoffset())->DeltaR((EdbSegP*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbSegP*) G__getstructoffset())->PrintNice();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbSegP::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegP::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbSegP::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbSegP::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegP*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegP::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegP::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegP::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_243_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegP::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbSegP G__TEdbSegP;
static int G__EbaseCint_243_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbSegP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbSegP*) (soff+(sizeof(EdbSegP)*i)))->~G__TEdbSegP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbSegP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbSegP*) (soff))->~G__TEdbSegP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EbaseCint_243_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegP* dest = (EdbSegP*) G__getstructoffset();
   *dest = *(EdbSegP*) libp->para[0].ref;
   const EdbSegP& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbSegCorr */
static int G__EbaseCint_244_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegCorr* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegCorr[n];
     } else {
       p = new((void*) gvp) EdbSegCorr[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegCorr;
     } else {
       p = new((void*) gvp) EdbSegCorr;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCorr*) G__getstructoffset())->ResetCorr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCorr*) G__getstructoffset())->SetV((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCorr*) G__getstructoffset())->AddV((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegCorr*) G__getstructoffset())->V((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegCorr*) G__getstructoffset())->X(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegCorr*) G__getstructoffset())->Y(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegCorr*) G__getstructoffset())->Xpos(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegCorr*) G__getstructoffset())->Ypos(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegCorr*) G__getstructoffset())->Xrot(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegCorr*) G__getstructoffset())->Yrot(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegCorr*) G__getstructoffset())->TX(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegCorr*) G__getstructoffset())->TY(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegCorr*) G__getstructoffset())->T(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCorr*) G__getstructoffset())->ApplyCorrections(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCorr*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbSegCorr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegCorr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbSegCorr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbSegCorr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCorr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegCorr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegCorr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegCorr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_244_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegCorr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EbaseCint_244_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbSegCorr* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbSegCorr(*(EdbSegCorr*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbSegCorr G__TEdbSegCorr;
static int G__EbaseCint_244_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbSegCorr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbSegCorr*) (soff+(sizeof(EdbSegCorr)*i)))->~G__TEdbSegCorr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbSegCorr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbSegCorr*) (soff))->~G__TEdbSegCorr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EbaseCint_244_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegCorr* dest = (EdbSegCorr*) G__getstructoffset();
   *dest = *(EdbSegCorr*) libp->para[0].ref;
   const EdbSegCorr& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbLayer */
static int G__EbaseCint_283_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbLayer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbLayer[n];
     } else {
       p = new((void*) gvp) EdbLayer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbLayer;
     } else {
       p = new((void*) gvp) EdbLayer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbLayer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbLayer(*(EdbLayer*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbLayer(*(EdbLayer*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->Copy(*(EdbLayer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->CopyCorr(*(EdbLayer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const EdbCorrectionMap& obj = ((EdbLayer*) G__getstructoffset())->Map();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbLayer*) G__getstructoffset())->ID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbLayer*) G__getstructoffset())->Ncp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->Z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->TX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->TY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->Zmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->Zmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->DX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->DY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->DZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->Xmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->Xmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->Ymin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->Ymax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->Shr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbLayer*) G__getstructoffset())->Zcorr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbLayer*) G__getstructoffset())->IsInside((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbLayer*) G__getstructoffset())->IsInside((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetNcp((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetXY((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetDXDY((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetTXTY((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetShrinkage((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetZlayer((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetAffXY((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetAffTXTY((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SetZcorr((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->ShiftZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->SubstructCorrections(*(EdbLayer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->ApplyCorrections(*(EdbLayer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->ApplyCorrectionsLocal(*(EdbCorrectionMap*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->ApplyCorrections((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, *(EdbAffine2D*) libp->para[2].ref, *(EdbAffine2D*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->ResetAffXY();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->ResetAffTXTY();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->ResetCorr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbLayer*) G__getstructoffset())->AffineXY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbLayer*) G__getstructoffset())->AffineTXTY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbLayer*) G__getstructoffset())->GetAffineXY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbLayer*) G__getstructoffset())->GetAffineTXTY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbLayer*) G__getstructoffset())->TXp(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbLayer*) G__getstructoffset())->TYp(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbLayer*) G__getstructoffset())->TX(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbLayer*) G__getstructoffset())->TY(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbLayer*) G__getstructoffset())->Xp(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbLayer*) G__getstructoffset())->Yp(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbLayer*) G__getstructoffset())->X(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbLayer*) G__getstructoffset())->Y(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbLayer*) G__getstructoffset())->Zxy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->CorrectSeg(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->CorrectSegLocal(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->Invert();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbLayer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbLayer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbLayer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbLayer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLayer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbLayer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbLayer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbLayer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_283_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbLayer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbLayer G__TEdbLayer;
static int G__EbaseCint_283_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbLayer*) (soff+(sizeof(EdbLayer)*i)))->~G__TEdbLayer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbLayer*) (soff))->~G__TEdbLayer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EbaseCint_283_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbLayer* dest = (EdbLayer*) G__getstructoffset();
   *dest = *(EdbLayer*) libp->para[0].ref;
   const EdbLayer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbCorrectionMap */
static int G__EbaseCint_284_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCorrectionMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCorrectionMap[n];
     } else {
       p = new((void*) gvp) EdbCorrectionMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCorrectionMap;
     } else {
       p = new((void*) gvp) EdbCorrectionMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCorrectionMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbCorrectionMap(*(EdbCorrectionMap*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbCorrectionMap(*(EdbCorrectionMap*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMap*) G__getstructoffset())->Init(*(EdbCell2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMap*) G__getstructoffset())->Init((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbCorrectionMap*) G__getstructoffset())->GetLayer((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbCorrectionMap*) G__getstructoffset())->GetLayer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMap*) G__getstructoffset())->CorrectSeg(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMap*) G__getstructoffset())->ApplyCorrections(*(EdbCorrectionMap*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMap*) G__getstructoffset())->PrintDZ();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         EdbSegCorr* pobj;
         EdbSegCorr xobj = ((EdbCorrectionMap*) G__getstructoffset())->CorrLoc((int) G__int(libp->para[0]));
         pobj = new EdbSegCorr(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         EdbSegCorr* pobj;
         EdbSegCorr xobj = ((EdbCorrectionMap*) G__getstructoffset())->CorrLoc((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
         pobj = new EdbSegCorr(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbCorrectionMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCorrectionMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbCorrectionMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbCorrectionMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCorrectionMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCorrectionMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCorrectionMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_284_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCorrectionMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbCorrectionMap G__TEdbCorrectionMap;
static int G__EbaseCint_284_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbCorrectionMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbCorrectionMap*) (soff+(sizeof(EdbCorrectionMap)*i)))->~G__TEdbCorrectionMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbCorrectionMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbCorrectionMap*) (soff))->~G__TEdbCorrectionMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EbaseCint_284_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCorrectionMap* dest = (EdbCorrectionMap*) G__getstructoffset();
   *dest = *(EdbCorrectionMap*) libp->para[0].ref;
   const EdbCorrectionMap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbScanCond */
static int G__EbaseCint_299_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanCond* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanCond[n];
     } else {
       p = new((void*) gvp) EdbScanCond[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanCond;
     } else {
       p = new((void*) gvp) EdbScanCond;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbScanCond));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetDefault();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetRadX0((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->RadX0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetSigmaGR((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetSigma0((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetSigma0((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetBins((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetOffset((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->OffX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->OffY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetDegrad((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetSigmaZ0((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetPulsRamp0((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetPulsRamp04((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetPulsRamp0((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetPulsRamp04((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->BinX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->BinY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->BinTX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->BinTY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetChi2Max((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetChi2PMax((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->Chi2Max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->Chi2PMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->SetChi2Mode((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbScanCond*) G__getstructoffset())->Chi2Mode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->StepX((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->StepY((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->StepTX((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->StepTY((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->SigmaXgr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->SigmaYgr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->SigmaZgr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->Degrad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->SigmaX((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->SigmaY((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->SigmaZ((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->SigmaTX((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->SigmaTY((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->SigmaTXf((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->SigmaTYf((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->Ramp((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->ProbSeg((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->ProbSeg((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->DefineLLFunction((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->ProbLL((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbScanCond*) G__getstructoffset())->ProbLL((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->FillErrorsCov((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, *(TMatrixD*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbScanCond*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbScanCond::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanCond::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbScanCond::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbScanCond::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanCond*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanCond::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanCond::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanCond::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_299_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanCond::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EbaseCint_299_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbScanCond* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbScanCond(*(EdbScanCond*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbScanCond));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbScanCond G__TEdbScanCond;
static int G__EbaseCint_299_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbScanCond*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbScanCond*) (soff+(sizeof(EdbScanCond)*i)))->~G__TEdbScanCond();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbScanCond*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbScanCond*) (soff))->~G__TEdbScanCond();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EbaseCint_299_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanCond* dest = (EdbScanCond*) G__getstructoffset();
   *dest = *(EdbScanCond*) libp->para[0].ref;
   const EdbScanCond& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPlateP */
static int G__EbaseCint_300_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPlateP* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlateP[n];
     } else {
       p = new((void*) gvp) EdbPlateP[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlateP;
     } else {
       p = new((void*) gvp) EdbPlateP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPlateP* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbPlateP(*(EdbPlateP*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbPlateP(*(EdbPlateP*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateP*) G__getstructoffset())->Copy(*(EdbPlateP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateP*) G__getstructoffset())->SetPlateLayout((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateP*) G__getstructoffset())->SetOperaLayout();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateP*) G__getstructoffset())->PrintPlateLayout();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPlateP*) G__getstructoffset())->GetLayer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateP*) G__getstructoffset())->SetDXDY((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateP*) G__getstructoffset())->TransformSidesIntoPlateRS();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateP*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPlateP::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlateP::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPlateP::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPlateP::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateP*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlateP::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPlateP::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlateP::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_300_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPlateP::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPlateP G__TEdbPlateP;
static int G__EbaseCint_300_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPlateP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPlateP*) (soff+(sizeof(EdbPlateP)*i)))->~G__TEdbPlateP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPlateP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPlateP*) (soff))->~G__TEdbPlateP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbBrickP */
static int G__EbaseCint_301_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbBrickP* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbBrickP[n];
     } else {
       p = new((void*) gvp) EdbBrickP[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbBrickP;
     } else {
       p = new((void*) gvp) EdbBrickP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbBrickP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->Copy(*(EdbBrickP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->SetPlatesLayout((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->SetDXDY((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbBrickP*) G__getstructoffset())->Npl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->AddPlate((EdbPlateP*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbBrickP*) G__getstructoffset())->GetPlate((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->PrintSides();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->RemovePlate((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->ResetAffXY();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->ResetAffTXTY();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->ResetAff();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbBrickP::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbBrickP::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbBrickP::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbBrickP::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickP*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbBrickP::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbBrickP::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbBrickP::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_301_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbBrickP::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbBrickP G__TEdbBrickP;
static int G__EbaseCint_301_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbBrickP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbBrickP*) (soff+(sizeof(EdbBrickP)*i)))->~G__TEdbBrickP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbBrickP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbBrickP*) (soff))->~G__TEdbBrickP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbScanSet */
static int G__EbaseCint_308_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbScanSet(*((EdbID*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) EdbScanSet(*((EdbID*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbScanSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanSet((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbScanSet((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbScanSet[n];
       } else {
         p = new((void*) gvp) EdbScanSet[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbScanSet;
       } else {
         p = new((void*) gvp) EdbScanSet;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbScanSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->Copy(*(EdbScanSet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->MakePIDList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((EdbScanSet*) G__getstructoffset())->MakeNominalSet(
*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((EdbScanSet*) G__getstructoffset())->MakeNominalSet(
*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((EdbScanSet*) G__getstructoffset())->MakeNominalSet(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbScanSet*) G__getstructoffset())->MakeNominalSet(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbScanSet*) G__getstructoffset())->MakeNominalSet(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbScanSet*) G__getstructoffset())->MakeNominalSet(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbScanSet*) G__getstructoffset())->MakeNominalSet(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbScanSet*) G__getstructoffset())->MakeNominalSet(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanSet*) G__getstructoffset())->AssembleBrickFromPC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanSet*) G__getstructoffset())->TransformSidesIntoBrickRS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanSet*) G__getstructoffset())->TransformBrick(*((EdbAffine2D*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->TransformBrick(*(EdbScanSet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanSet*) G__getstructoffset())->ShiftBrickZ((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((EdbScanSet*) G__getstructoffset())->MakeParFiles((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbScanSet*) G__getstructoffset())->MakeParFiles((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbScanSet*) G__getstructoffset())->MakeParFiles());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanSet*) G__getstructoffset())->ReadIDS((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((EdbScanSet*) G__getstructoffset())->WriteIDS((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbScanSet*) G__getstructoffset())->WriteIDS());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanSet*) G__getstructoffset())->AddID((EdbID*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanSet*) G__getstructoffset())->SetAsReferencePlate((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanSet*) G__getstructoffset())->GetAffP2P((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(EdbAffine2D*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbScanSet*) G__getstructoffset())->GetDZP2P((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbScanSet*) G__getstructoffset())->FindNextPlateID((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbScanSet*) G__getstructoffset())->FindPlateID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbScanSet*) G__getstructoffset())->GetID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->SetID(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const EdbBrickP& obj = ((const EdbScanSet*) G__getstructoffset())->Brick();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const EdbBrickP& obj = ((EdbScanSet*) G__getstructoffset())->Brick();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const EdbScanSet*) G__getstructoffset())->ValidSide((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbScanSet*) G__getstructoffset())->GetLayer((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbScanSet*) G__getstructoffset())->Zlayer((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbScanSet*) G__getstructoffset())->GetPlate((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->UpdateBrickWithP2P(*(EdbLayer*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->RemovePlate((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->UpdateGap((float) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->WriteGeom((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->ReadGeom((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->UpdateIDS((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbScanSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbScanSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbScanSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_308_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbScanSet G__TEdbScanSet;
static int G__EbaseCint_308_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbScanSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbScanSet*) (soff+(sizeof(EdbScanSet)*i)))->~G__TEdbScanSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbScanSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbScanSet*) (soff))->~G__TEdbScanSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbSigma */
static int G__EbaseCint_309_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSigma* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSigma[n];
     } else {
       p = new((void*) gvp) EdbSigma[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSigma;
     } else {
       p = new((void*) gvp) EdbSigma;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSigma));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSigma*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->SqSum((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DAL((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DAT((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DP((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DALmt((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DATmt((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DPLmt((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DPTmt((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DALbt((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DATbt((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DPLbt((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->DPTbt((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->FDAL((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->FDAT((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->FDPLmt((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSigma*) G__getstructoffset())->FDALbt((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSigma*) G__getstructoffset())->Draw();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbSigma::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSigma::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbSigma::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbSigma::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSigma*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSigma::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSigma::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSigma::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_309_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSigma::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EbaseCint_309_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbSigma* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbSigma(*(EdbSigma*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSigma));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbSigma G__TEdbSigma;
static int G__EbaseCint_309_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbSigma*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbSigma*) (soff+(sizeof(EdbSigma)*i)))->~G__TEdbSigma();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbSigma*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbSigma*) (soff))->~G__TEdbSigma();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EbaseCint_309_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSigma* dest = (EdbSigma*) G__getstructoffset();
   *dest = *(EdbSigma*) libp->para[0].ref;
   const EdbSigma& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbSEQ */
static int G__EbaseCint_616_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSEQ* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSEQ[n];
     } else {
       p = new((void*) gvp) EdbSEQ[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSEQ;
     } else {
       p = new((void*) gvp) EdbSEQ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSEQ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->SetXLimits((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->SetYLimits((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->SetWLimits((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->SetThetaLimits((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->SetChiLimits((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSEQ*) G__getstructoffset())->DNmt((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSEQ*) G__getstructoffset())->FDNmt((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSEQ*) G__getstructoffset())->DNbt((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbSEQ*) G__getstructoffset())->FDNbt((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->CalculateDensityMT(*(EdbH1*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->PreSelection(*(EdbPattern*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->EqualizeMT(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->ResetExcludeThetaRange();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->AddExcludeThetaRange(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->ExcludeThetaRange(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbSEQ*) G__getstructoffset())->IsInsideThetaRange((EdbSegP*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSEQ*) G__getstructoffset())->Wmt(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((EdbSEQ*) G__getstructoffset())->ThetaPlot(*(TObjArray*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbSEQ*) G__getstructoffset())->ThetaPlot(*(TObjArray*) libp->para[0].ref, (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbSEQ*) G__getstructoffset())->ThetaPlot(*(TObjArray*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((EdbSEQ*) G__getstructoffset())->ThetaPlot(*(EdbPattern*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbSEQ*) G__getstructoffset())->ThetaPlot(*(EdbPattern*) libp->para[0].ref, (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbSEQ*) G__getstructoffset())->ThetaPlot(*(EdbPattern*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->Draw();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->PrintLimits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbSEQ::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSEQ::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbSEQ::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbSEQ::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSEQ*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSEQ::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSEQ::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSEQ::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_616_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSEQ::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbSEQ G__TEdbSEQ;
static int G__EbaseCint_616_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbSEQ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbSEQ*) (soff+(sizeof(EdbSEQ)*i)))->~G__TEdbSEQ();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbSEQ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbSEQ*) (soff))->~G__TEdbSEQ();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbSegCouple */
static int G__EbaseCint_647_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegCouple* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegCouple[n];
     } else {
       p = new((void*) gvp) EdbSegCouple[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegCouple;
     } else {
       p = new((void*) gvp) EdbSegCouple;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegCouple* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbSegCouple(*(EdbSegCouple*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbSegCouple(*(EdbSegCouple*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegCouple* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbSegCouple((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) EdbSegCouple((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCouple*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCouple*) G__getstructoffset())->SetN1((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCouple*) G__getstructoffset())->SetN2((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCouple*) G__getstructoffset())->SetN1tot((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCouple*) G__getstructoffset())->SetN2tot((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCouple*) G__getstructoffset())->SetCHI2((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCouple*) G__getstructoffset())->SetCHI2P((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCouple*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      EdbSegCouple::SetSortFlag((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      EdbSegCouple::SetSortFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegCouple::SortFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegCouple*) G__getstructoffset())->ID1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegCouple*) G__getstructoffset())->ID2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegCouple*) G__getstructoffset())->N1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegCouple*) G__getstructoffset())->N2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegCouple*) G__getstructoffset())->N1tot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegCouple*) G__getstructoffset())->N2tot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegCouple*) G__getstructoffset())->CHI2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegCouple*) G__getstructoffset())->CHI2P());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbSegCouple::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegCouple::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbSegCouple::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbSegCouple::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegCouple*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegCouple::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegCouple::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegCouple::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_647_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegCouple::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbSegCouple G__TEdbSegCouple;
static int G__EbaseCint_647_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbSegCouple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbSegCouple*) (soff+(sizeof(EdbSegCouple)*i)))->~G__TEdbSegCouple();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbSegCouple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbSegCouple*) (soff))->~G__TEdbSegCouple();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EbaseCint_647_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegCouple* dest = (EdbSegCouple*) G__getstructoffset();
   *dest = *(EdbSegCouple*) libp->para[0].ref;
   const EdbSegCouple& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbCouplesTree */
static int G__EbaseCint_650_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCouplesTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCouplesTree[n];
     } else {
       p = new((void*) gvp) EdbCouplesTree[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCouplesTree;
     } else {
       p = new((void*) gvp) EdbCouplesTree;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbCouplesTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((EdbCouplesTree*) G__getstructoffset())->InitCouplesTree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((EdbCouplesTree*) G__getstructoffset())->InitCouplesTree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbCouplesTree*) G__getstructoffset())->InitCouplesTree((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((EdbCouplesTree*) G__getstructoffset())->InitCouplesTree());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbCouplesTree*) G__getstructoffset())->InitCutList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCouplesTree*) G__getstructoffset())->Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->Fill(
(EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (EdbSegP*) G__int(libp->para[2]), (EdbSegCouple*) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->Fill(
(EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (EdbSegP*) G__int(libp->para[2]), (EdbSegCouple*) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->Fill((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (EdbSegP*) G__int(libp->para[2]), (EdbSegCouple*) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->Fill((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (EdbSegP*) G__int(libp->para[2]), (EdbSegCouple*) G__int(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->Fill((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (EdbSegP*) G__int(libp->para[2]), (EdbSegCouple*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->Fill((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (EdbSegP*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->Fill((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->Fill());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbCouplesTree*) G__getstructoffset())->WriteTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCouplesTree*) G__getstructoffset())->ApplyCorrections();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->PutCPData(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->GetCPData((EdbPattern*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])
, (EdbPattern*) G__int(libp->para[2]), (TIndex2*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->GetCPData((EdbPattern*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])
, (EdbPattern*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->GetCPData((EdbPattern*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->GetCPData((EdbPattern*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->GetCPData(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbCouplesTree*) G__getstructoffset())->GetCPDataAcceptedMask((EdbPattern*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbCouplesTree*) G__getstructoffset())->GetFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCouplesTree*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbCouplesTree::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCouplesTree::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbCouplesTree::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbCouplesTree::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCouplesTree*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCouplesTree::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCouplesTree::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCouplesTree::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_650_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCouplesTree::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbCouplesTree G__TEdbCouplesTree;
static int G__EbaseCint_650_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbCouplesTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbCouplesTree*) (soff+(sizeof(EdbCouplesTree)*i)))->~G__TEdbCouplesTree();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbCouplesTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbCouplesTree*) (soff))->~G__TEdbCouplesTree();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbSegmentCut */
static int G__EbaseCint_651_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegmentCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegmentCut[n];
     } else {
       p = new((void*) gvp) EdbSegmentCut[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegmentCut;
     } else {
       p = new((void*) gvp) EdbSegmentCut;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegmentCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbSegmentCut((int) G__int(libp->para[0]), (float*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) EdbSegmentCut((int) G__int(libp->para[0]), (float*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentCut*) G__getstructoffset())->SetXI((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentCut*) G__getstructoffset())->SetMin((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentCut*) G__getstructoffset())->SetMax((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegmentCut*) G__getstructoffset())->XI());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegmentCut*) G__getstructoffset())->Min((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegmentCut*) G__getstructoffset())->Max((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbSegmentCut*) G__getstructoffset())->PassCut((float*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbSegmentCut*) G__getstructoffset())->PassCutX((float*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbSegmentCut*) G__getstructoffset())->PassCutI((float*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentCut*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 67, (long) ((const EdbSegmentCut*) G__getstructoffset())->CutLine((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((const EdbSegmentCut*) G__getstructoffset())->CutLine((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((const EdbSegmentCut*) G__getstructoffset())->CutLine((char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbSegmentCut::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegmentCut::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbSegmentCut::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbSegmentCut::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentCut*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegmentCut::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegmentCut::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegmentCut::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EbaseCint_651_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegmentCut::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EbaseCint_651_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbSegmentCut* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbSegmentCut(*(EdbSegmentCut*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbSegmentCut G__TEdbSegmentCut;
static int G__EbaseCint_651_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbSegmentCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbSegmentCut*) (soff+(sizeof(EdbSegmentCut)*i)))->~G__TEdbSegmentCut();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbSegmentCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbSegmentCut*) (soff))->~G__TEdbSegmentCut();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EbaseCint_651_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegmentCut* dest = (EdbSegmentCut*) G__getstructoffset();
   *dest = *(EdbSegmentCut*) libp->para[0].ref;
   const EdbSegmentCut& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* EdbID */

/* EdbSegP */

/* EdbSegCorr */

/* EdbLayer */

/* EdbCorrectionMap */

/* EdbScanCond */

/* EdbPlateP */

/* EdbBrickP */

/* EdbScanSet */

/* EdbSigma */

/* EdbSEQ */

/* EdbSegCouple */

/* EdbCouplesTree */

/* EdbSegmentCut */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncEbaseCint {
 public:
  G__Sizep2memfuncEbaseCint(): p(&G__Sizep2memfuncEbaseCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncEbaseCint::*p)();
};

size_t G__get_sizep2memfuncEbaseCint()
{
  G__Sizep2memfuncEbaseCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceEbaseCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbID))) {
     EdbID *G__Lderived;
     G__Lderived=(EdbID*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbID),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP))) {
     EdbSegP *G__Lderived;
     G__Lderived=(EdbSegP*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbTrack2D *G__Lpbase=(EdbTrack2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),G__get_linked_tagnum(&G__EbaseCintLN_EdbTrack2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),G__get_linked_tagnum(&G__EbaseCintLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),G__get_linked_tagnum(&G__EbaseCintLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbAngle2D *G__Lpbase=(EdbAngle2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),G__get_linked_tagnum(&G__EbaseCintLN_EdbAngle2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr))) {
     EdbSegCorr *G__Lderived;
     G__Lderived=(EdbSegCorr*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer))) {
     EdbLayer *G__Lderived;
     G__Lderived=(EdbLayer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap))) {
     EdbCorrectionMap *G__Lderived;
     G__Lderived=(EdbCorrectionMap*)0x1000;
     {
       EdbCell2 *G__Lpbase=(EdbCell2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap),G__get_linked_tagnum(&G__EbaseCintLN_EdbCell2),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbH2 *G__Lpbase=(EdbH2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap),G__get_linked_tagnum(&G__EbaseCintLN_EdbH2),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbScanCond))) {
     EdbScanCond *G__Lderived;
     G__Lderived=(EdbScanCond*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbScanCond),G__get_linked_tagnum(&G__EbaseCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbScanCond),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP))) {
     EdbPlateP *G__Lderived;
     G__Lderived=(EdbPlateP*)0x1000;
     {
       EdbLayer *G__Lpbase=(EdbLayer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP),G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbBrickP))) {
     EdbBrickP *G__Lderived;
     G__Lderived=(EdbBrickP*)0x1000;
     {
       EdbLayer *G__Lpbase=(EdbLayer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbBrickP),G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbBrickP),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbScanSet))) {
     EdbScanSet *G__Lderived;
     G__Lderived=(EdbScanSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbScanSet),G__get_linked_tagnum(&G__EbaseCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbScanSet),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbSigma))) {
     EdbSigma *G__Lderived;
     G__Lderived=(EdbSigma*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSigma),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbSEQ))) {
     EdbSEQ *G__Lderived;
     G__Lderived=(EdbSEQ*)0x1000;
     {
       EdbSigma *G__Lpbase=(EdbSigma*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSEQ),G__get_linked_tagnum(&G__EbaseCintLN_EdbSigma),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSEQ),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple))) {
     EdbSegCouple *G__Lderived;
     G__Lderived=(EdbSegCouple*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbCouplesTree))) {
     EdbCouplesTree *G__Lderived;
     G__Lderived=(EdbCouplesTree*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbCouplesTree),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut))) {
     EdbSegmentCut *G__Lderived;
     G__Lderived=(EdbSegmentCut*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut),G__get_linked_tagnum(&G__EbaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableEbaseCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EbaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EbaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EbaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EbaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EbaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EbaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EbaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EbaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EbaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EbaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EbaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EbaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__EbaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__EbaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__EbaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixD",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__EbaseCintLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__EbaseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EbaseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EbaseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__EbaseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* EdbID */
static void G__setup_memvarEdbID(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbID));
   { EdbID *p; p=(EdbID*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eBrick)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eBrick=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePlate)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ePlate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eMajor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eMajor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eMinor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eMinor=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbSegP */
static void G__setup_memvarEdbSegP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP));
   { EdbSegP *p; p=(EdbSegP*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ePID=",0,"mother pattern ID");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID=",0,"segment id (unique in plate)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eVid[2]=",0,"[0]-view entry in the input tree, [1]-segment entry in the view");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eAid[2]=",0,"[0]-AreaID, [1]-ViewID");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eTrack=",0,"id of the track (-1) if no track");
   G__memvar_setup((void*)((long)(&p->eX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ=",0,"coordinates");
   G__memvar_setup((void*)((long)(&p->eTX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eTX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eTY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eTY=",0,"direction tangents");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSZ=",0,"square of the Z-error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eChi2=",0,"chi-square ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eProb=",0,"probability");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eW=",0,"weight");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eVolume=",0,"segment volume");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDZ=",0,"the length of segment along z-axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDZem=",0,"the length of segment along z-axis in the emulsion");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eP=",0,"momentum of the particle");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eMCTrack=",0,"MC track number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eMCEvt=",0,"MC event number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TRefArray),-1,-1,4,"eEMULDigitArray=",0,"! AM+AC 27/07/07");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbID),-1,-1,4,"eScanID=",0,"brick:plate:major:minor");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"eCOV=",0,"covariance matrix of the parameters (x,y,tx,ty,p)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbSegCorr */
static void G__setup_memvarEdbSegCorr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr));
   { EdbSegCorr *p; p=(EdbSegCorr*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TArrayF),-1,-1,4,"eV=",0,"variables: dx,dy,dz, dtx,dty, shr, phy");
   G__memvar_setup((void*)((long)(&p->eApplyCorr)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eApplyCorr=",0,"do correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbLayer */
static void G__setup_memvarEdbLayer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer));
   { EdbLayer *p; p=(EdbLayer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID=",0,"emulsion layer id (11,12 21,22, ...)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZ=",0,"the z-coord where X and Y are calculated");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZmax=",0,"begin and the end of layer");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eX=",0,"the center (0) of the layer's data");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDX=",0,"acceptance in x:y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eTX=",0,"direction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eTY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eShr=",0,"shrinkage along axis z");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbAffine2D),-1,-1,4,"eAffXY=",0,"coordinate (XY) affine transformation");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbAffine2D),-1,-1,4,"eAffTXTY=",0,"tangents affine transformation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZcorr=",0,"z-correction ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNcp=",0,"number of coincidences used for corrections calculation");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap),-1,-1,4,"eMap=",0,"local corrections (if any)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbCorrectionMap */
static void G__setup_memvarEdbCorrectionMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap));
   { EdbCorrectionMap *p; p=(EdbCorrectionMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbScanCond */
static void G__setup_memvarEdbScanCond(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbScanCond));
   { EdbScanCond *p; p=(EdbScanCond*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaXgr=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaYgr=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaZgr=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDegrad=",0,"angular degradation of parameters: S = S0*(1 + eDegrad*Ang)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaX0=",0,"[microns]  Parameters at 0 angle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaY0=",0,"[microns]  SigmaX = S0*(1+eDegrad*Ax)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaZ0=",0,"z - uncertancy");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaTX0=",0,"[\"rad\"]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaTY0=",0,"[\"rad\"]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ePuls0[2]=",0,"signal/all is parametrised as linear in range Pmin,Pmax");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ePuls04[2]=",0,"- at angle .4 rad");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eBinX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eBinY=",0,"bins [normalized to Sigma()]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eBinTX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eBinTY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eChi2Max=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eChi2PMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eChi2Mode=",0,"mode of coupling chi2 calculation (default is 0)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eOffX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eOffY=",0,"maximal offsets in x and y - the accuracy of pattern ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eRadX0=",0,"radiation length for ECC media [microns]");
   G__memvar_setup((void*)((long)(&p->eLikelihoodMT)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TF1),-1,-1,1,"eLikelihoodMT=",0,"the likelihood function used for microtrack probablility estimation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPlateP */
static void G__setup_memvarEdbPlateP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP));
   { EdbPlateP *p; p=(EdbPlateP*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TObjArray),-1,-1,4,"eLayers=",0,"0-base, 1-up, 2-down");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbBrickP */
static void G__setup_memvarEdbBrickP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbBrickP));
   { EdbBrickP *p; p=(EdbBrickP*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TObjArray),-1,-1,4,"ePlates=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TObjArray),-1,-1,4,"eSpacers=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbScanSet */
static void G__setup_memvarEdbScanSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbScanSet));
   { EdbScanSet *p; p=(EdbScanSet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eB)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbBrickP),-1,-1,1,"eB=",0,"all layers of the brick defined here");
   G__memvar_setup((void*)((long)(&p->ePID)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TIndexCell),-1,-1,1,"ePID=",0,"correspondance between index in eB and the plate id");
   G__memvar_setup((void*)((long)(&p->ePC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TObjArray),-1,-1,1,"ePC=",0,"Plate Couples. Each couple represented as EdbPlateP ");
   G__memvar_setup((void*)((long)(&p->eIDS)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TList),-1,-1,1,"eIDS=",0,"list of the identifiers to be processed");
   G__memvar_setup((void*)((long)(&p->eReferencePlate)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eReferencePlate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eID)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbID),-1,-1,1,"eID=",0,"id of the scanset itself");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbSigma */
static void G__setup_memvarEdbSigma(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSigma));
   { EdbSigma *p; p=(EdbSigma*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eSxy)-(long)(p)),100,0,0,-1,-1,-1,1,"eSxy=",0,"=  0.35 mean in-view grain accuracy xy");
   G__memvar_setup((void*)((long)(&p->eSz)-(long)(p)),100,0,0,-1,-1,-1,1,"eSz=",0,"=  2.   grains z-uncertainty \"field depth\"");
   G__memvar_setup((void*)((long)(&p->eDZem)-(long)(p)),100,0,0,-1,-1,-1,1,"eDZem=",0,"= 45.;  emulsion thickness");
   G__memvar_setup((void*)((long)(&p->eDZbase)-(long)(p)),100,0,0,-1,-1,-1,1,"eDZbase=",0,"= 210. emulsion base");
   G__memvar_setup((void*)((long)(&p->eDZcell)-(long)(p)),100,0,0,-1,-1,-1,1,"eDZcell=",0,"=1300. plate-to plate distance");
   G__memvar_setup((void*)((long)(&p->eSxyZone)-(long)(p)),100,0,0,-1,-1,-1,1,"eSxyZone=",0,"\"in-zone\" microtrack position tolerance (local deformations)");
   G__memvar_setup((void*)((long)(&p->eSaZone)-(long)(p)),100,0,0,-1,-1,-1,1,"eSaZone=",0,"\"in-zone\" microtrack angular tolrance (incorrect shrinkage+offsets)");
   G__memvar_setup((void*)((long)(&p->eSxyPlate)-(long)(p)),100,0,0,-1,-1,-1,1,"eSxyPlate=",0,"\"in-plate\" basetrack position tolerance (XY plate deformations)");
   G__memvar_setup((void*)((long)(&p->eSaPlate)-(long)(p)),100,0,0,-1,-1,-1,1,"eSaPlate=",0,"\"in-plate\" basetrack angular tolrance (nonplanarity)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbSEQ */
static void G__setup_memvarEdbSEQ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSEQ));
   { EdbSEQ *p; p=(EdbSEQ*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eS0mt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eS0mt=",0,"= 270.*340.;     // area unit for Nseg calculation");
   G__memvar_setup((void*)((long)(&p->eNsigma)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eNsigma=",0,"=4");
   G__memvar_setup((void*)((long)(&p->eArea)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eArea=",0,"effective area of the pattern to be equalized");
   G__memvar_setup((void*)((long)(&p->eNP)-(long)(p)),105,0,0,-1,-1,-1,1,"eNP=",0,"number of points for the functions calculation");
   G__memvar_setup((void*)((long)(&p->eExcludeThetaRange)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TObjArray),-1,-1,1,"eExcludeThetaRange=",0,"can be added EdbSegP with tx,ty, sigmaTX,sigmaTY to be excluded");
   G__memvar_setup((void*)((long)(&p->eHEq)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbH1),-1,-1,1,"eHEq=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TVector2),-1,-1,4,"eXLimits=",0,"[min,max] area limits for the preselection procedure");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TVector2),-1,-1,4,"eYLimits=",0,"[min,max]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TVector2),-1,-1,4,"eThetaLimits=",0,"[min,max]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TVector2),-1,-1,4,"eWLimits=",0,"[min,max]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TVector2),-1,-1,4,"eChiLimits=",0,"[min,max]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbSegCouple */
static void G__setup_memvarEdbSegCouple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple));
   { EdbSegCouple *p; p=(EdbSegCouple*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eCHI2=",0,"final chi2 calculation based on the linked track");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eCHI2P=",0,"fast chi2 estimation used for couples selection");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eN1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eN2=",0,"n1,n2 - is rating of the segment (starting from 1)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eN1tot=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eN2tot=",0,"total number of entries for the segment");
   G__memvar_setup((void*)((long)(&p->eS)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),-1,-1,1,"eS=",0,"!  the result of the fit");
   G__memvar_setup((void*)((long)(&p->eS1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),-1,-1,1,"eS1=",0,"!  pointers - useful when all segments are in memory");
   G__memvar_setup((void*)((long)(&p->eS2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),-1,-1,1,"eS2=",0,"!");
   G__memvar_setup((void*)((long)(&p->eIsOwner)-(long)(p)),103,0,0,-1,-1,-1,1,"eIsOwner=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-2,4,"egSortFlag=",0,"! 0: chi2p only; 1: N1()*10000+N2()*10000000 + CHI2()/100");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbCouplesTree */
static void G__setup_memvarEdbCouplesTree(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbCouplesTree));
   { EdbCouplesTree *p; p=(EdbCouplesTree*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eS1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),-1,-1,1,"eS1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eS2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),-1,-1,1,"eS2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eS)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP),-1,-1,1,"eS=",0,"segments to be written");
   G__memvar_setup((void*)((long)(&p->eCP)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple),-1,-1,1,"eCP=",0,"couples object");
   G__memvar_setup((void*)((long)(&p->eXv)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYv)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYv=",0,"relative center");
   G__memvar_setup((void*)((long)(&p->ePid1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ePid1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePid2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ePid2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eTree)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TTree),-1,-1,1,"eTree=",0,"couples tree");
   G__memvar_setup((void*)((long)(&p->eEraseMask)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbMask),-1,-1,1,"eEraseMask=",0,"id's (entries) of segments to be erased when read couples tree");
   G__memvar_setup((void*)((long)(&p->eAcceptMask)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbMask),-1,-1,1,"eAcceptMask=",0,"id's (entries) of segments to be accepted when read couples tree");
   G__memvar_setup((void*)((long)(&p->eCut)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TCut),-1,-1,1,"eCut=",0,"cut to be applied on read");
   G__memvar_setup((void*)((long)(&p->eApplyCorrections)-(long)(p)),103,0,0,-1,-1,-1,1,"eApplyCorrections=",0,"if true - apply corrections stored in ePlate when do GetEntry");
   G__memvar_setup((void*)((long)(&p->ePlate)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP),-1,-1,1,"ePlate=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbSegmentCut */
static void G__setup_memvarEdbSegmentCut(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut));
   { EdbSegmentCut *p; p=(EdbSegmentCut*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eXI=",0,"0-exclusive; 1-inclusive cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eMin[5]=",0,"min  x:y:tx:ty:puls");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eMax[5]=",0,"max  x:y:tx:ty:puls");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EbaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarEbaseCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEdbID(void) {
   /* EdbID */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbID));
   G__memfunc_setup("EdbID",408,G__EbaseCint_242_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbID), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 '0' b i - 'Int_t' 0 '0' p "
"i - 'Int_t' 0 '0' ma i - 'Int_t' 0 '0' mi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbID",408,G__EbaseCint_242_0_2, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbID), -1, 0, 1, 1, 1, 0, "C - - 10 - id_string", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbID",408,G__EbaseCint_242_0_3, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbID), -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__EbaseCint_242_0_4, 103, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 11 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__EbaseCint_242_0_5, 103, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 11 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EbaseCint_242_0_6, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - id_string", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EbaseCint_242_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 '0' b i - 'Int_t' 0 '0' p "
"i - 'Int_t' 0 '0' ma i - 'Int_t' 0 '0' mi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EbaseCint_242_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__EbaseCint_242_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlate",790,G__EbaseCint_242_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,G__EbaseCint_242_0_11, 67, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EbaseCint_242_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_242_0_13, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbID::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_242_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbID::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_242_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbID::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_242_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbID::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_242_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_242_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbID::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_242_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbID::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_242_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbID::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_242_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbID::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbID", 408, G__EbaseCint_242_0_25, (int) ('i'), G__get_linked_tagnum(&G__EbaseCintLN_EdbID), -1, 0, 1, 1, 1, 0, "u 'EdbID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbID", 534, G__EbaseCint_242_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EbaseCint_242_0_27, (int) ('u'), G__get_linked_tagnum(&G__EbaseCintLN_EdbID), -1, 1, 1, 1, 1, 0, "u 'EdbID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbSegP(void) {
   /* EdbSegP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP));
   G__memfunc_setup("EdbSegP",634,G__EbaseCint_243_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbSegP",634,G__EbaseCint_243_0_2, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP), -1, 0, 7, 1, 1, 0, 
"i - - 0 - id f - - 0 - x "
"f - - 0 - y f - - 0 - tx "
"f - - 0 - ty f - - 0 '0' w "
"i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbSegP",634,G__EbaseCint_243_0_3, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP), -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkMT",559,G__EbaseCint_243_0_4, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'EdbSegP' - 10 - s1 U 'EdbSegP' - 10 - s2 "
"U 'EdbSegP' - 0 - s", (char*)NULL, (void*) G__func2void( (void (*)(const EdbSegP*, const EdbSegP*, EdbSegP*))(&EdbSegP::LinkMT) ), 0);
   G__memfunc_setup("PropagateToDZ",1284,G__EbaseCint_243_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateTo",1126,G__EbaseCint_243_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateToCOV",1358,G__EbaseCint_243_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeTo",691,G__EbaseCint_243_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbLink",801,G__EbaseCint_243_0_9, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCompatible",1212,G__EbaseCint_243_0_10, 103, -1, -1, 0, 3, 1, 1, 8, 
"u 'EdbSegP' - 1 - s f - - 0 - nsigx "
"f - - 0 - nsigt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addEMULDigit",1101,G__EbaseCint_243_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EMULDigitArray",1315,G__EbaseCint_243_0_12, 85, G__get_linked_tagnum(&G__EbaseCintLN_TRefArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EbaseCint_243_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__EbaseCint_243_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__EbaseCint_243_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EbaseCint_243_0_16, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 - id f - - 0 - x "
"f - - 0 - y f - - 0 - tx "
"f - - 0 - ty f - - 0 - w "
"i - - 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetErrors0",985,G__EbaseCint_243_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetErrors",937,G__EbaseCint_243_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetErrors",937,G__EbaseCint_243_0_19, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - sx2 f - - 0 - sy2 "
"f - - 0 - sz2 f - - 0 - stx2 "
"f - - 0 - sty2 f - - 0 '1.' sp2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetErrorsCOV",1169,G__EbaseCint_243_0_20, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - sx2 f - - 0 - sy2 "
"f - - 0 - sz2 f - - 0 - stx2 "
"f - - 0 - sty2 f - - 0 '1.' sp2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetErrorP",902,G__EbaseCint_243_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - sp2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCOV",532,G__EbaseCint_243_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixT<double>' 'TMatrixD' 1 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCOV",532,G__EbaseCint_243_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - - 0 - array i - - 0 '5' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("COV",232,G__EbaseCint_243_0_24, 117, G__get_linked_tagnum(&G__EbaseCintLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSZ",473,G__EbaseCint_243_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDZ",458,G__EbaseCint_243_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDZem",668,G__EbaseCint_243_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__EbaseCint_243_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPID",521,G__EbaseCint_243_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlag",678,G__EbaseCint_243_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrack",801,G__EbaseCint_243_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - trid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetW",387,G__EbaseCint_243_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetP",380,G__EbaseCint_243_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProb",703,G__EbaseCint_243_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - prob", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2",626,G__EbaseCint_243_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVolume",932,G__EbaseCint_243_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVid",591,G__EbaseCint_243_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - vid i - - 0 - sid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAid",570,G__EbaseCint_243_0_39, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - a i - - 0 - v "
"i - - 0 '0' side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSide",689,G__EbaseCint_243_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProbability",1453,G__EbaseCint_243_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMC",444,G__EbaseCint_243_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - mEvt i - - 0 - mTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlate",802,G__EbaseCint_243_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - plateid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScanID",830,G__EbaseCint_243_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCEvt",447,G__EbaseCint_243_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCTrack",645,G__EbaseCint_243_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID",141,G__EbaseCint_243_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PID",221,G__EbaseCint_243_0_48, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Flag",378,G__EbaseCint_243_0_49, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__EbaseCint_243_0_50, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("W",87,G__EbaseCint_243_0_51, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("P",80,G__EbaseCint_243_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DZ",158,G__EbaseCint_243_0_54, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DZem",368,G__EbaseCint_243_0_55, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Prob",403,G__EbaseCint_243_0_56, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2",326,G__EbaseCint_243_0_57, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Volume",632,G__EbaseCint_243_0_58, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Plate",502,G__EbaseCint_243_0_59, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanID",530,G__EbaseCint_243_0_60, 117, G__get_linked_tagnum(&G__EbaseCintLN_EdbID), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SX",171,G__EbaseCint_243_0_61, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SY",172,G__EbaseCint_243_0_62, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("STX",255,G__EbaseCint_243_0_63, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("STY",256,G__EbaseCint_243_0_64, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SP",163,G__EbaseCint_243_0_65, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SZ",173,G__EbaseCint_243_0_66, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vid",291,G__EbaseCint_243_0_67, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Aid",270,G__EbaseCint_243_0_68, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Side",389,G__EbaseCint_243_0_69, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TX",172,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TY",173,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetX",388,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetY",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTX",472,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - tx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTY",473,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ty", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Phi",289,G__EbaseCint_243_0_78, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Theta",502,G__EbaseCint_243_0_79, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Distance",811,G__EbaseCint_243_0_80, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"u 'EdbSegP' - 11 - s1 u 'EdbSegP' - 11 - s2", (char*)NULL, (void*) G__func2void( (Float_t (*)(const EdbSegP&, const EdbSegP&))(&EdbSegP::Distance) ), 0);
   G__memfunc_setup("Angle",487,G__EbaseCint_243_0_81, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"u 'EdbSegP' - 11 - s1 u 'EdbSegP' - 11 - s2", (char*)NULL, (void*) G__func2void( (Float_t (*)(const EdbSegP&, const EdbSegP&))(&EdbSegP::Angle) ), 0);
   G__memfunc_setup("DeltaTheta",992,G__EbaseCint_243_0_82, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'EdbSegP' - 0 - seg1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeltaR",572,G__EbaseCint_243_0_83, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'EdbSegP' - 0 - seg1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintNice",908,G__EbaseCint_243_0_85, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEqual",692,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EbaseCint_243_0_89, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbSegP::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_243_0_90, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegP::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_243_0_91, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbSegP::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_243_0_92, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbSegP::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_243_0_96, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_243_0_97, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegP::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_243_0_98, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegP::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_243_0_99, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegP::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_243_0_100, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegP::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbSegP", 760, G__EbaseCint_243_0_101, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EbaseCint_243_0_102, (int) ('u'), G__get_linked_tagnum(&G__EbaseCintLN_EdbSegP), -1, 1, 1, 1, 1, 0, "u 'EdbSegP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbSegCorr(void) {
   /* EdbSegCorr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr));
   G__memfunc_setup("EdbSegCorr",960,G__EbaseCint_244_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCorr",921,G__EbaseCint_244_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetV",386,G__EbaseCint_244_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i f - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddV",351,G__EbaseCint_244_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i f - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("V",86,G__EbaseCint_244_0_5, 102, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__EbaseCint_244_0_6, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__EbaseCint_244_0_7, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xpos",426,G__EbaseCint_244_0_8, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ypos",427,G__EbaseCint_244_0_9, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xrot",429,G__EbaseCint_244_0_10, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Yrot",430,G__EbaseCint_244_0_11, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TX",172,G__EbaseCint_244_0_12, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TY",173,G__EbaseCint_244_0_13, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("T",84,G__EbaseCint_244_0_14, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyCorrections",1681,G__EbaseCint_244_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EbaseCint_244_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_244_0_17, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbSegCorr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_244_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegCorr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_244_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbSegCorr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_244_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbSegCorr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_244_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_244_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegCorr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_244_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegCorr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_244_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegCorr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_244_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegCorr::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbSegCorr", 960, G__EbaseCint_244_0_29, (int) ('i'), G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr), -1, 0, 1, 1, 1, 0, "u 'EdbSegCorr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbSegCorr", 1086, G__EbaseCint_244_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EbaseCint_244_0_31, (int) ('u'), G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr), -1, 1, 1, 1, 1, 0, "u 'EdbSegCorr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbLayer(void) {
   /* EdbLayer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer));
   G__memfunc_setup("EdbLayer",776,G__EbaseCint_283_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbLayer",776,G__EbaseCint_283_0_2, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer), -1, 0, 1, 1, 1, 0, "u 'EdbLayer' - 11 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EbaseCint_283_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__EbaseCint_283_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbLayer' - 11 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyCorr",817,G__EbaseCint_283_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbLayer' - 11 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Map",286,G__EbaseCint_283_0_6, 117, G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID",141,G__EbaseCint_283_0_7, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ncp",289,G__EbaseCint_283_0_8, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__EbaseCint_283_0_9, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__EbaseCint_283_0_10, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__EbaseCint_283_0_11, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TX",172,G__EbaseCint_283_0_12, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TY",173,G__EbaseCint_283_0_13, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zmin",414,G__EbaseCint_283_0_14, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zmax",416,G__EbaseCint_283_0_15, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DX",156,G__EbaseCint_283_0_16, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DY",157,G__EbaseCint_283_0_17, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DZ",158,G__EbaseCint_283_0_18, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmin",412,G__EbaseCint_283_0_19, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmax",414,G__EbaseCint_283_0_20, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ymin",413,G__EbaseCint_283_0_21, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ymax",415,G__EbaseCint_283_0_22, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Shr",301,G__EbaseCint_283_0_23, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zcorr",528,G__EbaseCint_283_0_24, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInside",792,G__EbaseCint_283_0_25, 103, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInside",792,G__EbaseCint_283_0_26, 103, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__EbaseCint_283_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNcp",589,G__EbaseCint_283_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXY",477,G__EbaseCint_283_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDXDY",613,G__EbaseCint_283_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - dx f - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTXTY",645,G__EbaseCint_283_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - tx f - - 0 - ty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetShrinkage",1224,G__EbaseCint_283_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - shr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__EbaseCint_283_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZlayer",931,G__EbaseCint_283_0_34, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - z f - - 0 - zmin "
"f - - 0 - zmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAffXY",746,G__EbaseCint_283_0_35, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - a11 f - - 0 - a12 "
"f - - 0 - a21 f - - 0 - a22 "
"f - - 0 - b1 f - - 0 - b2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAffTXTY",914,G__EbaseCint_283_0_36, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - a11 f - - 0 - a12 "
"f - - 0 - a21 f - - 0 - a22 "
"f - - 0 - b1 f - - 0 - b2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZcorr",828,G__EbaseCint_283_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - zcorr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShiftZ",600,G__EbaseCint_283_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SubstructCorrections",2138,G__EbaseCint_283_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbLayer' - 1 - la", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyCorrections",1681,G__EbaseCint_283_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbLayer' - 1 - la", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyCorrectionsLocal",2172,G__EbaseCint_283_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbCorrectionMap' - 1 - map", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyCorrections",1681,G__EbaseCint_283_0_42, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - shr f - - 0 - zcorr "
"u 'EdbAffine2D' - 11 - affxy u 'EdbAffine2D' - 11 - afftxty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetAffXY",961,G__EbaseCint_283_0_43, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetAffTXTY",1129,G__EbaseCint_283_0_44, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCorr",921,G__EbaseCint_283_0_45, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AffineXY",762,G__EbaseCint_283_0_46, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbAffine2D), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AffineTXTY",930,G__EbaseCint_283_0_47, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbAffine2D), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAffineXY",1050,G__EbaseCint_283_0_48, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbAffine2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAffineTXTY",1218,G__EbaseCint_283_0_49, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbAffine2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TXp",284,G__EbaseCint_283_0_50, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", "apply shrinkage and rotation ", (void*) NULL, 0);
   G__memfunc_setup("TYp",285,G__EbaseCint_283_0_51, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", "of the main transform: eAffXY", (void*) NULL, 0);
   G__memfunc_setup("TX",172,G__EbaseCint_283_0_52, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TY",173,G__EbaseCint_283_0_53, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xp",200,G__EbaseCint_283_0_54, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", "only position transform", (void*) NULL, 0);
   G__memfunc_setup("Yp",201,G__EbaseCint_283_0_55, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__EbaseCint_283_0_56, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", "apply propagation", (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__EbaseCint_283_0_57, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zxy",331,G__EbaseCint_283_0_58, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectSeg",1009,G__EbaseCint_283_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectSegLocal",1500,G__EbaseCint_283_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Invert",632,G__EbaseCint_283_0_61, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EbaseCint_283_0_62, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_283_0_63, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbLayer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_283_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbLayer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_283_0_65, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbLayer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_283_0_66, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbLayer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_283_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_283_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbLayer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_283_0_72, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbLayer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_283_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbLayer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_283_0_74, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbLayer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbLayer", 902, G__EbaseCint_283_0_75, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EbaseCint_283_0_76, (int) ('u'), G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer), -1, 1, 1, 1, 1, 0, "u 'EdbLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbCorrectionMap(void) {
   /* EdbCorrectionMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap));
   G__memfunc_setup("EdbCorrectionMap",1601,G__EbaseCint_284_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbCorrectionMap",1601,G__EbaseCint_284_0_2, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap), -1, 0, 1, 1, 1, 0, "u 'EdbCorrectionMap' - 11 - map", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__EbaseCint_284_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbCell2' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__EbaseCint_284_0_4, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - nx f - - 0 - minx "
"f - - 0 - maxx i - - 0 - ny "
"f - - 0 - miny f - - 0 - maxy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayer",797,G__EbaseCint_284_0_5, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer), -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayer",797,G__EbaseCint_284_0_6, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectSeg",1009,G__EbaseCint_284_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyCorrections",1681,G__EbaseCint_284_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbCorrectionMap' - 1 - map", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintDZ",683,G__EbaseCint_284_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrLoc",692,G__EbaseCint_284_0_10, 117, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr), -1, 0, 1, 1, 1, 0, "i - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrLoc",692,G__EbaseCint_284_0_11, 117, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCorr), -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_284_0_12, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbCorrectionMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_284_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCorrectionMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_284_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbCorrectionMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_284_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbCorrectionMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_284_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_284_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCorrectionMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_284_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCorrectionMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_284_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCorrectionMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_284_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCorrectionMap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbCorrectionMap", 1727, G__EbaseCint_284_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EbaseCint_284_0_25, (int) ('u'), G__get_linked_tagnum(&G__EbaseCintLN_EdbCorrectionMap), -1, 1, 1, 1, 1, 0, "u 'EdbCorrectionMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbScanCond(void) {
   /* EdbScanCond */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbScanCond));
   G__memfunc_setup("EdbScanCond",1044,G__EbaseCint_299_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbScanCond), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefault",1009,G__EbaseCint_299_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRadX0",715,G__EbaseCint_299_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RadX0",415,G__EbaseCint_299_0_4, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigmaGR",950,G__EbaseCint_299_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - sx f - - 0 - sy "
"f - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma0",845,G__EbaseCint_299_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - tx f - - 0 - ty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma0",845,G__EbaseCint_299_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBins",696,G__EbaseCint_299_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - bx f - - 0 - by "
"f - - 0 - btx f - - 0 - bty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOffset",915,G__EbaseCint_299_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OffX",371,G__EbaseCint_299_0_10, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OffY",372,G__EbaseCint_299_0_11, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDegrad",883,G__EbaseCint_299_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigmaZ0",935,G__EbaseCint_299_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulsRamp0",1168,G__EbaseCint_299_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - p1 f - - 0 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulsRamp04",1220,G__EbaseCint_299_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - p1 f - - 0 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulsRamp0",1168,G__EbaseCint_299_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulsRamp04",1220,G__EbaseCint_299_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BinX",369,G__EbaseCint_299_0_18, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BinY",370,G__EbaseCint_299_0_19, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BinTX",453,G__EbaseCint_299_0_20, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BinTY",454,G__EbaseCint_299_0_21, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2Max",920,G__EbaseCint_299_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2PMax",1000,G__EbaseCint_299_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2Max",620,G__EbaseCint_299_0_24, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2PMax",700,G__EbaseCint_299_0_25, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2Mode",1015,G__EbaseCint_299_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2Mode",715,G__EbaseCint_299_0_27, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StepX",500,G__EbaseCint_299_0_28, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StepY",501,G__EbaseCint_299_0_29, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StepTX",584,G__EbaseCint_299_0_30, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - tx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StepTY",585,G__EbaseCint_299_0_31, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - ty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaXgr",802,G__EbaseCint_299_0_32, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaYgr",803,G__EbaseCint_299_0_33, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaZgr",804,G__EbaseCint_299_0_34, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Degrad",583,G__EbaseCint_299_0_35, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaX",585,G__EbaseCint_299_0_36, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - ax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaY",586,G__EbaseCint_299_0_37, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - ay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaZ",587,G__EbaseCint_299_0_38, 102, -1, -1, 0, 2, 1, 1, 8, 
"f - - 0 - ax f - - 0 - ay", "TODO", (void*) NULL, 0);
   G__memfunc_setup("SigmaTX",669,G__EbaseCint_299_0_39, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - ax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaTY",670,G__EbaseCint_299_0_40, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - ay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaTXf",771,G__EbaseCint_299_0_41, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - ax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaTYf",772,G__EbaseCint_299_0_42, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - ay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ramp",400,G__EbaseCint_299_0_43, 102, -1, -1, 0, 3, 1, 1, 8, 
"f - - 0 - x f - - 0 - x1 "
"f - - 0 - x2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbSeg",690,G__EbaseCint_299_0_44, 102, -1, -1, 0, 3, 1, 1, 8, 
"f - - 0 - tx f - - 0 - ty "
"f - - 0 - puls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbSeg",690,G__EbaseCint_299_0_45, 102, -1, -1, 0, 2, 1, 1, 8, 
"f - - 0 - t f - - 0 - puls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLLFunction",1577,G__EbaseCint_299_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbLL",555,G__EbaseCint_299_0_47, 102, -1, -1, 0, 3, 1, 1, 8, 
"f - - 0 - tx f - - 0 - ty "
"f - - 0 - puls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbLL",555,G__EbaseCint_299_0_48, 102, -1, -1, 0, 2, 1, 1, 8, 
"f - - 0 - t f - - 0 - puls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillErrorsCov",1324,G__EbaseCint_299_0_49, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - tx f - - 0 - ty "
"u 'TMatrixT<double>' 'TMatrixD' 1 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EbaseCint_299_0_50, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_299_0_51, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbScanCond::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_299_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanCond::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_299_0_53, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbScanCond::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_299_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbScanCond::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_299_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_299_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanCond::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_299_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanCond::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_299_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanCond::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_299_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanCond::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbScanCond", 1044, G__EbaseCint_299_0_63, (int) ('i'), G__get_linked_tagnum(&G__EbaseCintLN_EdbScanCond), -1, 0, 1, 1, 1, 0, "u 'EdbScanCond' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbScanCond", 1170, G__EbaseCint_299_0_64, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EbaseCint_299_0_65, (int) ('u'), G__get_linked_tagnum(&G__EbaseCintLN_EdbScanCond), -1, 1, 1, 1, 1, 0, "u 'EdbScanCond' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPlateP(void) {
   /* EdbPlateP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP));
   G__memfunc_setup("EdbPlateP",849,G__EbaseCint_300_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbPlateP",849,G__EbaseCint_300_0_2, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP), -1, 0, 1, 1, 1, 0, "u 'EdbPlateP' - 1 - pp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__EbaseCint_300_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPlateP' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlateLayout",1440,G__EbaseCint_300_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - z0 f - - 0 - z1 "
"f - - 0 - z2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOperaLayout",1441,G__EbaseCint_300_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintPlateLayout",1665,G__EbaseCint_300_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayer",797,G__EbaseCint_300_0_7, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDXDY",613,G__EbaseCint_300_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - dx f - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformSidesIntoPlateRS",2537,G__EbaseCint_300_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EbaseCint_300_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_300_0_11, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPlateP::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_300_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlateP::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_300_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPlateP::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_300_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPlateP::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_300_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_300_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlateP::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_300_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPlateP::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_300_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlateP::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_300_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPlateP::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPlateP", 975, G__EbaseCint_300_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbBrickP(void) {
   /* EdbBrickP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbBrickP));
   G__memfunc_setup("EdbBrickP",838,G__EbaseCint_301_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbBrickP), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__EbaseCint_301_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbBrickP' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlatesLayout",1555,G__EbaseCint_301_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - z0 f - - 0 - z1 "
"f - - 0 - z2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDXDY",613,G__EbaseCint_301_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - dx f - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Npl",298,G__EbaseCint_301_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPlate",767,G__EbaseCint_301_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPlateP' - 0 - pl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlate",790,G__EbaseCint_301_0_7, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__EbaseCint_301_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EbaseCint_301_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintSides",1029,G__EbaseCint_301_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemovePlate",1124,G__EbaseCint_301_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetAffXY",961,G__EbaseCint_301_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetAffTXTY",1129,G__EbaseCint_301_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetAff",784,G__EbaseCint_301_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_301_0_15, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbBrickP::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_301_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbBrickP::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_301_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbBrickP::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_301_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbBrickP::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_301_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_301_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbBrickP::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_301_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbBrickP::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_301_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbBrickP::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_301_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbBrickP::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbBrickP", 964, G__EbaseCint_301_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbScanSet(void) {
   /* EdbScanSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbScanSet));
   G__memfunc_setup("EdbScanSet",956,G__EbaseCint_308_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbScanSet), -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbScanSet",956,G__EbaseCint_308_0_2, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbScanSet), -1, 0, 1, 1, 1, 0, "i - - 0 '0' brickid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__EbaseCint_308_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanSet' - 1 - sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakePIDList",1015,G__EbaseCint_308_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeNominalSet",1400,G__EbaseCint_308_0_5, 121, -1, -1, 0, 8, 1, 1, 0, 
"u 'EdbID' - 0 - id i - - 0 '57' from_plate "
"i - - 0 '1' to_plate f - - 0 '0' z0 "
"f - - 0 '-1300' dz f - - 0 '1' shr "
"f - - 0 '210.' dzbase f - - 0 '45.' dzem", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EbaseCint_308_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssembleBrickFromPC",1854,G__EbaseCint_308_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformSidesIntoBrickRS",2526,G__EbaseCint_308_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformBrick",1447,G__EbaseCint_308_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'EdbAffine2D' - 0 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformBrick",1447,G__EbaseCint_308_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanSet' - 1 - ss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShiftBrickZ",1091,G__EbaseCint_308_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeParFiles",1172,G__EbaseCint_308_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' piece C - - 10 '\".\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadIDS",604,G__EbaseCint_308_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteIDS",747,G__EbaseCint_308_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 '0' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddID",406,G__EbaseCint_308_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'EdbID' - 0 - id i - 'Int_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAsReferencePlate",1893,G__EbaseCint_308_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAffP2P",767,G__EbaseCint_308_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - p1 i - 'Int_t' 0 - p2 "
"u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDZP2P",656,G__EbaseCint_308_0_18, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - p1 i - 'Int_t' 0 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindNextPlateID",1443,G__EbaseCint_308_0_19, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbID), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - p g - 'Bool_t' 0 - direction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPlateID",1028,G__EbaseCint_308_0_20, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbID), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__EbaseCint_308_0_21, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbID), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__EbaseCint_308_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Brick",491,G__EbaseCint_308_0_23, 117, G__get_linked_tagnum(&G__EbaseCintLN_EdbBrickP), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Brick",491,G__EbaseCint_308_0_24, 117, G__get_linked_tagnum(&G__EbaseCintLN_EdbBrickP), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValidSide",885,G__EbaseCint_308_0_25, 103, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayer",797,G__EbaseCint_308_0_26, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbLayer), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - p i - 'Int_t' 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zlayer",631,G__EbaseCint_308_0_27, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - plate i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlate",790,G__EbaseCint_308_0_28, 85, G__get_linked_tagnum(&G__EbaseCintLN_EdbPlateP), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateBrickWithP2P",1724,G__EbaseCint_308_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbLayer' - 1 - la i - - 0 - plate1 "
"i - - 0 - plate2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemovePlate",1124,G__EbaseCint_308_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateGap",891,G__EbaseCint_308_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - dz i - - 0 - pid1 "
"i - - 0 - pid2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteGeom",915,G__EbaseCint_308_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadGeom",772,G__EbaseCint_308_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateIDS",835,G__EbaseCint_308_0_34, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - brick i - - 0 - ma "
"i - - 0 - mi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_308_0_35, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbScanSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_308_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_308_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbScanSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_308_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbScanSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_308_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_308_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_308_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_308_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_308_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbScanSet", 1082, G__EbaseCint_308_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbSigma(void) {
   /* EdbSigma */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSigma));
   G__memfunc_setup("EdbSigma",764,G__EbaseCint_309_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSigma), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EbaseCint_309_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SqSum",505,G__EbaseCint_309_0_3, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - a d - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DAL",209,G__EbaseCint_309_0_4, 100, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t d - - 0 - sxy "
"d - - 0 - sz d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DAT",217,G__EbaseCint_309_0_5, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - t d - - 0 - sxy "
"d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DP",148,G__EbaseCint_309_0_6, 100, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t d - - 0 - sxy "
"d - - 0 - da d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DALmt",434,G__EbaseCint_309_0_7, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DATmt",442,G__EbaseCint_309_0_8, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DPLmt",449,G__EbaseCint_309_0_9, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DPTmt",457,G__EbaseCint_309_0_10, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DALbt",423,G__EbaseCint_309_0_11, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DATbt",431,G__EbaseCint_309_0_12, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DPLbt",438,G__EbaseCint_309_0_13, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DPTbt",446,G__EbaseCint_309_0_14, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FDAL",279,G__EbaseCint_309_0_15, 100, -1, -1, 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FDAT",287,G__EbaseCint_309_0_16, 100, -1, -1, 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FDPLmt",519,G__EbaseCint_309_0_17, 100, -1, -1, 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FDALbt",493,G__EbaseCint_309_0_18, 100, -1, -1, 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__EbaseCint_309_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_309_0_20, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbSigma::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_309_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSigma::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_309_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbSigma::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_309_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbSigma::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_309_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_309_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSigma::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_309_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSigma::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_309_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSigma::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_309_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSigma::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbSigma", 764, G__EbaseCint_309_0_32, (int) ('i'), G__get_linked_tagnum(&G__EbaseCintLN_EdbSigma), -1, 0, 1, 1, 1, 0, "u 'EdbSigma' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbSigma", 890, G__EbaseCint_309_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EbaseCint_309_0_34, (int) ('u'), G__get_linked_tagnum(&G__EbaseCintLN_EdbSigma), -1, 1, 1, 1, 1, 0, "u 'EdbSigma' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbSEQ(void) {
   /* EdbSEQ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSEQ));
   G__memfunc_setup("EdbSEQ",500,G__EbaseCint_616_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSEQ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EbaseCint_616_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXLimits",1014,G__EbaseCint_616_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - xmin f - - 0 - xmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetYLimits",1015,G__EbaseCint_616_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - ymin f - - 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWLimits",1013,G__EbaseCint_616_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - wmin f - - 0 - wmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaLimits",1428,G__EbaseCint_616_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - tmin f - - 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChiLimits",1202,G__EbaseCint_616_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - cmin f - - 0 - cmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DNmt",371,G__EbaseCint_616_0_8, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FDNmt",441,G__EbaseCint_616_0_9, 100, -1, -1, 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DNbt",360,G__EbaseCint_616_0_10, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FDNbt",430,G__EbaseCint_616_0_11, 100, -1, -1, 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateDensityMT",1807,G__EbaseCint_616_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbH1' - 1 - hEq", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreSelection",1229,G__EbaseCint_616_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - pi u 'TObjArray' - 1 - po", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EqualizeMT",993,G__EbaseCint_616_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TObjArray' - 1 - mti u 'TObjArray' - 1 - mto "
"d - 'Double_t' 0 - area", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetExcludeThetaRange",2224,G__EbaseCint_616_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddExcludeThetaRange",1974,G__EbaseCint_616_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExcludeThetaRange",1709,G__EbaseCint_616_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 1 - mti u 'TObjArray' - 1 - mto", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInsideThetaRange",1787,G__EbaseCint_616_0_18, 103, -1, -1, 0, 1, 1, 1, 0, "U 'EdbSegP' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Wmt",312,G__EbaseCint_616_0_19, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ThetaPlot",917,G__EbaseCint_616_0_20, 85, G__get_linked_tagnum(&G__EbaseCintLN_TH1F), -1, 0, 3, 1, 1, 0, 
"u 'TObjArray' - 1 - arr C - - 10 '\"theta\"' name "
"C - - 10 '\"EdbSEQ theta distribution normalised to area\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ThetaPlot",917,G__EbaseCint_616_0_21, 85, G__get_linked_tagnum(&G__EbaseCintLN_TH1F), -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - p C - - 10 '\"theta\"' name "
"C - - 10 '\"EdbSEQ theta distribution normalised to area\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__EbaseCint_616_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintLimits",1151,G__EbaseCint_616_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_616_0_24, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbSEQ::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_616_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSEQ::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_616_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbSEQ::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_616_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbSEQ::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_616_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_616_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSEQ::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_616_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSEQ::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_616_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSEQ::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_616_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSEQ::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbSEQ", 626, G__EbaseCint_616_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbSegCouple(void) {
   /* EdbSegCouple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple));
   G__memfunc_setup("EdbSegCouple",1170,G__EbaseCint_647_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbSegCouple",1170,G__EbaseCint_647_0_2, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple), -1, 0, 1, 1, 1, 0, "u 'EdbSegCouple' - 11 - sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbSegCouple",1170,G__EbaseCint_647_0_3, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple), -1, 0, 2, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EbaseCint_647_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetN1",427,G__EbaseCint_647_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetN2",428,G__EbaseCint_647_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetN1tot",770,G__EbaseCint_647_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetN2tot",771,G__EbaseCint_647_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCHI2",562,G__EbaseCint_647_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCHI2P",642,G__EbaseCint_647_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EbaseCint_647_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSortFlag",1102,G__EbaseCint_647_0_12, 121, -1, -1, 0, 1, 3, 1, 0, "i - - 0 '0' s", (char*)NULL, (void*) G__func2void( (void (*)(int))(&EdbSegCouple::SetSortFlag) ), 0);
   G__memfunc_setup("SortFlag",802,G__EbaseCint_647_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegCouple::SortFlag) ), 0);
   G__memfunc_setup("ID1",190,G__EbaseCint_647_0_14, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID2",191,G__EbaseCint_647_0_15, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N1",127,G__EbaseCint_647_0_16, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N2",128,G__EbaseCint_647_0_17, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N1tot",470,G__EbaseCint_647_0_18, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N2tot",471,G__EbaseCint_647_0_19, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CHI2",262,G__EbaseCint_647_0_20, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CHI2P",342,G__EbaseCint_647_0_21, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEqual",692,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EbaseCint_647_0_25, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbSegCouple::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_647_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegCouple::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_647_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbSegCouple::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_647_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbSegCouple::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_647_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_647_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegCouple::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_647_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegCouple::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_647_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegCouple::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_647_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegCouple::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbSegCouple", 1296, G__EbaseCint_647_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EbaseCint_647_0_38, (int) ('u'), G__get_linked_tagnum(&G__EbaseCintLN_EdbSegCouple), -1, 1, 1, 1, 1, 0, "u 'EdbSegCouple' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbCouplesTree(void) {
   /* EdbCouplesTree */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbCouplesTree));
   G__memfunc_setup("EdbCouplesTree",1398,G__EbaseCint_650_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbCouplesTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCouplesTree",1535,G__EbaseCint_650_0_2, 103, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"couples\"' name C - - 10 '0' fname "
"C - 'Option_t' 10 '\"READ\"' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCutList",1116,G__EbaseCint_650_0_3, 85, G__get_linked_tagnum(&G__EbaseCintLN_TEventList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__EbaseCint_650_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__EbaseCint_650_0_5, 105, -1, G__defined_typename("Int_t"), 0, 8, 1, 1, 0, 
"U 'EdbSegP' - 0 - s1 U 'EdbSegP' - 0 - s2 "
"U 'EdbSegP' - 0 '0' s U 'EdbSegCouple' - 0 '0' cp "
"f - - 0 '0' xv f - - 0 '0' yv "
"i - - 0 '0' pid1 i - - 0 '0' pid2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__EbaseCint_650_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteTree",923,G__EbaseCint_650_0_7, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,G__EbaseCint_650_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyCorrections",1681,G__EbaseCint_650_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutCPData",838,G__EbaseCint_650_0_10, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - cparr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCPData",813,G__EbaseCint_650_0_11, 105, -1, -1, 0, 4, 1, 1, 0, 
"U 'EdbPattern' - 0 - pat U 'EdbPattern' - 0 '0' p1 "
"U 'EdbPattern' - 0 '0' p2 U 'TIndex2' - 0 '0' trseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCPData",813,G__EbaseCint_650_0_12, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - cparr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCPDataAcceptedMask",2002,G__EbaseCint_650_0_13, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPattern' - 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileName",1057,G__EbaseCint_650_0_14, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EbaseCint_650_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_650_0_16, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbCouplesTree::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_650_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCouplesTree::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_650_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbCouplesTree::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_650_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbCouplesTree::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_650_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_650_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCouplesTree::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_650_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCouplesTree::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_650_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCouplesTree::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_650_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCouplesTree::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbCouplesTree", 1524, G__EbaseCint_650_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbSegmentCut(void) {
   /* EdbSegmentCut */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut));
   G__memfunc_setup("EdbSegmentCut",1290,G__EbaseCint_651_0_1, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbSegmentCut",1290,G__EbaseCint_651_0_2, 105, G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut), -1, 0, 2, 1, 1, 0, 
"i - - 0 - xi F - - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXI",461,G__EbaseCint_651_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - xi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMin",592,G__EbaseCint_651_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMax",594,G__EbaseCint_651_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("XI",161,G__EbaseCint_651_0_6, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Min",292,G__EbaseCint_651_0_7, 102, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Max",294,G__EbaseCint_651_0_8, 102, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PassCut",707,G__EbaseCint_651_0_9, 105, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PassCutX",795,G__EbaseCint_651_0_10, 105, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PassCutI",780,G__EbaseCint_651_0_11, 105, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EbaseCint_651_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CutLine",692,G__EbaseCint_651_0_13, 67, -1, -1, 0, 3, 1, 1, 9, 
"C - - 0 - str i - - 0 '0' i "
"i - - 0 '0' j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EbaseCint_651_0_14, 85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbSegmentCut::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EbaseCint_651_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegmentCut::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EbaseCint_651_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbSegmentCut::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EbaseCint_651_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbSegmentCut::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EbaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EbaseCint_651_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EbaseCint_651_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegmentCut::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EbaseCint_651_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegmentCut::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EbaseCint_651_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegmentCut::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EbaseCint_651_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegmentCut::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbSegmentCut", 1290, G__EbaseCint_651_0_26, (int) ('i'), G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut), -1, 0, 1, 1, 1, 0, "u 'EdbSegmentCut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbSegmentCut", 1416, G__EbaseCint_651_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EbaseCint_651_0_28, (int) ('u'), G__get_linked_tagnum(&G__EbaseCintLN_EdbSegmentCut), -1, 1, 1, 1, 1, 0, "u 'EdbSegmentCut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncEbaseCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalEbaseCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcEbaseCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__EbaseCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__EbaseCintLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbAffine2D = { "EdbAffine2D" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbPoint = { "EdbPoint" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbPoint2D = { "EdbPoint2D" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbAngle2D = { "EdbAngle2D" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbTrack2D = { "EdbTrack2D" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbID = { "EdbID" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbSegP = { "EdbSegP" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbSegCorr = { "EdbSegCorr" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbH1 = { "EdbH1" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbH2 = { "EdbH2" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbCell2 = { "EdbCell2" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbLayer = { "EdbLayer" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbCorrectionMap = { "EdbCorrectionMap" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbScanCond = { "EdbScanCond" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbPlateP = { "EdbPlateP" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbBrickP = { "EdbBrickP" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TIndexCell = { "TIndexCell" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbScanSet = { "EdbScanSet" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbSigma = { "EdbSigma" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TEventList = { "TEventList" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TCut = { "TCut" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbPattern = { "EdbPattern" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbSEQ = { "EdbSEQ" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbSegCouple = { "EdbSegCouple" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbMask = { "EdbMask" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_TIndex2 = { "TIndex2" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbCouplesTree = { "EdbCouplesTree" , 99 , -1 };
G__linked_taginfo G__EbaseCintLN_EdbSegmentCut = { "EdbSegmentCut" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableEbaseCint() {
  G__EbaseCintLN_TClass.tagnum = -1 ;
  G__EbaseCintLN_TBuffer.tagnum = -1 ;
  G__EbaseCintLN_TMemberInspector.tagnum = -1 ;
  G__EbaseCintLN_TObject.tagnum = -1 ;
  G__EbaseCintLN_TNamed.tagnum = -1 ;
  G__EbaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__EbaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EbaseCintLN_TList.tagnum = -1 ;
  G__EbaseCintLN_TObjArray.tagnum = -1 ;
  G__EbaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__EbaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EbaseCintLN_TArrayF.tagnum = -1 ;
  G__EbaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__EbaseCintLN_TRefArray.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__EbaseCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__EbaseCintLN_TH1F.tagnum = -1 ;
  G__EbaseCintLN_EdbAffine2D.tagnum = -1 ;
  G__EbaseCintLN_EdbPoint.tagnum = -1 ;
  G__EbaseCintLN_EdbPoint2D.tagnum = -1 ;
  G__EbaseCintLN_EdbAngle2D.tagnum = -1 ;
  G__EbaseCintLN_EdbTrack2D.tagnum = -1 ;
  G__EbaseCintLN_EdbID.tagnum = -1 ;
  G__EbaseCintLN_EdbSegP.tagnum = -1 ;
  G__EbaseCintLN_EdbSegCorr.tagnum = -1 ;
  G__EbaseCintLN_TF1.tagnum = -1 ;
  G__EbaseCintLN_EdbH1.tagnum = -1 ;
  G__EbaseCintLN_EdbH2.tagnum = -1 ;
  G__EbaseCintLN_EdbCell2.tagnum = -1 ;
  G__EbaseCintLN_EdbLayer.tagnum = -1 ;
  G__EbaseCintLN_EdbCorrectionMap.tagnum = -1 ;
  G__EbaseCintLN_EdbScanCond.tagnum = -1 ;
  G__EbaseCintLN_EdbPlateP.tagnum = -1 ;
  G__EbaseCintLN_EdbBrickP.tagnum = -1 ;
  G__EbaseCintLN_TIndexCell.tagnum = -1 ;
  G__EbaseCintLN_EdbScanSet.tagnum = -1 ;
  G__EbaseCintLN_EdbSigma.tagnum = -1 ;
  G__EbaseCintLN_TVector2.tagnum = -1 ;
  G__EbaseCintLN_TTree.tagnum = -1 ;
  G__EbaseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__EbaseCintLN_TEventList.tagnum = -1 ;
  G__EbaseCintLN_TCut.tagnum = -1 ;
  G__EbaseCintLN_EdbPattern.tagnum = -1 ;
  G__EbaseCintLN_EdbSEQ.tagnum = -1 ;
  G__EbaseCintLN_EdbSegCouple.tagnum = -1 ;
  G__EbaseCintLN_EdbMask.tagnum = -1 ;
  G__EbaseCintLN_TIndex2.tagnum = -1 ;
  G__EbaseCintLN_EdbCouplesTree.tagnum = -1 ;
  G__EbaseCintLN_EdbSegmentCut.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableEbaseCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TList);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TRefArray);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TH1F);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbAffine2D);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbPoint);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbPoint2D);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbAngle2D);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbTrack2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbID),sizeof(EdbID),-1,62720,"definition of the identifier of the data piece",G__setup_memvarEdbID,G__setup_memfuncEdbID);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbSegP),sizeof(EdbSegP),-1,63232,"segment",G__setup_memvarEdbSegP,G__setup_memfuncEdbSegP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbSegCorr),sizeof(EdbSegCorr),-1,29952,"segment corrections as separated variables",G__setup_memvarEdbSegCorr,G__setup_memfuncEdbSegCorr);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TF1);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbH1);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbH2);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbCell2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbLayer),sizeof(EdbLayer),-1,292608,"shrinked layer",G__setup_memvarEdbLayer,G__setup_memfuncEdbLayer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbCorrectionMap),sizeof(EdbCorrectionMap),-1,63232,"to keep and apply correction map",G__setup_memvarEdbCorrectionMap,G__setup_memfuncEdbCorrectionMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbScanCond),sizeof(EdbScanCond),-1,62720,"Scanning Conditions Parameters",G__setup_memvarEdbScanCond,G__setup_memfuncEdbScanCond);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbPlateP),sizeof(EdbPlateP),-1,30464,"OPERA Plate structure definition",G__setup_memvarEdbPlateP,G__setup_memfuncEdbPlateP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbBrickP),sizeof(EdbBrickP),-1,29952,"OPERA Brick structure definition",G__setup_memvarEdbBrickP,G__setup_memfuncEdbBrickP);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TIndexCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbScanSet),sizeof(EdbScanSet),-1,62720,(char*)NULL,G__setup_memvarEdbScanSet,G__setup_memfuncEdbScanSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbSigma),sizeof(EdbSigma),-1,29952,"segments accuracy functions",G__setup_memvarEdbSigma,G__setup_memfuncEdbSigma);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TVector2);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TTree);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TEventList);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TCut);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbPattern);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbSEQ),sizeof(EdbSEQ),-1,29952,"segments equalizer",G__setup_memvarEdbSEQ,G__setup_memfuncEdbSEQ);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbSegCouple),sizeof(EdbSegCouple),-1,63232,"couple of segments",G__setup_memvarEdbSegCouple,G__setup_memfuncEdbSegCouple);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbMask);
   G__get_linked_tagnum_fwd(&G__EbaseCintLN_TIndex2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbCouplesTree),sizeof(EdbCouplesTree),-1,29952,"service class for couples tree access",G__setup_memvarEdbCouplesTree,G__setup_memfuncEdbCouplesTree);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EbaseCintLN_EdbSegmentCut),sizeof(EdbSegmentCut),-1,62720,"segment cut",G__setup_memvarEdbSegmentCut,G__setup_memfuncEdbSegmentCut);
}
extern "C" void G__cpp_setupEbaseCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupEbaseCint()");
  G__set_cpp_environmentEbaseCint();
  G__cpp_setup_tagtableEbaseCint();

  G__cpp_setup_inheritanceEbaseCint();

  G__cpp_setup_typetableEbaseCint();

  G__cpp_setup_memvarEbaseCint();

  G__cpp_setup_memfuncEbaseCint();
  G__cpp_setup_globalEbaseCint();
  G__cpp_setup_funcEbaseCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncEbaseCint();
  return;
}
class G__cpp_setup_initEbaseCint {
  public:
    G__cpp_setup_initEbaseCint() { G__add_setup_func("EbaseCint",(G__incsetup)(&G__cpp_setupEbaseCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initEbaseCint() { G__remove_setup_func("EbaseCint"); }
};
G__cpp_setup_initEbaseCint G__cpp_setup_initializerEbaseCint;

