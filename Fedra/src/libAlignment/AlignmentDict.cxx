//
// File generated by C:\root_v5.34.38\bin\rootcint.EXE at Tue Jun 02 09:08:09 2020

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME AlignmentDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "AlignmentDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void EdbPatCell2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPatCell2(void *p = 0);
   static void *newArray_EdbPatCell2(Long_t size, void *p);
   static void delete_EdbPatCell2(void *p);
   static void deleteArray_EdbPatCell2(void *p);
   static void destruct_EdbPatCell2(void *p);
   static void streamer_EdbPatCell2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPatCell2*)
   {
      ::EdbPatCell2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPatCell2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPatCell2", ::EdbPatCell2::Class_Version(), "./EdbPatCell2.h", 10,
                  typeid(::EdbPatCell2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPatCell2::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPatCell2) );
      instance.SetNew(&new_EdbPatCell2);
      instance.SetNewArray(&newArray_EdbPatCell2);
      instance.SetDelete(&delete_EdbPatCell2);
      instance.SetDeleteArray(&deleteArray_EdbPatCell2);
      instance.SetDestructor(&destruct_EdbPatCell2);
      instance.SetStreamerFunc(&streamer_EdbPatCell2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPatCell2*)
   {
      return GenerateInitInstanceLocal((::EdbPatCell2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPatCell2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPositionAlignment_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPositionAlignment(void *p = 0);
   static void *newArray_EdbPositionAlignment(Long_t size, void *p);
   static void delete_EdbPositionAlignment(void *p);
   static void deleteArray_EdbPositionAlignment(void *p);
   static void destruct_EdbPositionAlignment(void *p);
   static void streamer_EdbPositionAlignment(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPositionAlignment*)
   {
      ::EdbPositionAlignment *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPositionAlignment >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPositionAlignment", ::EdbPositionAlignment::Class_Version(), "./EdbPositionAlignment.h", 14,
                  typeid(::EdbPositionAlignment), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPositionAlignment::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPositionAlignment) );
      instance.SetNew(&new_EdbPositionAlignment);
      instance.SetNewArray(&newArray_EdbPositionAlignment);
      instance.SetDelete(&delete_EdbPositionAlignment);
      instance.SetDeleteArray(&deleteArray_EdbPositionAlignment);
      instance.SetDestructor(&destruct_EdbPositionAlignment);
      instance.SetStreamerFunc(&streamer_EdbPositionAlignment);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPositionAlignment*)
   {
      return GenerateInitInstanceLocal((::EdbPositionAlignment*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPositionAlignment*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbAlignmentMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbAlignmentMap(void *p = 0);
   static void *newArray_EdbAlignmentMap(Long_t size, void *p);
   static void delete_EdbAlignmentMap(void *p);
   static void deleteArray_EdbAlignmentMap(void *p);
   static void destruct_EdbAlignmentMap(void *p);
   static void streamer_EdbAlignmentMap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbAlignmentMap*)
   {
      ::EdbAlignmentMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbAlignmentMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbAlignmentMap", ::EdbAlignmentMap::Class_Version(), "./EdbAlignmentMap.h", 16,
                  typeid(::EdbAlignmentMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbAlignmentMap::Dictionary, isa_proxy, 0,
                  sizeof(::EdbAlignmentMap) );
      instance.SetNew(&new_EdbAlignmentMap);
      instance.SetNewArray(&newArray_EdbAlignmentMap);
      instance.SetDelete(&delete_EdbAlignmentMap);
      instance.SetDeleteArray(&deleteArray_EdbAlignmentMap);
      instance.SetDestructor(&destruct_EdbAlignmentMap);
      instance.SetStreamerFunc(&streamer_EdbAlignmentMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbAlignmentMap*)
   {
      return GenerateInitInstanceLocal((::EdbAlignmentMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbAlignmentMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPeakProb_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPeakProb(void *p = 0);
   static void *newArray_EdbPeakProb(Long_t size, void *p);
   static void delete_EdbPeakProb(void *p);
   static void deleteArray_EdbPeakProb(void *p);
   static void destruct_EdbPeakProb(void *p);
   static void streamer_EdbPeakProb(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPeakProb*)
   {
      ::EdbPeakProb *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPeakProb >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPeakProb", ::EdbPeakProb::Class_Version(), "./EdbPeakProb.h", 8,
                  typeid(::EdbPeakProb), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPeakProb::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPeakProb) );
      instance.SetNew(&new_EdbPeakProb);
      instance.SetNewArray(&newArray_EdbPeakProb);
      instance.SetDelete(&delete_EdbPeakProb);
      instance.SetDeleteArray(&deleteArray_EdbPeakProb);
      instance.SetDestructor(&destruct_EdbPeakProb);
      instance.SetStreamerFunc(&streamer_EdbPeakProb);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPeakProb*)
   {
      return GenerateInitInstanceLocal((::EdbPeakProb*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPeakProb*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbTestAl_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbTestAl(void *p = 0);
   static void *newArray_EdbTestAl(Long_t size, void *p);
   static void delete_EdbTestAl(void *p);
   static void deleteArray_EdbTestAl(void *p);
   static void destruct_EdbTestAl(void *p);
   static void streamer_EdbTestAl(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbTestAl*)
   {
      ::EdbTestAl *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbTestAl >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbTestAl", ::EdbTestAl::Class_Version(), "./EdbTestAl.h", 12,
                  typeid(::EdbTestAl), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbTestAl::Dictionary, isa_proxy, 0,
                  sizeof(::EdbTestAl) );
      instance.SetNew(&new_EdbTestAl);
      instance.SetNewArray(&newArray_EdbTestAl);
      instance.SetDelete(&delete_EdbTestAl);
      instance.SetDeleteArray(&deleteArray_EdbTestAl);
      instance.SetDestructor(&destruct_EdbTestAl);
      instance.SetStreamerFunc(&streamer_EdbTestAl);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbTestAl*)
   {
      return GenerateInitInstanceLocal((::EdbTestAl*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbTestAl*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbAlignmentV_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbAlignmentV(void *p = 0);
   static void *newArray_EdbAlignmentV(Long_t size, void *p);
   static void delete_EdbAlignmentV(void *p);
   static void deleteArray_EdbAlignmentV(void *p);
   static void destruct_EdbAlignmentV(void *p);
   static void streamer_EdbAlignmentV(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbAlignmentV*)
   {
      ::EdbAlignmentV *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbAlignmentV >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbAlignmentV", ::EdbAlignmentV::Class_Version(), "./EdbAlignmentV.h", 13,
                  typeid(::EdbAlignmentV), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbAlignmentV::Dictionary, isa_proxy, 0,
                  sizeof(::EdbAlignmentV) );
      instance.SetNew(&new_EdbAlignmentV);
      instance.SetNewArray(&newArray_EdbAlignmentV);
      instance.SetDelete(&delete_EdbAlignmentV);
      instance.SetDeleteArray(&deleteArray_EdbAlignmentV);
      instance.SetDestructor(&destruct_EdbAlignmentV);
      instance.SetStreamerFunc(&streamer_EdbAlignmentV);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbAlignmentV*)
   {
      return GenerateInitInstanceLocal((::EdbAlignmentV*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbAlignmentV*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPlateAlignment_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPlateAlignment(void *p = 0);
   static void *newArray_EdbPlateAlignment(Long_t size, void *p);
   static void delete_EdbPlateAlignment(void *p);
   static void deleteArray_EdbPlateAlignment(void *p);
   static void destruct_EdbPlateAlignment(void *p);
   static void streamer_EdbPlateAlignment(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPlateAlignment*)
   {
      ::EdbPlateAlignment *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPlateAlignment >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPlateAlignment", ::EdbPlateAlignment::Class_Version(), "./EdbPlateAlignment.h", 8,
                  typeid(::EdbPlateAlignment), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPlateAlignment::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPlateAlignment) );
      instance.SetNew(&new_EdbPlateAlignment);
      instance.SetNewArray(&newArray_EdbPlateAlignment);
      instance.SetDelete(&delete_EdbPlateAlignment);
      instance.SetDeleteArray(&deleteArray_EdbPlateAlignment);
      instance.SetDestructor(&destruct_EdbPlateAlignment);
      instance.SetStreamerFunc(&streamer_EdbPlateAlignment);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPlateAlignment*)
   {
      return GenerateInitInstanceLocal((::EdbPlateAlignment*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPlateAlignment*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbLinking_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbLinking(void *p = 0);
   static void *newArray_EdbLinking(Long_t size, void *p);
   static void delete_EdbLinking(void *p);
   static void deleteArray_EdbLinking(void *p);
   static void destruct_EdbLinking(void *p);
   static void streamer_EdbLinking(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbLinking*)
   {
      ::EdbLinking *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbLinking >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbLinking", ::EdbLinking::Class_Version(), "./EdbLinking.h", 11,
                  typeid(::EdbLinking), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbLinking::Dictionary, isa_proxy, 0,
                  sizeof(::EdbLinking) );
      instance.SetNew(&new_EdbLinking);
      instance.SetNewArray(&newArray_EdbLinking);
      instance.SetDelete(&delete_EdbLinking);
      instance.SetDeleteArray(&deleteArray_EdbLinking);
      instance.SetDestructor(&destruct_EdbLinking);
      instance.SetStreamerFunc(&streamer_EdbLinking);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbLinking*)
   {
      return GenerateInitInstanceLocal((::EdbLinking*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbLinking*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbCorrectionBin_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbCorrectionBin(void *p = 0);
   static void *newArray_EdbCorrectionBin(Long_t size, void *p);
   static void delete_EdbCorrectionBin(void *p);
   static void deleteArray_EdbCorrectionBin(void *p);
   static void destruct_EdbCorrectionBin(void *p);
   static void streamer_EdbCorrectionBin(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbCorrectionBin*)
   {
      ::EdbCorrectionBin *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbCorrectionBin >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbCorrectionBin", ::EdbCorrectionBin::Class_Version(), "./EdbCorrectionMapper.h", 11,
                  typeid(::EdbCorrectionBin), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbCorrectionBin::Dictionary, isa_proxy, 0,
                  sizeof(::EdbCorrectionBin) );
      instance.SetNew(&new_EdbCorrectionBin);
      instance.SetNewArray(&newArray_EdbCorrectionBin);
      instance.SetDelete(&delete_EdbCorrectionBin);
      instance.SetDeleteArray(&deleteArray_EdbCorrectionBin);
      instance.SetDestructor(&destruct_EdbCorrectionBin);
      instance.SetStreamerFunc(&streamer_EdbCorrectionBin);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbCorrectionBin*)
   {
      return GenerateInitInstanceLocal((::EdbCorrectionBin*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbCorrectionBin*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbCorrectionMapper_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbCorrectionMapper(void *p = 0);
   static void *newArray_EdbCorrectionMapper(Long_t size, void *p);
   static void delete_EdbCorrectionMapper(void *p);
   static void deleteArray_EdbCorrectionMapper(void *p);
   static void destruct_EdbCorrectionMapper(void *p);
   static void streamer_EdbCorrectionMapper(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbCorrectionMapper*)
   {
      ::EdbCorrectionMapper *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbCorrectionMapper >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbCorrectionMapper", ::EdbCorrectionMapper::Class_Version(), "./EdbCorrectionMapper.h", 32,
                  typeid(::EdbCorrectionMapper), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbCorrectionMapper::Dictionary, isa_proxy, 0,
                  sizeof(::EdbCorrectionMapper) );
      instance.SetNew(&new_EdbCorrectionMapper);
      instance.SetNewArray(&newArray_EdbCorrectionMapper);
      instance.SetDelete(&delete_EdbCorrectionMapper);
      instance.SetDeleteArray(&deleteArray_EdbCorrectionMapper);
      instance.SetDestructor(&destruct_EdbCorrectionMapper);
      instance.SetStreamerFunc(&streamer_EdbCorrectionMapper);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbCorrectionMapper*)
   {
      return GenerateInitInstanceLocal((::EdbCorrectionMapper*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbCorrectionMapper*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr EdbPatCell2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPatCell2::Class_Name()
{
   return "EdbPatCell2";
}

//______________________________________________________________________________
const char *EdbPatCell2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatCell2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPatCell2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatCell2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPatCell2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatCell2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPatCell2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatCell2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPositionAlignment::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPositionAlignment::Class_Name()
{
   return "EdbPositionAlignment";
}

//______________________________________________________________________________
const char *EdbPositionAlignment::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPositionAlignment*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPositionAlignment::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPositionAlignment*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPositionAlignment::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPositionAlignment*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPositionAlignment::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPositionAlignment*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbAlignmentMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbAlignmentMap::Class_Name()
{
   return "EdbAlignmentMap";
}

//______________________________________________________________________________
const char *EdbAlignmentMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAlignmentMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbAlignmentMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAlignmentMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbAlignmentMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAlignmentMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbAlignmentMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAlignmentMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPeakProb::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPeakProb::Class_Name()
{
   return "EdbPeakProb";
}

//______________________________________________________________________________
const char *EdbPeakProb::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPeakProb*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPeakProb::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPeakProb*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPeakProb::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPeakProb*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPeakProb::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPeakProb*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbTestAl::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbTestAl::Class_Name()
{
   return "EdbTestAl";
}

//______________________________________________________________________________
const char *EdbTestAl::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTestAl*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbTestAl::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTestAl*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbTestAl::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTestAl*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbTestAl::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTestAl*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbAlignmentV::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbAlignmentV::Class_Name()
{
   return "EdbAlignmentV";
}

//______________________________________________________________________________
const char *EdbAlignmentV::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAlignmentV*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbAlignmentV::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAlignmentV*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbAlignmentV::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAlignmentV*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbAlignmentV::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAlignmentV*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPlateAlignment::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPlateAlignment::Class_Name()
{
   return "EdbPlateAlignment";
}

//______________________________________________________________________________
const char *EdbPlateAlignment::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateAlignment*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPlateAlignment::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateAlignment*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPlateAlignment::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateAlignment*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPlateAlignment::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateAlignment*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbLinking::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbLinking::Class_Name()
{
   return "EdbLinking";
}

//______________________________________________________________________________
const char *EdbLinking::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbLinking*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbLinking::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbLinking*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbLinking::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbLinking*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbLinking::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbLinking*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbCorrectionBin::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbCorrectionBin::Class_Name()
{
   return "EdbCorrectionBin";
}

//______________________________________________________________________________
const char *EdbCorrectionBin::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionBin*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbCorrectionBin::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionBin*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbCorrectionBin::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionBin*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbCorrectionBin::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionBin*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbCorrectionMapper::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbCorrectionMapper::Class_Name()
{
   return "EdbCorrectionMapper";
}

//______________________________________________________________________________
const char *EdbCorrectionMapper::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionMapper*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbCorrectionMapper::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionMapper*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbCorrectionMapper::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionMapper*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbCorrectionMapper::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCorrectionMapper*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void EdbPatCell2::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPatCell2.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbCell2::Streamer(R__b);
      R__b >> eDXlim;
      R__b >> eDYlim;
      R__b >> eDTXlim;
      R__b >> eDTYlim;
      R__b >> eXmarg;
      R__b >> eYmarg;
      R__b >> eApplyCorr;
      R__b >> eDX;
      R__b >> eDY;
      R__b >> eDZ;
      R__b >> eShr;
      R__b >> eDTX;
      R__b >> eDTY;
      R__b >> ePhi;
      R__b >> eDoubletsRate;
      R__b.CheckByteCount(R__s, R__c, EdbPatCell2::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPatCell2::IsA(), kTRUE);
      EdbCell2::Streamer(R__b);
      R__b << eDXlim;
      R__b << eDYlim;
      R__b << eDTXlim;
      R__b << eDTYlim;
      R__b << eXmarg;
      R__b << eYmarg;
      R__b << eApplyCorr;
      R__b << eDX;
      R__b << eDY;
      R__b << eDZ;
      R__b << eShr;
      R__b << eDTX;
      R__b << eDTY;
      R__b << ePhi;
      R__b << (TObject*)eDoubletsRate;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPatCell2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPatCell2.
      typedef ::EdbPatCell2 msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDXlim", &eDXlim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDYlim", &eDYlim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTXlim", &eDTXlim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTYlim", &eDTYlim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmarg", &eXmarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmarg", &eYmarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eApplyCorr", &eApplyCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDX", &eDX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDY", &eDY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZ", &eDZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eShr", &eShr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTX", &eDTX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTY", &eDTY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePhi", &ePhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eDoubletsRate", &eDoubletsRate);
      EdbCell2::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPatCell2(void *p) {
      return  p ? new(p) ::EdbPatCell2 : new ::EdbPatCell2;
   }
   static void *newArray_EdbPatCell2(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPatCell2[nElements] : new ::EdbPatCell2[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPatCell2(void *p) {
      delete ((::EdbPatCell2*)p);
   }
   static void deleteArray_EdbPatCell2(void *p) {
      delete [] ((::EdbPatCell2*)p);
   }
   static void destruct_EdbPatCell2(void *p) {
      typedef ::EdbPatCell2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPatCell2(TBuffer &buf, void *obj) {
      ((::EdbPatCell2*)obj)->::EdbPatCell2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPatCell2

//______________________________________________________________________________
void EdbPositionAlignment::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPositionAlignment.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      ePC1.Streamer(R__b);
      ePC2.Streamer(R__b);
      eComb1.Streamer(R__b);
      eComb2.Streamer(R__b);
      eTracks.Streamer(R__b);
      eSegCouples.Streamer(R__b);
      ePC.Streamer(R__b);
      R__b >> eX0;
      R__b >> eY0;
      R__b >> eXcell;
      R__b >> eYcell;
      R__b >> eDTXmax;
      R__b >> eDTYmax;
      R__b >> eBinX;
      R__b >> eBinY;
      R__b >> eDXmin;
      R__b >> eDYmin;
      R__b >> eDTXmin;
      R__b >> eDTYmin;
      R__b >> eRpeak;
      R__b >> eZ1from;
      R__b >> eZ1to;
      R__b >> eZ2from;
      R__b >> eZ2to;
      R__b >> eNZ1step;
      R__b >> eNZ2step;
      R__b >> eZ1peak;
      R__b >> eZ2peak;
      R__b >> eXpeak;
      R__b >> eYpeak;
      R__b >> eNpeak;
      R__b >> eAff;
      eHpeak.Streamer(R__b);
      eHDZ.Streamer(R__b);
      eSmoothKernel.Streamer(R__b);
      R__b >> ePosTree;
      R__b >> eS0x;
      R__b >> eS0y;
      R__b >> eS0tx;
      R__b >> eS0ty;
      R__b >> eWbaseMin;
      R__b >> eChi2Max;
      R__b >> eShr1from;
      R__b >> eShr1to;
      R__b >> eShr2from;
      R__b >> eShr2to;
      R__b >> eNShr1step;
      R__b >> eNShr2step;
      eHShr1.Streamer(R__b);
      eHShr2.Streamer(R__b);
      R__b >> eDoRot;
      eRot.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbPositionAlignment::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPositionAlignment::IsA(), kTRUE);
      TObject::Streamer(R__b);
      ePC1.Streamer(R__b);
      ePC2.Streamer(R__b);
      eComb1.Streamer(R__b);
      eComb2.Streamer(R__b);
      eTracks.Streamer(R__b);
      eSegCouples.Streamer(R__b);
      ePC.Streamer(R__b);
      R__b << eX0;
      R__b << eY0;
      R__b << eXcell;
      R__b << eYcell;
      R__b << eDTXmax;
      R__b << eDTYmax;
      R__b << eBinX;
      R__b << eBinY;
      R__b << eDXmin;
      R__b << eDYmin;
      R__b << eDTXmin;
      R__b << eDTYmin;
      R__b << eRpeak;
      R__b << eZ1from;
      R__b << eZ1to;
      R__b << eZ2from;
      R__b << eZ2to;
      R__b << eNZ1step;
      R__b << eNZ2step;
      R__b << eZ1peak;
      R__b << eZ2peak;
      R__b << eXpeak;
      R__b << eYpeak;
      R__b << eNpeak;
      R__b << eAff;
      eHpeak.Streamer(R__b);
      eHDZ.Streamer(R__b);
      eSmoothKernel.Streamer(R__b);
      R__b << ePosTree;
      R__b << eS0x;
      R__b << eS0y;
      R__b << eS0tx;
      R__b << eS0ty;
      R__b << eWbaseMin;
      R__b << eChi2Max;
      R__b << eShr1from;
      R__b << eShr1to;
      R__b << eShr2from;
      R__b << eShr2to;
      R__b << eNShr1step;
      R__b << eNShr2step;
      eHShr1.Streamer(R__b);
      eHShr2.Streamer(R__b);
      R__b << eDoRot;
      eRot.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPositionAlignment::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPositionAlignment.
      typedef ::EdbPositionAlignment msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePC1", &ePC1);
      R__insp.InspectMember(ePC1, "ePC1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePC2", &ePC2);
      R__insp.InspectMember(ePC2, "ePC2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eComb1", &eComb1);
      R__insp.InspectMember(eComb1, "eComb1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eComb2", &eComb2);
      R__insp.InspectMember(eComb2, "eComb2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTracks", &eTracks);
      R__insp.InspectMember(eTracks, "eTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSegCouples", &eSegCouples);
      R__insp.InspectMember(eSegCouples, "eSegCouples.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePC", &ePC);
      R__insp.InspectMember(ePC, "ePC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX0", &eX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY0", &eY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXcell", &eXcell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYcell", &eYcell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTXmax", &eDTXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTYmax", &eDTYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinX", &eBinX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinY", &eBinY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDXmin", &eDXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDYmin", &eDYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTXmin", &eDTXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTYmin", &eDTYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRpeak", &eRpeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ1from", &eZ1from);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ1to", &eZ1to);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ2from", &eZ2from);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ2to", &eZ2to);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNZ1step", &eNZ1step);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNZ2step", &eNZ2step);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ1peak", &eZ1peak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ2peak", &eZ2peak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXpeak", &eXpeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYpeak", &eYpeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNpeak", &eNpeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eAff", &eAff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHpeak", &eHpeak);
      R__insp.InspectMember(eHpeak, "eHpeak.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHDZ", &eHDZ);
      R__insp.InspectMember(eHDZ, "eHDZ.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSmoothKernel", &eSmoothKernel);
      R__insp.InspectMember(eSmoothKernel, "eSmoothKernel.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePosTree", &ePosTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS0x", &eS0x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS0y", &eS0y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS0tx", &eS0tx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS0ty", &eS0ty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eWbaseMin", &eWbaseMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2Max", &eChi2Max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eShr1from", &eShr1from);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eShr1to", &eShr1to);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eShr2from", &eShr2from);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eShr2to", &eShr2to);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNShr1step", &eNShr1step);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNShr2step", &eNShr2step);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHShr1", &eHShr1);
      R__insp.InspectMember(eHShr1, "eHShr1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHShr2", &eHShr2);
      R__insp.InspectMember(eHShr2, "eHShr2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoRot", &eDoRot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRot", &eRot);
      R__insp.InspectMember(eRot, "eRot.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPositionAlignment(void *p) {
      return  p ? new(p) ::EdbPositionAlignment : new ::EdbPositionAlignment;
   }
   static void *newArray_EdbPositionAlignment(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPositionAlignment[nElements] : new ::EdbPositionAlignment[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPositionAlignment(void *p) {
      delete ((::EdbPositionAlignment*)p);
   }
   static void deleteArray_EdbPositionAlignment(void *p) {
      delete [] ((::EdbPositionAlignment*)p);
   }
   static void destruct_EdbPositionAlignment(void *p) {
      typedef ::EdbPositionAlignment current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPositionAlignment(TBuffer &buf, void *obj) {
      ((::EdbPositionAlignment*)obj)->::EdbPositionAlignment::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPositionAlignment

//______________________________________________________________________________
void EdbAlignmentMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbAlignmentMap.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eEnv;
      R__b >> ePat1;
      R__b >> ePat2;
      R__b >> eDensityMax;
      R__b >> ePlate;
      eGlobal.Streamer(R__b);
      eGV1.Streamer(R__b);
      eGV2.Streamer(R__b);
      R__b >> eXcell;
      R__b >> eYcell;
      R__b >> eNx;
      R__b >> eNy;
      eMap.Streamer(R__b);
      R__b >> eGraphDX;
      R__b >> eGraphDY;
      R__b >> eGraphDZ1;
      R__b >> eGraphDZ2;
      R__b >> eOutputFile;
      R__b >> eMapTree;
      R__b.CheckByteCount(R__s, R__c, EdbAlignmentMap::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbAlignmentMap::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eEnv;
      R__b << ePat1;
      R__b << ePat2;
      R__b << eDensityMax;
      R__b << ePlate;
      eGlobal.Streamer(R__b);
      eGV1.Streamer(R__b);
      eGV2.Streamer(R__b);
      R__b << eXcell;
      R__b << eYcell;
      R__b << eNx;
      R__b << eNy;
      eMap.Streamer(R__b);
      R__b << eGraphDX;
      R__b << eGraphDY;
      R__b << eGraphDZ1;
      R__b << eGraphDZ2;
      R__b << eOutputFile;
      R__b << eMapTree;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbAlignmentMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbAlignmentMap.
      typedef ::EdbAlignmentMap msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eEnv", &eEnv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePat1", &ePat1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePat2", &ePat2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDensityMax", &eDensityMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePlate", &ePlate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eGlobal", &eGlobal);
      R__insp.InspectMember(eGlobal, "eGlobal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eGV1", &eGV1);
      R__insp.InspectMember(eGV1, "eGV1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eGV2", &eGV2);
      R__insp.InspectMember(eGV2, "eGV2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXcell", &eXcell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYcell", &eYcell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNx", &eNx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNy", &eNy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMap", &eMap);
      R__insp.InspectMember(eMap, "eMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGraphDX", &eGraphDX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGraphDY", &eGraphDY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGraphDZ1", &eGraphDZ1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGraphDZ2", &eGraphDZ2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eOutputFile", &eOutputFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eMapTree", &eMapTree);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbAlignmentMap(void *p) {
      return  p ? new(p) ::EdbAlignmentMap : new ::EdbAlignmentMap;
   }
   static void *newArray_EdbAlignmentMap(Long_t nElements, void *p) {
      return p ? new(p) ::EdbAlignmentMap[nElements] : new ::EdbAlignmentMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbAlignmentMap(void *p) {
      delete ((::EdbAlignmentMap*)p);
   }
   static void deleteArray_EdbAlignmentMap(void *p) {
      delete [] ((::EdbAlignmentMap*)p);
   }
   static void destruct_EdbAlignmentMap(void *p) {
      typedef ::EdbAlignmentMap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbAlignmentMap(TBuffer &buf, void *obj) {
      ((::EdbAlignmentMap*)obj)->::EdbAlignmentMap::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbAlignmentMap

//______________________________________________________________________________
void EdbPeakProb::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPeakProb.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> ePeakRMSmin;
      R__b >> ePeakRMSmax;
      R__b >> ePeakNmin;
      R__b >> ePeakNmax;
      R__b >> ePeakRMS;
      R__b >> ePeakX;
      R__b >> ePeakY;
      R__b >> eProb;
      R__b >> eHD;
      R__b >> eHbin;
      R__b >> eHpeak;
      R__b >> eVerbosity;
      R__b.CheckByteCount(R__s, R__c, EdbPeakProb::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPeakProb::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << ePeakRMSmin;
      R__b << ePeakRMSmax;
      R__b << ePeakNmin;
      R__b << ePeakNmax;
      R__b << ePeakRMS;
      R__b << ePeakX;
      R__b << ePeakY;
      R__b << eProb;
      R__b << (TObject*)eHD;
      R__b << (TObject*)eHbin;
      R__b << (TObject*)eHpeak;
      R__b << eVerbosity;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPeakProb::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPeakProb.
      typedef ::EdbPeakProb msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePeakRMSmin", &ePeakRMSmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePeakRMSmax", &ePeakRMSmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePeakNmin", &ePeakNmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePeakNmax", &ePeakNmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePeakRMS", &ePeakRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePeakX", &ePeakX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePeakY", &ePeakY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eProb", &eProb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHD", &eHD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHbin", &eHbin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHpeak", &eHpeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVerbosity", &eVerbosity);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPeakProb(void *p) {
      return  p ? new(p) ::EdbPeakProb : new ::EdbPeakProb;
   }
   static void *newArray_EdbPeakProb(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPeakProb[nElements] : new ::EdbPeakProb[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPeakProb(void *p) {
      delete ((::EdbPeakProb*)p);
   }
   static void deleteArray_EdbPeakProb(void *p) {
      delete [] ((::EdbPeakProb*)p);
   }
   static void destruct_EdbPeakProb(void *p) {
      typedef ::EdbPeakProb current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPeakProb(TBuffer &buf, void *obj) {
      ((::EdbPeakProb*)obj)->::EdbPeakProb::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPeakProb

//______________________________________________________________________________
void EdbAlignmentV::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbAlignmentV.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((float*)eDVsame);
      int R__i;
      for (R__i = 0; R__i < 2; R__i++)
         ePC[R__i].Streamer(R__b);
      R__b >> eXmarg;
      R__b >> eYmarg;
      for (R__i = 0; R__i < 2; R__i++)
         eS[R__i].Streamer(R__b);
      R__b >> eUseAffCorr;
      for (R__i = 0; R__i < 2; R__i++)
         eCorr[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 2; R__i++)
         eCorrL[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 14; R__i++)
         eH[0][R__i].Streamer(R__b);
      eHxy.Streamer(R__b);
      R__b >> eDoubletsRate;
      R__b >> eOutputFile;
      R__b.CheckByteCount(R__s, R__c, EdbAlignmentV::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbAlignmentV::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(eDVsame, 4);
      int R__i;
      for (R__i = 0; R__i < 2; R__i++)
         ePC[R__i].Streamer(R__b);
      R__b << eXmarg;
      R__b << eYmarg;
      for (R__i = 0; R__i < 2; R__i++)
         eS[R__i].Streamer(R__b);
      R__b << eUseAffCorr;
      for (R__i = 0; R__i < 2; R__i++)
         eCorr[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 2; R__i++)
         eCorrL[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 14; R__i++)
         eH[0][R__i].Streamer(R__b);
      eHxy.Streamer(R__b);
      R__b << (TObject*)eDoubletsRate;
      R__b << eOutputFile;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbAlignmentV::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbAlignmentV.
      typedef ::EdbAlignmentV msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDVsame[4]", eDVsame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePC[2]", ePC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmarg", &eXmarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmarg", &eYmarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS[2]", eS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eUseAffCorr", &eUseAffCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCorr[2]", eCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCorrL[2]", eCorrL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eH[2][7]", eH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHxy", &eHxy);
      R__insp.InspectMember(eHxy, "eHxy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eDoubletsRate", &eDoubletsRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eOutputFile", &eOutputFile);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbAlignmentV(void *p) {
      return  p ? new(p) ::EdbAlignmentV : new ::EdbAlignmentV;
   }
   static void *newArray_EdbAlignmentV(Long_t nElements, void *p) {
      return p ? new(p) ::EdbAlignmentV[nElements] : new ::EdbAlignmentV[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbAlignmentV(void *p) {
      delete ((::EdbAlignmentV*)p);
   }
   static void deleteArray_EdbAlignmentV(void *p) {
      delete [] ((::EdbAlignmentV*)p);
   }
   static void destruct_EdbAlignmentV(void *p) {
      typedef ::EdbAlignmentV current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbAlignmentV(TBuffer &buf, void *obj) {
      ((::EdbAlignmentV*)obj)->::EdbAlignmentV::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbAlignmentV

//______________________________________________________________________________
void EdbTestAl::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbTestAl.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eITMAX;
      R__b >> eOCMAX;
      R__b >> eOffset;
      R__b >> eBinSize;
      R__b >> eS1;
      R__b >> eS2;
      R__b >> eBinTree;
      R__b >> eT;
      R__b >> eFile;
      R__b >> HD;
      R__b >> HDF;
      R__b >> HDF2;
      R__b.ReadStaticArray((int*)eN);
      R__b.ReadStaticArray((float*)eDmin);
      R__b.ReadStaticArray((float*)eDmax);
      R__b.ReadStaticArray((float*)eD0);
      R__b >> eMaxBin;
      R__b.CheckByteCount(R__s, R__c, EdbTestAl::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbTestAl::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eITMAX;
      R__b << eOCMAX;
      R__b << eOffset;
      R__b << eBinSize;
      R__b << eS1;
      R__b << eS2;
      R__b << eBinTree;
      R__b << eT;
      R__b << eFile;
      R__b << (TObject*)HD;
      R__b << (TObject*)HDF;
      R__b << (TObject*)HDF2;
      R__b.WriteArray(eN, 4);
      R__b.WriteArray(eDmin, 4);
      R__b.WriteArray(eDmax, 4);
      R__b.WriteArray(eD0, 4);
      R__b << eMaxBin;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbTestAl::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbTestAl.
      typedef ::EdbTestAl msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eITMAX", &eITMAX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eOCMAX", &eOCMAX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eOffset", &eOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinSize", &eBinSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eS1", &eS1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eS2", &eS2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eBinTree", &eBinTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eT", &eT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFile", &eFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*HD", &HD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*HDF", &HDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*HDF2", &HDF2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eN[4]", eN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDmin[4]", eDmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDmax[4]", eDmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eD0[4]", eD0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMaxBin", &eMaxBin);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbTestAl(void *p) {
      return  p ? new(p) ::EdbTestAl : new ::EdbTestAl;
   }
   static void *newArray_EdbTestAl(Long_t nElements, void *p) {
      return p ? new(p) ::EdbTestAl[nElements] : new ::EdbTestAl[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbTestAl(void *p) {
      delete ((::EdbTestAl*)p);
   }
   static void deleteArray_EdbTestAl(void *p) {
      delete [] ((::EdbTestAl*)p);
   }
   static void destruct_EdbTestAl(void *p) {
      typedef ::EdbTestAl current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbTestAl(TBuffer &buf, void *obj) {
      ((::EdbTestAl*)obj)->::EdbTestAl::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbTestAl

//______________________________________________________________________________
void EdbPlateAlignment::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPlateAlignment.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbAlignmentV::Streamer(R__b);
      R__b.ReadStaticArray((float*)eSigma);
      R__b >> eOffsetMax;
      R__b >> eDZ;
      R__b >> eDPHI;
      R__b >> eDoTestAl;
      R__b >> eTestAlOK;
      R__b >> eDoCoarse;
      R__b >> eCoarseOK;
      R__b >> eDoFine;
      R__b >> eFineOK;
      R__b >> eSaveCouples;
      R__b >> eStatus;
      R__b >> eNcoins;
      R__b >> eFineMin;
      R__b >> eCoarseMin;
      eH_zphi_coarse.Streamer(R__b);
      eH_xy_coarse.Streamer(R__b);
      eH_xy_final.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbPlateAlignment::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPlateAlignment::IsA(), kTRUE);
      EdbAlignmentV::Streamer(R__b);
      R__b.WriteArray(eSigma, 2);
      R__b << eOffsetMax;
      R__b << eDZ;
      R__b << eDPHI;
      R__b << eDoTestAl;
      R__b << eTestAlOK;
      R__b << eDoCoarse;
      R__b << eCoarseOK;
      R__b << eDoFine;
      R__b << eFineOK;
      R__b << eSaveCouples;
      R__b << eStatus;
      R__b << eNcoins;
      R__b << eFineMin;
      R__b << eCoarseMin;
      eH_zphi_coarse.Streamer(R__b);
      eH_xy_coarse.Streamer(R__b);
      eH_xy_final.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPlateAlignment::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPlateAlignment.
      typedef ::EdbPlateAlignment msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigma[2]", eSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eOffsetMax", &eOffsetMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZ", &eDZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDPHI", &eDPHI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoTestAl", &eDoTestAl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTestAlOK", &eTestAlOK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoCoarse", &eDoCoarse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCoarseOK", &eCoarseOK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoFine", &eDoFine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFineOK", &eFineOK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSaveCouples", &eSaveCouples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStatus", &eStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNcoins", &eNcoins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFineMin", &eFineMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCoarseMin", &eCoarseMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eH_zphi_coarse", &eH_zphi_coarse);
      R__insp.InspectMember(eH_zphi_coarse, "eH_zphi_coarse.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eH_xy_coarse", &eH_xy_coarse);
      R__insp.InspectMember(eH_xy_coarse, "eH_xy_coarse.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eH_xy_final", &eH_xy_final);
      R__insp.InspectMember(eH_xy_final, "eH_xy_final.");
      EdbAlignmentV::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPlateAlignment(void *p) {
      return  p ? new(p) ::EdbPlateAlignment : new ::EdbPlateAlignment;
   }
   static void *newArray_EdbPlateAlignment(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPlateAlignment[nElements] : new ::EdbPlateAlignment[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPlateAlignment(void *p) {
      delete ((::EdbPlateAlignment*)p);
   }
   static void deleteArray_EdbPlateAlignment(void *p) {
      delete [] ((::EdbPlateAlignment*)p);
   }
   static void destruct_EdbPlateAlignment(void *p) {
      typedef ::EdbPlateAlignment current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPlateAlignment(TBuffer &buf, void *obj) {
      ((::EdbPlateAlignment*)obj)->::EdbPlateAlignment::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPlateAlignment

//______________________________________________________________________________
void EdbLinking::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbLinking.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbAlignmentV::Streamer(R__b);
      R__b >> eDoSaveCouples;
      R__b >> eDoCorrectAngles;
      R__b >> eDoCorrectShrinkage;
      R__b >> eDoFullLinking;
      R__b >> eDoDumpDoubletsTree;
      R__b >> eCPRankingAlg;
      R__b >> eDRfull;
      R__b >> eDTfull;
      R__b >> eCHI2Pmax;
      R__b >> eChi2Acorr;
      R__b >> eNsigmaEQshr;
      R__b >> eNsigmaEQlnk;
      R__b >> eShr0;
      R__b >> eDShr;
      R__b >> eBinOK;
      eCond.Streamer(R__b);
      R__b.ReadStaticArray((int*)eNshr);
      R__b >> eNcorrMin;
      eSegCouples.Streamer(R__b);
      eL1.Streamer(R__b);
      eL2.Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 2; R__i++)
         eHdxyShr[R__i].Streamer(R__b);
      R__b.StreamObject(&(eRemoveDoublets),typeid(EdbLinking::RemoveDoublets));
      R__b.CheckByteCount(R__s, R__c, EdbLinking::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbLinking::IsA(), kTRUE);
      EdbAlignmentV::Streamer(R__b);
      R__b << eDoSaveCouples;
      R__b << eDoCorrectAngles;
      R__b << eDoCorrectShrinkage;
      R__b << eDoFullLinking;
      R__b << eDoDumpDoubletsTree;
      R__b << eCPRankingAlg;
      R__b << eDRfull;
      R__b << eDTfull;
      R__b << eCHI2Pmax;
      R__b << eChi2Acorr;
      R__b << eNsigmaEQshr;
      R__b << eNsigmaEQlnk;
      R__b << eShr0;
      R__b << eDShr;
      R__b << eBinOK;
      eCond.Streamer(R__b);
      R__b.WriteArray(eNshr, 2);
      R__b << eNcorrMin;
      eSegCouples.Streamer(R__b);
      eL1.Streamer(R__b);
      eL2.Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 2; R__i++)
         eHdxyShr[R__i].Streamer(R__b);
      R__b.StreamObject(&(eRemoveDoublets),typeid(EdbLinking::RemoveDoublets));
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbLinking::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbLinking.
      typedef ::EdbLinking msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoSaveCouples", &eDoSaveCouples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoCorrectAngles", &eDoCorrectAngles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoCorrectShrinkage", &eDoCorrectShrinkage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoFullLinking", &eDoFullLinking);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoDumpDoubletsTree", &eDoDumpDoubletsTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCPRankingAlg", &eCPRankingAlg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDRfull", &eDRfull);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTfull", &eDTfull);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCHI2Pmax", &eCHI2Pmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2Acorr", &eChi2Acorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNsigmaEQshr", &eNsigmaEQshr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNsigmaEQlnk", &eNsigmaEQlnk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eShr0", &eShr0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDShr", &eDShr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinOK", &eBinOK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCond", &eCond);
      R__insp.InspectMember(eCond, "eCond.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNshr[2]", eNshr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNcorrMin", &eNcorrMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSegCouples", &eSegCouples);
      R__insp.InspectMember(eSegCouples, "eSegCouples.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eL1", &eL1);
      R__insp.InspectMember(eL1, "eL1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eL2", &eL2);
      R__insp.InspectMember(eL2, "eL2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHdxyShr[2]", eHdxyShr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRemoveDoublets", (void*)&eRemoveDoublets);
      R__insp.InspectMember("EdbLinking::RemoveDoublets", (void*)&eRemoveDoublets, "eRemoveDoublets.", false);
      EdbAlignmentV::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbLinking(void *p) {
      return  p ? new(p) ::EdbLinking : new ::EdbLinking;
   }
   static void *newArray_EdbLinking(Long_t nElements, void *p) {
      return p ? new(p) ::EdbLinking[nElements] : new ::EdbLinking[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbLinking(void *p) {
      delete ((::EdbLinking*)p);
   }
   static void deleteArray_EdbLinking(void *p) {
      delete [] ((::EdbLinking*)p);
   }
   static void destruct_EdbLinking(void *p) {
      typedef ::EdbLinking current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbLinking(TBuffer &buf, void *obj) {
      ((::EdbLinking*)obj)->::EdbLinking::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbLinking

//______________________________________________________________________________
void EdbCorrectionMapper::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbCorrectionMapper.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbCorrectionBin::Streamer(R__b);
      eMapAl.Streamer(R__b);
      eMap.Streamer(R__b);
      eHdxy.Streamer(R__b);
      eHdtxy.Streamer(R__b);
      eHdz.Streamer(R__b);
      eHshr.Streamer(R__b);
      eHdty_ty.Streamer(R__b);
      eHxy1.Streamer(R__b);
      eHxy2.Streamer(R__b);
      eHtxty1.Streamer(R__b);
      eHtxty2.Streamer(R__b);
      eID1.Streamer(R__b);
      eID2.Streamer(R__b);
      R__b >> eZ1;
      R__b >> eZ2;
      R__b >> eNcpMin;
      R__b.CheckByteCount(R__s, R__c, EdbCorrectionMapper::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbCorrectionMapper::IsA(), kTRUE);
      EdbCorrectionBin::Streamer(R__b);
      eMapAl.Streamer(R__b);
      eMap.Streamer(R__b);
      eHdxy.Streamer(R__b);
      eHdtxy.Streamer(R__b);
      eHdz.Streamer(R__b);
      eHshr.Streamer(R__b);
      eHdty_ty.Streamer(R__b);
      eHxy1.Streamer(R__b);
      eHxy2.Streamer(R__b);
      eHtxty1.Streamer(R__b);
      eHtxty2.Streamer(R__b);
      eID1.Streamer(R__b);
      eID2.Streamer(R__b);
      R__b << eZ1;
      R__b << eZ2;
      R__b << eNcpMin;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbCorrectionMapper::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbCorrectionMapper.
      typedef ::EdbCorrectionMapper msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMapAl", &eMapAl);
      R__insp.InspectMember(eMapAl, "eMapAl.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMap", &eMap);
      R__insp.InspectMember(eMap, "eMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHdxy", &eHdxy);
      R__insp.InspectMember(eHdxy, "eHdxy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHdtxy", &eHdtxy);
      R__insp.InspectMember(eHdtxy, "eHdtxy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHdz", &eHdz);
      R__insp.InspectMember(eHdz, "eHdz.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHshr", &eHshr);
      R__insp.InspectMember(eHshr, "eHshr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHdty_ty", &eHdty_ty);
      R__insp.InspectMember(eHdty_ty, "eHdty_ty.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHxy1", &eHxy1);
      R__insp.InspectMember(eHxy1, "eHxy1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHxy2", &eHxy2);
      R__insp.InspectMember(eHxy2, "eHxy2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHtxty1", &eHtxty1);
      R__insp.InspectMember(eHtxty1, "eHtxty1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHtxty2", &eHtxty2);
      R__insp.InspectMember(eHtxty2, "eHtxty2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID1", &eID1);
      R__insp.InspectMember(eID1, "eID1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID2", &eID2);
      R__insp.InspectMember(eID2, "eID2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ1", &eZ1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ2", &eZ2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNcpMin", &eNcpMin);
      EdbCorrectionBin::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbCorrectionMapper(void *p) {
      return  p ? new(p) ::EdbCorrectionMapper : new ::EdbCorrectionMapper;
   }
   static void *newArray_EdbCorrectionMapper(Long_t nElements, void *p) {
      return p ? new(p) ::EdbCorrectionMapper[nElements] : new ::EdbCorrectionMapper[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbCorrectionMapper(void *p) {
      delete ((::EdbCorrectionMapper*)p);
   }
   static void deleteArray_EdbCorrectionMapper(void *p) {
      delete [] ((::EdbCorrectionMapper*)p);
   }
   static void destruct_EdbCorrectionMapper(void *p) {
      typedef ::EdbCorrectionMapper current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbCorrectionMapper(TBuffer &buf, void *obj) {
      ((::EdbCorrectionMapper*)obj)->::EdbCorrectionMapper::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbCorrectionMapper

//______________________________________________________________________________
void EdbCorrectionBin::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbCorrectionBin.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      eAl.Streamer(R__b);
      eLayer.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbCorrectionBin::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbCorrectionBin::IsA(), kTRUE);
      TObject::Streamer(R__b);
      eAl.Streamer(R__b);
      eLayer.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbCorrectionBin::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbCorrectionBin.
      typedef ::EdbCorrectionBin msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAl", &eAl);
      R__insp.InspectMember(eAl, "eAl.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eLayer", &eLayer);
      R__insp.InspectMember(eLayer, "eLayer.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbCorrectionBin(void *p) {
      return  p ? new(p) ::EdbCorrectionBin : new ::EdbCorrectionBin;
   }
   static void *newArray_EdbCorrectionBin(Long_t nElements, void *p) {
      return p ? new(p) ::EdbCorrectionBin[nElements] : new ::EdbCorrectionBin[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbCorrectionBin(void *p) {
      delete ((::EdbCorrectionBin*)p);
   }
   static void deleteArray_EdbCorrectionBin(void *p) {
      delete [] ((::EdbCorrectionBin*)p);
   }
   static void destruct_EdbCorrectionBin(void *p) {
      typedef ::EdbCorrectionBin current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbCorrectionBin(TBuffer &buf, void *obj) {
      ((::EdbCorrectionBin*)obj)->::EdbCorrectionBin::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbCorrectionBin

/********************************************************
* AlignmentDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableAlignmentDict();

extern "C" void G__set_cpp_environmentAlignmentDict() {
  G__add_ipath(".");
  G__add_ipath("..\\..\\include");
  G__cpp_reset_tagtableAlignmentDict();
}
#include <new>
extern "C" int G__cpp_dllrevAlignmentDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* EdbPatCell2 */
static int G__AlignmentDict_635_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPatCell2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPatCell2[n];
     } else {
       p = new((void*) gvp) EdbPatCell2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPatCell2;
     } else {
       p = new((void*) gvp) EdbPatCell2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCell2*) G__getstructoffset())->ResetCorr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCell2*) G__getstructoffset())->PrintCorr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCell2*) G__getstructoffset())->InitPat(*(EdbPattern*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCell2*) G__getstructoffset())->InitPatBin(*(EdbPattern*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCell2*) G__getstructoffset())->FillCell(*(EdbPattern*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCell2*) G__getstructoffset())->FillCell(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbPatCell2*) G__getstructoffset())->FillCombinations(*(EdbPatCell2*) libp->para[0].ref, (int*) G__int(libp->para[1])
, *(TObjArray*) libp->para[2].ref, *(TObjArray*) libp->para[3].ref
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbPatCell2*) G__getstructoffset())->FillCombinations(*(EdbPatCell2*) libp->para[0].ref, (int*) G__int(libp->para[1])
, *(TObjArray*) libp->para[2].ref, *(TObjArray*) libp->para[3].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatCell2*) G__getstructoffset())->Xs(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatCell2*) G__getstructoffset())->Ys(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatCell2*) G__getstructoffset())->XsPos(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatCell2*) G__getstructoffset())->YsPos(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatCell2*) G__getstructoffset())->XsRot(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatCell2*) G__getstructoffset())->YsRot(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatCell2*) G__getstructoffset())->TXs(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatCell2*) G__getstructoffset())->TYs(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCell2*) G__getstructoffset())->ApplyCorrections(*(EdbPattern*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCell2*) G__getstructoffset())->ApplyCorrections(*(EdbLayer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCell2*) G__getstructoffset())->AcceptCorrections(*(EdbLayer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPatCell2*) G__getstructoffset())->FillSelectedH2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPatCell2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPatCell2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPatCell2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPatCell2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCell2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPatCell2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPatCell2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPatCell2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_635_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPatCell2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlignmentDict_635_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbPatCell2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbPatCell2(*(EdbPatCell2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPatCell2 G__TEdbPatCell2;
static int G__AlignmentDict_635_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPatCell2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPatCell2*) (soff+(sizeof(EdbPatCell2)*i)))->~G__TEdbPatCell2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPatCell2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPatCell2*) (soff))->~G__TEdbPatCell2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_635_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPatCell2* dest = (EdbPatCell2*) G__getstructoffset();
   *dest = *(EdbPatCell2*) libp->para[0].ref;
   const EdbPatCell2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPositionAlignment */
static int G__AlignmentDict_638_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPositionAlignment* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPositionAlignment[n];
     } else {
       p = new((void*) gvp) EdbPositionAlignment[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPositionAlignment;
     } else {
       p = new((void*) gvp) EdbPositionAlignment;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPositionAlignment));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((EdbPositionAlignment*) G__getstructoffset())->ActivatePosTree((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((EdbPositionAlignment*) G__getstructoffset())->ActivatePosTree());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->WritePosTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->ReadPosTree((TTree*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])
, (EdbPattern*) G__int(libp->para[2]), (EdbPattern*) G__int(libp->para[3])
, (TEventList*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->ReadPosTree((TTree*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])
, (EdbPattern*) G__int(libp->para[2]), (EdbPattern*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->ReadPosTree((TTree*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])
, (EdbPattern*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->ReadPosTree((TTree*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->ReadPosTree((TTree*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->FillPosTree((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->PrintStat();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->PrintSummary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->Align());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->SelectZone((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, *(TObjArray*) libp->para[2].ref, *(TObjArray*) libp->para[3].ref
, (float) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->SelectZoneSide(*(EdbPatCell2*) libp->para[0].ref, (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), *(TObjArray*) libp->para[3].ref
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->SelectZoneSide(*(EdbPatCell2*) libp->para[0].ref, (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), *(TObjArray*) libp->para[3].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPositionAlignment::SelectBestComptons(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->FillArrays(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->FillArrays(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->SpotsFilterOut((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->DoubletsFilterOut((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->DoubletsFilterOut());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->DoubletsFilterOutSide(*(EdbPatCell2*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->DoubletsFilterOutSide(*(EdbPatCell2*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->FillCombinations());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->FillCombinations(*(EdbPatCell2*) libp->para[0].ref, *(EdbPatCell2*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->SelectNarrowPeakDXDY((float) G__double(libp->para[0]), *(EdbH2*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbPositionAlignment*) G__getstructoffset())->PositionPlotA(*(EdbH2*) libp->para[0].ref, (float) G__double(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (TObjArray*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbPositionAlignment*) G__getstructoffset())->PositionPlotA(*(EdbH2*) libp->para[0].ref, (float) G__double(libp->para[1])
, (TObjArray*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbPositionAlignment*) G__getstructoffset())->PositionPlotA(*(EdbH2*) libp->para[0].ref, (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbPositionAlignment*) G__getstructoffset())->PositionPlotA(*(EdbH2*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->FindDiff(
*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, *(EdbPatCell2*) libp->para[2].ref, *(EdbPatCell2*) libp->para[3].ref
, *(float*) G__Floatref(&libp->para[4]), *(float*) G__Floatref(&libp->para[5])
, *(float*) G__Floatref(&libp->para[6]), *(float*) G__Floatref(&libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->FindDiff12(*(float*) G__Floatref(&libp->para[0]), *(float*) G__Floatref(&libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->FindDiff10(*(float*) G__Floatref(&libp->para[0]), *(float*) G__Floatref(&libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->FindDiff20(*(float*) G__Floatref(&libp->para[0]), *(float*) G__Floatref(&libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbPositionAlignment*) G__getstructoffset())->AlignWithTracks((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbPositionAlignment*) G__getstructoffset())->AlignWithTracks((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbPositionAlignment*) G__getstructoffset())->AlignWithTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->FindCorrections(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->PositionPlot((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, *(EdbH2*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->PositionPlot(*(EdbH2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->Zselection(*(EdbH2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->ShrinkageSelection((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->ShrinkageSelectionSide(*(EdbPatCell2*) libp->para[0].ref, *(EdbPatCell2*) libp->para[1].ref
, *(EdbH2*) libp->para[2].ref, (int) G__int(libp->para[3])
, (float) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->Link());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPositionAlignment*) G__getstructoffset())->Xcorr(*(EdbSegP*) libp->para[0].ref, (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPositionAlignment*) G__getstructoffset())->Ycorr(*(EdbSegP*) libp->para[0].ref, (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPositionAlignment*) G__getstructoffset())->Xcorr(*(EdbSegP*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPositionAlignment*) G__getstructoffset())->Ycorr(*(EdbSegP*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->SelectPeak(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->SelectPeak(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->SelectPeak(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->SelectPeak(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->ResetPeak();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->RankCouples0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->RankCouples();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->RankCouples(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, *(TObjArray*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->RankCouplesFast(*(TObjArray*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->ResetPositionCorr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->ResetAngularCorr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPositionAlignment*) G__getstructoffset())->WideSearchXY(
*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbH2*) libp->para[2].ref, (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->SaveAsTree(*(EdbPattern*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPositionAlignment::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPositionAlignment::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPositionAlignment::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPositionAlignment::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPositionAlignment*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPositionAlignment::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPositionAlignment::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPositionAlignment::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_638_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPositionAlignment::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPositionAlignment G__TEdbPositionAlignment;
static int G__AlignmentDict_638_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPositionAlignment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPositionAlignment*) (soff+(sizeof(EdbPositionAlignment)*i)))->~G__TEdbPositionAlignment();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPositionAlignment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPositionAlignment*) (soff))->~G__TEdbPositionAlignment();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbAlignmentMap */
static int G__AlignmentDict_673_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbAlignmentMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbAlignmentMap((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbAlignmentMap((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbAlignmentMap((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbAlignmentMap((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbAlignmentMap[n];
       } else {
         p = new((void*) gvp) EdbAlignmentMap[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbAlignmentMap;
       } else {
         p = new((void*) gvp) EdbAlignmentMap;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((EdbAlignmentMap*) G__getstructoffset())->InitFile((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbAlignmentMap*) G__getstructoffset())->InitFile((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbAlignmentMap*) G__getstructoffset())->InitFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentMap*) G__getstructoffset())->AlignMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentMap*) G__getstructoffset())->SaveAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentMap*) G__getstructoffset())->FillMapTree(*(EdbPositionAlignment*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentMap*) G__getstructoffset())->SaveMap((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentMap*) G__getstructoffset())->ExtractMapFromTree();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentMap*) G__getstructoffset())->ApplyMap(*(EdbPattern*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentMap*) G__getstructoffset())->CheckPattern(*(EdbPattern*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentMap*) G__getstructoffset())->CheckDZbase(*(TEnv*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentMap*) G__getstructoffset())->SelectSampleForShrinkageCorr(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentMap*) G__getstructoffset())->Link());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentMap*) G__getstructoffset())->Link(*(TEnv*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, *(EdbPlateP*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentMap*) G__getstructoffset())->Link((const char*) G__int(libp->para[0]), *(EdbPlateP*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentMap*) G__getstructoffset())->get_run_patterns((const char*) G__int(libp->para[0]), (TEnv*) G__int(libp->para[1])
, *(EdbPattern*) libp->para[2].ref, *(EdbPattern*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbAlignmentMap::GetPostreeAsPat(*(EdbPattern*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentMap*) G__getstructoffset())->CheckXY(*(TEnv*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbAlignmentMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAlignmentMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbAlignmentMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbAlignmentMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAlignmentMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAlignmentMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAlignmentMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_673_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAlignmentMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbAlignmentMap G__TEdbAlignmentMap;
static int G__AlignmentDict_673_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbAlignmentMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbAlignmentMap*) (soff+(sizeof(EdbAlignmentMap)*i)))->~G__TEdbAlignmentMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbAlignmentMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbAlignmentMap*) (soff))->~G__TEdbAlignmentMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPeakProb */
static int G__AlignmentDict_674_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPeakProb* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPeakProb[n];
     } else {
       p = new((void*) gvp) EdbPeakProb[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPeakProb;
     } else {
       p = new((void*) gvp) EdbPeakProb;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeakProb));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPeakProb*) G__getstructoffset())->Prob());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPeakProb*) G__getstructoffset())->Probability2D((TH2F*) G__int(libp->para[0]), *(float*) G__Floatref(&libp->para[1])
, *(float*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPeakProb::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPeakProb::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPeakProb::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPeakProb::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPeakProb*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPeakProb::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPeakProb::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPeakProb::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_674_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPeakProb::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlignmentDict_674_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbPeakProb* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbPeakProb(*(EdbPeakProb*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeakProb));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPeakProb G__TEdbPeakProb;
static int G__AlignmentDict_674_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPeakProb*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPeakProb*) (soff+(sizeof(EdbPeakProb)*i)))->~G__TEdbPeakProb();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPeakProb*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPeakProb*) (soff))->~G__TEdbPeakProb();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_674_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPeakProb* dest = (EdbPeakProb*) G__getstructoffset();
   *dest = *(EdbPeakProb*) libp->para[0].ref;
   const EdbPeakProb& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbTestAl */
static int G__AlignmentDict_706_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTestAl* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTestAl[n];
     } else {
       p = new((void*) gvp) EdbTestAl[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTestAl;
     } else {
       p = new((void*) gvp) EdbTestAl;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbTestAl));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbTestAl*) G__getstructoffset())->DubletsFilterOut(*(EdbPattern*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbTestAl*) G__getstructoffset())->DubletsFilterOut(*(EdbPattern*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbTestAl*) G__getstructoffset())->DubletsFilterOut(*(EdbPattern*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTestAl*) G__getstructoffset())->PositionPlot(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, *(TObjArray*) libp->para[4].ref, *(TObjArray*) libp->para[5].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((EdbTestAl*) G__getstructoffset())->PositionPlot(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(TH2F*) libp->para[2].ref, (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (TTree*) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbTestAl*) G__getstructoffset())->PositionPlot(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(TH2F*) libp->para[2].ref, (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbTestAl*) G__getstructoffset())->PositionPlot(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(TH2F*) libp->para[2].ref, (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbTestAl*) G__getstructoffset())->PositionPlot(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(TH2F*) libp->para[2].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTestAl*) G__getstructoffset())->HDistance(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((EdbTestAl*) G__getstructoffset())->FillTree((float) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbTestAl*) G__getstructoffset())->FillTree());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbTestAl*) G__getstructoffset())->MakeTrans(*(EdbAffine2D*) libp->para[0].ref, (float) G__double(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbTestAl*) G__getstructoffset())->MakeTrans(*(EdbAffine2D*) libp->para[0].ref, (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbTestAl*) G__getstructoffset())->MakeTrans(*(EdbAffine2D*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTestAl*) G__getstructoffset())->CheckMaxBin((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3])
, *(float*) G__Floatref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTestAl*) G__getstructoffset())->CheckMaxBin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbTestAl::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTestAl::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbTestAl::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbTestAl::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTestAl*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTestAl::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTestAl::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTestAl::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_706_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTestAl::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlignmentDict_706_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbTestAl* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbTestAl(*(EdbTestAl*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbTestAl));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbTestAl G__TEdbTestAl;
static int G__AlignmentDict_706_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbTestAl*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbTestAl*) (soff+(sizeof(EdbTestAl)*i)))->~G__TEdbTestAl();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbTestAl*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbTestAl*) (soff))->~G__TEdbTestAl();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_706_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTestAl* dest = (EdbTestAl*) G__getstructoffset();
   *dest = *(EdbTestAl*) libp->para[0].ref;
   const EdbTestAl& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbAlignmentV */
static int G__AlignmentDict_707_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbAlignmentV* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbAlignmentV[n];
     } else {
       p = new((void*) gvp) EdbAlignmentV[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbAlignmentV;
     } else {
       p = new((void*) gvp) EdbAlignmentV;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentV));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbAlignmentV*) G__getstructoffset())->InitOutputFile((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbAlignmentV*) G__getstructoffset())->InitOutputFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbAlignmentV*) G__getstructoffset())->InitOutputFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->CloseOutputFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->InitHx((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->InitHy((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->InitHz((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->InitHphi((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->InitHshr0((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->InitHshr1((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbAlignmentV*) G__getstructoffset())->StrDVsame());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbAlignmentV*) G__getstructoffset())->SideOK((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->DefineGuessCell(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (int) G__int(libp->para[8]), (int) G__int(libp->para[9])
, (float) G__double(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->InitPatCellN(*(EdbCell2*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->InitPatCellBin((int) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->FillCell((int) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->FillCell((int) G__int(libp->para[0]), *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbAlignmentV*) G__getstructoffset())->FillGuessCell(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbAlignmentV*) G__getstructoffset())->FillGuessCell(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbAlignmentV*) G__getstructoffset())->FillGuessCell(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbAlignmentV*) G__getstructoffset())->FillGuessCell(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbAlignmentV*) G__getstructoffset())->FillGuessCell(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbAlignmentV*) G__getstructoffset())->FillGuessCell(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->HDistance(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->OptimiseVar1((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (EdbH2*) G__int(libp->para[2]), (EdbH2*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->OptimiseVar1((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (EdbH2*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->OptimiseVar1((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((EdbAlignmentV*) G__getstructoffset())->OptimiseVar2(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, *(EdbH2*) libp->para[4].ref, (EdbH2*) G__int(libp->para[5])
, (EdbH2*) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((EdbAlignmentV*) G__getstructoffset())->OptimiseVar2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, *(EdbH2*) libp->para[4].ref, (EdbH2*) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbAlignmentV*) G__getstructoffset())->OptimiseVar2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, *(EdbH2*) libp->para[4].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->Ncoins((float*) G__int(libp->para[0]), (EdbH2*) G__int(libp->para[1])
, (EdbH2*) G__int(libp->para[2]), (TObjArray*) G__int(libp->para[3])
, (TObjArray*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->Ncoins((float*) G__int(libp->para[0]), (EdbH2*) G__int(libp->para[1])
, (EdbH2*) G__int(libp->para[2]), (TObjArray*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->Ncoins((float*) G__int(libp->para[0]), (EdbH2*) G__int(libp->para[1])
, (EdbH2*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->Ncoins((float*) G__int(libp->para[0]), (EdbH2*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->Ncoins((float*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbAlignmentV*) G__getstructoffset())->ValidCoinsidence(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbAlignmentV*) G__getstructoffset())->IsInsideDVsame(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->FillCombinations());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->FillCombinations((float*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (bool) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->DoubletsFilterOut((int) G__int(libp->para[0]), (TH2F*) G__int(libp->para[1])
, (TH2F*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->DoubletsFilterOut((int) G__int(libp->para[0]), (TH2F*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->DoubletsFilterOut((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->SelectIsolated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->SelectBestCouple());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->CoupleQuality(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->Ncp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->AddSegCouple((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->CalcMeanDiff((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->CalcFractMeanDiff((int) G__int(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->FindDensityPeak(*(TArrayF*) libp->para[0].ref, (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->CalcMeanShr((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->CalcMeanShr((float) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->CalcMeanShr());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->CalcMeanDZ((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->CalcMeanDZ((float) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->CalcMeanDZ());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->CalcApplyMeanDiff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->CalcApplyFractMeanDiff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->FindDiff(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->FindCorrDiff((float*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->FindCorrDiff((float*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->FindCorrDiff((float*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->FineCorrZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->FineCorrZ(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->FineCorrPhi(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAlignmentV::CheckEqualArr(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->CalculateAffXYTurn(*(EdbAffine2D*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->CalculateAffXY(*(EdbAffine2D*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->CalculateAffTXTY(*(EdbAffine2D*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->CalculateAffXYTurn(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, *(EdbAffine2D*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->CalculateAffXY(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, *(EdbAffine2D*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAlignmentV*) G__getstructoffset())->CalculateAffTXTY(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, *(EdbAffine2D*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->CorrToCoG((int) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->CorrToCoG((int) G__int(libp->para[0]), *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->FillThetaHist((int) G__int(libp->para[0]), *(EdbH2*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Xmin((int) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Xmax((int) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Ymin((int) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Ymax((int) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Xmin((int) G__int(libp->para[0]), *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Xmax((int) G__int(libp->para[0]), *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Ymin((int) G__int(libp->para[0]), *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Ymax((int) G__int(libp->para[0]), *(TObjArray*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->ApplyLimitsOffset(*(float*) G__Floatref(&libp->para[0]), *(float*) G__Floatref(&libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->X((int) G__int(libp->para[0]), *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Y((int) G__int(libp->para[0]), *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->TX((int) G__int(libp->para[0]), *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->TY((int) G__int(libp->para[0]), *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Var((int) G__int(libp->para[0]), *(EdbSegP*) libp->para[1].ref
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbAlignmentV*) G__getstructoffset())->Var((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->Corr2Aff(*(EdbLayer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->Corr2Aff(*(EdbSegCorr*) libp->para[0].ref, *(EdbLayer*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbAlignmentV::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAlignmentV::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbAlignmentV::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbAlignmentV::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAlignmentV*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAlignmentV::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAlignmentV::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAlignmentV::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_707_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAlignmentV::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbAlignmentV G__TEdbAlignmentV;
static int G__AlignmentDict_707_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbAlignmentV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbAlignmentV*) (soff+(sizeof(EdbAlignmentV)*i)))->~G__TEdbAlignmentV();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbAlignmentV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbAlignmentV*) (soff))->~G__TEdbAlignmentV();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPlateAlignment */
static int G__AlignmentDict_708_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPlateAlignment* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlateAlignment[n];
     } else {
       p = new((void*) gvp) EdbPlateAlignment[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlateAlignment;
     } else {
       p = new((void*) gvp) EdbPlateAlignment;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPlateAlignment));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->Align(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->TestAl(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->CoarseAl(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->FineAl(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->FineAlAff(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbLayer*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->DoubletsFilterOut(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbPlateAlignment*) G__getstructoffset())->SetParTestAl((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbPlateAlignment*) G__getstructoffset())->SetParTestAl((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbPlateAlignment*) G__getstructoffset())->SetParTestAl((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((EdbPlateAlignment*) G__getstructoffset())->SetParCoarseAl((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbPlateAlignment*) G__getstructoffset())->SetParCoarseAl((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbPlateAlignment*) G__getstructoffset())->SetParCoarseAl((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbPlateAlignment*) G__getstructoffset())->SetParCoarseAl((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbPlateAlignment*) G__getstructoffset())->SetParCoarseAl((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->SetParFineAl();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->ProduceReport();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->SaveCouplesTree();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->SetSigma((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((EdbPlateAlignment*) G__getstructoffset())->SlowAlignXY(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbH2*) libp->para[2].ref, *(EdbH1*) libp->para[3].ref
, (const char*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbPlateAlignment*) G__getstructoffset())->SlowAlignXY(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbH2*) libp->para[2].ref, *(EdbH1*) libp->para[3].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPlateAlignment::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlateAlignment::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPlateAlignment::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPlateAlignment::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateAlignment*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlateAlignment::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPlateAlignment::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlateAlignment::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_708_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPlateAlignment::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPlateAlignment G__TEdbPlateAlignment;
static int G__AlignmentDict_708_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPlateAlignment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPlateAlignment*) (soff+(sizeof(EdbPlateAlignment)*i)))->~G__TEdbPlateAlignment();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPlateAlignment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPlateAlignment*) (soff))->~G__TEdbPlateAlignment();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbLinking */
static int G__AlignmentDict_725_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbLinking* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbLinking[n];
     } else {
       p = new((void*) gvp) EdbLinking[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbLinking;
     } else {
       p = new((void*) gvp) EdbLinking;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbLinking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbLinking*) G__getstructoffset())->VerifyShrinkageCorr((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->GetPar(*(TEnv*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->GetDoubletsPar(*(TEnv*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->GetPreselectionPar(*(EdbSEQ*) libp->para[0].ref, *(TEnv*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbLinking*) G__getstructoffset())->SaveCouplesTree((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbLinking*) G__getstructoffset())->SaveCouplesTree();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->FullLinking(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->FullLinking(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->FillCombinationsAtMeanZ(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->CorrectShrinkage(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->CorrectShrinkage(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->CorrectShrinkage((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((EdbLinking*) G__getstructoffset())->Link(
*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbLayer*) libp->para[2].ref, *(EdbLayer*) libp->para[3].ref
, *(TEnv*) libp->para[4].ref, (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((EdbLinking*) G__getstructoffset())->Link(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbLayer*) libp->para[2].ref, *(EdbLayer*) libp->para[3].ref
, *(TEnv*) libp->para[4].ref, (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbLinking*) G__getstructoffset())->Link(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbLayer*) libp->para[2].ref, *(EdbLayer*) libp->para[3].ref
, *(TEnv*) libp->para[4].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->CorrectAngles(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->WriteShrinkagePlots();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbLinking*) G__getstructoffset())->EstimatePatternArea(*(EdbPattern*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->RankCouples(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbLinking*) G__getstructoffset())->DoubletsFilterOut(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbLinking*) G__getstructoffset())->DoubletsFilterOut(*(TObjArray*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->DumpDoubletsTree(*(EdbAlignmentV*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbLinking*) G__getstructoffset())->CloneCouplesTree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (EdbAffine2D*) G__int(libp->para[2]), (TCut*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbLinking*) G__getstructoffset())->CloneCouplesTree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (EdbAffine2D*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbLinking*) G__getstructoffset())->CloneCouplesTree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->SetApplyCorr((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->ProduceReport();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbLinking::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbLinking::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbLinking::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbLinking::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbLinking*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbLinking::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbLinking::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbLinking::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_725_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbLinking::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbLinking G__TEdbLinking;
static int G__AlignmentDict_725_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbLinking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbLinking*) (soff+(sizeof(EdbLinking)*i)))->~G__TEdbLinking();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbLinking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbLinking*) (soff))->~G__TEdbLinking();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbCorrectionBin */
static int G__AlignmentDict_728_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCorrectionBin* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCorrectionBin[n];
     } else {
       p = new((void*) gvp) EdbCorrectionBin[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCorrectionBin;
     } else {
       p = new((void*) gvp) EdbCorrectionBin;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionBin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionBin*) G__getstructoffset())->AddSegCouple((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionBin*) G__getstructoffset())->CalculateCorrections();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionBin*) G__getstructoffset())->AddBin(*(EdbCorrectionBin*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbCorrectionBin::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCorrectionBin::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbCorrectionBin::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbCorrectionBin::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionBin*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCorrectionBin::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCorrectionBin::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCorrectionBin::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_728_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCorrectionBin::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbCorrectionBin G__TEdbCorrectionBin;
static int G__AlignmentDict_728_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbCorrectionBin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbCorrectionBin*) (soff+(sizeof(EdbCorrectionBin)*i)))->~G__TEdbCorrectionBin();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbCorrectionBin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbCorrectionBin*) (soff))->~G__TEdbCorrectionBin();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbCorrectionMapper */
static int G__AlignmentDict_729_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCorrectionMapper* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCorrectionMapper[n];
     } else {
       p = new((void*) gvp) EdbCorrectionMapper[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCorrectionMapper;
     } else {
       p = new((void*) gvp) EdbCorrectionMapper;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionMapper));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbCorrectionMapper*) G__getstructoffset())->InitMap((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbCorrectionMapper*) G__getstructoffset())->GetBin((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbCorrectionMapper*) G__getstructoffset())->GetBin((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMapper*) G__getstructoffset())->MakeCorrectionsTable();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMapper*) G__getstructoffset())->UpdateLayerWithLocalCorr(*(EdbLayer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMapper*) G__getstructoffset())->Fill(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMapper*) G__getstructoffset())->FillS((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbCorrectionMapper*) G__getstructoffset())->Write((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbCorrectionMapper*) G__getstructoffset())->Write();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbCorrectionMapper*) G__getstructoffset())->DrawSum((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((EdbCorrectionMapper*) G__getstructoffset())->DrawMap(*(EdbCorrectionMap*) libp->para[0].ref, (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbCorrectionMapper*) G__getstructoffset())->DrawMap(*(EdbCorrectionMap*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMapper*) G__getstructoffset())->SetCorrDZ();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbCorrectionMapper*) G__getstructoffset())->MapDZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbCorrectionMapper*) G__getstructoffset())->MapDV((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMapper*) G__getstructoffset())->SmoothCorrections();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbCorrectionMapper::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCorrectionMapper::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbCorrectionMapper::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbCorrectionMapper::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCorrectionMapper*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCorrectionMapper::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCorrectionMapper::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCorrectionMapper::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_729_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCorrectionMapper::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbCorrectionMapper G__TEdbCorrectionMapper;
static int G__AlignmentDict_729_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbCorrectionMapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbCorrectionMapper*) (soff+(sizeof(EdbCorrectionMapper)*i)))->~G__TEdbCorrectionMapper();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbCorrectionMapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbCorrectionMapper*) (soff))->~G__TEdbCorrectionMapper();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* EdbPatCell2 */

/* EdbPositionAlignment */

/* EdbAlignmentMap */

/* EdbPeakProb */

/* EdbTestAl */

/* EdbAlignmentV */

/* EdbPlateAlignment */

/* EdbLinking */

/* EdbCorrectionBin */

/* EdbCorrectionMapper */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncAlignmentDict {
 public:
  G__Sizep2memfuncAlignmentDict(): p(&G__Sizep2memfuncAlignmentDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncAlignmentDict::*p)();
};

size_t G__get_sizep2memfuncAlignmentDict()
{
  G__Sizep2memfuncAlignmentDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceAlignmentDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2))) {
     EdbPatCell2 *G__Lderived;
     G__Lderived=(EdbPatCell2*)0x1000;
     {
       EdbCell2 *G__Lpbase=(EdbCell2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2),G__get_linked_tagnum(&G__AlignmentDictLN_EdbCell2),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbH2 *G__Lpbase=(EdbH2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2),G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPositionAlignment))) {
     EdbPositionAlignment *G__Lderived;
     G__Lderived=(EdbPositionAlignment*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPositionAlignment),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentMap))) {
     EdbAlignmentMap *G__Lderived;
     G__Lderived=(EdbAlignmentMap*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentMap),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeakProb))) {
     EdbPeakProb *G__Lderived;
     G__Lderived=(EdbPeakProb*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeakProb),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_EdbTestAl))) {
     EdbTestAl *G__Lderived;
     G__Lderived=(EdbTestAl*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbTestAl),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentV))) {
     EdbAlignmentV *G__Lderived;
     G__Lderived=(EdbAlignmentV*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentV),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPlateAlignment))) {
     EdbPlateAlignment *G__Lderived;
     G__Lderived=(EdbPlateAlignment*)0x1000;
     {
       EdbAlignmentV *G__Lpbase=(EdbAlignmentV*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPlateAlignment),G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentV),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPlateAlignment),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_EdbLinking))) {
     EdbLinking *G__Lderived;
     G__Lderived=(EdbLinking*)0x1000;
     {
       EdbAlignmentV *G__Lpbase=(EdbAlignmentV*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbLinking),G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentV),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbLinking),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionBin))) {
     EdbCorrectionBin *G__Lderived;
     G__Lderived=(EdbCorrectionBin*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionBin),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionMapper))) {
     EdbCorrectionMapper *G__Lderived;
     G__Lderived=(EdbCorrectionMapper*)0x1000;
     {
       EdbCorrectionBin *G__Lpbase=(EdbCorrectionBin*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionMapper),G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionBin),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionMapper),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableAlignmentDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("iterator<iterator_traits<string::iterator>::iterator_category,iterator_traits<string::iterator>::value_type,iterator_traits<string::iterator>::difference_type,iterator_traits<string::iterator>::pointer,iterator_traits<string::iterator>::reference>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long,char*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<string::const_iterator>::iterator_category,iterator_traits<string::const_iterator>::value_type,iterator_traits<string::const_iterator>::difference_type,iterator_traits<string::const_iterator>::pointer,iterator_traits<string::const_iterator>::reference>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* EdbPatCell2 */
static void G__setup_memvarEdbPatCell2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2));
   { EdbPatCell2 *p; p=(EdbPatCell2*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eDXlim)-(long)(p)),102,0,0,-1,-1,-1,1,"eDXlim=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDYlim)-(long)(p)),102,0,0,-1,-1,-1,1,"eDYlim=",0,"acceptance limits for the combinations selection");
   G__memvar_setup((void*)((long)(&p->eDTXlim)-(long)(p)),102,0,0,-1,-1,-1,1,"eDTXlim=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDTYlim)-(long)(p)),102,0,0,-1,-1,-1,1,"eDTYlim=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eXmarg)-(long)(p)),102,0,0,-1,-1,-1,1,"eXmarg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYmarg)-(long)(p)),102,0,0,-1,-1,-1,1,"eYmarg=",0,"margins for the cell definition");
   G__memvar_setup((void*)((long)(&p->eApplyCorr)-(long)(p)),103,0,0,-1,-1,-1,1,"eApplyCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDX)-(long)(p)),102,0,0,-1,-1,-1,1,"eDX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDY)-(long)(p)),102,0,0,-1,-1,-1,1,"eDY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDZ)-(long)(p)),102,0,0,-1,-1,-1,1,"eDZ=",0,"corrections to be applied if eApplyCorr==true");
   G__memvar_setup((void*)((long)(&p->eShr)-(long)(p)),102,0,0,-1,-1,-1,1,"eShr=",0,"corrections to be applied if eApplyCorr==true");
   G__memvar_setup((void*)((long)(&p->eDTX)-(long)(p)),102,0,0,-1,-1,-1,1,"eDTX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDTY)-(long)(p)),102,0,0,-1,-1,-1,1,"eDTY=",0,"corrections to be applied if eApplyCorr==true");
   G__memvar_setup((void*)((long)(&p->ePhi)-(long)(p)),102,0,0,-1,-1,-1,1,"ePhi=",0,"rotation angle (using dx,dy one can set-up the center of rotation)");
   G__memvar_setup((void*)((long)(&p->eDoubletsRate)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1I),-1,-1,1,"eDoubletsRate=",0,"to be filled in FillCombinations()");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPositionAlignment */
static void G__setup_memvarEdbPositionAlignment(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPositionAlignment));
   { EdbPositionAlignment *p; p=(EdbPositionAlignment*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ePC1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2),-1,-1,1,"ePC1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePC2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2),-1,-1,1,"ePC2=",0,"cells with the pointers to segments");
   G__memvar_setup((void*)((long)(&p->eComb1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TObjArray),-1,-1,1,"eComb1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eComb2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TObjArray),-1,-1,1,"eComb2=",0,"array with the selected combinations of segments");
   G__memvar_setup((void*)((long)(&p->eTracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TObjArray),-1,-1,1,"eTracks=",0,"tracks created with segments of eComb1, eComb2");
   G__memvar_setup((void*)((long)(&p->eSegCouples)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TObjArray),-1,-1,1,"eSegCouples=",0,"segment couples objects to fill couples format tree");
   G__memvar_setup((void*)((long)(&p->ePC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2),-1,-1,1,"ePC=",0,"cells with the pointers to tracks");
   G__memvar_setup((void*)((long)(&p->eX0)-(long)(p)),102,0,0,-1,-1,-1,1,"eX0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eY0)-(long)(p)),102,0,0,-1,-1,-1,1,"eY0=",0,"coordinates of the center of the zone (for the ePeakNT only)");
   G__memvar_setup((void*)((long)(&p->eXcell)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXcell=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYcell)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYcell=",0,"cell size (for example 50 microns)");
   G__memvar_setup((void*)((long)(&p->eDTXmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDTXmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDTYmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDTYmax=",0,"max angular acceptance (ex: 0.15) for the coinsidences");
   G__memvar_setup((void*)((long)(&p->eBinX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eBinX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBinY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eBinY=",0,"bin size for the differential hist (for example 5 microns)");
   G__memvar_setup((void*)((long)(&p->eDXmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDXmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDYmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDYmin=",0,"min position difference for the dublets cutout");
   G__memvar_setup((void*)((long)(&p->eDTXmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDTXmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDTYmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDTYmin=",0,"min angular  difference for the dublets cutout");
   G__memvar_setup((void*)((long)(&p->eRpeak)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eRpeak=",0,"coordinate peak acceptance");
   G__memvar_setup((void*)((long)(&p->eZ1from)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ1from=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZ1to)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ1to=",0,"limits in Z for the peak search (ePat1)");
   G__memvar_setup((void*)((long)(&p->eZ2from)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ2from=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZ2to)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ2to=",0,"limits in Z for the peak search (ePat2)");
   G__memvar_setup((void*)((long)(&p->eNZ1step)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNZ1step=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eNZ2step)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNZ2step=",0,"number of steps for the z-selection");
   G__memvar_setup((void*)((long)(&p->eZ1peak)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ1peak=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZ2peak)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ2peak=",0,"peak position in Z");
   G__memvar_setup((void*)((long)(&p->eXpeak)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXpeak=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYpeak)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYpeak=",0,"peak position in X,Y");
   G__memvar_setup((void*)((long)(&p->eNpeak)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNpeak=",0,"number of found combinations");
   G__memvar_setup((void*)((long)(&p->eAff)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbAffine2D),-1,-1,1,"eAff=",0,"the found affine transformation (when applied to pattern1 gives pattern2 )");
   G__memvar_setup((void*)((long)(&p->eHpeak)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHpeak=",0,"histogram used for peak selection");
   G__memvar_setup((void*)((long)(&p->eHDZ)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHDZ=",0,"histogram used for  Z-selection");
   G__memvar_setup((void*)((long)(&p->eSmoothKernel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,1,"eSmoothKernel=",0,"used to smooth histograms");
   G__memvar_setup((void*)((long)(&p->ePosTree)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TTree),-1,-1,1,"ePosTree=",0,"optional: tree with s1:s2 for the selected combinations");
   G__memvar_setup((void*)((long)(&p->eS0x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eS0x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eS0y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eS0y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eS0tx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eS0tx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eS0ty)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eS0ty=",0,"sigmas at 0 angle for the chi2 calculation");
   G__memvar_setup((void*)((long)(&p->eWbaseMin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eWbaseMin=",0,"cut for the w of basetrack to accept it");
   G__memvar_setup((void*)((long)(&p->eChi2Max)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eChi2Max=",0,"cut for the chi2 of the basetrack");
   G__memvar_setup((void*)((long)(&p->eShr1from)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eShr1from=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eShr1to)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eShr1to=",0,"limits in Shr for the peak search (ePat1)");
   G__memvar_setup((void*)((long)(&p->eShr2from)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eShr2from=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eShr2to)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eShr2to=",0,"limits in Shr for the peak search (ePat2)");
   G__memvar_setup((void*)((long)(&p->eNShr1step)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNShr1step=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eNShr2step)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNShr2step=",0,"number of steps for the Shr-selection");
   G__memvar_setup((void*)((long)(&p->eHShr1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHShr1=",0,"histogram used for the shrinkage-selection");
   G__memvar_setup((void*)((long)(&p->eHShr2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHShr2=",0,"histogram used for the shrinkage-selection");
   G__memvar_setup((void*)((long)(&p->eDoRot)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eDoRot=",0,"if true - perform the rotation selection");
   G__memvar_setup((void*)((long)(&p->eRot)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH1),-1,-1,1,"eRot=",0,"definition of the rotation steps");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbAlignmentMap */
static void G__setup_memvarEdbAlignmentMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentMap));
   { EdbAlignmentMap *p; p=(EdbAlignmentMap*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eEnv)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TEnv),-1,-1,1,"eEnv=",0,"environment used to pass the parameters");
   G__memvar_setup((void*)((long)(&p->ePat1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPattern),-1,-1,1,"ePat1=",0,"big patterns to be splitted and aligned piece by piece");
   G__memvar_setup((void*)((long)(&p->ePat2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPattern),-1,-1,1,"ePat2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDensityMax)-(long)(p)),102,0,0,-1,-1,-1,1,"eDensityMax=",0,"the max segments density for patterns selection (in N/100/100 microns)");
   G__memvar_setup((void*)((long)(&p->ePlate)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPlateP),-1,-1,1,"ePlate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eGlobal)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPositionAlignment),-1,-1,1,"eGlobal=",0,"service object for the zones selection");
   G__memvar_setup((void*)((long)(&p->eGV1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TVector3),-1,-1,1,"eGV1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eGV2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TVector3),-1,-1,1,"eGV2=",0,"global offsets found by the test alignment (dx:dy:dz)");
   G__memvar_setup((void*)((long)(&p->eXcell)-(long)(p)),102,0,0,-1,-1,-1,1,"eXcell=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYcell)-(long)(p)),102,0,0,-1,-1,-1,1,"eYcell=",0,"approximate zones size (for example 10000 microns)");
   G__memvar_setup((void*)((long)(&p->eNx)-(long)(p)),105,0,0,-1,-1,-1,1,"eNx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eNy)-(long)(p)),105,0,0,-1,-1,-1,1,"eNy=",0,"number of divisions calculated using eXcell, eYcell");
   G__memvar_setup((void*)((long)(&p->eMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbCell2),-1,-1,1,"eMap=",0,"in each cell TArratF with (x,y, dx,dy,dz1,dz2, n)");
   G__memvar_setup((void*)((long)(&p->eGraphDX)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TGraph2D),-1,-1,1,"eGraphDX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eGraphDY)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TGraph2D),-1,-1,1,"eGraphDY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eGraphDZ1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TGraph2D),-1,-1,1,"eGraphDZ1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eGraphDZ2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TGraph2D),-1,-1,1,"eGraphDZ2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eOutputFile)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TFile),-1,-1,1,"eOutputFile=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eMapTree)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TTree),-1,-1,1,"eMapTree=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPeakProb */
static void G__setup_memvarEdbPeakProb(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeakProb));
   { EdbPeakProb *p; p=(EdbPeakProb*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ePeakRMSmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePeakRMSmin=",0,"apriori limits in RMS to accept the found peak");
   G__memvar_setup((void*)((long)(&p->ePeakRMSmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePeakRMSmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePeakNmin)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ePeakNmin=",0,"apriori limits in the number of entries to accept the found peak");
   G__memvar_setup((void*)((long)(&p->ePeakNmax)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ePeakNmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePeakRMS)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePeakRMS=",0,"found peak parameters");
   G__memvar_setup((void*)((long)(&p->ePeakX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePeakX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePeakY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePeakY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eProb)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eProb=",0,"the probability the found peak is not the BG fluctuation");
   G__memvar_setup((void*)((long)(&p->eHD)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,1,"eHD=",0,"input histogram to be analysed");
   G__memvar_setup((void*)((long)(&p->eHbin)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,1,"eHbin=",0,"service spectrum histo");
   G__memvar_setup((void*)((long)(&p->eHpeak)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,1,"eHpeak=",0,"service peak histo");
   G__memvar_setup((void*)((long)(&p->eVerbosity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eVerbosity=",0,"0-no any message, 1-print, 2-plot; default=2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbTestAl */
static void G__setup_memvarEdbTestAl(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbTestAl));
   { EdbTestAl *p; p=(EdbTestAl*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eITMAX)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eITMAX=",0,"angular step (def=50)");
   G__memvar_setup((void*)((long)(&p->eOCMAX)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eOCMAX=",0,"occupancy (def=100)");
   G__memvar_setup((void*)((long)(&p->eOffset)-(long)(p)),102,0,0,-1,-1,-1,1,"eOffset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBinSize)-(long)(p)),102,0,0,-1,-1,-1,1,"eBinSize=",0,"microns");
   G__memvar_setup((void*)((long)(&p->eS1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TObjArray),-1,-1,1,"eS1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eS2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TObjArray),-1,-1,1,"eS2=",0,"pointers to segments selected by HDistance");
   G__memvar_setup((void*)((long)(&p->eBinTree)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TNtuple),-1,-1,1,"eBinTree=",0,"put bins value for all attempts");
   G__memvar_setup((void*)((long)(&p->eT)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TTree),-1,-1,1,"eT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eFile)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TFile),-1,-1,1,"eFile=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HD)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,1,"HD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HDF)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,1,"HDF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HDF2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,1,"HDF2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eN)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eN[4]=",0,"nx,ny,nz,nphi - number of divisions");
   G__memvar_setup((void*)((long)(&p->eDmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDmin[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDmax[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eD0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eD0[4]=",0,"limits, and found value of the peak for dx,dy,dz,phi");
   G__memvar_setup((void*)((long)(&p->eMaxBin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eMaxBin=",0,"the max value corresponding to eD0");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbAlignmentV */
static void G__setup_memvarEdbAlignmentV(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentV));
   { EdbAlignmentV *p; p=(EdbAlignmentV*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eDVsame)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDVsame[4]=",0,"(dx,dy,dtx,dty) condition for the coinsidence");
   G__memvar_setup((void*)((long)(&p->ePC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbCell2),-1,-1,1,"ePC[2]=",0,"2-d position cells with patterns segments");
   G__memvar_setup((void*)((long)(&p->eXmarg)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXmarg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYmarg)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYmarg=",0,"margins for the cell definition");
   G__memvar_setup((void*)((long)(&p->eS)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TObjArray),-1,-1,1,"eS[2]=",0,"\"parallel\" arrays with the selected combinations of segments");
   G__memvar_setup((void*)((long)(&p->eUseAffCorr)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eUseAffCorr=",0,"if \"true\" - use eCorrL for corrections");
   G__memvar_setup((void*)((long)(&p->eCorr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbSegCorr),-1,-1,1,"eCorr[2]=",0,"corrections for side 1 and 2 (v[7]) - the result of the alignment");
   G__memvar_setup((void*)((long)(&p->eCorrL)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbLayer),-1,-1,1,"eCorrL[2]=",0,"corrections in form of affine transformations - the final output");
   G__memvar_setup((void*)((long)(&p->eH)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH1),-1,-1,1,"eH[2][7]=",0,"conditions for the selection procedure for each var of each side");
   G__memvar_setup((void*)((long)(&p->eHxy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHxy=",0,"position 2d histo to be used in OptimiseVar2");
   G__memvar_setup((void*)((long)(&p->eDoubletsRate)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1I),-1,-1,1,"eDoubletsRate=",0,"can be filled in FillCombinations()");
   G__memvar_setup((void*)((long)(&p->eOutputFile)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TFile),-1,-1,1,"eOutputFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPlateAlignment */
static void G__setup_memvarEdbPlateAlignment(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPlateAlignment));
   { EdbPlateAlignment *p; p=(EdbPlateAlignment*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eSigma)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSigma[2]=",0,"sigma of the bt useful for the fine alignment ie:(10,0.01)");
   G__memvar_setup((void*)((long)(&p->eOffsetMax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eOffsetMax=",0,"the maximal offset to be looked for");
   G__memvar_setup((void*)((long)(&p->eDZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDZ=",0,"the range +- dz   will be scanned by coarce align");
   G__memvar_setup((void*)((long)(&p->eDPHI)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDPHI=",0,"the range +- dphi will be scanned by coarce align");
   G__memvar_setup((void*)((long)(&p->eDoTestAl)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eDoTestAl=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eTestAlOK)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eTestAlOK=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDoCoarse)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eDoCoarse=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eCoarseOK)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eCoarseOK=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDoFine)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eDoFine=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eFineOK)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eFineOK=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSaveCouples)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eSaveCouples=",0,"save couples tree with the report file");
   G__memvar_setup((void*)((long)(&p->eStatus)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eStatus=",0,"overall alignment result (true - OK)");
   G__memvar_setup((void*)((long)(&p->eNcoins)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNcoins=",0,"final number of coinsidence used for affine calc");
   G__memvar_setup((void*)((long)(&p->eFineMin)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eFineMin=",0,"minimum coinsidences to accept alignment");
   G__memvar_setup((void*)((long)(&p->eCoarseMin)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eCoarseMin=",0,"minimum coinsidences to accept alignment");
   G__memvar_setup((void*)((long)(&p->eH_zphi_coarse)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeak2),-1,-1,1,"eH_zphi_coarse=",0,"the results of the coarse alignment");
   G__memvar_setup((void*)((long)(&p->eH_xy_coarse)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeak2),-1,-1,1,"eH_xy_coarse=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eH_xy_final)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeak2),-1,-1,1,"eH_xy_final=",0,"the final alignment peak");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbLinking */
static void G__setup_memvarEdbLinking(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbLinking));
   { EdbLinking *p; p=(EdbLinking*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eDoSaveCouples)-(long)(p)),103,0,0,-1,-1,-1,1,"eDoSaveCouples=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDoCorrectAngles)-(long)(p)),103,0,0,-1,-1,-1,1,"eDoCorrectAngles=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDoCorrectShrinkage)-(long)(p)),103,0,0,-1,-1,-1,1,"eDoCorrectShrinkage=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDoFullLinking)-(long)(p)),103,0,0,-1,-1,-1,1,"eDoFullLinking=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDoDumpDoubletsTree)-(long)(p)),103,0,0,-1,-1,-1,1,"eDoDumpDoubletsTree=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eCPRankingAlg)-(long)(p)),105,0,0,-1,-1,-1,1,"eCPRankingAlg=",0,"couples ranking algorithm (0-default, 1-likelihood used)");
   G__memvar_setup((void*)((long)(&p->eDRfull)-(long)(p)),102,0,0,-1,-1,-1,1,"eDRfull=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDTfull)-(long)(p)),102,0,0,-1,-1,-1,1,"eDTfull=",0,"acceptance for the full linking");
   G__memvar_setup((void*)((long)(&p->eCHI2Pmax)-(long)(p)),102,0,0,-1,-1,-1,1,"eCHI2Pmax=",0,"acceptance to save into couples tree");
   G__memvar_setup((void*)((long)(&p->eChi2Acorr)-(long)(p)),102,0,0,-1,-1,-1,1,"eChi2Acorr=",0,"acceptance to save into couples tree");
   G__memvar_setup((void*)((long)(&p->eNsigmaEQshr)-(long)(p)),102,0,0,-1,-1,-1,1,"eNsigmaEQshr=",0,"equalization cut for shrinkage ");
   G__memvar_setup((void*)((long)(&p->eNsigmaEQlnk)-(long)(p)),102,0,0,-1,-1,-1,1,"eNsigmaEQlnk=",0,"equalization cut for linking");
   G__memvar_setup((void*)((long)(&p->eShr0)-(long)(p)),102,0,0,-1,-1,-1,1,"eShr0=",0,"starting value for shrinkage correction search");
   G__memvar_setup((void*)((long)(&p->eDShr)-(long)(p)),102,0,0,-1,-1,-1,1,"eDShr=",0,"range for the shrinkage correction");
   G__memvar_setup((void*)((long)(&p->eBinOK)-(long)(p)),102,0,0,-1,-1,-1,1,"eBinOK=",0,"mean cell occupancy");
   G__memvar_setup((void*)((long)(&p->eCond)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbScanCond),-1,-1,1,"eCond=",0,"scanning conditions for couples ranking");
   G__memvar_setup((void*)((long)(&p->eNshr)-(long)(p)),105,0,0,-1,-1,-1,1,"eNshr[2]=",0,"number of coins found for shrinkage correction");
   G__memvar_setup((void*)((long)(&p->eNcorrMin)-(long)(p)),105,0,0,-1,-1,-1,1,"eNcorrMin=",0,"min number of segments for the correction calculation");
   G__memvar_setup((void*)((long)(&p->eSegCouples)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TObjArray),-1,-1,1,"eSegCouples=",0,"segment couples objects to fill couples format tree");
   G__memvar_setup((void*)((long)(&p->eL1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbLayer),-1,-1,1,"eL1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eL2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbLayer),-1,-1,1,"eL2=",0,"layers with the geometry and corrections");
   G__memvar_setup((void*)((long)(&p->eHdxyShr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHdxyShr[2]=",0,"service histograms used for the shrinkage correction");
   G__memvar_setup((void*)((long)(&p->eRemoveDoublets)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbLinkingcLcLRemoveDoublets),-1,-1,1,"eRemoveDoublets=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbCorrectionBin */
static void G__setup_memvarEdbCorrectionBin(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionBin));
   { EdbCorrectionBin *p; p=(EdbCorrectionBin*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eAl)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentV),-1,-1,1,"eAl=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eLayer)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbLayer),-1,-1,1,"eLayer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbCorrectionMapper */
static void G__setup_memvarEdbCorrectionMapper(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionMapper));
   { EdbCorrectionMapper *p; p=(EdbCorrectionMapper*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eMapAl)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbCell2),-1,-1,1,"eMapAl=",0,"working object with local alignments");
   G__memvar_setup((void*)((long)(&p->eMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionMap),-1,-1,1,"eMap=",0,"result: corrections map");
   G__memvar_setup((void*)((long)(&p->eHdxy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHdxy=",0,"dxdy");
   G__memvar_setup((void*)((long)(&p->eHdtxy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHdtxy=",0,"dtxdty");
   G__memvar_setup((void*)((long)(&p->eHdz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH1),-1,-1,1,"eHdz=",0,"dz");
   G__memvar_setup((void*)((long)(&p->eHshr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH1),-1,-1,1,"eHshr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eHdty_ty)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHdty_ty=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eHxy1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHxy1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eHxy2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHxy2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eHtxty1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHtxty1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eHtxty2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2),-1,-1,1,"eHtxty2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eID1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbID),-1,-1,1,"eID1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eID2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_EdbID),-1,-1,1,"eID2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZ1)-(long)(p)),102,0,0,-1,-1,-1,1,"eZ1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZ2)-(long)(p)),102,0,0,-1,-1,-1,1,"eZ2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eNcpMin)-(long)(p)),105,0,0,-1,-1,-1,1,"eNcpMin=",0,"min number of coincidences to accept correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarAlignmentDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEdbPatCell2(void) {
   /* EdbPatCell2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2));
   G__memfunc_setup("EdbPatCell2",994,G__AlignmentDict_635_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCorr",921,G__AlignmentDict_635_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintCorr",931,G__AlignmentDict_635_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitPat",697,G__AlignmentDict_635_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat i - - 0 - nx "
"i - - 0 - ny", "define limits to fit the pattern", (void*) NULL, 0);
   G__memfunc_setup("InitPatBin",978,G__AlignmentDict_635_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat f - - 0 - binx "
"f - - 0 - biny", "define limits to fit the pattern", (void*) NULL, 0);
   G__memfunc_setup("FillCell",775,G__AlignmentDict_635_0_6, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPattern' - 1 - pat", "limits should be already defined", (void*) NULL, 0);
   G__memfunc_setup("FillCell",775,G__AlignmentDict_635_0_7, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - pat", "limits should be already defined", (void*) NULL, 0);
   G__memfunc_setup("FillCombinations",1645,G__AlignmentDict_635_0_8, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbPatCell2' - 1 - cell I - - 0 - ir2 "
"u 'TObjArray' - 1 - arrC1 u 'TObjArray' - 1 - arrC2 "
"g - - 0 '1' doFill", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xs",203,G__AlignmentDict_635_0_9, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ys",204,G__AlignmentDict_635_0_10, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("XsPos",509,G__AlignmentDict_635_0_11, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("YsPos",510,G__AlignmentDict_635_0_12, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("XsRot",512,G__AlignmentDict_635_0_13, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("YsRot",513,G__AlignmentDict_635_0_14, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TXs",287,G__AlignmentDict_635_0_15, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TYs",288,G__AlignmentDict_635_0_16, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyCorrections",1681,G__AlignmentDict_635_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPattern' - 1 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyCorrections",1681,G__AlignmentDict_635_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbLayer' - 1 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AcceptCorrections",1755,G__AlignmentDict_635_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbLayer' - 1 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillSelectedH2",1322,G__AlignmentDict_635_0_20, 85, G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_635_0_21, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPatCell2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_635_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPatCell2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_635_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPatCell2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_635_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPatCell2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_635_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_635_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPatCell2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_635_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPatCell2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_635_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPatCell2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_635_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPatCell2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbPatCell2", 994, G__AlignmentDict_635_0_33, (int) ('i'), G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2), -1, 0, 1, 1, 1, 0, "u 'EdbPatCell2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbPatCell2", 1120, G__AlignmentDict_635_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_635_0_35, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_EdbPatCell2), -1, 1, 1, 1, 1, 0, "u 'EdbPatCell2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPositionAlignment(void) {
   /* EdbPositionAlignment */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPositionAlignment));
   G__memfunc_setup("EdbPositionAlignment",2047,G__AlignmentDict_638_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_EdbPositionAlignment), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ActivatePosTree",1523,G__AlignmentDict_638_0_2, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"postree\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WritePosTree",1229,G__AlignmentDict_638_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPosTree",1086,G__AlignmentDict_638_0_4, 105, -1, -1, 0, 5, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'EdbPattern' - 0 '0' p "
"U 'EdbPattern' - 0 '0' p1 U 'EdbPattern' - 0 '0' p2 "
"U 'TEventList' - 0 '0' lst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillPosTree",1097,G__AlignmentDict_638_0_5, 105, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - dz1 f - - 0 - dz2 "
"i - - 0 - flag", "{ return FillPosTree(eComb1,eComb2,dz1,dz2,flag); }", (void*) NULL, 0);
   G__memfunc_setup("PrintStat",937,G__AlignmentDict_638_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintSummary",1275,G__AlignmentDict_638_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Align",491,G__AlignmentDict_638_0_8, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectZone",1020,G__AlignmentDict_638_0_9, 105, -1, -1, 0, 5, 1, 1, 0, 
"F - - 0 - min F - - 0 - max "
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2 "
"f - - 0 - maxDens", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectZoneSide",1409,G__AlignmentDict_638_0_10, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbPatCell2' - 1 - pc F - - 0 - min "
"F - - 0 - max u 'TObjArray' - 1 - arr "
"i - - 0 'kMaxInt' nmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectBestComptons",1857,G__AlignmentDict_638_0_11, 105, -1, -1, 0, 3, 3, 1, 0, 
"u 'TObjArray' - 1 - a u 'TObjArray' - 1 - arr "
"i - - 0 - nmax", (char*)NULL, (void*) G__func2void( (int (*)(TObjArray&, TObjArray&, int))(&EdbPositionAlignment::SelectBestComptons) ), 0);
   G__memfunc_setup("FillArrays",1017,G__AlignmentDict_638_0_12, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillArrays",1017,G__AlignmentDict_638_0_13, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2 "
"F - - 0 - xymin F - - 0 - xymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SpotsFilterOut",1463,G__AlignmentDict_638_0_14, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoubletsFilterOut",1760,G__AlignmentDict_638_0_15, 105, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' checkview", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoubletsFilterOutSide",2149,G__AlignmentDict_638_0_16, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPatCell2' - 1 - pc g - - 0 'true' checkview", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCombinations",1645,G__AlignmentDict_638_0_17, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCombinations",1645,G__AlignmentDict_638_0_18, 105, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbPatCell2' - 1 - pc1 u 'EdbPatCell2' - 1 - pc2 "
"f - - 0 - dx f - - 0 - dy "
"f - - 0 - dtx f - - 0 - dty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectNarrowPeakDXDY",1939,G__AlignmentDict_638_0_19, 105, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - dr u 'EdbH2' - 1 - hxy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PositionPlotA",1333,G__AlignmentDict_638_0_20, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbH2' - 1 - hd f - - 0 '0' DR "
"U 'TObjArray' - 0 '0' arr1 U 'TObjArray' - 0 '0' arr2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDiff",762,G__AlignmentDict_638_0_21, 121, -1, -1, 0, 8, 1, 1, 0, 
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2 "
"u 'EdbPatCell2' - 1 - pc1 u 'EdbPatCell2' - 1 - pc2 "
"f - - 1 - dx f - - 1 - dy "
"f - - 1 - dtx f - - 1 - dty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDiff12",861,G__AlignmentDict_638_0_22, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 1 - dx f - - 1 - dy "
"f - - 1 - dtx f - - 1 - dty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDiff10",859,G__AlignmentDict_638_0_23, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 1 - dx f - - 1 - dy "
"f - - 1 - dtx f - - 1 - dty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDiff20",860,G__AlignmentDict_638_0_24, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 1 - dx f - - 1 - dy "
"f - - 1 - dtx f - - 1 - dty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignWithTracks",1519,G__AlignmentDict_638_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 '3' nang i - - 0 '0' npos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCorrections",1548,G__AlignmentDict_638_0_26, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat1 u 'EdbPattern' - 1 - pat2 "
"f - - 0 - DZ g - - 0 - doShrink", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PositionPlot",1268,G__AlignmentDict_638_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - dz1 f - - 0 - dz2 "
"u 'EdbH2' - 1 - hd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PositionPlot",1268,G__AlignmentDict_638_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbH2' - 1 - hd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zselection",1056,G__AlignmentDict_638_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbH2' - 1 - hd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShrinkageSelection",1858,G__AlignmentDict_638_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - dzbase", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShrinkageSelectionSide",2247,G__AlignmentDict_638_0_31, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbPatCell2' - 1 - pc1 u 'EdbPatCell2' - 1 - pc2 "
"u 'EdbH2' - 1 - hshr i - - 0 - nstep "
"f - - 0 - deltaShr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Link",398,G__AlignmentDict_638_0_32, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xcorr",526,G__AlignmentDict_638_0_33, 102, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ycorr",527,G__AlignmentDict_638_0_34, 102, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xcorr",526,G__AlignmentDict_638_0_35, 102, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbSegP' - 1 - s f - - 0 - dz "
"f - - 0 - dx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ycorr",527,G__AlignmentDict_638_0_36, 102, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbSegP' - 1 - s f - - 0 - dz "
"f - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectPeak",993,G__AlignmentDict_638_0_37, 105, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"f - - 0 - dx f - - 0 - dy "
"f - - 0 - dz1 f - - 0 - dz2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectPeak",993,G__AlignmentDict_638_0_38, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"f - - 0 '10' dx f - - 0 '10' dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetPeak",900,G__AlignmentDict_638_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RankCouples0",1175,G__AlignmentDict_638_0_40, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RankCouples",1127,G__AlignmentDict_638_0_41, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RankCouples",1127,G__AlignmentDict_638_0_42, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2 "
"u 'TObjArray' - 1 - arrtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RankCouplesFast",1525,G__AlignmentDict_638_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - arrtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetPositionCorr",1774,G__AlignmentDict_638_0_44, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetAngularCorr",1635,G__AlignmentDict_638_0_45, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WideSearchXY",1168,G__AlignmentDict_638_0_46, 105, -1, -1, 0, 8, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat1 u 'EdbPattern' - 1 - pat2 "
"u 'EdbH2' - 1 - hxy f - - 0 - dz "
"f - - 0 - xmin f - - 0 - xmax "
"f - - 0 - ymin f - - 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveAsTree",979,G__AlignmentDict_638_0_47, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_638_0_48, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPositionAlignment::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_638_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPositionAlignment::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_638_0_50, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPositionAlignment::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_638_0_51, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPositionAlignment::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_638_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_638_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPositionAlignment::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_638_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPositionAlignment::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_638_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPositionAlignment::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_638_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPositionAlignment::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPositionAlignment", 2173, G__AlignmentDict_638_0_60, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbAlignmentMap(void) {
   /* EdbAlignmentMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentMap));
   G__memfunc_setup("EdbAlignmentMap",1480,G__AlignmentDict_673_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentMap), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' file C - - 10 '0' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitFile",788,G__AlignmentDict_673_0_2, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' file C - - 10 '0' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignMap",777,G__AlignmentDict_673_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveAll",680,G__AlignmentDict_673_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillMapTree",1077,G__AlignmentDict_673_0_5, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPositionAlignment' - 1 - pol i - - 0 - izone", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveMap",685,G__AlignmentDict_673_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractMapFromTree",1821,G__AlignmentDict_673_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyMap",804,G__AlignmentDict_673_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPattern' - 1 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckPattern",1212,G__AlignmentDict_673_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - p C - - 10 - suffix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckDZbase",1047,G__AlignmentDict_673_0_10, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'TEnv' - 1 - cenv u 'EdbPattern' - 1 - p1 "
"u 'EdbPattern' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectSampleForShrinkageCorr",2843,G__AlignmentDict_673_0_11, 105, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbPattern' - 1 - p u 'EdbPattern' - 1 - psel "
"f - - 0 - wmin f - - 0 - wmax "
"f - - 0 - tmin f - - 0 - tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Link",398,G__AlignmentDict_673_0_12, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Link",398,G__AlignmentDict_673_0_13, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'TEnv' - 1 - cenv u 'EdbPattern' - 1 - p1 "
"u 'EdbPattern' - 1 - p2 u 'EdbPlateP' - 1 - plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Link",398,G__AlignmentDict_673_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - file u 'EdbPlateP' - 1 - plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_run_patterns",1732,G__AlignmentDict_673_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 - runfile U 'TEnv' - 0 - cenv "
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPostreeAsPat",1499,G__AlignmentDict_673_0_16, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'EdbPattern' - 1 - pat C - - 10 - filename", (char*)NULL, (void*) G__func2void( (void (*)(EdbPattern&, const char*))(&EdbAlignmentMap::GetPostreeAsPat) ), 0);
   G__memfunc_setup("CheckXY",655,G__AlignmentDict_673_0_17, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'TEnv' - 1 - cenv u 'EdbPattern' - 1 - p1all "
"u 'EdbPattern' - 1 - p2all", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_673_0_18, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbAlignmentMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_673_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAlignmentMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_673_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbAlignmentMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_673_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbAlignmentMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_673_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_673_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAlignmentMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_673_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbAlignmentMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_673_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAlignmentMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_673_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbAlignmentMap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbAlignmentMap", 1606, G__AlignmentDict_673_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPeakProb(void) {
   /* EdbPeakProb */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeakProb));
   G__memfunc_setup("EdbPeakProb",1055,G__AlignmentDict_674_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeakProb), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Prob",403,G__AlignmentDict_674_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Probability2D",1271,G__AlignmentDict_674_0_3, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"U 'TH2F' - 0 - hd f - - 1 - xpeak "
"f - - 1 - ypeak", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_674_0_4, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPeakProb::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_674_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPeakProb::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_674_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPeakProb::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_674_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPeakProb::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_674_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_674_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPeakProb::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_674_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPeakProb::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_674_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPeakProb::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_674_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPeakProb::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbPeakProb", 1055, G__AlignmentDict_674_0_16, (int) ('i'), G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeakProb), -1, 0, 1, 1, 1, 0, "u 'EdbPeakProb' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbPeakProb", 1181, G__AlignmentDict_674_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_674_0_18, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_EdbPeakProb), -1, 1, 1, 1, 1, 0, "u 'EdbPeakProb' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbTestAl(void) {
   /* EdbTestAl */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbTestAl));
   G__memfunc_setup("EdbTestAl",856,G__AlignmentDict_706_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_EdbTestAl), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DubletsFilterOut",1649,G__AlignmentDict_706_0_2, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbPattern' - 1 - p f - - 0 - xbin "
"f - - 0 - ybin f - - 0 '5' dMin "
"f - - 0 '0.05' dtMin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PositionPlot",1268,G__AlignmentDict_706_0_3, 121, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"f - - 0 - xbin f - - 0 - ybin "
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PositionPlot",1268,G__AlignmentDict_706_0_4, 121, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"u 'TH2F' - 1 - hd f - - 0 '100' xbin "
"f - - 0 '100' ybin U 'TTree' - 0 '0' posnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HDistance",883,G__AlignmentDict_706_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTree",791,G__AlignmentDict_706_0_6, 105, -1, -1, 0, 1, 1, 1, 0, "f - - 0 '0' gdz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTrans",902,G__AlignmentDict_706_0_7, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbAffine2D' - 1 - aff f - - 0 '0' dz "
"C - - 10 '\"abs(dy)<400&&abs(dx)<400\"' ccut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckMaxBin",1053,G__AlignmentDict_706_0_8, 105, -1, -1, 0, 5, 1, 1, 0, 
"f - - 0 - dz f - - 0 - phi "
"f - - 1 - meanbin f - - 1 - xmax "
"f - - 1 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckMaxBin",1053,G__AlignmentDict_706_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_706_0_10, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbTestAl::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_706_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTestAl::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_706_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbTestAl::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_706_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbTestAl::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_706_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_706_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTestAl::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_706_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTestAl::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_706_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTestAl::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_706_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTestAl::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbTestAl", 856, G__AlignmentDict_706_0_22, (int) ('i'), G__get_linked_tagnum(&G__AlignmentDictLN_EdbTestAl), -1, 0, 1, 1, 1, 0, "u 'EdbTestAl' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbTestAl", 982, G__AlignmentDict_706_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_706_0_24, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_EdbTestAl), -1, 1, 1, 1, 1, 0, "u 'EdbTestAl' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbAlignmentV(void) {
   /* EdbAlignmentV */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentV));
   G__memfunc_setup("EdbAlignmentV",1280,G__AlignmentDict_707_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_EdbAlignmentV), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitOutputFile",1445,G__AlignmentDict_707_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"report_al.root\"' file C - - 10 '\"RECREATE\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseOutputFile",1543,G__AlignmentDict_707_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitHx",596,G__AlignmentDict_707_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n f - - 0 - min "
"f - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitHy",597,G__AlignmentDict_707_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n f - - 0 - min "
"f - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitHz",598,G__AlignmentDict_707_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n f - - 0 - min "
"f - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitHphi",797,G__AlignmentDict_707_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n f - - 0 - min "
"f - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitHshr0",857,G__AlignmentDict_707_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n f - - 0 - min "
"f - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitHshr1",858,G__AlignmentDict_707_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n f - - 0 - min "
"f - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StrDVsame",889,G__AlignmentDict_707_0_10, 67, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SideOK",543,G__AlignmentDict_707_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineGuessCell",1490,G__AlignmentDict_707_0_12, 121, -1, -1, 0, 11, 1, 1, 0, 
"f - - 0 - xmin1 f - - 0 - xmax1 "
"f - - 0 - ymin1 f - - 0 - ymax1 "
"f - - 0 - xmin2 f - - 0 - xmax2 "
"f - - 0 - ymin2 f - - 0 - ymax2 "
"i - - 0 - np1 i - - 0 - np2 "
"f - - 0 - binOK", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitPatCellN",1159,G__AlignmentDict_707_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbCell2' - 1 - cell u 'EdbPattern' - 1 - pat "
"i - - 0 - nx i - - 0 - ny", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitPatCellBin",1362,G__AlignmentDict_707_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - side u 'EdbPattern' - 1 - pat "
"f - - 0 - binx f - - 0 - biny", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCell",775,G__AlignmentDict_707_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbPattern' - 1 - pat", "limits should be already defined", (void*) NULL, 0);
   G__memfunc_setup("FillCell",775,G__AlignmentDict_707_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'TObjArray' - 1 - pat", "limits should be already defined", (void*) NULL, 0);
   G__memfunc_setup("FillGuessCell",1294,G__AlignmentDict_707_0_17, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"f - - 0 '1.' binOK f - - 0 '2000.' offsetMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillGuessCell",1294,G__AlignmentDict_707_0_18, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TObjArray' - 1 - p1 u 'TObjArray' - 1 - p2 "
"f - - 0 '1.' binOK f - - 0 '2000.' offsetMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HDistance",883,G__AlignmentDict_707_0_19, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"f - - 0 - dxMax f - - 0 - dyMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OptimiseVar1",1188,G__AlignmentDict_707_0_20, 105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - side i - - 0 - ivar "
"U 'EdbH2' - 0 '0' hdxy U 'EdbH2' - 0 '0' hdtxy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OptimiseVar2",1189,G__AlignmentDict_707_0_21, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 - side1 i - - 0 - ivar1 "
"i - - 0 - side2 i - - 0 - ivar2 "
"u 'EdbH2' - 1 - h12 U 'EdbH2' - 0 '0' hdxy "
"U 'EdbH2' - 0 '0' hdtxty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ncoins",618,G__AlignmentDict_707_0_22, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"F - - 0 - dvlim U 'EdbH2' - 0 '0' hdxy "
"U 'EdbH2' - 0 '0' hdtxty U 'TObjArray' - 0 '0' sel1 "
"U 'TObjArray' - 0 '0' sel2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValidCoinsidence",1620,G__AlignmentDict_707_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2 "
"F - - 0 - dvlim F - - 0 - dvfound", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInsideDVsame",1368,G__AlignmentDict_707_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCombinations",1645,G__AlignmentDict_707_0_25, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCombinations",1645,G__AlignmentDict_707_0_26, 105, -1, -1, 0, 4, 1, 1, 0, 
"F - - 0 - dv f - - 0 - dxMax "
"f - - 0 - dyMax g - - 0 - doFill", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoubletsFilterOut",1760,G__AlignmentDict_707_0_27, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - checkview U 'TH2F' - 0 '0' hxy "
"U 'TH2F' - 0 '0' htxty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectIsolated",1429,G__AlignmentDict_707_0_28, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectBestCouple",1622,G__AlignmentDict_707_0_29, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CoupleQuality",1361,G__AlignmentDict_707_0_30, 102, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ncp",289,G__AlignmentDict_707_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegCouple",1168,G__AlignmentDict_707_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbSegP' - 0 - s1 U 'EdbSegP' - 0 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcMeanDiff",1133,G__AlignmentDict_707_0_33, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - - 0 - ivar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcFractMeanDiff",1629,G__AlignmentDict_707_0_34, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - - 0 - ivar f - - 0 - fraction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDensityPeak",1506,G__AlignmentDict_707_0_35, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"u 'TArrayF' - 1 - arr f - - 0 - fraction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcMeanShr",1057,G__AlignmentDict_707_0_36, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - - 0 '0.1' tmin f - - 0 '2.' tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcMeanDZ",914,G__AlignmentDict_707_0_37, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - - 0 '0.1' tmin f - - 0 '2.' tmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcApplyMeanDiff",1651,G__AlignmentDict_707_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcApplyFractMeanDiff",2147,G__AlignmentDict_707_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDiff",762,G__AlignmentDict_707_0_40, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2 "
"F - - 0 - dvlim F - - 0 - dvfound", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCorrDiff",1168,G__AlignmentDict_707_0_41, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"F - - 0 - dvsame i - - 0 '0' side "
"i - - 0 '10' nlim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineCorrZ",882,G__AlignmentDict_707_0_42, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineCorrZ",882,G__AlignmentDict_707_0_43, 102, -1, -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 1 - sel1 u 'TObjArray' - 1 - sel2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineCorrPhi",1081,G__AlignmentDict_707_0_44, 102, -1, -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 1 - sel1 u 'TObjArray' - 1 - sel2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckEqualArr",1275,G__AlignmentDict_707_0_45, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2", (char*)NULL, (void*) G__func2void( (Int_t (*)(TObjArray&, TObjArray&))(&EdbAlignmentV::CheckEqualArr) ), 0);
   G__memfunc_setup("CalculateAffXYTurn",1781,G__AlignmentDict_707_0_46, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateAffXY",1356,G__AlignmentDict_707_0_47, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateAffTXTY",1524,G__AlignmentDict_707_0_48, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateAffXYTurn",1781,G__AlignmentDict_707_0_49, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2 "
"u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateAffXY",1356,G__AlignmentDict_707_0_50, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2 "
"u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateAffTXTY",1524,G__AlignmentDict_707_0_51, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2 "
"u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrToCoG",850,G__AlignmentDict_707_0_52, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbPattern' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrToCoG",850,G__AlignmentDict_707_0_53, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'TObjArray' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillThetaHist",1301,G__AlignmentDict_707_0_54, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbH2' - 1 - htxy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmin",412,G__AlignmentDict_707_0_55, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbPattern' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmax",414,G__AlignmentDict_707_0_56, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbPattern' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ymin",413,G__AlignmentDict_707_0_57, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbPattern' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ymax",415,G__AlignmentDict_707_0_58, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbPattern' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmin",412,G__AlignmentDict_707_0_59, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'TObjArray' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmax",414,G__AlignmentDict_707_0_60, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'TObjArray' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ymin",413,G__AlignmentDict_707_0_61, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'TObjArray' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ymax",415,G__AlignmentDict_707_0_62, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'TObjArray' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyLimitsOffset",1759,G__AlignmentDict_707_0_63, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - - 1 - xmin1 f - - 1 - xmax1 "
"f - - 1 - xmin2 f - - 1 - xmax2 "
"f - - 0 - offsetMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__AlignmentDict_707_0_64, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__AlignmentDict_707_0_65, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TX",172,G__AlignmentDict_707_0_66, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TY",173,G__AlignmentDict_707_0_67, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - side u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Var",297,G__AlignmentDict_707_0_68, 102, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - side u 'EdbSegP' - 1 - s "
"i - - 0 - ivar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Var",297,G__AlignmentDict_707_0_69, 102, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - side i - - 0 - iseg "
"i - - 0 - ivar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Corr2Aff",725,G__AlignmentDict_707_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbLayer' - 1 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Corr2Aff",725,G__AlignmentDict_707_0_71, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegCorr' - 1 - corr u 'EdbLayer' - 1 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_707_0_72, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbAlignmentV::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_707_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAlignmentV::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_707_0_74, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbAlignmentV::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_707_0_75, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbAlignmentV::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_707_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_707_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAlignmentV::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_707_0_81, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbAlignmentV::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_707_0_82, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAlignmentV::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_707_0_83, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbAlignmentV::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbAlignmentV", 1406, G__AlignmentDict_707_0_84, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPlateAlignment(void) {
   /* EdbPlateAlignment */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbPlateAlignment));
   G__memfunc_setup("EdbPlateAlignment",1696,G__AlignmentDict_708_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_EdbPlateAlignment), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Align",491,G__AlignmentDict_708_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestAl",589,G__AlignmentDict_708_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CoarseAl",778,G__AlignmentDict_708_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineAl",559,G__AlignmentDict_708_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineAlAff",828,G__AlignmentDict_708_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"u 'EdbLayer' - 1 - la1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoubletsFilterOut",1760,G__AlignmentDict_708_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParTestAl",1180,G__AlignmentDict_708_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - zcorr f - - 0 '500' dz "
"f - - 0 '0.03' dphi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParCoarseAl",1369,G__AlignmentDict_708_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - - 0 - zcorr f - - 0 '300' dpos "
"f - - 0 '0.015' dang f - - 0 '122' dz "
"f - - 0 '0.01' dphi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParFineAl",1150,G__AlignmentDict_708_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProduceReport",1358,G__AlignmentDict_708_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveCouplesTree",1530,G__AlignmentDict_708_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma",797,G__AlignmentDict_708_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - spos f - - 0 - sang", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SlowAlignXY",1089,G__AlignmentDict_708_0_14, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"u 'EdbH2' - 1 - hxy u 'EdbH1' - 1 - hphi "
"C - - 10 '\"slowal\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_708_0_15, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPlateAlignment::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_708_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlateAlignment::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_708_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPlateAlignment::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_708_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPlateAlignment::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_708_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_708_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlateAlignment::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_708_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPlateAlignment::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_708_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlateAlignment::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_708_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPlateAlignment::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPlateAlignment", 1822, G__AlignmentDict_708_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbLinking(void) {
   /* EdbLinking */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbLinking));
   G__memfunc_setup("EdbLinking",983,G__AlignmentDict_725_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_EdbLinking), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VerifyShrinkageCorr",1959,G__AlignmentDict_725_0_2, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPar",579,G__AlignmentDict_725_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TEnv' - 1 - env", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDoubletsPar",1413,G__AlignmentDict_725_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TEnv' - 1 - env", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPreselectionPar",1840,G__AlignmentDict_725_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSEQ' - 1 - seq u 'TEnv' - 1 - env", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveCouplesTree",1530,G__AlignmentDict_725_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FullLinking",1119,G__AlignmentDict_725_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 1 - p1 u 'TObjArray' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FullLinking",1119,G__AlignmentDict_725_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCombinationsAtMeanZ",2301,G__AlignmentDict_725_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 1 - p1 u 'TObjArray' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectShrinkage",1646,G__AlignmentDict_725_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TObjArray' - 1 - p1 u 'TObjArray' - 1 - p2 "
"f - - 0 - dshr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectShrinkage",1646,G__AlignmentDict_725_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"f - - 0 - dshr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectShrinkage",1646,G__AlignmentDict_725_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - dshr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Link",398,G__AlignmentDict_725_0_13, 121, -1, -1, 0, 7, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2 "
"u 'EdbLayer' - 1 - l1 u 'EdbLayer' - 1 - l2 "
"u 'TEnv' - 1 - env d - 'Double_t' 0 '-1' area1 "
"d - 'Double_t' 0 '-1' area2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectAngles",1324,G__AlignmentDict_725_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 1 - p1 u 'TObjArray' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteShrinkagePlots",1977,G__AlignmentDict_725_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EstimatePatternArea",1939,G__AlignmentDict_725_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'EdbPattern' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RankCouples",1127,G__AlignmentDict_725_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 1 - arr1 u 'TObjArray' - 1 - arr2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoubletsFilterOut",1760,G__AlignmentDict_725_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TObjArray' - 1 - p1 u 'TObjArray' - 1 - p2 "
"g - - 0 '0' fillhist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpDoubletsTree",1640,G__AlignmentDict_725_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbAlignmentV' - 1 - adup C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloneCouplesTree",1628,G__AlignmentDict_725_0_20, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 - ifile C - - 10 - ofile "
"U 'EdbAffine2D' - 0 '0' aff U 'TCut' - 0 '0' cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetApplyCorr",1224,G__AlignmentDict_725_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProduceReport",1358,G__AlignmentDict_725_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_725_0_23, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbLinking::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_725_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbLinking::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_725_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbLinking::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_725_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbLinking::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_725_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_725_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbLinking::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_725_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbLinking::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_725_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbLinking::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_725_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbLinking::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbLinking", 1109, G__AlignmentDict_725_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbCorrectionBin(void) {
   /* EdbCorrectionBin */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionBin));
   G__memfunc_setup("EdbCorrectionBin",1596,G__AlignmentDict_728_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionBin), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegCouple",1168,G__AlignmentDict_728_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbSegP' - 0 - s1 U 'EdbSegP' - 0 - s2", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalculateCorrections",2073,G__AlignmentDict_728_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddBin",546,G__AlignmentDict_728_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbCorrectionBin' - 1 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_728_0_5, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbCorrectionBin::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_728_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCorrectionBin::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_728_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbCorrectionBin::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_728_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbCorrectionBin::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_728_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_728_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCorrectionBin::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_728_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCorrectionBin::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_728_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCorrectionBin::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_728_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCorrectionBin::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbCorrectionBin", 1722, G__AlignmentDict_728_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbCorrectionMapper(void) {
   /* EdbCorrectionMapper */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionMapper));
   G__memfunc_setup("EdbCorrectionMapper",1928,G__AlignmentDict_729_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionMapper), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMap",690,G__AlignmentDict_729_0_2, 105, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - nx f - - 0 - minx "
"f - - 0 - maxx i - - 0 - ny "
"f - - 0 - miny f - - 0 - maxy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBin",569,G__AlignmentDict_729_0_3, 85, G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionBin), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBin",569,G__AlignmentDict_729_0_4, 85, G__get_linked_tagnum(&G__AlignmentDictLN_EdbCorrectionBin), -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateCorrections",2073,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCorrectionsTable",2033,G__AlignmentDict_729_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateLayerWithLocalCorr",2429,G__AlignmentDict_729_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbLayer' - 1 - la", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegCouple",1168,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbSegP' - 0 - s1 U 'EdbSegP' - 0 - s2", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__AlignmentDict_729_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillS",474,G__AlignmentDict_729_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbSegP' - 0 - s1 U 'EdbSegP' - 0 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__AlignmentDict_729_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' suffix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawSum",707,G__AlignmentDict_729_0_12, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TCanvas), -1, 0, 1, 1, 1, 0, "C - - 10 - suffix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawMap",684,G__AlignmentDict_729_0_13, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TCanvas), -1, 0, 2, 1, 1, 0, 
"u 'EdbCorrectionMap' - 1 - map C - - 10 '\"\"' suffix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCorrDZ",864,G__AlignmentDict_729_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MapDZ",444,G__AlignmentDict_729_0_15, 85, G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MapDV",440,G__AlignmentDict_729_0_16, 85, G__get_linked_tagnum(&G__AlignmentDictLN_EdbH2), -1, 0, 1, 1, 1, 0, "i - - 0 - ivar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmoothCorrections",1797,G__AlignmentDict_729_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_729_0_18, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbCorrectionMapper::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_729_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCorrectionMapper::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_729_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbCorrectionMapper::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_729_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbCorrectionMapper::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_729_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_729_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCorrectionMapper::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_729_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCorrectionMapper::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_729_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCorrectionMapper::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_729_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCorrectionMapper::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbCorrectionMapper", 2054, G__AlignmentDict_729_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncAlignmentDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalAlignmentDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcAlignmentDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__AlignmentDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR = { "iterator<random_access_iterator_tag,char,long,char*,char&>" , 115 , -1 };
G__linked_taginfo G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbAffine2D = { "EdbAffine2D" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TH1I = { "TH1I" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbH1 = { "EdbH1" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbH2 = { "EdbH2" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbPeak2 = { "EdbPeak2" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbCell2 = { "EdbCell2" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbID = { "EdbID" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbSegP = { "EdbSegP" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbSegCorr = { "EdbSegCorr" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbLayer = { "EdbLayer" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbCorrectionMap = { "EdbCorrectionMap" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TEventList = { "TEventList" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TCut = { "TCut" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbPattern = { "EdbPattern" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbPatCell2 = { "EdbPatCell2" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbPlateP = { "EdbPlateP" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbPositionAlignment = { "EdbPositionAlignment" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TGraph2D = { "TGraph2D" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbAlignmentMap = { "EdbAlignmentMap" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbPeakProb = { "EdbPeakProb" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TNtuple = { "TNtuple" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbTestAl = { "EdbTestAl" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbAlignmentV = { "EdbAlignmentV" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbPlateAlignment = { "EdbPlateAlignment" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbScanCond = { "EdbScanCond" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbSEQ = { "EdbSEQ" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbLinking = { "EdbLinking" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbLinkingcLcLRemoveDoublets = { "EdbLinking::RemoveDoublets" , 115 , -1 };
G__linked_taginfo G__AlignmentDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbCorrectionBin = { "EdbCorrectionBin" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_EdbCorrectionMapper = { "EdbCorrectionMapper" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableAlignmentDict() {
  G__AlignmentDictLN_TClass.tagnum = -1 ;
  G__AlignmentDictLN_TBuffer.tagnum = -1 ;
  G__AlignmentDictLN_TMemberInspector.tagnum = -1 ;
  G__AlignmentDictLN_TObject.tagnum = -1 ;
  G__AlignmentDictLN_TString.tagnum = -1 ;
  G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR.tagnum = -1 ;
  G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__AlignmentDictLN_TObjArray.tagnum = -1 ;
  G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__AlignmentDictLN_EdbAffine2D.tagnum = -1 ;
  G__AlignmentDictLN_TArrayF.tagnum = -1 ;
  G__AlignmentDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TH1I.tagnum = -1 ;
  G__AlignmentDictLN_TH1F.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TH2F.tagnum = -1 ;
  G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__AlignmentDictLN_EdbH1.tagnum = -1 ;
  G__AlignmentDictLN_EdbH2.tagnum = -1 ;
  G__AlignmentDictLN_EdbPeak2.tagnum = -1 ;
  G__AlignmentDictLN_EdbCell2.tagnum = -1 ;
  G__AlignmentDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_EdbID.tagnum = -1 ;
  G__AlignmentDictLN_EdbSegP.tagnum = -1 ;
  G__AlignmentDictLN_EdbSegCorr.tagnum = -1 ;
  G__AlignmentDictLN_EdbLayer.tagnum = -1 ;
  G__AlignmentDictLN_EdbCorrectionMap.tagnum = -1 ;
  G__AlignmentDictLN_TTree.tagnum = -1 ;
  G__AlignmentDictLN_TFile.tagnum = -1 ;
  G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__AlignmentDictLN_TEventList.tagnum = -1 ;
  G__AlignmentDictLN_TCut.tagnum = -1 ;
  G__AlignmentDictLN_EdbPattern.tagnum = -1 ;
  G__AlignmentDictLN_EdbPatCell2.tagnum = -1 ;
  G__AlignmentDictLN_EdbPlateP.tagnum = -1 ;
  G__AlignmentDictLN_EdbPositionAlignment.tagnum = -1 ;
  G__AlignmentDictLN_TGraph2D.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TVector3.tagnum = -1 ;
  G__AlignmentDictLN_TEnv.tagnum = -1 ;
  G__AlignmentDictLN_EdbAlignmentMap.tagnum = -1 ;
  G__AlignmentDictLN_EdbPeakProb.tagnum = -1 ;
  G__AlignmentDictLN_TNtuple.tagnum = -1 ;
  G__AlignmentDictLN_EdbTestAl.tagnum = -1 ;
  G__AlignmentDictLN_EdbAlignmentV.tagnum = -1 ;
  G__AlignmentDictLN_EdbPlateAlignment.tagnum = -1 ;
  G__AlignmentDictLN_EdbScanCond.tagnum = -1 ;
  G__AlignmentDictLN_EdbSEQ.tagnum = -1 ;
  G__AlignmentDictLN_EdbLinking.tagnum = -1 ;
  G__AlignmentDictLN_EdbLinkingcLcLRemoveDoublets.tagnum = -1 ;
  G__AlignmentDictLN_TCanvas.tagnum = -1 ;
  G__AlignmentDictLN_EdbCorrectionBin.tagnum = -1 ;
  G__AlignmentDictLN_EdbCorrectionMapper.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableAlignmentDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TString);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbAffine2D);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TH1I);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbH1);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbH2);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbPeak2);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbCell2);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbID);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbSegP);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbSegCorr);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbLayer);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbCorrectionMap);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TEventList);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TCut);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbPattern);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbPatCell2),sizeof(EdbPatCell2),-1,62720,"helper class to analyse the single pattern",G__setup_memvarEdbPatCell2,G__setup_memfuncEdbPatCell2);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbPlateP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbPositionAlignment),sizeof(EdbPositionAlignment),-1,29952,"new alignment class developed mainly for compton search",G__setup_memvarEdbPositionAlignment,G__setup_memfuncEdbPositionAlignment);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TGraph2D);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TEnv);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbAlignmentMap),sizeof(EdbAlignmentMap),-1,29952,"2-d alignment map finder",G__setup_memvarEdbAlignmentMap,G__setup_memfuncEdbAlignmentMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbPeakProb),sizeof(EdbPeakProb),-1,29952,"prob the peak probability (2-dim only for the moment)",G__setup_memvarEdbPeakProb,G__setup_memfuncEdbPeakProb);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TNtuple);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbTestAl),sizeof(EdbTestAl),-1,29952,"alignment test class",G__setup_memvarEdbTestAl,G__setup_memfuncEdbTestAl);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbAlignmentV),sizeof(EdbAlignmentV),-1,29952,"universal basic alignment class",G__setup_memvarEdbAlignmentV,G__setup_memfuncEdbAlignmentV);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbPlateAlignment),sizeof(EdbPlateAlignment),-1,29952,"plate-to-plate alignment",G__setup_memvarEdbPlateAlignment,G__setup_memfuncEdbPlateAlignment);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbScanCond);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbSEQ);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbLinking),sizeof(EdbLinking),-1,29952,"microtracks linking in one plate",G__setup_memvarEdbLinking,G__setup_memfuncEdbLinking);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbLinkingcLcLRemoveDoublets);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TCanvas);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbCorrectionBin),sizeof(EdbCorrectionBin),-1,29952,"corrections bin",G__setup_memvarEdbCorrectionBin,G__setup_memfuncEdbCorrectionBin);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_EdbCorrectionMapper),sizeof(EdbCorrectionMapper),-1,29952,"to calculate correction map",G__setup_memvarEdbCorrectionMapper,G__setup_memfuncEdbCorrectionMapper);
}
extern "C" void G__cpp_setupAlignmentDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupAlignmentDict()");
  G__set_cpp_environmentAlignmentDict();
  G__cpp_setup_tagtableAlignmentDict();

  G__cpp_setup_inheritanceAlignmentDict();

  G__cpp_setup_typetableAlignmentDict();

  G__cpp_setup_memvarAlignmentDict();

  G__cpp_setup_memfuncAlignmentDict();
  G__cpp_setup_globalAlignmentDict();
  G__cpp_setup_funcAlignmentDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncAlignmentDict();
  return;
}
class G__cpp_setup_initAlignmentDict {
  public:
    G__cpp_setup_initAlignmentDict() { G__add_setup_func("AlignmentDict",(G__incsetup)(&G__cpp_setupAlignmentDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initAlignmentDict() { G__remove_setup_func("AlignmentDict"); }
};
G__cpp_setup_initAlignmentDict G__cpp_setup_initializerAlignmentDict;

