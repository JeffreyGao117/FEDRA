//
// File generated by rootcint at Thu Dec 19 18:19:09 2019

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME ScanCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ScanCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void EdbScanClientBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbScanClientBase(void *p);
   static void deleteArray_EdbScanClientBase(void *p);
   static void destruct_EdbScanClientBase(void *p);
   static void streamer_EdbScanClientBase(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbScanClientBase*)
   {
      ::EdbScanClientBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbScanClientBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbScanClientBase", ::EdbScanClientBase::Class_Version(), "./EdbScanClientBase.h", 14,
                  typeid(::EdbScanClientBase), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbScanClientBase::Dictionary, isa_proxy, 0,
                  sizeof(::EdbScanClientBase) );
      instance.SetDelete(&delete_EdbScanClientBase);
      instance.SetDeleteArray(&deleteArray_EdbScanClientBase);
      instance.SetDestructor(&destruct_EdbScanClientBase);
      instance.SetStreamerFunc(&streamer_EdbScanClientBase);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbScanClientBase*)
   {
      return GenerateInitInstanceLocal((::EdbScanClientBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbScanClientBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbScanClientCommon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbScanClientCommon(void *p);
   static void deleteArray_EdbScanClientCommon(void *p);
   static void destruct_EdbScanClientCommon(void *p);
   static void streamer_EdbScanClientCommon(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbScanClientCommon*)
   {
      ::EdbScanClientCommon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbScanClientCommon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbScanClientCommon", ::EdbScanClientCommon::Class_Version(), "./EdbScanClientBase.h", 55,
                  typeid(::EdbScanClientCommon), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbScanClientCommon::Dictionary, isa_proxy, 0,
                  sizeof(::EdbScanClientCommon) );
      instance.SetDelete(&delete_EdbScanClientCommon);
      instance.SetDeleteArray(&deleteArray_EdbScanClientCommon);
      instance.SetDestructor(&destruct_EdbScanClientCommon);
      instance.SetStreamerFunc(&streamer_EdbScanClientCommon);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbScanClientCommon*)
   {
      return GenerateInitInstanceLocal((::EdbScanClientCommon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbScanClientCommon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbScanClient_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbScanClient(void *p = 0);
   static void *newArray_EdbScanClient(Long_t size, void *p);
   static void delete_EdbScanClient(void *p);
   static void deleteArray_EdbScanClient(void *p);
   static void destruct_EdbScanClient(void *p);
   static void streamer_EdbScanClient(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbScanClient*)
   {
      ::EdbScanClient *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbScanClient >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbScanClient", ::EdbScanClient::Class_Version(), "./EdbScanClient.h", 12,
                  typeid(::EdbScanClient), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbScanClient::Dictionary, isa_proxy, 0,
                  sizeof(::EdbScanClient) );
      instance.SetNew(&new_EdbScanClient);
      instance.SetNewArray(&newArray_EdbScanClient);
      instance.SetDelete(&delete_EdbScanClient);
      instance.SetDeleteArray(&deleteArray_EdbScanClient);
      instance.SetDestructor(&destruct_EdbScanClient);
      instance.SetStreamerFunc(&streamer_EdbScanClient);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbScanClient*)
   {
      return GenerateInitInstanceLocal((::EdbScanClient*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbScanClient*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbScanProc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbScanProc(void *p = 0);
   static void *newArray_EdbScanProc(Long_t size, void *p);
   static void delete_EdbScanProc(void *p);
   static void deleteArray_EdbScanProc(void *p);
   static void destruct_EdbScanProc(void *p);
   static void streamer_EdbScanProc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbScanProc*)
   {
      ::EdbScanProc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbScanProc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbScanProc", ::EdbScanProc::Class_Version(), "./EdbScanProc.h", 12,
                  typeid(::EdbScanProc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbScanProc::Dictionary, isa_proxy, 0,
                  sizeof(::EdbScanProc) );
      instance.SetNew(&new_EdbScanProc);
      instance.SetNewArray(&newArray_EdbScanProc);
      instance.SetDelete(&delete_EdbScanProc);
      instance.SetDeleteArray(&deleteArray_EdbScanProc);
      instance.SetDestructor(&destruct_EdbScanProc);
      instance.SetStreamerFunc(&streamer_EdbScanProc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbScanProc*)
   {
      return GenerateInitInstanceLocal((::EdbScanProc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbScanProc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbProcPars_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbProcPars(void *p = 0);
   static void *newArray_EdbProcPars(Long_t size, void *p);
   static void delete_EdbProcPars(void *p);
   static void deleteArray_EdbProcPars(void *p);
   static void destruct_EdbProcPars(void *p);
   static void streamer_EdbProcPars(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbProcPars*)
   {
      ::EdbProcPars *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbProcPars >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbProcPars", ::EdbProcPars::Class_Version(), "./EdbProcPars.h", 6,
                  typeid(::EdbProcPars), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbProcPars::Dictionary, isa_proxy, 0,
                  sizeof(::EdbProcPars) );
      instance.SetNew(&new_EdbProcPars);
      instance.SetNewArray(&newArray_EdbProcPars);
      instance.SetDelete(&delete_EdbProcPars);
      instance.SetDeleteArray(&deleteArray_EdbProcPars);
      instance.SetDestructor(&destruct_EdbProcPars);
      instance.SetStreamerFunc(&streamer_EdbProcPars);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbProcPars*)
   {
      return GenerateInitInstanceLocal((::EdbProcPars*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbProcPars*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbTrackAssembler_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbTrackAssembler(void *p = 0);
   static void *newArray_EdbTrackAssembler(Long_t size, void *p);
   static void delete_EdbTrackAssembler(void *p);
   static void deleteArray_EdbTrackAssembler(void *p);
   static void destruct_EdbTrackAssembler(void *p);
   static void streamer_EdbTrackAssembler(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbTrackAssembler*)
   {
      ::EdbTrackAssembler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbTrackAssembler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbTrackAssembler", ::EdbTrackAssembler::Class_Version(), "./EdbScanTracking.h", 16,
                  typeid(::EdbTrackAssembler), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbTrackAssembler::Dictionary, isa_proxy, 0,
                  sizeof(::EdbTrackAssembler) );
      instance.SetNew(&new_EdbTrackAssembler);
      instance.SetNewArray(&newArray_EdbTrackAssembler);
      instance.SetDelete(&delete_EdbTrackAssembler);
      instance.SetDeleteArray(&deleteArray_EdbTrackAssembler);
      instance.SetDestructor(&destruct_EdbTrackAssembler);
      instance.SetStreamerFunc(&streamer_EdbTrackAssembler);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbTrackAssembler*)
   {
      return GenerateInitInstanceLocal((::EdbTrackAssembler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbTrackAssembler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbScanTracking_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbScanTracking(void *p = 0);
   static void *newArray_EdbScanTracking(Long_t size, void *p);
   static void delete_EdbScanTracking(void *p);
   static void deleteArray_EdbScanTracking(void *p);
   static void destruct_EdbScanTracking(void *p);
   static void streamer_EdbScanTracking(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbScanTracking*)
   {
      ::EdbScanTracking *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbScanTracking >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbScanTracking", ::EdbScanTracking::Class_Version(), "./EdbScanTracking.h", 80,
                  typeid(::EdbScanTracking), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbScanTracking::Dictionary, isa_proxy, 0,
                  sizeof(::EdbScanTracking) );
      instance.SetNew(&new_EdbScanTracking);
      instance.SetNewArray(&newArray_EdbScanTracking);
      instance.SetDelete(&delete_EdbScanTracking);
      instance.SetDeleteArray(&deleteArray_EdbScanTracking);
      instance.SetDestructor(&destruct_EdbScanTracking);
      instance.SetStreamerFunc(&streamer_EdbScanTracking);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbScanTracking*)
   {
      return GenerateInitInstanceLocal((::EdbScanTracking*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbScanTracking*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbScanClientPav_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbScanClientPav(void *p = 0);
   static void *newArray_EdbScanClientPav(Long_t size, void *p);
   static void delete_EdbScanClientPav(void *p);
   static void deleteArray_EdbScanClientPav(void *p);
   static void destruct_EdbScanClientPav(void *p);
   static void streamer_EdbScanClientPav(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbScanClientPav*)
   {
      ::EdbScanClientPav *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbScanClientPav >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbScanClientPav", ::EdbScanClientPav::Class_Version(), "./EdbScanClientPav.h", 9,
                  typeid(::EdbScanClientPav), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbScanClientPav::Dictionary, isa_proxy, 0,
                  sizeof(::EdbScanClientPav) );
      instance.SetNew(&new_EdbScanClientPav);
      instance.SetNewArray(&newArray_EdbScanClientPav);
      instance.SetDelete(&delete_EdbScanClientPav);
      instance.SetDeleteArray(&deleteArray_EdbScanClientPav);
      instance.SetDestructor(&destruct_EdbScanClientPav);
      instance.SetStreamerFunc(&streamer_EdbScanClientPav);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbScanClientPav*)
   {
      return GenerateInitInstanceLocal((::EdbScanClientPav*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbScanClientPav*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbScanClientSysal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbScanClientSysal(void *p = 0);
   static void *newArray_EdbScanClientSysal(Long_t size, void *p);
   static void delete_EdbScanClientSysal(void *p);
   static void deleteArray_EdbScanClientSysal(void *p);
   static void destruct_EdbScanClientSysal(void *p);
   static void streamer_EdbScanClientSysal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbScanClientSysal*)
   {
      ::EdbScanClientSysal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbScanClientSysal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbScanClientSysal", ::EdbScanClientSysal::Class_Version(), "./EdbScanClientSysal.h", 14,
                  typeid(::EdbScanClientSysal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbScanClientSysal::Dictionary, isa_proxy, 0,
                  sizeof(::EdbScanClientSysal) );
      instance.SetNew(&new_EdbScanClientSysal);
      instance.SetNewArray(&newArray_EdbScanClientSysal);
      instance.SetDelete(&delete_EdbScanClientSysal);
      instance.SetDeleteArray(&deleteArray_EdbScanClientSysal);
      instance.SetDestructor(&destruct_EdbScanClientSysal);
      instance.SetStreamerFunc(&streamer_EdbScanClientSysal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbScanClientSysal*)
   {
      return GenerateInitInstanceLocal((::EdbScanClientSysal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbScanClientSysal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr EdbScanClientBase::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbScanClientBase::Class_Name()
{
   return "EdbScanClientBase";
}

//______________________________________________________________________________
const char *EdbScanClientBase::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbScanClientBase::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbScanClientBase::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbScanClientBase::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientBase*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbScanClientCommon::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbScanClientCommon::Class_Name()
{
   return "EdbScanClientCommon";
}

//______________________________________________________________________________
const char *EdbScanClientCommon::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientCommon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbScanClientCommon::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientCommon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbScanClientCommon::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientCommon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbScanClientCommon::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientCommon*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbScanClient::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbScanClient::Class_Name()
{
   return "EdbScanClient";
}

//______________________________________________________________________________
const char *EdbScanClient::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClient*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbScanClient::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClient*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbScanClient::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClient*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbScanClient::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClient*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbScanProc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbScanProc::Class_Name()
{
   return "EdbScanProc";
}

//______________________________________________________________________________
const char *EdbScanProc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanProc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbScanProc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanProc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbScanProc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanProc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbScanProc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanProc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbProcPars::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbProcPars::Class_Name()
{
   return "EdbProcPars";
}

//______________________________________________________________________________
const char *EdbProcPars::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbProcPars*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbProcPars::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbProcPars*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbProcPars::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbProcPars*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbProcPars::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbProcPars*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbTrackAssembler::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbTrackAssembler::Class_Name()
{
   return "EdbTrackAssembler";
}

//______________________________________________________________________________
const char *EdbTrackAssembler::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackAssembler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbTrackAssembler::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackAssembler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbTrackAssembler::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackAssembler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbTrackAssembler::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackAssembler*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbScanTracking::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbScanTracking::Class_Name()
{
   return "EdbScanTracking";
}

//______________________________________________________________________________
const char *EdbScanTracking::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanTracking*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbScanTracking::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanTracking*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbScanTracking::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanTracking*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbScanTracking::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanTracking*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbScanClientPav::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbScanClientPav::Class_Name()
{
   return "EdbScanClientPav";
}

//______________________________________________________________________________
const char *EdbScanClientPav::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientPav*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbScanClientPav::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientPav*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbScanClientPav::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientPav*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbScanClientPav::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientPav*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbScanClientSysal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbScanClientSysal::Class_Name()
{
   return "EdbScanClientSysal";
}

//______________________________________________________________________________
const char *EdbScanClientSysal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientSysal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbScanClientSysal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientSysal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbScanClientSysal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientSysal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbScanClientSysal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbScanClientSysal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void EdbScanClientBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbScanClientBase.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b.CheckByteCount(R__s, R__c, EdbScanClientBase::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbScanClientBase::IsA(), kTRUE);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbScanClientBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbScanClientBase.
      TClass *R__cl = ::EdbScanClientBase::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbScanClientBase(void *p) {
      delete ((::EdbScanClientBase*)p);
   }
   static void deleteArray_EdbScanClientBase(void *p) {
      delete [] ((::EdbScanClientBase*)p);
   }
   static void destruct_EdbScanClientBase(void *p) {
      typedef ::EdbScanClientBase current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbScanClientBase(TBuffer &buf, void *obj) {
      ((::EdbScanClientBase*)obj)->::EdbScanClientBase::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbScanClientBase

//______________________________________________________________________________
void EdbScanClientCommon::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbScanClientCommon.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbScanClientBase::Streamer(R__b);
      R__b >> eSock;
      R__b.ReadStaticArray((char*)eCMD);
      R__b.ReadStaticArray((char*)eMess);
      R__b.ReadStaticArray((char*)eMess1);
      R__b >> eNXview;
      R__b >> eNYview;
      R__b >> eXstep;
      R__b >> eYstep;
      R__b >> eMAXSCANATTEMPTS;
      R__b >> eMAXFAILS;
      R__b >> ePORT;
      eServer.Streamer(R__b);
      eRawDirServer.Streamer(R__b);
      eRawDirClient.Streamer(R__b);
      eProcTgtServer.Streamer(R__b);
      eProcPthServer.Streamer(R__b);
      eServerCreatedRunName.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbScanClientCommon::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbScanClientCommon::IsA(), kTRUE);
      EdbScanClientBase::Streamer(R__b);
      R__b << eSock;
      R__b.WriteArray(eCMD, 256);
      R__b.WriteArray(eMess, 256);
      R__b.WriteArray(eMess1, 256);
      R__b << eNXview;
      R__b << eNYview;
      R__b << eXstep;
      R__b << eYstep;
      R__b << eMAXSCANATTEMPTS;
      R__b << eMAXFAILS;
      R__b << ePORT;
      eServer.Streamer(R__b);
      eRawDirServer.Streamer(R__b);
      eRawDirClient.Streamer(R__b);
      eProcTgtServer.Streamer(R__b);
      eProcPthServer.Streamer(R__b);
      eServerCreatedRunName.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbScanClientCommon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbScanClientCommon.
      TClass *R__cl = ::EdbScanClientCommon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eSock", &eSock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCMD[256]", eCMD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMess[256]", eMess);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMess1[256]", eMess1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNXview", &eNXview);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNYview", &eNYview);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXstep", &eXstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYstep", &eYstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMAXSCANATTEMPTS", &eMAXSCANATTEMPTS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMAXFAILS", &eMAXFAILS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePORT", &ePORT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eServer", &eServer);
      R__insp.InspectMember(eServer, "eServer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRawDirServer", &eRawDirServer);
      R__insp.InspectMember(eRawDirServer, "eRawDirServer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRawDirClient", &eRawDirClient);
      R__insp.InspectMember(eRawDirClient, "eRawDirClient.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eProcTgtServer", &eProcTgtServer);
      R__insp.InspectMember(eProcTgtServer, "eProcTgtServer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eProcPthServer", &eProcPthServer);
      R__insp.InspectMember(eProcPthServer, "eProcPthServer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eServerCreatedRunName", &eServerCreatedRunName);
      R__insp.InspectMember(eServerCreatedRunName, "eServerCreatedRunName.");
      EdbScanClientBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbScanClientCommon(void *p) {
      delete ((::EdbScanClientCommon*)p);
   }
   static void deleteArray_EdbScanClientCommon(void *p) {
      delete [] ((::EdbScanClientCommon*)p);
   }
   static void destruct_EdbScanClientCommon(void *p) {
      typedef ::EdbScanClientCommon current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbScanClientCommon(TBuffer &buf, void *obj) {
      ((::EdbScanClientCommon*)obj)->::EdbScanClientCommon::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbScanClientCommon

//______________________________________________________________________________
void EdbScanClientPav::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbScanClientPav.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbScanClientCommon::Streamer(R__b);
      R__b.StreamObject(&(m_mm),typeid(MessageManager));
      R__b.StreamObject(&(m_mr),typeid(MessageReader));
      R__b >> m_insize;
      {
         vector<uint8> &R__stl =  m_inbuf;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      { TString R__str; R__str.Streamer(R__b); m_pathLib = R__str.Data(); }
      { TString R__str; R__str.Streamer(R__b); m_pathName = R__str.Data(); }
      { TString R__str; R__str.Streamer(R__b); m_predPathName = R__str.Data(); }
      R__b >> m_scanningStarted;
      R__b >> m_createdTarget;
      R__b.CheckByteCount(R__s, R__c, EdbScanClientPav::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbScanClientPav::IsA(), kTRUE);
      EdbScanClientCommon::Streamer(R__b);
      R__b.StreamObject(&(m_mm),typeid(MessageManager));
      R__b.StreamObject(&(m_mr),typeid(MessageReader));
      R__b << m_insize;
      {
         vector<uint8> &R__stl =  m_inbuf;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<uint8>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      { TString R__str = m_pathLib.c_str(); R__str.Streamer(R__b);}
      { TString R__str = m_pathName.c_str(); R__str.Streamer(R__b);}
      { TString R__str = m_predPathName.c_str(); R__str.Streamer(R__b);}
      R__b << m_scanningStarted;
      R__b << m_createdTarget;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbScanClientPav::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbScanClientPav.
      TClass *R__cl = ::EdbScanClientPav::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_mm", (void*)&m_mm);
      R__insp.InspectMember("MessageManager", (void*)&m_mm, "m_mm.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_mr", (void*)&m_mr);
      R__insp.InspectMember("MessageReader", (void*)&m_mr, "m_mr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_insize", &m_insize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_inbuf", (void*)&m_inbuf);
      R__insp.InspectMember("vector<uint8>", (void*)&m_inbuf, "m_inbuf.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_pathLib", (void*)&m_pathLib);
      R__insp.InspectMember("string", (void*)&m_pathLib, "m_pathLib.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_pathName", (void*)&m_pathName);
      R__insp.InspectMember("string", (void*)&m_pathName, "m_pathName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_predPathName", (void*)&m_predPathName);
      R__insp.InspectMember("string", (void*)&m_predPathName, "m_predPathName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_scanningStarted", &m_scanningStarted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_createdTarget", &m_createdTarget);
      EdbScanClientCommon::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbScanClientPav(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EdbScanClientPav : new ::EdbScanClientPav;
   }
   static void *newArray_EdbScanClientPav(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EdbScanClientPav[nElements] : new ::EdbScanClientPav[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbScanClientPav(void *p) {
      delete ((::EdbScanClientPav*)p);
   }
   static void deleteArray_EdbScanClientPav(void *p) {
      delete [] ((::EdbScanClientPav*)p);
   }
   static void destruct_EdbScanClientPav(void *p) {
      typedef ::EdbScanClientPav current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbScanClientPav(TBuffer &buf, void *obj) {
      ((::EdbScanClientPav*)obj)->::EdbScanClientPav::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbScanClientPav

//______________________________________________________________________________
void EdbScanClientSysal::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbScanClientSysal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbScanClientCommon::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbScanClientSysal::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbScanClientSysal::IsA(), kTRUE);
      EdbScanClientCommon::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbScanClientSysal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbScanClientSysal.
      TClass *R__cl = ::EdbScanClientSysal::IsA();
      if (R__cl || R__insp.IsA()) { }
      EdbScanClientCommon::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbScanClientSysal(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EdbScanClientSysal : new ::EdbScanClientSysal;
   }
   static void *newArray_EdbScanClientSysal(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EdbScanClientSysal[nElements] : new ::EdbScanClientSysal[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbScanClientSysal(void *p) {
      delete ((::EdbScanClientSysal*)p);
   }
   static void deleteArray_EdbScanClientSysal(void *p) {
      delete [] ((::EdbScanClientSysal*)p);
   }
   static void destruct_EdbScanClientSysal(void *p) {
      typedef ::EdbScanClientSysal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbScanClientSysal(TBuffer &buf, void *obj) {
      ((::EdbScanClientSysal*)obj)->::EdbScanClientSysal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbScanClientSysal

//______________________________________________________________________________
void EdbScanClient::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbScanClient.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbScanClientBase::Streamer(R__b);
      R__b.StreamObject(&(m_implementation),typeid(auto_ptr<EdbScanClientCommon>));
      R__b >> eServerCreatesRootFile;
      R__b.CheckByteCount(R__s, R__c, EdbScanClient::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbScanClient::IsA(), kTRUE);
      EdbScanClientBase::Streamer(R__b);
      R__b.StreamObject(&(m_implementation),typeid(auto_ptr<EdbScanClientCommon>));
      R__b << eServerCreatesRootFile;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbScanClient::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbScanClient.
      TClass *R__cl = ::EdbScanClient::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_implementation", (void*)&m_implementation);
      R__insp.InspectMember("auto_ptr<EdbScanClientCommon>", (void*)&m_implementation, "m_implementation.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eServerCreatesRootFile", &eServerCreatesRootFile);
      EdbScanClientBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbScanClient(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EdbScanClient : new ::EdbScanClient;
   }
   static void *newArray_EdbScanClient(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EdbScanClient[nElements] : new ::EdbScanClient[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbScanClient(void *p) {
      delete ((::EdbScanClient*)p);
   }
   static void deleteArray_EdbScanClient(void *p) {
      delete [] ((::EdbScanClient*)p);
   }
   static void destruct_EdbScanClient(void *p) {
      typedef ::EdbScanClient current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbScanClient(TBuffer &buf, void *obj) {
      ((::EdbScanClient*)obj)->::EdbScanClient::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbScanClient

//______________________________________________________________________________
void EdbScanProc::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbScanProc.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      eProcDirClient.Streamer(R__b);
      eProcDirServer.Streamer(R__b);
      eParDir.Streamer(R__b);
      eServerCreatedRunName.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbScanProc::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbScanProc::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      eProcDirClient.Streamer(R__b);
      eProcDirServer.Streamer(R__b);
      eParDir.Streamer(R__b);
      eServerCreatedRunName.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbScanProc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbScanProc.
      TClass *R__cl = ::EdbScanProc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eProcDirClient", &eProcDirClient);
      R__insp.InspectMember(eProcDirClient, "eProcDirClient.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eProcDirServer", &eProcDirServer);
      R__insp.InspectMember(eProcDirServer, "eProcDirServer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eParDir", &eParDir);
      R__insp.InspectMember(eParDir, "eParDir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eServerCreatedRunName", &eServerCreatedRunName);
      R__insp.InspectMember(eServerCreatedRunName, "eServerCreatedRunName.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbScanProc(void *p) {
      return  p ? new(p) ::EdbScanProc : new ::EdbScanProc;
   }
   static void *newArray_EdbScanProc(Long_t nElements, void *p) {
      return p ? new(p) ::EdbScanProc[nElements] : new ::EdbScanProc[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbScanProc(void *p) {
      delete ((::EdbScanProc*)p);
   }
   static void deleteArray_EdbScanProc(void *p) {
      delete [] ((::EdbScanProc*)p);
   }
   static void destruct_EdbScanProc(void *p) {
      typedef ::EdbScanProc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbScanProc(TBuffer &buf, void *obj) {
      ((::EdbScanProc*)obj)->::EdbScanProc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbScanProc

//______________________________________________________________________________
void EdbProcPars::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbProcPars.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbProcPars::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbProcPars::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbProcPars::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbProcPars.
      TClass *R__cl = ::EdbProcPars::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbProcPars(void *p) {
      return  p ? new(p) ::EdbProcPars : new ::EdbProcPars;
   }
   static void *newArray_EdbProcPars(Long_t nElements, void *p) {
      return p ? new(p) ::EdbProcPars[nElements] : new ::EdbProcPars[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbProcPars(void *p) {
      delete ((::EdbProcPars*)p);
   }
   static void deleteArray_EdbProcPars(void *p) {
      delete [] ((::EdbProcPars*)p);
   }
   static void destruct_EdbProcPars(void *p) {
      typedef ::EdbProcPars current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbProcPars(TBuffer &buf, void *obj) {
      ((::EdbProcPars*)obj)->::EdbProcPars::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbProcPars

//______________________________________________________________________________
void EdbScanTracking::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbScanTracking.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eNsegMin;
      R__b >> eNgapMax;
      R__b >> eSproc;
      R__b >> eDoRealign;
      R__b.CheckByteCount(R__s, R__c, EdbScanTracking::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbScanTracking::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eNsegMin;
      R__b << eNgapMax;
      R__b << eSproc;
      R__b << eDoRealign;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbScanTracking::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbScanTracking.
      TClass *R__cl = ::EdbScanTracking::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNsegMin", &eNsegMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNgapMax", &eNgapMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eSproc", &eSproc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoRealign", &eDoRealign);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbScanTracking(void *p) {
      return  p ? new(p) ::EdbScanTracking : new ::EdbScanTracking;
   }
   static void *newArray_EdbScanTracking(Long_t nElements, void *p) {
      return p ? new(p) ::EdbScanTracking[nElements] : new ::EdbScanTracking[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbScanTracking(void *p) {
      delete ((::EdbScanTracking*)p);
   }
   static void deleteArray_EdbScanTracking(void *p) {
      delete [] ((::EdbScanTracking*)p);
   }
   static void destruct_EdbScanTracking(void *p) {
      typedef ::EdbScanTracking current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbScanTracking(TBuffer &buf, void *obj) {
      ((::EdbScanTracking*)obj)->::EdbScanTracking::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbScanTracking

//______________________________________________________________________________
void EdbTrackAssembler::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbTrackAssembler.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      eSegments.Streamer(R__b);
      eTracks.Streamer(R__b);
      eTrZ.Streamer(R__b);
      R__b >> eZ;
      eTrZMap.Streamer(R__b);
      R__b >> eMapMarg;
      R__b >> eCellN;
      eFitter.Streamer(R__b);
      R__b >> eDTmax;
      R__b >> eDRmax;
      R__b >> eDZGapMax;
      R__b >> eProbMin;
      R__b >> eDoUseMCS;
      R__b >> eCollisionsRate;
      eCond.Streamer(R__b);
      R__b >> eHistProbBest;
      R__b >> eHistProbAll;
      R__b >> eHistThetaBest;
      R__b >> eHistThetaAll;
      R__b >> eHistNcnd;
      R__b.CheckByteCount(R__s, R__c, EdbTrackAssembler::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbTrackAssembler::IsA(), kTRUE);
      TObject::Streamer(R__b);
      eSegments.Streamer(R__b);
      eTracks.Streamer(R__b);
      eTrZ.Streamer(R__b);
      R__b << eZ;
      eTrZMap.Streamer(R__b);
      R__b << eMapMarg;
      R__b << eCellN;
      eFitter.Streamer(R__b);
      R__b << eDTmax;
      R__b << eDRmax;
      R__b << eDZGapMax;
      R__b << eProbMin;
      R__b << eDoUseMCS;
      R__b << eCollisionsRate;
      eCond.Streamer(R__b);
      R__b << (TObject*)eHistProbBest;
      R__b << (TObject*)eHistProbAll;
      R__b << (TObject*)eHistThetaBest;
      R__b << (TObject*)eHistThetaAll;
      R__b << (TObject*)eHistNcnd;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbTrackAssembler::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbTrackAssembler.
      TClass *R__cl = ::EdbTrackAssembler::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSegments", &eSegments);
      R__insp.InspectMember(eSegments, "eSegments.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTracks", &eTracks);
      R__insp.InspectMember(eTracks, "eTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTrZ", &eTrZ);
      R__insp.InspectMember(eTrZ, "eTrZ.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ", &eZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTrZMap", &eTrZMap);
      R__insp.InspectMember(eTrZMap, "eTrZMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMapMarg", &eMapMarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCellN", &eCellN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFitter", &eFitter);
      R__insp.InspectMember(eFitter, "eFitter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTmax", &eDTmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDRmax", &eDRmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZGapMax", &eDZGapMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eProbMin", &eProbMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoUseMCS", &eDoUseMCS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCollisionsRate", &eCollisionsRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCond", &eCond);
      R__insp.InspectMember(eCond, "eCond.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHistProbBest", &eHistProbBest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHistProbAll", &eHistProbAll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHistThetaBest", &eHistThetaBest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHistThetaAll", &eHistThetaAll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHistNcnd", &eHistNcnd);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbTrackAssembler(void *p) {
      return  p ? new(p) ::EdbTrackAssembler : new ::EdbTrackAssembler;
   }
   static void *newArray_EdbTrackAssembler(Long_t nElements, void *p) {
      return p ? new(p) ::EdbTrackAssembler[nElements] : new ::EdbTrackAssembler[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbTrackAssembler(void *p) {
      delete ((::EdbTrackAssembler*)p);
   }
   static void deleteArray_EdbTrackAssembler(void *p) {
      delete [] ((::EdbTrackAssembler*)p);
   }
   static void destruct_EdbTrackAssembler(void *p) {
      typedef ::EdbTrackAssembler current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbTrackAssembler(TBuffer &buf, void *obj) {
      ((::EdbTrackAssembler*)obj)->::EdbTrackAssembler::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbTrackAssembler

namespace ROOTDict {
   void vectorlEunsignedsPchargR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPchargR_Dictionary();
   static void *new_vectorlEunsignedsPchargR(void *p = 0);
   static void *newArray_vectorlEunsignedsPchargR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPchargR(void *p);
   static void deleteArray_vectorlEunsignedsPchargR(void *p);
   static void destruct_vectorlEunsignedsPchargR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned char>*)
   {
      vector<unsigned char> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned char>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned char>", -2, "vector.dll", 0,
                  typeid(vector<unsigned char>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPchargR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned char>) );
      instance.SetNew(&new_vectorlEunsignedsPchargR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPchargR);
      instance.SetDelete(&delete_vectorlEunsignedsPchargR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPchargR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPchargR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<unsigned char> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned char>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPchargR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<unsigned char>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPchargR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned char> : new vector<unsigned char>;
   }
   static void *newArray_vectorlEunsignedsPchargR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned char>[nElements] : new vector<unsigned char>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPchargR(void *p) {
      delete ((vector<unsigned char>*)p);
   }
   static void deleteArray_vectorlEunsignedsPchargR(void *p) {
      delete [] ((vector<unsigned char>*)p);
   }
   static void destruct_vectorlEunsignedsPchargR(void *p) {
      typedef vector<unsigned char> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<unsigned char>

/********************************************************
* ScanCint.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableScanCint();

extern "C" void G__set_cpp_environmentScanCint() {
  G__cpp_reset_tagtableScanCint();
}
#include <new>
extern "C" int G__cpp_dllrevScanCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* EdbScanClientBase */
static int G__ScanCint_652_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->InitializeSocket());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->ScanPreloadAreaS(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (const char*) G__int(libp->para[8]), (float) G__double(libp->para[9])
, (float) G__double(libp->para[10]), (float) G__double(libp->para[11])
, (float) G__double(libp->para[12])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->ScanAreas((EdbScanClientBase::ScanType) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, *(EdbPattern*) libp->para[2].ref, (EdbRun*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->ScanAreas((EdbScanClientBase::ScanType) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, *(EdbPattern*) libp->para[2].ref, (EdbRun*) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->AddRWC_((EdbRun*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->AddRWC_((EdbRun*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->AddRWC_((EdbRun*) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((EdbScanClientBase*) G__getstructoffset())->ShortBrick((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->ConvertAreas((int*) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref
, *(EdbRun*) libp->para[2].ref, (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->ConvertAreas((int*) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref
, *(EdbRun*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->UnloadPlate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->LoadPlate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->LoadPlate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientBase*) G__getstructoffset())->SetParameter((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientBase*) G__getstructoffset())->SetClusterThresholds((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientBase*) G__getstructoffset())->SetOdysseyThresholds((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->SetFragmentSize((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientBase*) G__getstructoffset())->AsyncScanAreaS(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (const char*) G__int(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientBase*) G__getstructoffset())->AsyncScanPreloadAreaS(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (const char*) G__int(libp->para[8]), (float) G__double(libp->para[9])
, (float) G__double(libp->para[10]), (float) G__double(libp->para[11])
, (float) G__double(libp->para[12]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClientBase*) G__getstructoffset())->AsyncWaitForScanResult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientBase*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbScanClientBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbScanClientBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbScanClientBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbScanClientBase*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientBase*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientBase*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanClientBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_652_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanClientBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbScanClientBase G__TEdbScanClientBase;
static int G__ScanCint_652_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbScanClientBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbScanClientBase*) (soff+(sizeof(EdbScanClientBase)*i)))->~G__TEdbScanClientBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbScanClientBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbScanClientBase*) (soff))->~G__TEdbScanClientBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ScanCint_652_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanClientBase* dest = (EdbScanClientBase*) G__getstructoffset();
   *dest = *(EdbScanClientBase*) libp->para[0].ref;
   const EdbScanClientBase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbScanClientCommon */
static int G__ScanCint_654_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->CloseSocket();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanClientCommon*) G__getstructoffset())->ServerCreatesTarget());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetCmd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetCmd((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetMess());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetMess((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetMess1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetMess1((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbScanClientCommon*) G__getstructoffset())->GetNXView());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetNXview((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbScanClientCommon*) G__getstructoffset())->GetNYView());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetNYview((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbScanClientCommon*) G__getstructoffset())->GetXstep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetXstep((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbScanClientCommon*) G__getstructoffset())->GetYstep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetYstep((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetMaxAttempts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetMaxAttempts((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetMaxFails());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetMaxFails((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetPort());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetPort((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetServer((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetRawDirServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetRawDirServer((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetRawDirClient());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetRawDirClient((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetProcTgtServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetProcTgtServer((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetProcPthServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->SetProcPthServer((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClientCommon*) G__getstructoffset())->GetServerCreatedRunName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbScanClientCommon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientCommon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbScanClientCommon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbScanClientCommon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientCommon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientCommon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanClientCommon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientCommon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_654_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanClientCommon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbScanClientCommon G__TEdbScanClientCommon;
static int G__ScanCint_654_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbScanClientCommon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbScanClientCommon*) (soff+(sizeof(EdbScanClientCommon)*i)))->~G__TEdbScanClientCommon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbScanClientCommon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbScanClientCommon*) (soff))->~G__TEdbScanClientCommon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ScanCint_654_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanClientCommon* dest = (EdbScanClientCommon*) G__getstructoffset();
   *dest = *(EdbScanClientCommon*) libp->para[0].ref;
   const EdbScanClientCommon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbScanClient */
static int G__ScanCint_655_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanClient* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanClient((EdbScanClient::ScanClientType) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbScanClient((EdbScanClient::ScanClientType) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbScanClient[n];
       } else {
         p = new((void*) gvp) EdbScanClient[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbScanClient;
       } else {
         p = new((void*) gvp) EdbScanClient;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbScanClient));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClient*) G__getstructoffset())->GetCmd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetCmd((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClient*) G__getstructoffset())->GetMess());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetMess((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClient*) G__getstructoffset())->GetMess1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetMess1((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbScanClient*) G__getstructoffset())->GetNXView());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetNXview((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbScanClient*) G__getstructoffset())->GetNYView());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetNYview((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbScanClient*) G__getstructoffset())->GetXstep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetXstep((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbScanClient*) G__getstructoffset())->GetYstep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetYstep((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClient*) G__getstructoffset())->GetMaxAttempts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetMaxAttempts((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClient*) G__getstructoffset())->GetMaxFails());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetMaxFails((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClient*) G__getstructoffset())->GetPort());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetPort((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClient*) G__getstructoffset())->GetServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetServer((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClient*) G__getstructoffset())->GetRawDirServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetRawDirServer((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClient*) G__getstructoffset())->GetRawDirClient());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetRawDirClient((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClient*) G__getstructoffset())->GetProcTgtServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetProcTgtServer((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClient*) G__getstructoffset())->GetProcPthServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->SetProcPthServer((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanClient*) G__getstructoffset())->GetServerCreatedRunName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanClient*) G__getstructoffset())->ServerCreatesRootFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanClient*) G__getstructoffset())->ServerCreatesTarget());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbScanClient::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClient::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbScanClient::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbScanClient::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClient*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClient::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanClient::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClient::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_655_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanClient::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ScanCint_655_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbScanClient* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbScanClient(*(EdbScanClient*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbScanClient));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbScanClient G__TEdbScanClient;
static int G__ScanCint_655_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbScanClient*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbScanClient*) (soff+(sizeof(EdbScanClient)*i)))->~G__TEdbScanClient();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbScanClient*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbScanClient*) (soff))->~G__TEdbScanClient();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ScanCint_655_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanClient* dest = (EdbScanClient*) G__getstructoffset();
   *dest = *(EdbScanClient*) libp->para[0].ref;
   const EdbScanClient& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbScanProc */
static int G__ScanCint_738_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanProc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanProc[n];
     } else {
       p = new((void*) gvp) EdbScanProc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanProc;
     } else {
       p = new((void*) gvp) EdbScanProc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbScanProc*) G__getstructoffset())->BrickDir((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckDir((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckDir((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckDirWritable((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckAFFDir((int) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckAFFDir((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckBrickDir(*((EdbID*) G__int(libp->para[0])), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckBrickDir(*((EdbID*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckPlateDir(*((EdbID*) G__int(libp->para[0])), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckPlateDir(*((EdbID*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckProcDir((int*) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckProcDir((int*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckProcDir(*((EdbID*) G__int(libp->para[0])), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CheckProcDir(*((EdbID*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbScanProc*) G__getstructoffset())->MakeFileName(*(TString*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbScanProc*) G__getstructoffset())->MakeFileName(*(TString*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbScanProc*) G__getstructoffset())->MakeFileName(*(TString*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbScanProc*) G__getstructoffset())->MakeFileName(*(TString*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbScanProc*) G__getstructoffset())->MakeFileNameSrv(*(TString*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbScanProc*) G__getstructoffset())->MakeFileNameSrv(*(TString*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbScanProc*) G__getstructoffset())->MakeFileNameSrv(*(TString*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbScanProc*) G__getstructoffset())->MakeFileNameSrv(*(TString*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbScanProc*) G__getstructoffset())->MakeAffName(*(TString*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbScanProc*) G__getstructoffset())->MakeAffName(*(TString*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbScanProc*) G__getstructoffset())->MakeAffName(*(TString*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *((EdbID*) G__int(libp->para[2])), (const char*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbScanProc*) G__getstructoffset())->MakeAffName(*(TString*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *((EdbID*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->GetMap((int) G__int(libp->para[0]), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->AddParLine((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->AddParLine((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->MakeInPar((int*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->MakeInPar(*((EdbID*) G__int(libp->para[0])), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->MakeInParSet(*((EdbID*) G__int(libp->para[0])), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->CopyFile((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->CopyPar(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->CopyPar(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->CopyPar((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->CopyPar((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->CopyPred((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->CopyPred((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->CopyAFFPar((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->CopyAFFPar((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]), (int*) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->RemoveFile(*((EdbID*) G__int(libp->para[0])), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->CopyParSet(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->ReadPiecePar(*((EdbID*) G__int(libp->para[0])), *(EdbPlateP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->MakeScannedIDList(*((EdbID*) G__int(libp->para[0])), *(EdbScanSet*) libp->para[1].ref
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->CheckFiles(*(EdbScanSet*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatTXT(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatTXT(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatTXT(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatTXT(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatTXT((const char*) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatTXT((const char*) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WritePatTXT(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WritePatTXT(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteSBcndTXT((int*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteSBcndTXT((int*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatRoot(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatRoot(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WritePatRoot(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WritePatRoot(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPred(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPred(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WritePred(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WritePred(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadFound(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadFound(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteFound(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteFound(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadFound(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadFound(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPred(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPred(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WritePred(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WritePred(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteFound(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteFound(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WritePatTXT(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WritePatTXT(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->WaitFileReady((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((EdbScanProc*) G__getstructoffset())->InitRun((int*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((EdbScanProc*) G__getstructoffset())->InitRun((int*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbScanProc*) G__getstructoffset())->InitRun((int*) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbScanProc*) G__getstructoffset())->InitRun((int*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->FlashRawDir(*(EdbScanClient*) libp->para[0].ref, (int*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LoadPlate(*(EdbScanClient*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LoadPlate(*(EdbScanClient*) libp->para[0].ref, (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ScanAreas((EdbScanClientBase::ScanType) G__int(libp->para[0]), *(EdbScanClient*) libp->para[1].ref
, (int*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (const char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ScanAreas((EdbScanClientBase::ScanType) G__int(libp->para[0]), *(EdbScanClient*) libp->para[1].ref
, (int*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ScanAreas((EdbScanClientBase::ScanType) G__int(libp->para[0]), *(EdbScanClient*) libp->para[1].ref
, (int*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ScanAreas((EdbScanClientBase::ScanType) G__int(libp->para[0]), *(EdbScanClient*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, (int*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ScanAreas((EdbScanClientBase::ScanType) G__int(libp->para[0]), *(EdbScanClient*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, (int*) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->InitPiece(*(EdbDataPiece*) libp->para[0].ref, (int*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->InitPiece(*(EdbDataPiece*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPiece(*(EdbDataPiece*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCP(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, *((TCut*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCP(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCP(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *((TCut*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCP(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCPnopar(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *((TCut*) G__int(libp->para[2])), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCPnopar(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *((TCut*) G__int(libp->para[2])), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCPnopar(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *((TCut*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCPnopar(*(EdbPattern*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCPnopar(*(EdbPattern*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, *((TCut*) G__int(libp->para[2])), (EdbMask*) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCPnopar(*(EdbPattern*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, *((TCut*) G__int(libp->para[2])), (EdbMask*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCPnopar(*(EdbPattern*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, *((TCut*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadPatCPnopar(*(EdbPattern*) libp->para[0].ref, (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbScanProc*) G__getstructoffset())->ReadEraseMask(*((EdbID*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->MakeEraseFile(*((EdbID*) G__int(libp->para[0])), *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->ApplyAffZ(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->GetAffZ(*(EdbAffine2D*) libp->para[0].ref, *(float*) G__Floatref(&libp->para[1])
, (int*) G__int(libp->para[2]), (int*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->SetAFFDZ((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->SetAFF0((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->MakeAFFSet(*(EdbScanSet*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->MakeParSet(*(EdbScanSet*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->PrepareSetStructure(*(EdbScanSet*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ConvertAreas(*(EdbScanClient*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ConvertAreas(*(EdbScanClient*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ConvertAreas(*(EdbScanClient*) libp->para[0].ref, (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->CorrectAngles((int*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkRun((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkRun((int*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkRunAll((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkRunAll((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkRunAll((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkRunAll((int*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkRunAll(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkRunAll(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkRunAll(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkRunAll(*((EdbID*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkSet(*(EdbScanSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkSet(*(EdbScanSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkSet(*(EdbScanSet*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->LinkSet(*(EdbScanSet*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->GetPatternSide(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, *(EdbLayer*) libp->para[2].ref, (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), *(EdbPattern*) libp->para[5].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->LinkRunTest(*((EdbID*) G__int(libp->para[0])), *(EdbPlateP*) libp->para[1].ref
, *(TEnv*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->LinkRunNew(*((EdbID*) G__int(libp->para[0])), *(EdbPlateP*) libp->para[1].ref
, *(TEnv*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->LinkSetNew(*(EdbScanSet*) libp->para[0].ref, *(TEnv*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->LinkSetNewTest(*(EdbScanSet*) libp->para[0].ref, *(TEnv*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignNewNopar(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *(TEnv*) libp->para[2].ref, (EdbAffine2D*) G__int(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignNewNopar(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *(TEnv*) libp->para[2].ref, (EdbAffine2D*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignNewNopar(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *(TEnv*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->UpdateAFFPar(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *(EdbLayer*) libp->para[2].ref, (EdbAffine2D*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->UpdateAFFPar(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *(EdbLayer*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->UpdatePlatePar(*((EdbID*) G__int(libp->para[0])), *(EdbLayer*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignSetNewNopar(*(EdbScanSet*) libp->para[0].ref, *(TEnv*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->AlignSetNewNopar(*((EdbID*) G__int(libp->para[0])), *(TEnv*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbScanProc*) G__getstructoffset())->AlignSet(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbScanProc*) G__getstructoffset())->AlignSet(*((EdbID*) G__int(libp->para[0])), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignSet(*(EdbScanSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignSet(*(EdbScanSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignSet(*(EdbScanSet*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignSet(*(EdbScanSet*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->Align(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->Align(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->Align((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->Align((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignAll((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (const char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignAll((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignAll((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignAll((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignAll(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (const char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignAll(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignAll(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignAll(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->TrackSetBT(*(EdbScanSet*) libp->para[0].ref, *(TEnv*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadTracksTree(*((EdbID*) G__int(libp->para[0])), *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadTracksTree(*((EdbID*) G__int(libp->para[0])), *(EdbPVRec*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadTracksTree((const char*) G__int(libp->para[0]), *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadTracksTree((const char*) G__int(libp->para[0]), *(EdbPVRec*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CorrectPredWithFound((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CorrectPredWithFound((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CorrectPredWithFound((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CorrectAffWithPred((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (const char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CorrectAffWithPred((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CorrectAffWithPred((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->CorrectAffWithPred((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->ProjectFound((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->ProjectFound(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictions(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, *(EdbPattern*) libp->para[2].ref, (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictions(*(EdbPattern*) libp->para[0].ref, (int*) G__int(libp->para[1])
, *(EdbPattern*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictions((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictions((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictions((int*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->InitRunAccessNew(*(EdbRunAccess*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *(EdbPlateP*) libp->para[2].ref, (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->InitRunAccessNew(*(EdbRunAccess*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *(EdbPlateP*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->InitRunAccessNew(*(EdbRunAccess*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->InitRunAccessNew(*(EdbRunAccess*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->InitRunAccess(*(EdbRunAccess*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->InitRunAccess(*(EdbRunAccess*) libp->para[0].ref, (int*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->InitRunAccess(*(EdbRunAccess*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->InitRunAccess(*(EdbRunAccess*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictionsRawSet(*((EdbID*) G__int(libp->para[0])), *(EdbScanSet*) libp->para[1].ref
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictionsRaw(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictionsRaw(
*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbRunAccess*) libp->para[2].ref, *(EdbScanCond*) libp->para[3].ref
, *(EdbScanCond*) libp->para[4].ref, (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (float) G__double(libp->para[8]), (FILE*) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictionsRaw(
*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbRunAccess*) libp->para[2].ref, *(EdbScanCond*) libp->para[3].ref
, *(EdbScanCond*) libp->para[4].ref, (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (float) G__double(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictionsRaw(
*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbRunAccess*) libp->para[2].ref, *(EdbScanCond*) libp->para[3].ref
, *(EdbScanCond*) libp->para[4].ref, (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictionsRaw(
*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbRunAccess*) libp->para[2].ref, *(EdbScanCond*) libp->para[3].ref
, *(EdbScanCond*) libp->para[4].ref, (float) G__double(libp->para[5])
, (float) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictionsRaw(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbRunAccess*) libp->para[2].ref, *(EdbScanCond*) libp->para[3].ref
, *(EdbScanCond*) libp->para[4].ref, (float) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindPredictionsRaw(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbRunAccess*) libp->para[2].ref, *(EdbScanCond*) libp->para[3].ref
, *(EdbScanCond*) libp->para[4].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindCompliments(*(EdbSegP*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(TObjArray*) libp->para[2].ref, (float) G__double(libp->para[3])
, *(TArrayF*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->SetDefaultCondBT(*(EdbScanCond*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->SetDefaultCondMT(*(EdbScanCond*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->OptimizeScanPath(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->RemoveDublets(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->AddAFFtoScanSet(*(EdbScanSet*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *((EdbID*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->AddAFFtoScanSet(*(EdbScanSet*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->AddAFFtoScanSet(
*(EdbScanSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AssembleScanSet(*(EdbScanSet*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(*(EdbScanSet*) libp->para[0].ref, *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2])), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(*(EdbScanSet*) libp->para[0].ref, *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2])), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(*(EdbScanSet*) libp->para[0].ref, *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2])), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(*(EdbScanSet*) libp->para[0].ref, *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(*(EdbScanSet*) libp->para[0].ref, *(EdbPVRec*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(
*((EdbID*) G__int(libp->para[0])), *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2])), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(*((EdbID*) G__int(libp->para[0])), *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2])), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(*((EdbID*) G__int(libp->para[0])), *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2])), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(*((EdbID*) G__int(libp->para[0])), *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2])), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(*((EdbID*) G__int(libp->para[0])), *(EdbPVRec*) libp->para[1].ref
, *((TCut*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetCP(*((EdbID*) G__int(libp->para[0])), *(EdbPVRec*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadFoundSegment(*((EdbID*) G__int(libp->para[0])), *(EdbSegP*) libp->para[1].ref
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadFoundSegment(*((EdbID*) G__int(libp->para[0])), *(EdbSegP*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadFoundTrack(*(EdbScanSet*) libp->para[0].ref, *(EdbTrackP*) libp->para[1].ref
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadFoundTrack(*(EdbScanSet*) libp->para[0].ref, *(EdbTrackP*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadFoundTracks(*(EdbScanSet*) libp->para[0].ref, *(EdbPVRec*) libp->para[1].ref
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadFoundTracks(*(EdbScanSet*) libp->para[0].ref, *(EdbPVRec*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadManFoundTracks(*(EdbScanSet*) libp->para[0].ref, *(EdbPVRec*) libp->para[1].ref
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadManFoundTracks(*(EdbScanSet*) libp->para[0].ref, *(EdbPVRec*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->CheckRunQualityRaw(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->CheckSetQualityRaw(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->AlignOverlaps(*((EdbID*) G__int(libp->para[0])), *(EdbPattern*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, *(TEnv*) libp->para[3].ref
, (const char*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->CheckViewOverlaps(*((EdbID*) G__int(libp->para[0])), *(TEnv*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteScanSet(*((EdbID*) G__int(libp->para[0])), *(EdbScanSet*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSet(*((EdbID*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbScanProc*) G__getstructoffset())->ReadScanSetGlobal(*((EdbID*) G__int(libp->para[0])), (bool) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteSBTrack(*(EdbTrackP*) libp->para[0].ref, (int) G__int(libp->para[1])
, *((EdbID*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteSBTracks(*(TObjArray*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbScanProc*) G__getstructoffset())->ReadSBTracks(*((EdbID*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->MergeSetSBT(*((EdbID*) G__int(libp->para[0])), *(EdbScanSet*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->MergeSetSBT(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((EdbScanProc*) G__getstructoffset())->PrepareVolumesPred(
(int*) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (EdbScanSet*) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((EdbScanProc*) G__getstructoffset())->PrepareVolumesPred((int*) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbScanProc*) G__getstructoffset())->PrepareVolumesPred((int*) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbScanProc*) G__getstructoffset())->PrepareVolumesPred((int*) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbScanProc*) G__getstructoffset())->PrepareVolumesPred((int*) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbScanProc*) G__getstructoffset())->PrepareVolumesPred((int*) G__int(libp->para[0]), *(EdbPattern*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->MakeTracksPred(*(TObjArray*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *(EdbLayer*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->TestAl((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->TestAl(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->TestAl(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->TestAl((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, *(TCut*) libp->para[2].ref, (float) G__double(libp->para[3])
, (EdbAffine2D*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->TestAl((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, *(TCut*) libp->para[2].ref, (float) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadMarksSet(*(EdbMarksSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (char) G__int(libp->para[3])
, (char) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadMarksSet(*(EdbMarksSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (char) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->ReadMarksSet(*(EdbMarksSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteMarksSet(*(EdbMarksSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (char) G__int(libp->para[3])
, (char) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteMarksSet(*(EdbMarksSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (char) G__int(libp->para[3])
, (char) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteMarksSet(*(EdbMarksSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (char) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->WriteMarksSet(*(EdbMarksSet*) libp->para[0].ref, (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignRaw(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *(TEnv*) libp->para[2].ref, (EdbAffine2D*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->AlignRaw(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *(TEnv*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->AlignRawSet(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *(TEnv*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->UpdateSetWithAff(*((EdbID*) G__int(libp->para[0])), *((EdbAffine2D*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->UpdateSetWithAff(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *((EdbID*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->UpdateSetWithAff(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->UpdateSetWithPlatePar(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->UpdateSetWithPlatePar(*(EdbScanSet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->MakeLinkSetSummary(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->MakeAlignSetSummary(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbScanProc*) G__getstructoffset())->MakeAlignSetSummary(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbScanProc*) G__getstructoffset())->MakeAlignSetSummary(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindRawTrack(*(EdbTrackP*) libp->para[0].ref, *(EdbTrackP*) libp->para[1].ref
, *((EdbID*) G__int(libp->para[2])), (int) G__int(libp->para[3])
, *(TEnv*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanProc*) G__getstructoffset())->FindRawTrack(*(EdbTrackP*) libp->para[0].ref, *(EdbTrackP*) libp->para[1].ref
, *((EdbID*) G__int(libp->para[2])), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->UpdateAlignSummaryTree(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *(TTree*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanProc*) G__getstructoffset())->ReadAffToLayer(*(EdbLayer*) libp->para[0].ref, *((EdbID*) G__int(libp->para[1]))
, *((EdbID*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->ExtractRawVolume(*((EdbID*) G__int(libp->para[0])), *((EdbID*) G__int(libp->para[1]))
, *((EdbSegP*) G__int(libp->para[2])), (int) G__int(libp->para[3])
, *(TEnv*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->ExtractRawVolume(*(EdbScanSet*) libp->para[0].ref, *(EdbScanSet*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref, (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->SetServerRunName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbScanProc*) G__getstructoffset())->GetServerRunName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->ReadUncorrectedBTforFoundTracks(*(EdbPVRec*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("LogPrint: more than 56 var args\n");
   }
      ((EdbScanProc*) G__getstructoffset())->LogPrint((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbScanProc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_164(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanProc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbScanProc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbScanProc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanProc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_171(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanProc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_172(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanProc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_173(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanProc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_738_0_174(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanProc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ScanCint_738_0_175(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbScanProc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbScanProc(*(EdbScanProc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbScanProc G__TEdbScanProc;
static int G__ScanCint_738_0_176(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbScanProc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbScanProc*) (soff+(sizeof(EdbScanProc)*i)))->~G__TEdbScanProc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbScanProc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbScanProc*) (soff))->~G__TEdbScanProc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ScanCint_738_0_177(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanProc* dest = (EdbScanProc*) G__getstructoffset();
   *dest = *(EdbScanProc*) libp->para[0].ref;
   const EdbScanProc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbProcPars */
static int G__ScanCint_744_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbProcPars* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbProcPars[n];
     } else {
       p = new((void*) gvp) EdbProcPars[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbProcPars;
     } else {
       p = new((void*) gvp) EdbProcPars;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbProcPars));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbProcPars::SetLinkDef(*(TEnv*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbProcPars::SetAlignDef(*(TEnv*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbProcPars::SetTrackDef(*(TEnv*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbProcPars::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbProcPars::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbProcPars::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbProcPars::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbProcPars*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbProcPars::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbProcPars::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbProcPars::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_744_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbProcPars::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ScanCint_744_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbProcPars* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbProcPars(*(EdbProcPars*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbProcPars));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbProcPars G__TEdbProcPars;
static int G__ScanCint_744_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbProcPars*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbProcPars*) (soff+(sizeof(EdbProcPars)*i)))->~G__TEdbProcPars();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbProcPars*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbProcPars*) (soff))->~G__TEdbProcPars();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ScanCint_744_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbProcPars* dest = (EdbProcPars*) G__getstructoffset();
   *dest = *(EdbProcPars*) libp->para[0].ref;
   const EdbProcPars& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbTrackAssembler */
static int G__ScanCint_746_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrackAssembler* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrackAssembler[n];
     } else {
       p = new((void*) gvp) EdbTrackAssembler[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrackAssembler;
     } else {
       p = new((void*) gvp) EdbTrackAssembler;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbTrackAssembler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->SetMomentum((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->SetRadLength((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbTrackAssembler*) G__getstructoffset())->SameSegment(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->DoubletsFilterOut(*(EdbPattern*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->InitTrZMap((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->InitTrZMap(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->InitTrZMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->FillTrZMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbTrackAssembler*) G__getstructoffset())->ExtrapolateTracksToZ((float) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbTrackAssembler*) G__getstructoffset())->ExtrapolateTracksToZ((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->AddPattern(*(EdbPattern*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbTrackAssembler*) G__getstructoffset())->AddSegment(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbTrackAssembler*) G__getstructoffset())->AddSegmentAsTrack(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbTrackAssembler*) G__getstructoffset())->ProbSeg(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->RecalculateSegmentsProb(*(EdbTrackP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbTrackAssembler*) G__getstructoffset())->AcceptDZGap(*(EdbTrackP*) libp->para[0].ref, (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->SetSegmentsErrors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->FitTracks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->CombTracks(*(TObjArray*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->CheckPatternAlignment(*(EdbPattern*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TObjArray& obj = ((EdbTrackAssembler*) G__getstructoffset())->Tracks();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbTrackAssembler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrackAssembler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbTrackAssembler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbTrackAssembler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackAssembler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrackAssembler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrackAssembler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrackAssembler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_746_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrackAssembler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbTrackAssembler G__TEdbTrackAssembler;
static int G__ScanCint_746_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbTrackAssembler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbTrackAssembler*) (soff+(sizeof(EdbTrackAssembler)*i)))->~G__TEdbTrackAssembler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbTrackAssembler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbTrackAssembler*) (soff))->~G__TEdbTrackAssembler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbScanTracking */
static int G__ScanCint_747_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanTracking[n];
     } else {
       p = new((void*) gvp) EdbScanTracking[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanTracking;
     } else {
       p = new((void*) gvp) EdbScanTracking;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbScanTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanTracking*) G__getstructoffset())->TrackAli(*(EdbPVRec*) libp->para[0].ref, *(TEnv*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanTracking*) G__getstructoffset())->TrackSetBT(*((EdbID*) G__int(libp->para[0])), *(TEnv*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanTracking*) G__getstructoffset())->SaveHist(*((EdbID*) G__int(libp->para[0])), *(EdbTrackAssembler*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbScanTracking::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanTracking::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbScanTracking::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbScanTracking::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanTracking*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanTracking::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanTracking::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanTracking::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_747_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanTracking::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ScanCint_747_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbScanTracking* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbScanTracking(*(EdbScanTracking*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbScanTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbScanTracking G__TEdbScanTracking;
static int G__ScanCint_747_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbScanTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbScanTracking*) (soff+(sizeof(EdbScanTracking)*i)))->~G__TEdbScanTracking();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbScanTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbScanTracking*) (soff))->~G__TEdbScanTracking();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ScanCint_747_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanTracking* dest = (EdbScanTracking*) G__getstructoffset();
   *dest = *(EdbScanTracking*) libp->para[0].ref;
   const EdbScanTracking& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbScanClientPav */
static int G__ScanCint_783_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanClientPav* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanClientPav[n];
     } else {
       p = new((void*) gvp) EdbScanClientPav[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanClientPav;
     } else {
       p = new((void*) gvp) EdbScanClientPav;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientPav));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbScanClientPav*) G__getstructoffset())->ScanFromPrediction((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientPav*) G__getstructoffset())->AsyncStartScan();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientPav*) G__getstructoffset())->SetPathLib((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientPav*) G__getstructoffset())->SetPathName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbScanClientPav::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientPav::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbScanClientPav::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbScanClientPav::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientPav*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientPav::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanClientPav::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientPav::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_783_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanClientPav::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbScanClientPav G__TEdbScanClientPav;
static int G__ScanCint_783_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbScanClientPav*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbScanClientPav*) (soff+(sizeof(EdbScanClientPav)*i)))->~G__TEdbScanClientPav();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbScanClientPav*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbScanClientPav*) (soff))->~G__TEdbScanClientPav();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbScanClientSysal */
static int G__ScanCint_784_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanClientSysal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanClientSysal[n];
     } else {
       p = new((void*) gvp) EdbScanClientSysal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbScanClientSysal;
     } else {
       p = new((void*) gvp) EdbScanClientSysal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientSysal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_784_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbScanClientSysal*) G__getstructoffset())->RcvLine((TSocket*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_784_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbScanClientSysal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_784_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientSysal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_784_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbScanClientSysal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_784_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbScanClientSysal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_784_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbScanClientSysal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_784_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientSysal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_784_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanClientSysal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_784_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbScanClientSysal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ScanCint_784_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbScanClientSysal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ScanCint_784_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbScanClientSysal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbScanClientSysal(*(EdbScanClientSysal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientSysal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbScanClientSysal G__TEdbScanClientSysal;
static int G__ScanCint_784_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbScanClientSysal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbScanClientSysal*) (soff+(sizeof(EdbScanClientSysal)*i)))->~G__TEdbScanClientSysal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbScanClientSysal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbScanClientSysal*) (soff))->~G__TEdbScanClientSysal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ScanCint_784_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbScanClientSysal* dest = (EdbScanClientSysal*) G__getstructoffset();
   *dest = *(EdbScanClientSysal*) libp->para[0].ref;
   const EdbScanClientSysal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* EdbScanClientBase */

/* EdbScanClientCommon */

/* EdbScanClient */

/* EdbScanProc */

/* EdbProcPars */

/* EdbTrackAssembler */

/* EdbScanTracking */

/* EdbScanClientPav */

/* EdbScanClientSysal */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncScanCint {
 public:
  G__Sizep2memfuncScanCint(): p(&G__Sizep2memfuncScanCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncScanCint::*p)();
};

size_t G__get_sizep2memfuncScanCint()
{
  G__Sizep2memfuncScanCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceScanCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientCommon))) {
     EdbScanClientCommon *G__Lderived;
     G__Lderived=(EdbScanClientCommon*)0x1000;
     {
       EdbScanClientBase *G__Lpbase=(EdbScanClientBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientCommon),G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClient))) {
     EdbScanClient *G__Lderived;
     G__Lderived=(EdbScanClient*)0x1000;
     {
       EdbScanClientBase *G__Lpbase=(EdbScanClientBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClient),G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc))) {
     EdbScanProc *G__Lderived;
     G__Lderived=(EdbScanProc*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc),G__get_linked_tagnum(&G__ScanCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc),G__get_linked_tagnum(&G__ScanCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ScanCintLN_EdbProcPars))) {
     EdbProcPars *G__Lderived;
     G__Lderived=(EdbProcPars*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbProcPars),G__get_linked_tagnum(&G__ScanCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ScanCintLN_EdbTrackAssembler))) {
     EdbTrackAssembler *G__Lderived;
     G__Lderived=(EdbTrackAssembler*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbTrackAssembler),G__get_linked_tagnum(&G__ScanCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ScanCintLN_EdbScanTracking))) {
     EdbScanTracking *G__Lderived;
     G__Lderived=(EdbScanTracking*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanTracking),G__get_linked_tagnum(&G__ScanCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientPav))) {
     EdbScanClientPav *G__Lderived;
     G__Lderived=(EdbScanClientPav*)0x1000;
     {
       EdbScanClientCommon *G__Lpbase=(EdbScanClientCommon*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientPav),G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientCommon),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbScanClientBase *G__Lpbase=(EdbScanClientBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientPav),G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientSysal))) {
     EdbScanClientSysal *G__Lderived;
     G__Lderived=(EdbScanClientSysal*)0x1000;
     {
       EdbScanClientCommon *G__Lpbase=(EdbScanClientCommon*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientSysal),G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientCommon),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbScanClientBase *G__Lpbase=(EdbScanClientBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientSysal),G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableScanCint() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ScanCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ScanCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ScanCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ScanCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ScanCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ScanCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ScanCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ScanCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ScanCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ScanCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__ScanCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__ScanCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ScanCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ScanCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ScanCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ScanCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ScanCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ScanCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ScanCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ScanCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ScanCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__ScanCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__ScanCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__ScanCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__ScanCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__ScanCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<uint8>",117,G__get_linked_tagnum(&G__ScanCintLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__ScanCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::string>",117,G__get_linked_tagnum(&G__ScanCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__ScanCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__ScanCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* EdbScanClientBase */
static void G__setup_memvarEdbScanClientBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientBase));
   { EdbScanClientBase *p; p=(EdbScanClientBase*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientBasecLcLScanType),-1,-2,1,G__FastAllocString(2048).Format("stPred=%lldLL",(long long)EdbScanClientBase::stPred).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientBasecLcLScanType),-1,-2,1,G__FastAllocString(2048).Format("stVolume=%lldLL",(long long)EdbScanClientBase::stVolume).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbScanClientCommon */
static void G__setup_memvarEdbScanClientCommon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientCommon));
   { EdbScanClientCommon *p; p=(EdbScanClientCommon*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TSocket),-1,-1,2,"eSock=",0,"socket for connection to scanning mashine");
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"eCMD[256]=",0,"command line");
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"eMess[256]=",0,"message line");
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"eMess1[256]=",0,"message line");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"eNXview=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"eNYview=",0,"the fragment size in view");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"eXstep=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"eYstep=",0,"between views in the fragment - to calculate the fragment size");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"eMAXSCANATTEMPTS=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"eMAXFAILS=",0,"the max number for predictions failed to scan before break");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"ePORT=",0,"port number where ScanDriver expect connection (default 1777)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TString),-1,-1,2,"eServer=",0,"address of the scanning mashine");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TString),-1,-1,2,"eRawDirServer=",0,"directory path for raw data files visible from the Scan Server (i.e. \"o:/MIC5/tmp_SYSAL\")");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TString),-1,-1,2,"eRawDirClient=",0,"directory path for raw data files visible from processing comp (i.e. \"./raw/MIC5/tmp_SYSAL\")");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TString),-1,-1,2,"eProcTgtServer=",0,"path for raw data files visible from processing comp (i.e. \"o:/MIC5/b123456/p012/123456.12.1.1000.raw.root\")");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TString),-1,-1,2,"eProcPthServer=",0,"path for raw data files visible from processing comp (i.e. \"o:/MIC5/\")");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TString),-1,-1,2,"eServerCreatedRunName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbScanClient */
static void G__setup_memvarEdbScanClient(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClient));
   { EdbScanClient *p; p=(EdbScanClient*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientcLcLScanClientType),-1,-2,1,G__FastAllocString(2048).Format("scanClientSySal=%lldLL",(long long)EdbScanClient::scanClientSySal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientcLcLScanClientType),-1,-2,1,G__FastAllocString(2048).Format("scanClientPavicom=%lldLL",(long long)EdbScanClient::scanClientPavicom).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientcLcLScanClientType),-1,-2,1,G__FastAllocString(2048).Format("scanClientLasso=%lldLL",(long long)EdbScanClient::scanClientLasso).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_auto_ptrlEEdbScanClientCommongR),-1,-1,4,"m_implementation=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"eServerCreatesRootFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbScanProc */
static void G__setup_memvarEdbScanProc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc));
   { EdbScanProc *p; p=(EdbScanProc*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eProcDirClient)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TString),-1,-1,1,"eProcDirClient=",0,"directory path for root data");
   G__memvar_setup((void*)((long)(&p->eProcDirServer)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TString),-1,-1,1,"eProcDirServer=",0,"directory path for root data");
   G__memvar_setup((void*)((long)(&p->eParDir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TString),-1,-1,1,"eParDir=",0,"directory path for off-line processing parameters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TString),-1,-1,4,"eServerCreatedRunName=",0,"EdbRun file name that is created by scanserver side");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbProcPars */
static void G__setup_memvarEdbProcPars(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbProcPars));
   { EdbProcPars *p; p=(EdbProcPars*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbTrackAssembler */
static void G__setup_memvarEdbTrackAssembler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbTrackAssembler));
   { EdbTrackAssembler *p; p=(EdbTrackAssembler*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_EdbPattern),-1,-1,4,"eSegments=",0,"all segments of tracks");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TObjArray),-1,-1,4,"eTracks=",0,"array of tracks (EdbTrackP) (owner of tracks)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_TObjArray),-1,-1,4,"eTrZ=",0,"\"predictions\" - tracks extrapolated to the given z (not owner)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZ=",0,"the z-position");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_EdbCell2),-1,-1,4,"eTrZMap=",0,"map of predictions at given eZ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eMapMarg=",0,"margin for the map creation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eCellN=",0,"mean cell occupancy");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_EdbTrackFitter),-1,-1,4,"eFitter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDTmax)-(long)(p)),102,0,0,-1,-1,-1,1,"eDTmax=",0,"angular acceptance for the fast preselection");
   G__memvar_setup((void*)((long)(&p->eDRmax)-(long)(p)),102,0,0,-1,-1,-1,1,"eDRmax=",0,"position acceptance for the fast preselection");
   G__memvar_setup((void*)((long)(&p->eDZGapMax)-(long)(p)),102,0,0,-1,-1,-1,1,"eDZGapMax=",0,"maxgap acceptance for the fast preselection");
   G__memvar_setup((void*)((long)(&p->eProbMin)-(long)(p)),102,0,0,-1,-1,-1,1,"eProbMin=",0,"min acceptable probability for segments preselection");
   G__memvar_setup((void*)((long)(&p->eDoUseMCS)-(long)(p)),103,0,0,-1,-1,-1,1,"eDoUseMCS=",0,"flag to use MultipleScattering addition for chi2 ");
   G__memvar_setup((void*)((long)(&p->eCollisionsRate)-(long)(p)),105,0,0,-1,-1,-1,1,"eCollisionsRate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eCond)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ScanCintLN_EdbScanCond),-1,-1,1,"eCond=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eHistProbBest)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TH1F),-1,-1,1,"eHistProbBest=",0,"prob of the best candidate");
   G__memvar_setup((void*)((long)(&p->eHistProbAll)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TH1F),-1,-1,1,"eHistProbAll=",0,"prob of all candidate");
   G__memvar_setup((void*)((long)(&p->eHistThetaBest)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TH1F),-1,-1,1,"eHistThetaBest=",0,"theta of the best candidate");
   G__memvar_setup((void*)((long)(&p->eHistThetaAll)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TH1F),-1,-1,1,"eHistThetaAll=",0,"theta of all candidate");
   G__memvar_setup((void*)((long)(&p->eHistNcnd)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TH1F),-1,-1,1,"eHistNcnd=",0,"number of candidates after preliminary selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbScanTracking */
static void G__setup_memvarEdbScanTracking(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanTracking));
   { EdbScanTracking *p; p=(EdbScanTracking*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eNsegMin)-(long)(p)),105,0,0,-1,-1,-1,1,"eNsegMin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eNgapMax)-(long)(p)),105,0,0,-1,-1,-1,1,"eNgapMax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSproc)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc),-1,-1,1,"eSproc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDoRealign)-(long)(p)),103,0,0,-1,-1,-1,1,"eDoRealign=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbScanClientPav */
static void G__setup_memvarEdbScanClientPav(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientPav));
   { EdbScanClientPav *p; p=(EdbScanClientPav*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_MessageManager),-1,-1,2,"m_mm=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_MessageReader),-1,-1,2,"m_mr=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("uint32"),-1,2,"m_insize=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),G__defined_typename("vector<uint8>"),-1,2,"m_inbuf=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_string),-1,-1,2,"m_pathLib=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_string),-1,-1,2,"m_pathName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ScanCintLN_string),-1,-1,2,"m_predPathName=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"m_scanningStarted=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"m_createdTarget=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbScanClientSysal */
static void G__setup_memvarEdbScanClientSysal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientSysal));
   { EdbScanClientSysal *p; p=(EdbScanClientSysal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ScanCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarScanCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEdbScanClientBase(void) {
   /* EdbScanClientBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientBase));
   G__memfunc_setup("InitializeSocket",1659,G__ScanCint_652_0_2, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ScanPreloadAreaS",1560,G__ScanCint_652_0_3, 105, -1, -1, 0, 13, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname f - - 0 - x1n "
"f - - 0 - x2n f - - 0 - y1n "
"f - - 0 - y2n", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ScanAreas",881,G__ScanCint_652_0_4, 105, -1, -1, 0, 5, 1, 1, 0, 
"i 'EdbScanClientBase::ScanType' - 0 - st I - - 0 - id "
"u 'EdbPattern' - 1 - areas U 'EdbRun' - 0 - run "
"C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("AddRWC_",596,G__ScanCint_652_0_5, 105, -1, -1, 0, 4, 1, 1, 0, 
"U 'EdbRun' - 0 - run C - - 0 - rwcname "
"i - - 0 'true' bAddRWD C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ShortBrick",1019,G__ScanCint_652_0_6, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - brick", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ConvertAreas",1229,G__ScanCint_652_0_7, 105, -1, -1, 0, 4, 1, 1, 0, 
"I - - 0 - id u 'EdbPattern' - 1 - areas "
"u 'EdbRun' - 1 - run C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("UnloadPlate",1113,G__ScanCint_652_0_8, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("LoadPlate",886,G__ScanCint_652_0_9, 105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - BRICK i - - 0 - PLATE "
"C - - 10 - mapext i - - 0 '1' nAttempts", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetParameter",1229,G__ScanCint_652_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - Object C - - 10 - Parameter "
"C - - 10 - Value", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetClusterThresholds",2094,G__ScanCint_652_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - TOP i - - 0 - BOT", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetOdysseyThresholds",2108,G__ScanCint_652_0_12, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - itop i - - 0 - ibottom "
"i - - 0 - size i - - 0 - TOP "
"i - - 0 - BOT", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetFragmentSize",1531,G__ScanCint_652_0_13, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - X i - - 0 - Y", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("AsyncScanAreaS",1359,G__ScanCint_652_0_14, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("AsyncScanPreloadAreaS",2070,G__ScanCint_652_0_15, 121, -1, -1, 0, 13, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname f - - 0 - x1n "
"f - - 0 - x2n f - - 0 - y1n "
"f - - 0 - y2n", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("AsyncWaitForScanResult",2238,G__ScanCint_652_0_16, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,G__ScanCint_652_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__ScanCint_652_0_18, 85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbScanClientBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ScanCint_652_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ScanCint_652_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbScanClientBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ScanCint_652_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbScanClientBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__ScanCint_652_0_22, 85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__ScanCint_652_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__ScanCint_652_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ScanCint_652_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ScanCint_652_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ScanCint_652_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanClientBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ScanCint_652_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ScanCint_652_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanClientBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbScanClientBase", 1768, G__ScanCint_652_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ScanCint_652_0_31, (int) ('u'), G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientBase), -1, 1, 1, 1, 1, 0, "u 'EdbScanClientBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbScanClientCommon(void) {
   /* EdbScanClientCommon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientCommon));
   G__memfunc_setup("CloseSocket",1119,G__ScanCint_654_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeSocket",1659,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScanPreloadAreaS",1560,(G__InterfaceMethod) NULL,105, -1, -1, 0, 13, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname f - - 0 - x1n "
"f - - 0 - x2n f - - 0 - y1n "
"f - - 0 - y2n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddRWC_",596,(G__InterfaceMethod) NULL,105, -1, -1, 0, 4, 1, 1, 0, 
"U 'EdbRun' - 0 - run C - - 0 - rwcname "
"i - - 0 'true' bAddRWD C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShortBrick",1019,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - brick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConvertAreas",1229,(G__InterfaceMethod) NULL,105, -1, -1, 0, 4, 1, 1, 0, 
"I - - 0 - id u 'EdbPattern' - 1 - areas "
"u 'EdbRun' - 1 - run C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScanAreas",881,(G__InterfaceMethod) NULL,105, -1, -1, 0, 5, 1, 1, 0, 
"i 'EdbScanClientBase::ScanType' - 0 - st I - - 0 - id "
"u 'EdbPattern' - 1 - areas U 'EdbRun' - 0 - run "
"C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("UnloadPlate",1113,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("LoadPlate",886,(G__InterfaceMethod) NULL,105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - BRICK i - - 0 - PLATE "
"C - - 10 - mapext i - - 0 '1' nAttempts", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetParameter",1229,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - Object C - - 10 - Parameter "
"C - - 10 - Value", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetClusterThresholds",2094,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - TOP i - - 0 - BOT", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetOdysseyThresholds",2108,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - itop i - - 0 - ibottom "
"i - - 0 - size i - - 0 - TOP "
"i - - 0 - BOT", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetFragmentSize",1531,(G__InterfaceMethod) NULL,105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - X i - - 0 - Y", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("AsyncScanAreaS",1359,(G__InterfaceMethod) NULL,121, -1, -1, 0, 9, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("AsyncScanPreloadAreaS",2070,(G__InterfaceMethod) NULL,121, -1, -1, 0, 13, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname f - - 0 - x1n "
"f - - 0 - x2n f - - 0 - y1n "
"f - - 0 - y2n", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("AsyncWaitForScanResult",2238,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ServerCreatesTarget",1957,G__ScanCint_654_0_19, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetCmd",564,G__ScanCint_654_0_20, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCmd",576,G__ScanCint_654_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - cmd_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMess",696,G__ScanCint_654_0_22, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMess",708,G__ScanCint_654_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - mess_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMess1",745,G__ScanCint_654_0_24, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMess1",757,G__ScanCint_654_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - mess_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNXView",865,G__ScanCint_654_0_26, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNXview",909,G__ScanCint_654_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - nxview_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNYView",866,G__ScanCint_654_0_28, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNYview",910,G__ScanCint_654_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - nyview_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXstep",820,G__ScanCint_654_0_30, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXstep",832,G__ScanCint_654_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - xstep_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYstep",821,G__ScanCint_654_0_32, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetYstep",833,G__ScanCint_654_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - ystep_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxAttempts",1432,G__ScanCint_654_0_34, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxAttempts",1444,G__ScanCint_654_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - attempts_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxFails",1077,G__ScanCint_654_0_36, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxFails",1089,G__ScanCint_654_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - fails_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPort",709,G__ScanCint_654_0_38, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPort",721,G__ScanCint_654_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - port_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServer",919,G__ScanCint_654_0_40, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetServer",931,G__ScanCint_654_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - server_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawDirServer",1504,G__ScanCint_654_0_42, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawDirServer",1516,G__ScanCint_654_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - rawdirserver_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawDirClient",1480,G__ScanCint_654_0_44, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawDirClient",1492,G__ScanCint_654_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - rawdirclient_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProcTgtServer",1626,G__ScanCint_654_0_46, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcTgtServer",1638,G__ScanCint_654_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - prctgtserver_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProcPthServer",1623,G__ScanCint_654_0_48, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcPthServer",1635,G__ScanCint_654_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - prcpthserver_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServerCreatedRunName",2309,G__ScanCint_654_0_50, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ScanCint_654_0_51, 85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbScanClientCommon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ScanCint_654_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientCommon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ScanCint_654_0_53, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbScanClientCommon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ScanCint_654_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbScanClientCommon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ScanCint_654_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ScanCint_654_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientCommon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ScanCint_654_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanClientCommon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ScanCint_654_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientCommon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ScanCint_654_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanClientCommon::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbScanClientCommon", 2006, G__ScanCint_654_0_63, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ScanCint_654_0_64, (int) ('u'), G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientCommon), -1, 1, 1, 1, 1, 0, "u 'EdbScanClientCommon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbScanClient(void) {
   /* EdbScanClient */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClient));
   G__memfunc_setup("EdbScanClient",1263,G__ScanCint_655_0_1, 105, G__get_linked_tagnum(&G__ScanCintLN_EdbScanClient), -1, 0, 1, 1, 1, 0, "i 'EdbScanClient::ScanClientType' - 0 'scanClientSySal' type_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeSocket",1659,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScanPreloadAreaS",1560,(G__InterfaceMethod) NULL,105, -1, -1, 0, 13, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname f - - 0 - x1n "
"f - - 0 - x2n f - - 0 - y1n "
"f - - 0 - y2n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScanAreas",881,(G__InterfaceMethod) NULL,105, -1, -1, 0, 5, 1, 1, 0, 
"i 'EdbScanClientBase::ScanType' - 0 - st I - - 0 - id "
"u 'EdbPattern' - 1 - areas U 'EdbRun' - 0 - run "
"C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddRWC_",596,(G__InterfaceMethod) NULL,105, -1, -1, 0, 4, 1, 1, 0, 
"U 'EdbRun' - 0 - run C - - 0 - rwcname "
"i - - 0 'true' bAddRWD C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShortBrick",1019,(G__InterfaceMethod) NULL,115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - brick", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConvertAreas",1229,(G__InterfaceMethod) NULL,105, -1, -1, 0, 4, 1, 1, 0, 
"I - - 0 - id u 'EdbPattern' - 1 - areas "
"u 'EdbRun' - 1 - run C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnloadPlate",1113,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadPlate",886,(G__InterfaceMethod) NULL,105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - BRICK i - - 0 - PLATE "
"C - - 10 - mapext i - - 0 '1' nAttempts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParameter",1229,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - Object C - - 10 - Parameter "
"C - - 10 - Value", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetClusterThresholds",2094,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - TOP i - - 0 - BOT", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOdysseyThresholds",2108,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - itop i - - 0 - ibottom "
"i - - 0 - size i - - 0 - TOP "
"i - - 0 - BOT", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFragmentSize",1531,(G__InterfaceMethod) NULL,105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - X i - - 0 - Y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AsyncScanAreaS",1359,(G__InterfaceMethod) NULL,121, -1, -1, 0, 9, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AsyncScanPreloadAreaS",2070,(G__InterfaceMethod) NULL,121, -1, -1, 0, 13, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname f - - 0 - x1n "
"f - - 0 - x2n f - - 0 - y1n "
"f - - 0 - y2n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AsyncWaitForScanResult",2238,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCmd",564,G__ScanCint_655_0_18, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCmd",576,G__ScanCint_655_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - cmd_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMess",696,G__ScanCint_655_0_20, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMess",708,G__ScanCint_655_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - mess_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMess1",745,G__ScanCint_655_0_22, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMess1",757,G__ScanCint_655_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - mess_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNXView",865,G__ScanCint_655_0_24, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNXview",909,G__ScanCint_655_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - nxview_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNYView",866,G__ScanCint_655_0_26, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNYview",910,G__ScanCint_655_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - nyview_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXstep",820,G__ScanCint_655_0_28, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXstep",832,G__ScanCint_655_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - xstep_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYstep",821,G__ScanCint_655_0_30, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetYstep",833,G__ScanCint_655_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - ystep_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxAttempts",1432,G__ScanCint_655_0_32, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxAttempts",1444,G__ScanCint_655_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - attempts_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxFails",1077,G__ScanCint_655_0_34, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxFails",1089,G__ScanCint_655_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - fails_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPort",709,G__ScanCint_655_0_36, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPort",721,G__ScanCint_655_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - port_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServer",919,G__ScanCint_655_0_38, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetServer",931,G__ScanCint_655_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - server_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawDirServer",1504,G__ScanCint_655_0_40, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawDirServer",1516,G__ScanCint_655_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - rawdirserver_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawDirClient",1480,G__ScanCint_655_0_42, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRawDirClient",1492,G__ScanCint_655_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - rawdirclient_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProcTgtServer",1626,G__ScanCint_655_0_44, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcTgtServer",1638,G__ScanCint_655_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - prcpthserver_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProcPthServer",1623,G__ScanCint_655_0_46, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcPthServer",1635,G__ScanCint_655_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - prcpthserver_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServerCreatedRunName",2309,G__ScanCint_655_0_48, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ServerCreatesRootFile",2146,G__ScanCint_655_0_49, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ServerCreatesTarget",1957,G__ScanCint_655_0_50, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ScanCint_655_0_51, 85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbScanClient::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ScanCint_655_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClient::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ScanCint_655_0_53, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbScanClient::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ScanCint_655_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbScanClient::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ScanCint_655_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ScanCint_655_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClient::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ScanCint_655_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanClient::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ScanCint_655_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClient::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ScanCint_655_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanClient::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbScanClient", 1263, G__ScanCint_655_0_63, (int) ('i'), G__get_linked_tagnum(&G__ScanCintLN_EdbScanClient), -1, 0, 1, 1, 1, 0, "u 'EdbScanClient' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbScanClient", 1389, G__ScanCint_655_0_64, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ScanCint_655_0_65, (int) ('u'), G__get_linked_tagnum(&G__ScanCintLN_EdbScanClient), -1, 1, 1, 1, 1, 0, "u 'EdbScanClient' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbScanProc(void) {
   /* EdbScanProc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc));
   G__memfunc_setup("EdbScanProc",1060,G__ScanCint_738_0_1, 105, G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BrickDir",778,G__ScanCint_738_0_2, 67, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - brick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckDir",765,G__ScanCint_738_0_3, 103, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - dir g - - 0 'true' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckDirWritable",1591,G__ScanCint_738_0_4, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckAFFDir",970,G__ScanCint_738_0_5, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - brick g - - 0 'true' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBrickDir",1256,G__ScanCint_738_0_6, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id g - - 0 'true' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckPlateDir",1267,G__ScanCint_738_0_7, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id g - - 0 'true' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckProcDir",1169,G__ScanCint_738_0_8, 103, -1, -1, 0, 2, 1, 1, 0, 
"I - - 0 - id g - - 0 'true' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckProcDir",1169,G__ScanCint_738_0_9, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id g - - 0 'true' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeFileName",1151,G__ScanCint_738_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 1 - s I - - 0 - id "
"C - - 10 - suffix g - - 0 'true' inplate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeFileName",1151,G__ScanCint_738_0_11, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 1 - s u 'EdbID' - 0 - id "
"C - - 10 - suffix g - - 0 'true' inplate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeFileNameSrv",1466,G__ScanCint_738_0_12, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 1 - s I - - 0 - id "
"C - - 10 - suffix g - - 0 'true' inplate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeFileNameSrv",1466,G__ScanCint_738_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 1 - s u 'EdbID' - 0 - id "
"C - - 10 - suffix g - - 0 'true' inplate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeAffName",1036,G__ScanCint_738_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 1 - s I - - 0 - id1 "
"I - - 0 - id2 C - - 10 '\"aff.par\"' suffix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeAffName",1036,G__ScanCint_738_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 1 - s u 'EdbID' - 0 - id1 "
"u 'EdbID' - 0 - id2 C - - 10 '\"aff.par\"' suffix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap",574,G__ScanCint_738_0_16, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - brick u 'TString' - 1 - map", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddParLine",948,G__ScanCint_738_0_17, 103, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - file C - - 10 - line "
"g - - 0 'false' recreate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeInPar",856,G__ScanCint_738_0_18, 103, -1, -1, 0, 2, 1, 1, 0, 
"I - - 0 - id C - - 10 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeInPar",856,G__ScanCint_738_0_19, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id C - - 10 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeInParSet",1156,G__ScanCint_738_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id C - - 10 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyFile",795,G__ScanCint_738_0_21, 105, -1, -1, 0, 4, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2 "
"C - - 10 - suffix g - - 0 - overwrite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyPar",702,G__ScanCint_738_0_22, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbID' - 0 - id1 u 'EdbID' - 0 - id2 "
"g - - 0 'true' overwrite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyPar",702,G__ScanCint_738_0_23, 105, -1, -1, 0, 3, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2 "
"g - - 0 'true' overwrite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyPred",806,G__ScanCint_738_0_24, 105, -1, -1, 0, 3, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2 "
"g - - 0 'true' overwrite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyAFFPar",907,G__ScanCint_738_0_25, 105, -1, -1, 0, 5, 1, 1, 0, 
"I - - 0 - id1c I - - 0 - id2c "
"I - - 0 - id1p I - - 0 - id2p "
"g - - 0 'true' overwrite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveFile",1006,G__ScanCint_738_0_26, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id C - - 10 - suffix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyParSet",1002,G__ScanCint_738_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - idset1 u 'EdbID' - 0 - idset2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPiecePar",1157,G__ScanCint_738_0_28, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbPlateP' - 1 - plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeScannedIDList",1635,G__ScanCint_738_0_29, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbID' - 0 - id0 u 'EdbScanSet' - 1 - sc "
"i - - 0 - pl_from i - - 0 - pl_to "
"C - - 10 - suffix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckFiles",977,G__ScanCint_738_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sc C - - 10 - suffix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPatTXT",929,G__ScanCint_738_0_31, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred u 'EdbID' - 0 - id "
"C - - 10 - suffix i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPatTXT",929,G__ScanCint_738_0_32, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred I - - 0 - id "
"C - - 10 - suffix i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPatTXT",929,G__ScanCint_738_0_33, 105, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - file u 'EdbPattern' - 1 - pred "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WritePatTXT",1072,G__ScanCint_738_0_34, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred I - - 0 - id "
"C - - 10 - suffix i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteSBcndTXT",1237,G__ScanCint_738_0_35, 105, -1, -1, 0, 2, 1, 1, 0, 
"I - - 0 - id C - - 10 '\"man.sbt.txt\"' suffix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPatRoot",1093,G__ScanCint_738_0_36, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred I - - 0 - id "
"C - - 10 - suffix i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WritePatRoot",1236,G__ScanCint_738_0_37, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred I - - 0 - id "
"C - - 10 - suffix i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPred",775,G__ScanCint_738_0_38, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred I - - 0 - id "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WritePred",918,G__ScanCint_738_0_39, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred I - - 0 - id "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFound",888,G__ScanCint_738_0_40, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred I - - 0 - id "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteFound",1031,G__ScanCint_738_0_41, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred I - - 0 - id "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFound",888,G__ScanCint_738_0_42, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred u 'EdbID' - 0 - id "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPred",775,G__ScanCint_738_0_43, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred u 'EdbID' - 0 - id "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WritePred",918,G__ScanCint_738_0_44, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred u 'EdbID' - 0 - id "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteFound",1031,G__ScanCint_738_0_45, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - found u 'EdbID' - 0 - id "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WritePatTXT",1072,G__ScanCint_738_0_46, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred u 'EdbID' - 0 - id "
"C - - 10 - suffix i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WaitFileReady",1290,G__ScanCint_738_0_47, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname_", "waits file copied/moved, in ready state", (void*) NULL, 0);
   G__memfunc_setup("InitRun",713,G__ScanCint_738_0_48, 85, G__get_linked_tagnum(&G__ScanCintLN_EdbRun), -1, 0, 4, 1, 1, 0, 
"I - - 0 - id C - - 0 '0' runname_ "
"C - - 0 '0' runnamesrv_ g - - 0 'true' createrun_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FlashRawDir",1079,G__ScanCint_738_0_49, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbScanClient' - 1 - scan I - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadPlate",886,G__ScanCint_738_0_50, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbScanClient' - 1 - scan I - - 0 - id "
"i - - 0 '1' attempts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanAreas",881,G__ScanCint_738_0_51, 105, -1, -1, 0, 5, 1, 1, 0, 
"i 'EdbScanClientBase::ScanType' - 0 - st u 'EdbScanClient' - 1 - scan "
"I - - 0 - id i - - 0 '-1' flag "
"C - - 10 '\"NOCLCLFRAMESUM\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanAreas",881,G__ScanCint_738_0_52, 105, -1, -1, 0, 5, 1, 1, 0, 
"i 'EdbScanClientBase::ScanType' - 0 - st u 'EdbScanClient' - 1 - scan "
"u 'EdbPattern' - 1 - pred I - - 0 - id "
"C - - 10 '\"NOCLCLFRAMESUM\"' opt", "NEW!!!", (void*) NULL, 0);
   G__memfunc_setup("InitPiece",890,G__ScanCint_738_0_53, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbDataPiece' - 1 - piece I - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitPiece",890,G__ScanCint_738_0_54, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbDataPiece' - 1 - piece u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPiece",866,G__ScanCint_738_0_55, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbDataPiece' - 1 - piece u 'EdbPattern' - 1 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPatCP",820,G__ScanCint_738_0_56, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat I - - 0 - id "
"u 'TCut' - 0 '\"1\"' c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPatCP",820,G__ScanCint_738_0_57, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat u 'EdbID' - 0 - id "
"u 'TCut' - 0 '\"1\"' c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPatCPnopar",1364,G__ScanCint_738_0_58, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat u 'EdbID' - 0 - id "
"u 'TCut' - 0 '\"1\"' cut g - - 0 'false' do_erase "
"g - - 0 'false' read_mt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPatCPnopar",1364,G__ScanCint_738_0_59, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat C - - 10 - file "
"u 'TCut' - 0 '\"1\"' cut U 'EdbMask' - 0 '0' erase_mask "
"g - - 0 'false' read_mt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEraseMask",1272,G__ScanCint_738_0_60, 85, G__get_linked_tagnum(&G__ScanCintLN_EdbMask), -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeEraseFile",1262,G__ScanCint_738_0_61, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbPattern' - 1 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyAffZ",877,G__ScanCint_738_0_62, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat I - - 0 - id1 "
"I - - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAffZ",647,G__ScanCint_738_0_63, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbAffine2D' - 1 - aff f - - 1 - z "
"I - - 0 - id1 I - - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAFFDZ",663,G__ScanCint_738_0_64, 103, -1, -1, 0, 3, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2 "
"f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAFF0",553,G__ScanCint_738_0_65, 103, -1, -1, 0, 2, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeAFFSet",887,G__ScanCint_738_0_66, 103, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanSet' - 1 - sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeParSet",973,G__ScanCint_738_0_67, 103, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanSet' - 1 - sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrepareSetStructure",1996,G__ScanCint_738_0_68, 103, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanSet' - 1 - sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConvertAreas",1229,G__ScanCint_738_0_69, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbScanClient' - 1 - scan I - - 0 - id "
"i - - 0 '-1' flag C - - 10 '\"NOCLCLFRAMESUM\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectAngles",1324,G__ScanCint_738_0_70, 105, -1, -1, 0, 1, 1, 1, 0, "I - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkRun",707,G__ScanCint_738_0_71, 105, -1, -1, 0, 2, 1, 1, 0, 
"I - - 0 - id i - - 0 '1' noUpdate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkRunAll",988,G__ScanCint_738_0_72, 105, -1, -1, 0, 4, 1, 1, 0, 
"I - - 0 - id i - - 0 '3' npre "
"i - - 0 '1' nfull i - - 0 '1' correct_ang", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkRunAll",988,G__ScanCint_738_0_73, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbID' - 0 - id i - - 0 '3' npre "
"i - - 0 '1' nfull i - - 0 '1' correct_ang", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkSet",698,G__ScanCint_738_0_74, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sc i - - 0 '3' npre "
"i - - 0 '1' nfull i - - 0 '1' correct_ang", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternSide",1411,G__ScanCint_738_0_75, 121, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbID' - 0 - id i - - 0 - side "
"u 'EdbLayer' - 1 - la C - - 10 - segcut "
"i - - 0 - afid u 'EdbPattern' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkRunTest",1123,G__ScanCint_738_0_76, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbPlateP' - 1 - plate "
"u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkRunNew",1005,G__ScanCint_738_0_77, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbPlateP' - 1 - plate "
"u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkSetNew",996,G__ScanCint_738_0_78, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sc u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkSetNewTest",1412,G__ScanCint_738_0_79, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sc u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignNewNopar",1301,G__ScanCint_738_0_80, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbID' - 0 - id1 u 'EdbID' - 0 - id2 "
"u 'TEnv' - 1 - cenv U 'EdbAffine2D' - 0 '0' aff "
"f - - 0 '0' dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateAFFPar",1107,G__ScanCint_738_0_81, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbID' - 0 - id1 u 'EdbID' - 0 - id2 "
"u 'EdbLayer' - 1 - l U 'EdbAffine2D' - 0 '0' aff0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdatePlatePar",1404,G__ScanCint_738_0_82, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbLayer' - 1 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignSetNewNopar",1601,G__ScanCint_738_0_83, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sc u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignSetNewNopar",1601,G__ScanCint_738_0_84, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignSet",791,G__ScanCint_738_0_85, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbID' - 0 - id i - - 0 - npre "
"i - - 0 - nfull C - - 10 '\"-z\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignSet",791,G__ScanCint_738_0_86, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sc i - - 0 '1' npre "
"i - - 0 '3' nfull C - - 10 '\"-z\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Align",491,G__ScanCint_738_0_87, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbID' - 0 - id1 u 'EdbID' - 0 - id2 "
"C - - 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Align",491,G__ScanCint_738_0_88, 105, -1, -1, 0, 3, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2 "
"C - - 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignAll",772,G__ScanCint_738_0_89, 105, -1, -1, 0, 5, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2 "
"i - - 0 '1' npre i - - 0 '3' nfull "
"C - - 10 '\"-z\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignAll",772,G__ScanCint_738_0_90, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbID' - 0 - id1 u 'EdbID' - 0 - id2 "
"i - - 0 '1' npre i - - 0 '3' nfull "
"C - - 10 '\"-z\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackSetBT",951,G__ScanCint_738_0_91, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sc u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadTracksTree",1396,G__ScanCint_738_0_92, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbPVRec' - 1 - ali "
"u 'TCut' - 0 '\"1\"' cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadTracksTree",1396,G__ScanCint_738_0_93, 105, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - name u 'EdbPVRec' - 1 - ali "
"u 'TCut' - 0 '\"1\"' cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectPredWithFound",2037,G__ScanCint_738_0_94, 103, -1, -1, 0, 4, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2 "
"C - - 10 '\"-z\"' opt i - - 0 '6' patmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectAffWithPred",1798,G__ScanCint_738_0_95, 103, -1, -1, 0, 5, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2 "
"C - - 10 '\"-z\"' opt i - - 0 '6' patmin "
"C - - 10 '\"fullalignment\"' parfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProjectFound",1235,G__ScanCint_738_0_96, 103, -1, -1, 0, 2, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProjectFound",1235,G__ScanCint_738_0_97, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id1 u 'EdbID' - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPredictions",1541,G__ScanCint_738_0_98, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred I - - 0 - id "
"u 'EdbPattern' - 1 - found i - - 0 '3' maxholes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPredictions",1541,G__ScanCint_738_0_99, 105, -1, -1, 0, 3, 1, 1, 0, 
"I - - 0 - id i - - 0 '-1' flag "
"i - - 0 '3' maxholes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitRunAccessNew",1605,G__ScanCint_738_0_100, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbRunAccess' - 1 - ra u 'EdbID' - 0 - id "
"u 'EdbPlateP' - 1 - plate g - - 0 'false' do_update", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitRunAccessNew",1605,G__ScanCint_738_0_101, 103, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbRunAccess' - 1 - ra u 'EdbID' - 0 - idset "
"i - - 0 - idplate g - - 0 'false' do_update", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitRunAccess",1307,G__ScanCint_738_0_102, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbRunAccess' - 1 - ra I - - 0 - id "
"g - - 0 'false' do_update", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitRunAccess",1307,G__ScanCint_738_0_103, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbRunAccess' - 1 - ra u 'EdbID' - 0 - id "
"g - - 0 'false' do_update", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPredictionsRawSet",2139,G__ScanCint_738_0_104, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbID' - 0 - idp u 'EdbScanSet' - 1 - ss "
"i - - 0 - npl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPredictionsRaw",1839,G__ScanCint_738_0_105, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - idp u 'EdbID' - 0 - idr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPredictionsRaw",1839,G__ScanCint_738_0_106, 105, -1, -1, 0, 10, 1, 1, 0, 
"u 'EdbPattern' - 1 - pred u 'EdbPattern' - 1 - found "
"u 'EdbRunAccess' - 1 - ra u 'EdbScanCond' - 1 - condBT "
"u 'EdbScanCond' - 1 - condMT f - - 0 '0.1' delta_theta "
"f - - 0 '5.' puls_min f - - 0 '9.' puls_mt "
"f - - 0 '1.6' chi2max E - - 0 '0' out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCompliments",1548,G__ScanCint_738_0_107, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbSegP' - 1 - s u 'EdbPattern' - 1 - pat "
"u 'TObjArray' - 1 - found f - - 0 - chi2max "
"u 'TArrayF' - 1 - chiarr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaultCondBT",1547,G__ScanCint_738_0_108, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaultCondMT",1558,G__ScanCint_738_0_109, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OptimizeScanPath",1635,G__ScanCint_738_0_110, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pin u 'EdbPattern' - 1 - pout "
"i - - 0 - brick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveDublets",1345,G__ScanCint_738_0_111, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - pin u 'EdbPattern' - 1 - pout "
"i - - 0 - brick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddAFFtoScanSet",1386,G__ScanCint_738_0_112, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sc u 'EdbID' - 0 - id1 "
"u 'EdbID' - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddAFFtoScanSet",1386,G__ScanCint_738_0_113, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sc I - - 0 - id1 "
"I - - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddAFFtoScanSet",1386,G__ScanCint_738_0_114, 103, -1, -1, 0, 9, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sc i - - 0 - b1 "
"i - - 0 - p1 i - - 0 - s1 "
"i - - 0 - e1 i - - 0 - b2 "
"i - - 0 - p2 i - - 0 - s2 "
"i - - 0 - e2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssembleScanSet",1501,G__ScanCint_738_0_115, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanSet' - 1 - ss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadScanSetCP",1216,G__ScanCint_738_0_116, 105, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbScanSet' - 1 - ss u 'EdbPVRec' - 1 - ali "
"u 'TCut' - 0 '\"1\"' c g - - 0 'true' do_erase "
"i - - 0 '-1000' minplate i - - 0 '-1000' maxplate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadScanSetCP",1216,G__ScanCint_738_0_117, 105, -1, -1, 0, 7, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbPVRec' - 1 - ali "
"u 'TCut' - 0 '\"1\"' c g - - 0 'true' do_erase "
"g - - 0 'true' do_assemble i - - 0 '-1000' minplate "
"i - - 0 '-1000' maxplate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFoundSegment",1611,G__ScanCint_738_0_118, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbSegP' - 1 - s "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFoundTrack",1389,G__ScanCint_738_0_119, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbScanSet' - 1 - ss u 'EdbTrackP' - 1 - track "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFoundTracks",1504,G__ScanCint_738_0_120, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbScanSet' - 1 - ss u 'EdbPVRec' - 1 - ali "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadManFoundTracks",1788,G__ScanCint_738_0_121, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbScanSet' - 1 - ss u 'EdbPVRec' - 1 - ali "
"i - - 0 '-1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckRunQualityRaw",1830,G__ScanCint_738_0_122, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - idss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckSetQualityRaw",1821,G__ScanCint_738_0_123, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - idss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignOverlaps",1335,G__ScanCint_738_0_124, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbPattern' - 1 - p1 "
"u 'EdbPattern' - 1 - p2 u 'TEnv' - 1 - cenv "
"C - - 10 - suff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckViewOverlaps",1733,G__ScanCint_738_0_125, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteScanSet",1212,G__ScanCint_738_0_126, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbScanSet' - 1 - ss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadScanSet",1069,G__ScanCint_738_0_127, 85, G__get_linked_tagnum(&G__ScanCintLN_EdbScanSet), -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadScanSetGlobal",1662,G__ScanCint_738_0_128, 85, G__get_linked_tagnum(&G__ScanCintLN_EdbScanSet), -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id g - - 0 - x_marks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteSBTrack",1173,G__ScanCint_738_0_129, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbTrackP' - 1 - t i - - 0 - path "
"u 'EdbID' - 0 - id", "to remove?", (void*) NULL, 0);
   G__memfunc_setup("WriteSBTracks",1288,G__ScanCint_738_0_130, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 1 - tracks u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadSBTracks",1145,G__ScanCint_738_0_131, 85, G__get_linked_tagnum(&G__ScanCintLN_TObjArray), -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeSetSBT",1029,G__ScanCint_738_0_132, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbScanSet' - 1 - ss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeSetSBT",1029,G__ScanCint_738_0_133, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrepareVolumesPred",1861,G__ScanCint_738_0_134, 121, -1, -1, 0, 7, 1, 1, 0, 
"I - - 0 - id u 'EdbPattern' - 1 - points "
"i - - 0 '5' before i - - 0 '5' after "
"i - - 0 '1' pmin i - - 0 '57' pmax "
"U 'EdbScanSet' - 0 '0' sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTracksPred",1393,G__ScanCint_738_0_135, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'TObjArray' - 1 - tracks u 'EdbID' - 0 - id "
"u 'EdbLayer' - 1 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestAl",589,G__ScanCint_738_0_136, 105, -1, -1, 0, 2, 1, 1, 0, 
"I - - 0 - id1 I - - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestAl",589,G__ScanCint_738_0_137, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id1 u 'EdbID' - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestAl",589,G__ScanCint_738_0_138, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - p1 u 'EdbPattern' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestAl",589,G__ScanCint_738_0_139, 105, -1, -1, 0, 5, 1, 1, 0, 
"C - - 10 - cpfile1 C - - 10 - cpfile2 "
"u 'TCut' - 1 - cut f - - 0 - dz "
"U 'EdbAffine2D' - 0 '0' aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadMarksSet",1190,G__ScanCint_738_0_140, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbMarksSet' - 1 - ms i - - 0 - brick "
"C - - 10 - filename c - - 0 ''_'' spacer "
"c - - 0 ''S'' shape", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteMarksSet",1333,G__ScanCint_738_0_141, 105, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbMarksSet' - 1 - ms i - - 0 - brick "
"C - - 10 - filename c - - 0 ''_'' spacer "
"c - - 0 ''S'' shape i - - 0 '1' plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignRaw",789,G__ScanCint_738_0_142, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbID' - 0 - id1 u 'EdbID' - 0 - id2 "
"u 'TEnv' - 1 - cenv U 'EdbAffine2D' - 0 '0' applyAff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignRawSet",1089,G__ScanCint_738_0_143, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbID' - 0 - id1 u 'EdbID' - 0 - id2 "
"u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateSetWithAff",1592,G__ScanCint_738_0_144, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - idset u 'EdbAffine2D' - 0 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateSetWithAff",1592,G__ScanCint_738_0_145, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbID' - 0 - id1 "
"u 'EdbID' - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateSetWithAff",1592,G__ScanCint_738_0_146, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbID' - 0 - idu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateSetWithPlatePar",2116,G__ScanCint_738_0_147, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateSetWithPlatePar",2116,G__ScanCint_738_0_148, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanSet' - 1 - ss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeLinkSetSummary",1830,G__ScanCint_738_0_149, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeAlignSetSummary",1923,G__ScanCint_738_0_150, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeAlignSetSummary",1923,G__ScanCint_738_0_151, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbID' - 0 - id1 u 'EdbID' - 0 - id2 "
"C - - 10 - fout C - - 10 '\"UPDATE\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindRawTrack",1184,G__ScanCint_738_0_152, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbTrackP' - 1 - pred u 'EdbTrackP' - 1 - found "
"u 'EdbID' - 0 - idset i - - 0 - plate "
"u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindRawTrack",1184,G__ScanCint_738_0_153, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbTrackP' - 1 - pred u 'EdbTrackP' - 1 - found "
"u 'EdbID' - 0 - idset i - - 0 - plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateAlignSummaryTree",2252,G__ScanCint_738_0_154, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbID' - 0 - idset1 u 'EdbID' - 0 - idset2 "
"u 'TTree' - 1 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadAffToLayer",1353,G__ScanCint_738_0_155, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbLayer' - 1 - la u 'EdbID' - 0 - id1 "
"u 'EdbID' - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractRawVolume",1661,G__ScanCint_738_0_156, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'EdbID' - 0 - idnew "
"u 'EdbSegP' - 0 - pred i - - 0 - plate "
"u 'TEnv' - 1 - cenv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractRawVolume",1661,G__ScanCint_738_0_157, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbScanSet' - 1 - ss u 'EdbScanSet' - 1 - ssnew "
"u 'EdbSegP' - 1 - pred f - - 0 - dR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetServerRunName",1625,G__ScanCint_738_0_158, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServerRunName",1613,G__ScanCint_738_0_159, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadUncorrectedBTforFoundTracks",3131,G__ScanCint_738_0_160, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPVRec' - 1 - ali", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LogPrint",815,G__ScanCint_738_0_161, 121, -1, -1, 0, 4, 8, 1, 0, 
"i - - 0 - brick i - - 0 - level "
"C - - 10 - rout C - - 10 - msgfmt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__ScanCint_738_0_162, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ScanCint_738_0_163, 85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbScanProc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ScanCint_738_0_164, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanProc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ScanCint_738_0_165, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbScanProc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ScanCint_738_0_166, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbScanProc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ScanCint_738_0_170, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ScanCint_738_0_171, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanProc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ScanCint_738_0_172, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanProc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ScanCint_738_0_173, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanProc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ScanCint_738_0_174, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanProc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbScanProc", 1060, G__ScanCint_738_0_175, (int) ('i'), G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc), -1, 0, 1, 1, 1, 0, "u 'EdbScanProc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbScanProc", 1186, G__ScanCint_738_0_176, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ScanCint_738_0_177, (int) ('u'), G__get_linked_tagnum(&G__ScanCintLN_EdbScanProc), -1, 1, 1, 1, 1, 0, "u 'EdbScanProc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbProcPars(void) {
   /* EdbProcPars */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbProcPars));
   G__memfunc_setup("EdbProcPars",1077,G__ScanCint_744_0_1, 105, G__get_linked_tagnum(&G__ScanCintLN_EdbProcPars), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLinkDef",969,G__ScanCint_744_0_2, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TEnv' - 1 - cenv", (char*)NULL, (void*) G__func2void( (void (*)(TEnv&))(&EdbProcPars::SetLinkDef) ), 0);
   G__memfunc_setup("SetAlignDef",1062,G__ScanCint_744_0_3, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TEnv' - 1 - cenv", (char*)NULL, (void*) G__func2void( (void (*)(TEnv&))(&EdbProcPars::SetAlignDef) ), 0);
   G__memfunc_setup("SetTrackDef",1072,G__ScanCint_744_0_4, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TEnv' - 1 - cenv", (char*)NULL, (void*) G__func2void( (void (*)(TEnv&))(&EdbProcPars::SetTrackDef) ), 0);
   G__memfunc_setup("Class",502,G__ScanCint_744_0_5, 85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbProcPars::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ScanCint_744_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbProcPars::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ScanCint_744_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbProcPars::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ScanCint_744_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbProcPars::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ScanCint_744_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ScanCint_744_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbProcPars::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ScanCint_744_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbProcPars::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ScanCint_744_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbProcPars::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ScanCint_744_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbProcPars::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbProcPars", 1077, G__ScanCint_744_0_17, (int) ('i'), G__get_linked_tagnum(&G__ScanCintLN_EdbProcPars), -1, 0, 1, 1, 1, 0, "u 'EdbProcPars' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbProcPars", 1203, G__ScanCint_744_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ScanCint_744_0_19, (int) ('u'), G__get_linked_tagnum(&G__ScanCintLN_EdbProcPars), -1, 1, 1, 1, 1, 0, "u 'EdbProcPars' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbTrackAssembler(void) {
   /* EdbTrackAssembler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbTrackAssembler));
   G__memfunc_setup("EdbTrackAssembler",1694,G__ScanCint_746_0_1, 105, G__get_linked_tagnum(&G__ScanCintLN_EdbTrackAssembler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentum",1150,G__ScanCint_746_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRadLength",1189,G__ScanCint_746_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SameSegment",1113,G__ScanCint_746_0_4, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoubletsFilterOut",1760,G__ScanCint_746_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPattern' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTrZMap",978,G__ScanCint_746_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTrZMap",978,G__ScanCint_746_0_7, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 - nx f - - 0 - xmi "
"f - - 0 - xma i - - 0 - ny "
"f - - 0 - ymi f - - 0 - yma "
"i - - 0 - ncell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTrZMap",978,G__ScanCint_746_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTrZMap",965,G__ScanCint_746_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtrapolateTracksToZ",2062,G__ScanCint_746_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - z i - - 0 '0' nsegmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPattern",999,G__ScanCint_746_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPattern' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__ScanCint_746_0_12, 85, G__get_linked_tagnum(&G__ScanCintLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", "owner of the segments!!!", (void*) NULL, 0);
   G__memfunc_setup("AddSegmentAsTrack",1669,G__ScanCint_746_0_13, 85, G__get_linked_tagnum(&G__ScanCintLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbSeg",690,G__ScanCint_746_0_14, 102, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecalculateSegmentsProb",2366,G__ScanCint_746_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AcceptDZGap",1030,G__ScanCint_746_0_16, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbTrackP' - 1 - t f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentsErrors",1775,G__ScanCint_746_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTracks",907,G__ScanCint_746_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CombTracks",1001,G__ScanCint_746_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - selected", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckPatternAlignment",2139,G__ScanCint_746_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - p i - - 0 - nsegmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Tracks",616,G__ScanCint_746_0_21, 117, G__get_linked_tagnum(&G__ScanCintLN_TObjArray), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ScanCint_746_0_22, 85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbTrackAssembler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ScanCint_746_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrackAssembler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ScanCint_746_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbTrackAssembler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ScanCint_746_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbTrackAssembler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ScanCint_746_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ScanCint_746_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrackAssembler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ScanCint_746_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTrackAssembler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ScanCint_746_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrackAssembler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ScanCint_746_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTrackAssembler::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbTrackAssembler", 1820, G__ScanCint_746_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbScanTracking(void) {
   /* EdbScanTracking */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanTracking));
   G__memfunc_setup("EdbScanTracking",1475,G__ScanCint_747_0_1, 105, G__get_linked_tagnum(&G__ScanCintLN_EdbScanTracking), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackAli",779,G__ScanCint_747_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPVRec' - 1 - ali u 'TEnv' - 1 - env", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackSetBT",951,G__ScanCint_747_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - id u 'TEnv' - 1 - env", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveHist",807,G__ScanCint_747_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbID' - 0 - idset u 'EdbTrackAssembler' - 1 - etra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ScanCint_747_0_5, 85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbScanTracking::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ScanCint_747_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanTracking::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ScanCint_747_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbScanTracking::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ScanCint_747_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbScanTracking::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ScanCint_747_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ScanCint_747_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanTracking::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ScanCint_747_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanTracking::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ScanCint_747_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanTracking::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ScanCint_747_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanTracking::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbScanTracking", 1475, G__ScanCint_747_0_17, (int) ('i'), G__get_linked_tagnum(&G__ScanCintLN_EdbScanTracking), -1, 0, 1, 1, 1, 0, "u 'EdbScanTracking' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbScanTracking", 1601, G__ScanCint_747_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ScanCint_747_0_19, (int) ('u'), G__get_linked_tagnum(&G__ScanCintLN_EdbScanTracking), -1, 1, 1, 1, 1, 0, "u 'EdbScanTracking' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbScanClientPav(void) {
   /* EdbScanClientPav */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientPav));
   G__memfunc_setup("EdbScanClientPav",1558,G__ScanCint_783_0_1, 105, G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientPav), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnloadPlate",1113,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", "N/A", (void*) NULL, 1);
   G__memfunc_setup("LoadPlate",886,(G__InterfaceMethod) NULL,105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - BRICK i - - 0 - PLATE "
"C - - 10 - mapext i - - 0 '1' nAttempts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParameter",1229,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - Object C - - 10 - Parameter "
"C - - 10 - Value", "convert for sysal names?", (void*) NULL, 1);
   G__memfunc_setup("SetClusterThresholds",2094,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - TOP i - - 0 - BOT", "- default used", (void*) NULL, 1);
   G__memfunc_setup("SetOdysseyThresholds",2108,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - itop i - - 0 - ibottom "
"i - - 0 - size i - - 0 - TOP "
"i - - 0 - BOT", "+", (void*) NULL, 1);
   G__memfunc_setup("SetFragmentSize",1531,(G__InterfaceMethod) NULL,105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - X i - - 0 - Y", "converted to whole region for cont.mode", (void*) NULL, 1);
   G__memfunc_setup("ScanAreas",881,(G__InterfaceMethod) NULL,105, -1, -1, 0, 5, 1, 1, 0, 
"i 'EdbScanClientBase::ScanType' - 0 - st I - - 0 - id "
"u 'EdbPattern' - 1 - areas U 'EdbRun' - 0 - run "
"C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AsyncScanAreaS",1359,(G__InterfaceMethod) NULL,121, -1, -1, 0, 9, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname", "N/A, not used ever", (void*) NULL, 1);
   G__memfunc_setup("AsyncScanPreloadAreaS",2070,(G__InterfaceMethod) NULL,121, -1, -1, 0, 13, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname f - - 0 - x1n "
"f - - 0 - x2n f - - 0 - y1n "
"f - - 0 - y2n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScanFromPrediction",1834,G__ScanCint_783_0_11, 103, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - dx f - - 0 - dy", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AsyncStartScan",1425,G__ScanCint_783_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AsyncWaitForScanResult",2238,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", "+", (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "s", (void*) NULL, 1);
   G__memfunc_setup("SetPathLib",976,G__ScanCint_783_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - lib_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPathName",1082,G__ScanCint_783_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ServerCreatesTarget",1957,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetServerTarget",1546,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ScanCint_783_0_19, 85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbScanClientPav::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ScanCint_783_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientPav::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ScanCint_783_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbScanClientPav::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ScanCint_783_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbScanClientPav::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ScanCint_783_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ScanCint_783_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientPav::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ScanCint_783_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanClientPav::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ScanCint_783_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientPav::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ScanCint_783_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanClientPav::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbScanClientPav", 1684, G__ScanCint_783_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbScanClientSysal(void) {
   /* EdbScanClientSysal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientSysal));
   G__memfunc_setup("EdbScanClientSysal",1787,G__ScanCint_784_0_1, 105, G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientSysal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RcvLine",691,G__ScanCint_784_0_2, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'TSocket' - 0 - sock C - - 0 - line "
"i - - 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnloadPlate",1113,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadPlate",886,(G__InterfaceMethod) NULL,105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - BRICK i - - 0 - PLATE "
"C - - 10 - mapext i - - 0 '1' nAttempts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParameter",1229,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - Object C - - 10 - Parameter "
"C - - 10 - Value", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetClusterThresholds",2094,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - TOP i - - 0 - BOT", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOdysseyThresholds",2108,(G__InterfaceMethod) NULL,121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - itop i - - 0 - ibottom "
"i - - 0 - size i - - 0 - TOP "
"i - - 0 - BOT", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFragmentSize",1531,(G__InterfaceMethod) NULL,105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - X i - - 0 - Y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScanAreas",881,(G__InterfaceMethod) NULL,105, -1, -1, 0, 5, 1, 1, 0, 
"i 'EdbScanClientBase::ScanType' - 0 - st I - - 0 - id "
"u 'EdbPattern' - 1 - areas U 'EdbRun' - 0 - run "
"C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AsyncScanAreaS",1359,(G__InterfaceMethod) NULL,121, -1, -1, 0, 9, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AsyncScanPreloadAreaS",2070,(G__InterfaceMethod) NULL,121, -1, -1, 0, 13, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2 "
"i - - 0 - id3 i - - 0 - id4 "
"f - - 0 - x1 f - - 0 - x2 "
"f - - 0 - y1 f - - 0 - y2 "
"C - - 10 - fname f - - 0 - x1n "
"f - - 0 - x2n f - - 0 - y1n "
"f - - 0 - y2n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AsyncWaitForScanResult",2238,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ServerCreatesTarget",1957,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ScanCint_784_0_15, 85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbScanClientSysal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ScanCint_784_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientSysal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ScanCint_784_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbScanClientSysal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ScanCint_784_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbScanClientSysal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ScanCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ScanCint_784_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ScanCint_784_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientSysal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ScanCint_784_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanClientSysal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ScanCint_784_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbScanClientSysal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ScanCint_784_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbScanClientSysal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbScanClientSysal", 1787, G__ScanCint_784_0_27, (int) ('i'), G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientSysal), -1, 0, 1, 1, 1, 0, "u 'EdbScanClientSysal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbScanClientSysal", 1913, G__ScanCint_784_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ScanCint_784_0_29, (int) ('u'), G__get_linked_tagnum(&G__ScanCintLN_EdbScanClientSysal), -1, 1, 1, 1, 1, 0, "u 'EdbScanClientSysal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncScanCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalScanCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcScanCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ScanCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR = { "vector<unsigned char,allocator<unsigned char> >" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TSocket = { "TSocket" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ScanCintLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TCut = { "TCut" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbAffine2D = { "EdbAffine2D" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbMarksSet = { "EdbMarksSet" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbRun = { "EdbRun" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbID = { "EdbID" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbSegP = { "EdbSegP" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbTrackP = { "EdbTrackP" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbPattern = { "EdbPattern" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanClientBase = { "EdbScanClientBase" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanClientBasecLcLScanType = { "EdbScanClientBase::ScanType" , 101 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanClientCommon = { "EdbScanClientCommon" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanClient = { "EdbScanClient" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanClientcLcLScanClientType = { "EdbScanClient::ScanClientType" , 101 , -1 };
G__linked_taginfo G__ScanCintLN_auto_ptrlEEdbScanClientCommongR = { "auto_ptr<EdbScanClientCommon>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbCell2 = { "EdbCell2" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbLayer = { "EdbLayer" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanCond = { "EdbScanCond" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbRunAccess = { "EdbRunAccess" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbMask = { "EdbMask" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanSet = { "EdbScanSet" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbPVRec = { "EdbPVRec" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbDataPiece = { "EdbDataPiece" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbPlateP = { "EdbPlateP" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanProc = { "EdbScanProc" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbProcPars = { "EdbProcPars" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbTrackFitter = { "EdbTrackFitter" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbTrackAssembler = { "EdbTrackAssembler" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanTracking = { "EdbScanTracking" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_MessageManager = { "MessageManager" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_MessageReader = { "MessageReader" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanClientPav = { "EdbScanClientPav" , 99 , -1 };
G__linked_taginfo G__ScanCintLN_EdbScanClientSysal = { "EdbScanClientSysal" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableScanCint() {
  G__ScanCintLN_TClass.tagnum = -1 ;
  G__ScanCintLN_TBuffer.tagnum = -1 ;
  G__ScanCintLN_TMemberInspector.tagnum = -1 ;
  G__ScanCintLN_TObject.tagnum = -1 ;
  G__ScanCintLN_TNamed.tagnum = -1 ;
  G__ScanCintLN_TString.tagnum = -1 ;
  G__ScanCintLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR.tagnum = -1 ;
  G__ScanCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__ScanCintLN_string.tagnum = -1 ;
  G__ScanCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ScanCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ScanCintLN_TObjArray.tagnum = -1 ;
  G__ScanCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ScanCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ScanCintLN_TSocket.tagnum = -1 ;
  G__ScanCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__ScanCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ScanCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ScanCintLN_TTree.tagnum = -1 ;
  G__ScanCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__ScanCintLN_TCut.tagnum = -1 ;
  G__ScanCintLN_TArrayF.tagnum = -1 ;
  G__ScanCintLN_EdbAffine2D.tagnum = -1 ;
  G__ScanCintLN_TH1F.tagnum = -1 ;
  G__ScanCintLN_EdbMarksSet.tagnum = -1 ;
  G__ScanCintLN_EdbRun.tagnum = -1 ;
  G__ScanCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__ScanCintLN_EdbID.tagnum = -1 ;
  G__ScanCintLN_EdbSegP.tagnum = -1 ;
  G__ScanCintLN_EdbTrackP.tagnum = -1 ;
  G__ScanCintLN_EdbPattern.tagnum = -1 ;
  G__ScanCintLN_EdbScanClientBase.tagnum = -1 ;
  G__ScanCintLN_EdbScanClientBasecLcLScanType.tagnum = -1 ;
  G__ScanCintLN_EdbScanClientCommon.tagnum = -1 ;
  G__ScanCintLN_EdbScanClient.tagnum = -1 ;
  G__ScanCintLN_EdbScanClientcLcLScanClientType.tagnum = -1 ;
  G__ScanCintLN_auto_ptrlEEdbScanClientCommongR.tagnum = -1 ;
  G__ScanCintLN_EdbCell2.tagnum = -1 ;
  G__ScanCintLN_EdbLayer.tagnum = -1 ;
  G__ScanCintLN_EdbScanCond.tagnum = -1 ;
  G__ScanCintLN_EdbRunAccess.tagnum = -1 ;
  G__ScanCintLN_EdbMask.tagnum = -1 ;
  G__ScanCintLN_EdbScanSet.tagnum = -1 ;
  G__ScanCintLN_EdbPVRec.tagnum = -1 ;
  G__ScanCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__ScanCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__ScanCintLN_EdbDataPiece.tagnum = -1 ;
  G__ScanCintLN_EdbPlateP.tagnum = -1 ;
  G__ScanCintLN_TEnv.tagnum = -1 ;
  G__ScanCintLN_EdbScanProc.tagnum = -1 ;
  G__ScanCintLN_EdbProcPars.tagnum = -1 ;
  G__ScanCintLN_EdbTrackFitter.tagnum = -1 ;
  G__ScanCintLN_EdbTrackAssembler.tagnum = -1 ;
  G__ScanCintLN_EdbScanTracking.tagnum = -1 ;
  G__ScanCintLN_MessageManager.tagnum = -1 ;
  G__ScanCintLN_MessageReader.tagnum = -1 ;
  G__ScanCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__ScanCintLN_EdbScanClientPav.tagnum = -1 ;
  G__ScanCintLN_EdbScanClientSysal.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableScanCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TString);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_string);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TSocket);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TTree);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TCut);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbAffine2D);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TH1F);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbMarksSet);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbRun);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbID);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbSegP);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbTrackP);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbPattern);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanClientBase),sizeof(EdbScanClientBase),-1,1296,"remote scanning from Bern",G__setup_memvarEdbScanClientBase,G__setup_memfuncEdbScanClientBase);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanClientBasecLcLScanType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanClientCommon),sizeof(EdbScanClientCommon),-1,1292,"remote scanning from Bern",G__setup_memvarEdbScanClientCommon,G__setup_memfuncEdbScanClientCommon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanClient),sizeof(EdbScanClient),-1,1280,(char*)NULL,G__setup_memvarEdbScanClient,G__setup_memfuncEdbScanClient);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanClientcLcLScanClientType);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_auto_ptrlEEdbScanClientCommongR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbCell2);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbLayer);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanCond);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbRunAccess);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbMask);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanSet);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbPVRec);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbDataPiece);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbPlateP);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_TEnv);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanProc),sizeof(EdbScanProc),-1,62720,"scanned data processing",G__setup_memvarEdbScanProc,G__setup_memfuncEdbScanProc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbProcPars),sizeof(EdbProcPars),-1,29952,"default reconstruction parameters handling",G__setup_memvarEdbProcPars,G__setup_memfuncEdbProcPars);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbTrackFitter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbTrackAssembler),sizeof(EdbTrackAssembler),-1,29952,"generic class for the tracks assembling from segments",G__setup_memvarEdbTrackAssembler,G__setup_memfuncEdbTrackAssembler);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanTracking),sizeof(EdbScanTracking),-1,29952,"To handle tracking in the scanset",G__setup_memvarEdbScanTracking,G__setup_memfuncEdbScanTracking);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_MessageManager);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_MessageReader);
   G__get_linked_tagnum_fwd(&G__ScanCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanClientPav),sizeof(EdbScanClientPav),-1,1280,"remote scanning for PAVICOM",G__setup_memvarEdbScanClientPav,G__setup_memfuncEdbScanClientPav);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ScanCintLN_EdbScanClientSysal),sizeof(EdbScanClientSysal),-1,1280,"remote scanning from Bern",G__setup_memvarEdbScanClientSysal,G__setup_memfuncEdbScanClientSysal);
}
extern "C" void G__cpp_setupScanCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupScanCint()");
  G__set_cpp_environmentScanCint();
  G__cpp_setup_tagtableScanCint();

  G__cpp_setup_inheritanceScanCint();

  G__cpp_setup_typetableScanCint();

  G__cpp_setup_memvarScanCint();

  G__cpp_setup_memfuncScanCint();
  G__cpp_setup_globalScanCint();
  G__cpp_setup_funcScanCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncScanCint();
  return;
}
class G__cpp_setup_initScanCint {
  public:
    G__cpp_setup_initScanCint() { G__add_setup_func("ScanCint",(G__incsetup)(&G__cpp_setupScanCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initScanCint() { G__remove_setup_func("ScanCint"); }
};
G__cpp_setup_initScanCint G__cpp_setup_initializerScanCint;

