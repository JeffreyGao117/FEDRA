//
// File generated by C:\root_v5.34.38\bin\rootcint.EXE at Tue Jun 02 09:05:10 2020

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME EdrDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "EdrDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void EdbVTA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbVTA(void *p = 0);
   static void *newArray_EdbVTA(Long_t size, void *p);
   static void delete_EdbVTA(void *p);
   static void deleteArray_EdbVTA(void *p);
   static void destruct_EdbVTA(void *p);
   static void streamer_EdbVTA(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbVTA*)
   {
      ::EdbVTA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbVTA >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbVTA", ::EdbVTA::Class_Version(), "./EdbVertex.h", 25,
                  typeid(::EdbVTA), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbVTA::Dictionary, isa_proxy, 0,
                  sizeof(::EdbVTA) );
      instance.SetNew(&new_EdbVTA);
      instance.SetNewArray(&newArray_EdbVTA);
      instance.SetDelete(&delete_EdbVTA);
      instance.SetDeleteArray(&deleteArray_EdbVTA);
      instance.SetDestructor(&destruct_EdbVTA);
      instance.SetStreamerFunc(&streamer_EdbVTA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbVTA*)
   {
      return GenerateInitInstanceLocal((::EdbVTA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbVTA*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbVertex(void *p = 0);
   static void *newArray_EdbVertex(Long_t size, void *p);
   static void delete_EdbVertex(void *p);
   static void deleteArray_EdbVertex(void *p);
   static void destruct_EdbVertex(void *p);
   static void streamer_EdbVertex(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbVertex*)
   {
      ::EdbVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbVertex", ::EdbVertex::Class_Version(), "./EdbVertex.h", 68,
                  typeid(::EdbVertex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbVertex::Dictionary, isa_proxy, 0,
                  sizeof(::EdbVertex) );
      instance.SetNew(&new_EdbVertex);
      instance.SetNewArray(&newArray_EdbVertex);
      instance.SetDelete(&delete_EdbVertex);
      instance.SetDeleteArray(&deleteArray_EdbVertex);
      instance.SetDestructor(&destruct_EdbVertex);
      instance.SetStreamerFunc(&streamer_EdbVertex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbVertex*)
   {
      return GenerateInitInstanceLocal((::EdbVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbSegmentsBox_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbSegmentsBox(void *p = 0);
   static void *newArray_EdbSegmentsBox(Long_t size, void *p);
   static void delete_EdbSegmentsBox(void *p);
   static void deleteArray_EdbSegmentsBox(void *p);
   static void destruct_EdbSegmentsBox(void *p);
   static void streamer_EdbSegmentsBox(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbSegmentsBox*)
   {
      ::EdbSegmentsBox *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbSegmentsBox >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbSegmentsBox", ::EdbSegmentsBox::Class_Version(), "./EdbPattern.h", 27,
                  typeid(::EdbSegmentsBox), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbSegmentsBox::Dictionary, isa_proxy, 0,
                  sizeof(::EdbSegmentsBox) );
      instance.SetNew(&new_EdbSegmentsBox);
      instance.SetNewArray(&newArray_EdbSegmentsBox);
      instance.SetDelete(&delete_EdbSegmentsBox);
      instance.SetDeleteArray(&deleteArray_EdbSegmentsBox);
      instance.SetDestructor(&destruct_EdbSegmentsBox);
      instance.SetStreamerFunc(&streamer_EdbSegmentsBox);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbSegmentsBox*)
   {
      return GenerateInitInstanceLocal((::EdbSegmentsBox*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbSegmentsBox*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbTrackP_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbTrackP(void *p = 0);
   static void *newArray_EdbTrackP(Long_t size, void *p);
   static void delete_EdbTrackP(void *p);
   static void deleteArray_EdbTrackP(void *p);
   static void destruct_EdbTrackP(void *p);
   static void streamer_EdbTrackP(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbTrackP*)
   {
      ::EdbTrackP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbTrackP >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbTrackP", ::EdbTrackP::Class_Version(), "./EdbPattern.h", 113,
                  typeid(::EdbTrackP), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbTrackP::Dictionary, isa_proxy, 0,
                  sizeof(::EdbTrackP) );
      instance.SetNew(&new_EdbTrackP);
      instance.SetNewArray(&newArray_EdbTrackP);
      instance.SetDelete(&delete_EdbTrackP);
      instance.SetDeleteArray(&deleteArray_EdbTrackP);
      instance.SetDestructor(&destruct_EdbTrackP);
      instance.SetStreamerFunc(&streamer_EdbTrackP);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbTrackP*)
   {
      return GenerateInitInstanceLocal((::EdbTrackP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbTrackP*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPattern_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPattern(void *p = 0);
   static void *newArray_EdbPattern(Long_t size, void *p);
   static void delete_EdbPattern(void *p);
   static void deleteArray_EdbPattern(void *p);
   static void destruct_EdbPattern(void *p);
   static void streamer_EdbPattern(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPattern*)
   {
      ::EdbPattern *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPattern >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPattern", ::EdbPattern::Class_Version(), "./EdbPattern.h", 272,
                  typeid(::EdbPattern), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPattern::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPattern) );
      instance.SetNew(&new_EdbPattern);
      instance.SetNewArray(&newArray_EdbPattern);
      instance.SetDelete(&delete_EdbPattern);
      instance.SetDeleteArray(&deleteArray_EdbPattern);
      instance.SetDestructor(&destruct_EdbPattern);
      instance.SetStreamerFunc(&streamer_EdbPattern);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPattern*)
   {
      return GenerateInitInstanceLocal((::EdbPattern*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPattern*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPatternsVolume_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPatternsVolume(void *p = 0);
   static void *newArray_EdbPatternsVolume(Long_t size, void *p);
   static void delete_EdbPatternsVolume(void *p);
   static void deleteArray_EdbPatternsVolume(void *p);
   static void destruct_EdbPatternsVolume(void *p);
   static void streamer_EdbPatternsVolume(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPatternsVolume*)
   {
      ::EdbPatternsVolume *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPatternsVolume >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPatternsVolume", ::EdbPatternsVolume::Class_Version(), "./EdbPattern.h", 333,
                  typeid(::EdbPatternsVolume), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPatternsVolume::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPatternsVolume) );
      instance.SetNew(&new_EdbPatternsVolume);
      instance.SetNewArray(&newArray_EdbPatternsVolume);
      instance.SetDelete(&delete_EdbPatternsVolume);
      instance.SetDeleteArray(&deleteArray_EdbPatternsVolume);
      instance.SetDestructor(&destruct_EdbPatternsVolume);
      instance.SetStreamerFunc(&streamer_EdbPatternsVolume);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPatternsVolume*)
   {
      return GenerateInitInstanceLocal((::EdbPatternsVolume*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPatternsVolume*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPatCouple_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPatCouple(void *p = 0);
   static void *newArray_EdbPatCouple(Long_t size, void *p);
   static void delete_EdbPatCouple(void *p);
   static void deleteArray_EdbPatCouple(void *p);
   static void destruct_EdbPatCouple(void *p);
   static void streamer_EdbPatCouple(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPatCouple*)
   {
      ::EdbPatCouple *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPatCouple >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPatCouple", ::EdbPatCouple::Class_Version(), "./EdbPVRec.h", 27,
                  typeid(::EdbPatCouple), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPatCouple::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPatCouple) );
      instance.SetNew(&new_EdbPatCouple);
      instance.SetNewArray(&newArray_EdbPatCouple);
      instance.SetDelete(&delete_EdbPatCouple);
      instance.SetDeleteArray(&deleteArray_EdbPatCouple);
      instance.SetDestructor(&destruct_EdbPatCouple);
      instance.SetStreamerFunc(&streamer_EdbPatCouple);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPatCouple*)
   {
      return GenerateInitInstanceLocal((::EdbPatCouple*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPatCouple*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPVRec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPVRec(void *p = 0);
   static void *newArray_EdbPVRec(Long_t size, void *p);
   static void delete_EdbPVRec(void *p);
   static void deleteArray_EdbPVRec(void *p);
   static void destruct_EdbPVRec(void *p);
   static void streamer_EdbPVRec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPVRec*)
   {
      ::EdbPVRec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPVRec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPVRec", ::EdbPVRec::Class_Version(), "./EdbPVRec.h", 148,
                  typeid(::EdbPVRec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPVRec::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPVRec) );
      instance.SetNew(&new_EdbPVRec);
      instance.SetNewArray(&newArray_EdbPVRec);
      instance.SetDelete(&delete_EdbPVRec);
      instance.SetDeleteArray(&deleteArray_EdbPVRec);
      instance.SetDestructor(&destruct_EdbPVRec);
      instance.SetStreamerFunc(&streamer_EdbPVRec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPVRec*)
   {
      return GenerateInitInstanceLocal((::EdbPVRec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPVRec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbVertexPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbVertexPar(void *p = 0);
   static void *newArray_EdbVertexPar(Long_t size, void *p);
   static void delete_EdbVertexPar(void *p);
   static void deleteArray_EdbVertexPar(void *p);
   static void destruct_EdbVertexPar(void *p);
   static void streamer_EdbVertexPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbVertexPar*)
   {
      ::EdbVertexPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbVertexPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbVertexPar", ::EdbVertexPar::Class_Version(), "./EdbVertex.h", 171,
                  typeid(::EdbVertexPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbVertexPar::Dictionary, isa_proxy, 0,
                  sizeof(::EdbVertexPar) );
      instance.SetNew(&new_EdbVertexPar);
      instance.SetNewArray(&newArray_EdbVertexPar);
      instance.SetDelete(&delete_EdbVertexPar);
      instance.SetDeleteArray(&deleteArray_EdbVertexPar);
      instance.SetDestructor(&destruct_EdbVertexPar);
      instance.SetStreamerFunc(&streamer_EdbVertexPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbVertexPar*)
   {
      return GenerateInitInstanceLocal((::EdbVertexPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbVertexPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbVertexRec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbVertexRec(void *p = 0);
   static void *newArray_EdbVertexRec(Long_t size, void *p);
   static void delete_EdbVertexRec(void *p);
   static void deleteArray_EdbVertexRec(void *p);
   static void destruct_EdbVertexRec(void *p);
   static void streamer_EdbVertexRec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbVertexRec*)
   {
      ::EdbVertexRec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbVertexRec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbVertexRec", ::EdbVertexRec::Class_Version(), "./EdbVertex.h", 193,
                  typeid(::EdbVertexRec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbVertexRec::Dictionary, isa_proxy, 0,
                  sizeof(::EdbVertexRec) );
      instance.SetNew(&new_EdbVertexRec);
      instance.SetNewArray(&newArray_EdbVertexRec);
      instance.SetDelete(&delete_EdbVertexRec);
      instance.SetDeleteArray(&deleteArray_EdbVertexRec);
      instance.SetDestructor(&destruct_EdbVertexRec);
      instance.SetStreamerFunc(&streamer_EdbVertexRec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbVertexRec*)
   {
      return GenerateInitInstanceLocal((::EdbVertexRec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbVertexRec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbTopology_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbTopology(void *p = 0);
   static void *newArray_EdbTopology(Long_t size, void *p);
   static void delete_EdbTopology(void *p);
   static void deleteArray_EdbTopology(void *p);
   static void destruct_EdbTopology(void *p);
   static void streamer_EdbTopology(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbTopology*)
   {
      ::EdbTopology *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbTopology >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbTopology", ::EdbTopology::Class_Version(), "./EdbVertexComb.h", 7,
                  typeid(::EdbTopology), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbTopology::Dictionary, isa_proxy, 0,
                  sizeof(::EdbTopology) );
      instance.SetNew(&new_EdbTopology);
      instance.SetNewArray(&newArray_EdbTopology);
      instance.SetDelete(&delete_EdbTopology);
      instance.SetDeleteArray(&deleteArray_EdbTopology);
      instance.SetDestructor(&destruct_EdbTopology);
      instance.SetStreamerFunc(&streamer_EdbTopology);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbTopology*)
   {
      return GenerateInitInstanceLocal((::EdbTopology*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbTopology*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbVertexComb_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbVertexComb(void *p = 0);
   static void *newArray_EdbVertexComb(Long_t size, void *p);
   static void delete_EdbVertexComb(void *p);
   static void deleteArray_EdbVertexComb(void *p);
   static void destruct_EdbVertexComb(void *p);
   static void streamer_EdbVertexComb(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbVertexComb*)
   {
      ::EdbVertexComb *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbVertexComb >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbVertexComb", ::EdbVertexComb::Class_Version(), "./EdbVertexComb.h", 37,
                  typeid(::EdbVertexComb), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbVertexComb::Dictionary, isa_proxy, 0,
                  sizeof(::EdbVertexComb) );
      instance.SetNew(&new_EdbVertexComb);
      instance.SetNewArray(&newArray_EdbVertexComb);
      instance.SetDelete(&delete_EdbVertexComb);
      instance.SetDeleteArray(&deleteArray_EdbVertexComb);
      instance.SetDestructor(&destruct_EdbVertexComb);
      instance.SetStreamerFunc(&streamer_EdbVertexComb);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbVertexComb*)
   {
      return GenerateInitInstanceLocal((::EdbVertexComb*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbVertexComb*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbVertexSpace_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbVertexSpace(void *p);
   static void deleteArray_EdbVertexSpace(void *p);
   static void destruct_EdbVertexSpace(void *p);
   static void streamer_EdbVertexSpace(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbVertexSpace*)
   {
      ::EdbVertexSpace *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbVertexSpace >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbVertexSpace", ::EdbVertexSpace::Class_Version(), "./EdbVertexSpace.h", 14,
                  typeid(::EdbVertexSpace), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbVertexSpace::Dictionary, isa_proxy, 0,
                  sizeof(::EdbVertexSpace) );
      instance.SetDelete(&delete_EdbVertexSpace);
      instance.SetDeleteArray(&deleteArray_EdbVertexSpace);
      instance.SetDestructor(&destruct_EdbVertexSpace);
      instance.SetStreamerFunc(&streamer_EdbVertexSpace);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbVertexSpace*)
   {
      return GenerateInitInstanceLocal((::EdbVertexSpace*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbVertexSpace*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbTrackFitter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbTrackFitter(void *p = 0);
   static void *newArray_EdbTrackFitter(Long_t size, void *p);
   static void delete_EdbTrackFitter(void *p);
   static void deleteArray_EdbTrackFitter(void *p);
   static void destruct_EdbTrackFitter(void *p);
   static void streamer_EdbTrackFitter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbTrackFitter*)
   {
      ::EdbTrackFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbTrackFitter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbTrackFitter", ::EdbTrackFitter::Class_Version(), "./EdbTrackFitter.h", 16,
                  typeid(::EdbTrackFitter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbTrackFitter::Dictionary, isa_proxy, 0,
                  sizeof(::EdbTrackFitter) );
      instance.SetNew(&new_EdbTrackFitter);
      instance.SetNewArray(&newArray_EdbTrackFitter);
      instance.SetDelete(&delete_EdbTrackFitter);
      instance.SetDeleteArray(&deleteArray_EdbTrackFitter);
      instance.SetDestructor(&destruct_EdbTrackFitter);
      instance.SetStreamerFunc(&streamer_EdbTrackFitter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbTrackFitter*)
   {
      return GenerateInitInstanceLocal((::EdbTrackFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbTrackFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbMomentumEstimator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbMomentumEstimator(void *p = 0);
   static void *newArray_EdbMomentumEstimator(Long_t size, void *p);
   static void delete_EdbMomentumEstimator(void *p);
   static void deleteArray_EdbMomentumEstimator(void *p);
   static void destruct_EdbMomentumEstimator(void *p);
   static void streamer_EdbMomentumEstimator(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbMomentumEstimator*)
   {
      ::EdbMomentumEstimator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbMomentumEstimator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbMomentumEstimator", ::EdbMomentumEstimator::Class_Version(), "./EdbMomentumEstimator.h", 20,
                  typeid(::EdbMomentumEstimator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbMomentumEstimator::Dictionary, isa_proxy, 0,
                  sizeof(::EdbMomentumEstimator) );
      instance.SetNew(&new_EdbMomentumEstimator);
      instance.SetNewArray(&newArray_EdbMomentumEstimator);
      instance.SetDelete(&delete_EdbMomentumEstimator);
      instance.SetDeleteArray(&deleteArray_EdbMomentumEstimator);
      instance.SetDestructor(&destruct_EdbMomentumEstimator);
      instance.SetStreamerFunc(&streamer_EdbMomentumEstimator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbMomentumEstimator*)
   {
      return GenerateInitInstanceLocal((::EdbMomentumEstimator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbMomentumEstimator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPlateTracking_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPlateTracking(void *p = 0);
   static void *newArray_EdbPlateTracking(Long_t size, void *p);
   static void delete_EdbPlateTracking(void *p);
   static void deleteArray_EdbPlateTracking(void *p);
   static void destruct_EdbPlateTracking(void *p);
   static void streamer_EdbPlateTracking(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPlateTracking*)
   {
      ::EdbPlateTracking *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPlateTracking >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPlateTracking", ::EdbPlateTracking::Class_Version(), "./EdbPlateTracking.h", 19,
                  typeid(::EdbPlateTracking), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPlateTracking::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPlateTracking) );
      instance.SetNew(&new_EdbPlateTracking);
      instance.SetNewArray(&newArray_EdbPlateTracking);
      instance.SetDelete(&delete_EdbPlateTracking);
      instance.SetDeleteArray(&deleteArray_EdbPlateTracking);
      instance.SetDestructor(&destruct_EdbPlateTracking);
      instance.SetStreamerFunc(&streamer_EdbPlateTracking);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPlateTracking*)
   {
      return GenerateInitInstanceLocal((::EdbPlateTracking*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPlateTracking*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr EdbVTA::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbVTA::Class_Name()
{
   return "EdbVTA";
}

//______________________________________________________________________________
const char *EdbVTA::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVTA*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbVTA::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVTA*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbVTA::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVTA*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbVTA::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVTA*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbVertex::Class_Name()
{
   return "EdbVertex";
}

//______________________________________________________________________________
const char *EdbVertex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbVertex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbVertex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbSegmentsBox::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbSegmentsBox::Class_Name()
{
   return "EdbSegmentsBox";
}

//______________________________________________________________________________
const char *EdbSegmentsBox::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegmentsBox*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbSegmentsBox::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegmentsBox*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbSegmentsBox::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegmentsBox*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbSegmentsBox::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegmentsBox*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbTrackP::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbTrackP::Class_Name()
{
   return "EdbTrackP";
}

//______________________________________________________________________________
const char *EdbTrackP::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackP*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbTrackP::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackP*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbTrackP::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackP*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbTrackP::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackP*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPattern::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPattern::Class_Name()
{
   return "EdbPattern";
}

//______________________________________________________________________________
const char *EdbPattern::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPattern*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPattern::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPattern*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPattern::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPattern*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPattern::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPattern*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPatternsVolume::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPatternsVolume::Class_Name()
{
   return "EdbPatternsVolume";
}

//______________________________________________________________________________
const char *EdbPatternsVolume::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatternsVolume*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPatternsVolume::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatternsVolume*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPatternsVolume::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatternsVolume*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPatternsVolume::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatternsVolume*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPatCouple::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPatCouple::Class_Name()
{
   return "EdbPatCouple";
}

//______________________________________________________________________________
const char *EdbPatCouple::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatCouple*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPatCouple::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatCouple*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPatCouple::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatCouple*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPatCouple::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPatCouple*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPVRec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPVRec::Class_Name()
{
   return "EdbPVRec";
}

//______________________________________________________________________________
const char *EdbPVRec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPVRec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPVRec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPVRec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPVRec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPVRec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPVRec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPVRec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbVertexPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbVertexPar::Class_Name()
{
   return "EdbVertexPar";
}

//______________________________________________________________________________
const char *EdbVertexPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbVertexPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbVertexPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbVertexPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbVertexRec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbVertexRec::Class_Name()
{
   return "EdbVertexRec";
}

//______________________________________________________________________________
const char *EdbVertexRec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexRec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbVertexRec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexRec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbVertexRec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexRec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbVertexRec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexRec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbTopology::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbTopology::Class_Name()
{
   return "EdbTopology";
}

//______________________________________________________________________________
const char *EdbTopology::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTopology*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbTopology::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTopology*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbTopology::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTopology*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbTopology::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTopology*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbVertexComb::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbVertexComb::Class_Name()
{
   return "EdbVertexComb";
}

//______________________________________________________________________________
const char *EdbVertexComb::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexComb*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbVertexComb::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexComb*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbVertexComb::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexComb*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbVertexComb::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexComb*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbVertexSpace::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbVertexSpace::Class_Name()
{
   return "EdbVertexSpace";
}

//______________________________________________________________________________
const char *EdbVertexSpace::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexSpace*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbVertexSpace::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexSpace*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbVertexSpace::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexSpace*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbVertexSpace::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbVertexSpace*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbTrackFitter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbTrackFitter::Class_Name()
{
   return "EdbTrackFitter";
}

//______________________________________________________________________________
const char *EdbTrackFitter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackFitter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbTrackFitter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackFitter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbTrackFitter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackFitter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbTrackFitter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrackFitter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbMomentumEstimator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbMomentumEstimator::Class_Name()
{
   return "EdbMomentumEstimator";
}

//______________________________________________________________________________
const char *EdbMomentumEstimator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMomentumEstimator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbMomentumEstimator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMomentumEstimator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbMomentumEstimator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMomentumEstimator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbMomentumEstimator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMomentumEstimator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPlateTracking::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPlateTracking::Class_Name()
{
   return "EdbPlateTracking";
}

//______________________________________________________________________________
const char *EdbPlateTracking::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateTracking*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPlateTracking::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateTracking*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPlateTracking::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateTracking*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPlateTracking::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlateTracking*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void EdbSegmentsBox::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbSegmentsBox.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      EdbPointsBox2D::Streamer(R__b);
      R__b >> eX;
      R__b >> eY;
      R__b >> eZ;
      eSegments->Streamer(R__b);
      R__b >> eDZkeep;
      R__b.CheckByteCount(R__s, R__c, EdbSegmentsBox::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbSegmentsBox::IsA(), kTRUE);
      TObject::Streamer(R__b);
      EdbPointsBox2D::Streamer(R__b);
      R__b << eX;
      R__b << eY;
      R__b << eZ;
      eSegments->Streamer(R__b);
      R__b << eDZkeep;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbSegmentsBox::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbSegmentsBox.
      typedef ::EdbSegmentsBox msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX", &eX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY", &eY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ", &eZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eSegments", &eSegments);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZkeep", &eDZkeep);
      TObject::ShowMembers(R__insp);
      EdbPointsBox2D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbSegmentsBox(void *p) {
      return  p ? new(p) ::EdbSegmentsBox : new ::EdbSegmentsBox;
   }
   static void *newArray_EdbSegmentsBox(Long_t nElements, void *p) {
      return p ? new(p) ::EdbSegmentsBox[nElements] : new ::EdbSegmentsBox[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbSegmentsBox(void *p) {
      delete ((::EdbSegmentsBox*)p);
   }
   static void deleteArray_EdbSegmentsBox(void *p) {
      delete [] ((::EdbSegmentsBox*)p);
   }
   static void destruct_EdbSegmentsBox(void *p) {
      typedef ::EdbSegmentsBox current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbSegmentsBox(TBuffer &buf, void *obj) {
      ((::EdbSegmentsBox*)obj)->::EdbSegmentsBox::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbSegmentsBox

//______________________________________________________________________________
void EdbTrackP::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbTrackP.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbSegP::Streamer(R__b);
      R__b >> eS;
      R__b >> eSF;
      R__b >> eNpl;
      R__b >> eN0;
      R__b >> eM;
      R__b >> eDE;
      R__b >> ePDG;
      R__b >> ePerrUp;
      R__b >> ePerrDown;
      R__b.CheckByteCount(R__s, R__c, EdbTrackP::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbTrackP::IsA(), kTRUE);
      EdbSegP::Streamer(R__b);
      R__b << eS;
      R__b << eSF;
      R__b << eNpl;
      R__b << eN0;
      R__b << eM;
      R__b << eDE;
      R__b << ePDG;
      R__b << ePerrUp;
      R__b << ePerrDown;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbTrackP::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbTrackP.
      typedef ::EdbTrackP msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eS", &eS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eSF", &eSF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNpl", &eNpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eN0", &eN0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eM", &eM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDE", &eDE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePDG", &ePDG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePerrUp", &ePerrUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePerrDown", &ePerrDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVTAS", &eVTAS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVTAE", &eVTAE);
      EdbSegP::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbTrackP(void *p) {
      return  p ? new(p) ::EdbTrackP : new ::EdbTrackP;
   }
   static void *newArray_EdbTrackP(Long_t nElements, void *p) {
      return p ? new(p) ::EdbTrackP[nElements] : new ::EdbTrackP[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbTrackP(void *p) {
      delete ((::EdbTrackP*)p);
   }
   static void deleteArray_EdbTrackP(void *p) {
      delete [] ((::EdbTrackP*)p);
   }
   static void destruct_EdbTrackP(void *p) {
      typedef ::EdbTrackP current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbTrackP(TBuffer &buf, void *obj) {
      ((::EdbTrackP*)obj)->::EdbTrackP::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbTrackP

//______________________________________________________________________________
void EdbPattern::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPattern.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbSegmentsBox::Streamer(R__b);
      R__b >> eID;
      R__b >> ePID;
      R__b >> eStepX;
      R__b >> eStepY;
      R__b >> eStepTX;
      R__b >> eStepTY;
      R__b.ReadStaticArray((float*)eSigma);
      R__b >> eFlag;
      R__b >> eNAff;
      R__b.CheckByteCount(R__s, R__c, EdbPattern::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPattern::IsA(), kTRUE);
      EdbSegmentsBox::Streamer(R__b);
      R__b << eID;
      R__b << ePID;
      R__b << eStepX;
      R__b << eStepY;
      R__b << eStepTX;
      R__b << eStepTY;
      R__b.WriteArray(eSigma, 4);
      R__b << eFlag;
      R__b << eNAff;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPattern::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPattern.
      typedef ::EdbPattern msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID", &eID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePID", &ePID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCell", &eCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStepX", &eStepX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStepY", &eStepY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStepTX", &eStepTX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStepTY", &eStepTY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigma[4]", eSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFlag", &eFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNAff", &eNAff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eScanID", &eScanID);
      R__insp.InspectMember(eScanID, "eScanID.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSide", &eSide);
      EdbSegmentsBox::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPattern(void *p) {
      return  p ? new(p) ::EdbPattern : new ::EdbPattern;
   }
   static void *newArray_EdbPattern(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPattern[nElements] : new ::EdbPattern[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPattern(void *p) {
      delete ((::EdbPattern*)p);
   }
   static void deleteArray_EdbPattern(void *p) {
      delete [] ((::EdbPattern*)p);
   }
   static void destruct_EdbPattern(void *p) {
      typedef ::EdbPattern current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPattern(TBuffer &buf, void *obj) {
      ((::EdbPattern*)obj)->::EdbPattern::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPattern

//______________________________________________________________________________
void EdbPatternsVolume::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPatternsVolume.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eX;
      R__b >> eY;
      R__b >> eZ;
      R__b >> ePatterns;
      R__b >> eDescendingZ;
      R__b.CheckByteCount(R__s, R__c, EdbPatternsVolume::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPatternsVolume::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eX;
      R__b << eY;
      R__b << eZ;
      R__b << ePatterns;
      R__b << eDescendingZ;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPatternsVolume::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPatternsVolume.
      typedef ::EdbPatternsVolume msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX", &eX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY", &eY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ", &eZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePatterns", &ePatterns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eTracksCell", &eTracksCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePatternsCell", &ePatternsCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDescendingZ", &eDescendingZ);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPatternsVolume(void *p) {
      return  p ? new(p) ::EdbPatternsVolume : new ::EdbPatternsVolume;
   }
   static void *newArray_EdbPatternsVolume(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPatternsVolume[nElements] : new ::EdbPatternsVolume[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPatternsVolume(void *p) {
      delete ((::EdbPatternsVolume*)p);
   }
   static void deleteArray_EdbPatternsVolume(void *p) {
      delete [] ((::EdbPatternsVolume*)p);
   }
   static void destruct_EdbPatternsVolume(void *p) {
      typedef ::EdbPatternsVolume current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPatternsVolume(TBuffer &buf, void *obj) {
      ((::EdbPatternsVolume*)obj)->::EdbPatternsVolume::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPatternsVolume

//______________________________________________________________________________
void EdbTrackFitter::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbTrackFitter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> eNsegMax;
      R__b >> eX0;
      R__b >> eM;
      R__b >> ePdef;
      R__b >> eTPb;
      R__b >> ePcut;
      R__b >> eDE_correction;
      R__b.CheckByteCount(R__s, R__c, EdbTrackFitter::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbTrackFitter::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << eNsegMax;
      R__b << eX0;
      R__b << eM;
      R__b << ePdef;
      R__b << eTPb;
      R__b << ePcut;
      R__b << eDE_correction;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbTrackFitter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbTrackFitter.
      typedef ::EdbTrackFitter msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNsegMax", &eNsegMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX0", &eX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eM", &eM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePdef", &ePdef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTPb", &eTPb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePcut", &ePcut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDE_correction", &eDE_correction);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbTrackFitter(void *p) {
      return  p ? new(p) ::EdbTrackFitter : new ::EdbTrackFitter;
   }
   static void *newArray_EdbTrackFitter(Long_t nElements, void *p) {
      return p ? new(p) ::EdbTrackFitter[nElements] : new ::EdbTrackFitter[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbTrackFitter(void *p) {
      delete ((::EdbTrackFitter*)p);
   }
   static void deleteArray_EdbTrackFitter(void *p) {
      delete [] ((::EdbTrackFitter*)p);
   }
   static void destruct_EdbTrackFitter(void *p) {
      typedef ::EdbTrackFitter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbTrackFitter(TBuffer &buf, void *obj) {
      ((::EdbTrackFitter*)obj)->::EdbTrackFitter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbTrackFitter

//______________________________________________________________________________
void EdbMomentumEstimator::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbMomentumEstimator.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbTrackFitter::Streamer(R__b);
      R__b >> eAlg;
      R__b >> eStatus;
      R__b >> eMinEntr;
      eDTxErrorFun.Streamer(R__b);
      eDTyErrorFun.Streamer(R__b);
      eDTsErrorFun.Streamer(R__b);
      R__b >> ePx;
      R__b >> ePy;
      R__b >> eDPx;
      R__b >> eDPy;
      R__b >> ePXmin;
      R__b >> ePXmax;
      R__b >> ePYmin;
      R__b >> ePYmax;
      R__b >> eP;
      R__b >> eDP;
      R__b >> ePmin;
      R__b >> ePmax;
      eTrack.Streamer(R__b);
      R__b >> eVerbose;
      R__b.CheckByteCount(R__s, R__c, EdbMomentumEstimator::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbMomentumEstimator::IsA(), kTRUE);
      EdbTrackFitter::Streamer(R__b);
      R__b << eAlg;
      R__b << eStatus;
      R__b << eMinEntr;
      eDTxErrorFun.Streamer(R__b);
      eDTyErrorFun.Streamer(R__b);
      eDTsErrorFun.Streamer(R__b);
      R__b << ePx;
      R__b << ePy;
      R__b << eDPx;
      R__b << eDPy;
      R__b << ePXmin;
      R__b << ePXmax;
      R__b << ePYmin;
      R__b << ePYmax;
      R__b << eP;
      R__b << eDP;
      R__b << ePmin;
      R__b << ePmax;
      eTrack.Streamer(R__b);
      R__b << eVerbose;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbMomentumEstimator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbMomentumEstimator.
      typedef ::EdbMomentumEstimator msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAlg", &eAlg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStatus", &eStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMinEntr", &eMinEntr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTxErrorFun", &eDTxErrorFun);
      R__insp.InspectMember(eDTxErrorFun, "eDTxErrorFun.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTyErrorFun", &eDTyErrorFun);
      R__insp.InspectMember(eDTyErrorFun, "eDTyErrorFun.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDTsErrorFun", &eDTsErrorFun);
      R__insp.InspectMember(eDTsErrorFun, "eDTsErrorFun.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePx", &ePx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePy", &ePy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDPx", &eDPx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDPy", &eDPy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePXmin", &ePXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePXmax", &ePXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePYmin", &ePYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePYmax", &ePYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eP", &eP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDP", &eDP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePmin", &ePmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePmax", &ePmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTrack", &eTrack);
      R__insp.InspectMember(eTrack, "eTrack.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVerbose", &eVerbose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eF1X", &eF1X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eF1Y", &eF1Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eF1", &eF1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eG", &eG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGX", &eGX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGY", &eGY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGA", &eGA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGAX", &eGAX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGAY", &eGAY);
      EdbTrackFitter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbMomentumEstimator(void *p) {
      return  p ? new(p) ::EdbMomentumEstimator : new ::EdbMomentumEstimator;
   }
   static void *newArray_EdbMomentumEstimator(Long_t nElements, void *p) {
      return p ? new(p) ::EdbMomentumEstimator[nElements] : new ::EdbMomentumEstimator[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbMomentumEstimator(void *p) {
      delete ((::EdbMomentumEstimator*)p);
   }
   static void deleteArray_EdbMomentumEstimator(void *p) {
      delete [] ((::EdbMomentumEstimator*)p);
   }
   static void destruct_EdbMomentumEstimator(void *p) {
      typedef ::EdbMomentumEstimator current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbMomentumEstimator(TBuffer &buf, void *obj) {
      ((::EdbMomentumEstimator*)obj)->::EdbMomentumEstimator::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbMomentumEstimator

//______________________________________________________________________________
void EdbPatCouple::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPatCouple.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((int*)eID);
      R__b >> eCoupleType;
      R__b >> ePat1;
      R__b >> ePat2;
      R__b.ReadStaticArray((float*)eOffset);
      R__b.ReadStaticArray((float*)eSigma);
      R__b >> eAff;
      R__b >> eSegCouples;
      R__b >> eCond;
      R__b >> eZlink;
      R__b >> eXoffsetMax;
      R__b >> eYoffsetMax;
      R__b >> eChi2Max;
      R__b >> eCHI2mode;
      R__b.CheckByteCount(R__s, R__c, EdbPatCouple::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPatCouple::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(eID, 2);
      R__b << eCoupleType;
      R__b << ePat1;
      R__b << ePat2;
      R__b.WriteArray(eOffset, 4);
      R__b.WriteArray(eSigma, 4);
      R__b << eAff;
      R__b << eSegCouples;
      R__b << eCond;
      R__b << eZlink;
      R__b << eXoffsetMax;
      R__b << eYoffsetMax;
      R__b << eChi2Max;
      R__b << eCHI2mode;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPatCouple::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPatCouple.
      typedef ::EdbPatCouple msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID[2]", eID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCoupleType", &eCoupleType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePat1", &ePat1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePat2", &ePat2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eOffset[4]", eOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigma[4]", eSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eAff", &eAff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eSegCouples", &eSegCouples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCond", &eCond);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZlink", &eZlink);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXoffsetMax", &eXoffsetMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYoffsetMax", &eYoffsetMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2Max", &eChi2Max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCHI2mode", &eCHI2mode);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPatCouple(void *p) {
      return  p ? new(p) ::EdbPatCouple : new ::EdbPatCouple;
   }
   static void *newArray_EdbPatCouple(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPatCouple[nElements] : new ::EdbPatCouple[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPatCouple(void *p) {
      delete ((::EdbPatCouple*)p);
   }
   static void deleteArray_EdbPatCouple(void *p) {
      delete [] ((::EdbPatCouple*)p);
   }
   static void destruct_EdbPatCouple(void *p) {
      typedef ::EdbPatCouple current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPatCouple(TBuffer &buf, void *obj) {
      ((::EdbPatCouple*)obj)->::EdbPatCouple::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPatCouple

//______________________________________________________________________________
void EdbPVRec::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPVRec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbPatternsVolume::Streamer(R__b);
      R__b >> ePatCouples;
      R__b >> eChi2Max;
      R__b.ReadStaticArray((long*)eVdiff);
      R__b >> eScanCond;
      R__b >> eTracksCell;
      R__b >> eTracks;
      R__b >> eVTX;
      R__b.CheckByteCount(R__s, R__c, EdbPVRec::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPVRec::IsA(), kTRUE);
      EdbPatternsVolume::Streamer(R__b);
      R__b << ePatCouples;
      R__b << eChi2Max;
      R__b.WriteArray(eVdiff, 4);
      R__b << eScanCond;
      R__b << eTracksCell;
      R__b << eTracks;
      R__b << eVTX;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPVRec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPVRec.
      typedef ::EdbPVRec msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePatCouples", &ePatCouples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2Max", &eChi2Max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVdiff[4]", eVdiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eScanCond", &eScanCond);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eTracksCell", &eTracksCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eTracks", &eTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVTX", &eVTX);
      EdbPatternsVolume::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPVRec(void *p) {
      return  p ? new(p) ::EdbPVRec : new ::EdbPVRec;
   }
   static void *newArray_EdbPVRec(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPVRec[nElements] : new ::EdbPVRec[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPVRec(void *p) {
      delete ((::EdbPVRec*)p);
   }
   static void deleteArray_EdbPVRec(void *p) {
      delete [] ((::EdbPVRec*)p);
   }
   static void destruct_EdbPVRec(void *p) {
      typedef ::EdbPVRec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPVRec(TBuffer &buf, void *obj) {
      ((::EdbPVRec*)obj)->::EdbPVRec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPVRec

//______________________________________________________________________________
void EdbVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbVertex.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      eVTn.Streamer(R__b);
      eVTa.Streamer(R__b);
      R__b >> eX;
      R__b >> eY;
      R__b >> eZ;
      R__b >> eFlag;
      R__b >> eMCEvt;
      R__b >> eID;
      R__b >> eQuality;
      R__b >> eV;
      R__b.CheckByteCount(R__s, R__c, EdbVertex::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbVertex::IsA(), kTRUE);
      TObject::Streamer(R__b);
      eVTn.Streamer(R__b);
      eVTa.Streamer(R__b);
      R__b << eX;
      R__b << eY;
      R__b << eZ;
      R__b << eFlag;
      R__b << eMCEvt;
      R__b << eID;
      R__b << eQuality;
      R__b << eV;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbVertex.
      typedef ::EdbVertex msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVTn", &eVTn);
      R__insp.InspectMember(eVTn, "eVTn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVTa", &eVTa);
      R__insp.InspectMember(eVTa, "eVTa.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX", &eX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY", &eY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ", &eZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFlag", &eFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMCEvt", &eMCEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID", &eID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eQuality", &eQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eV", &eV);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbVertex(void *p) {
      return  p ? new(p) ::EdbVertex : new ::EdbVertex;
   }
   static void *newArray_EdbVertex(Long_t nElements, void *p) {
      return p ? new(p) ::EdbVertex[nElements] : new ::EdbVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbVertex(void *p) {
      delete ((::EdbVertex*)p);
   }
   static void deleteArray_EdbVertex(void *p) {
      delete [] ((::EdbVertex*)p);
   }
   static void destruct_EdbVertex(void *p) {
      typedef ::EdbVertex current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbVertex(TBuffer &buf, void *obj) {
      ((::EdbVertex*)obj)->::EdbVertex::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbVertex

//______________________________________________________________________________
void EdbVertexPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbVertexPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eZbin;
      R__b >> eAbin;
      R__b >> eDZmax;
      R__b >> eProbMin;
      R__b >> eImpMax;
      R__b >> eImpMaxV;
      R__b >> eUseMom;
      R__b >> eUseSegPar;
      R__b >> eQualityMode;
      R__b >> eUseKalman;
      R__b >> eUseLimits;
      eVmin.Streamer(R__b);
      eVmax.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbVertexPar::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbVertexPar::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eZbin;
      R__b << eAbin;
      R__b << eDZmax;
      R__b << eProbMin;
      R__b << eImpMax;
      R__b << eImpMaxV;
      R__b << eUseMom;
      R__b << eUseSegPar;
      R__b << eQualityMode;
      R__b << eUseKalman;
      R__b << eUseLimits;
      eVmin.Streamer(R__b);
      eVmax.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbVertexPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbVertexPar.
      typedef ::EdbVertexPar msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZbin", &eZbin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAbin", &eAbin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZmax", &eDZmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eProbMin", &eProbMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eImpMax", &eImpMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eImpMaxV", &eImpMaxV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eUseMom", &eUseMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eUseSegPar", &eUseSegPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eQualityMode", &eQualityMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eUseKalman", &eUseKalman);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eUseLimits", &eUseLimits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVmin", &eVmin);
      R__insp.InspectMember(eVmin, "eVmin.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVmax", &eVmax);
      R__insp.InspectMember(eVmax, "eVmax.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbVertexPar(void *p) {
      return  p ? new(p) ::EdbVertexPar : new ::EdbVertexPar;
   }
   static void *newArray_EdbVertexPar(Long_t nElements, void *p) {
      return p ? new(p) ::EdbVertexPar[nElements] : new ::EdbVertexPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbVertexPar(void *p) {
      delete ((::EdbVertexPar*)p);
   }
   static void deleteArray_EdbVertexPar(void *p) {
      delete [] ((::EdbVertexPar*)p);
   }
   static void destruct_EdbVertexPar(void *p) {
      typedef ::EdbVertexPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbVertexPar(TBuffer &buf, void *obj) {
      ((::EdbVertexPar*)obj)->::EdbVertexPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbVertexPar

//______________________________________________________________________________
void EdbVertexRec::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbVertexRec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbVertexPar::Streamer(R__b);
      R__b >> eVertex;
      R__b >> eWorking;
      eVTA.Streamer(R__b);
      R__b >> eEdbTracks;
      R__b >> eVTX;
      R__b >> ePVR;
      R__b.CheckByteCount(R__s, R__c, EdbVertexRec::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbVertexRec::IsA(), kTRUE);
      EdbVertexPar::Streamer(R__b);
      R__b << eVertex;
      R__b << eWorking;
      eVTA.Streamer(R__b);
      R__b << eEdbTracks;
      R__b << eVTX;
      R__b << ePVR;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbVertexRec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbVertexRec.
      typedef ::EdbVertexRec msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVertex", &eVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eWorking", &eWorking);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVTA", &eVTA);
      R__insp.InspectMember(eVTA, "eVTA.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eEdbTracks", &eEdbTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVTX", &eVTX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePVR", &ePVR);
      EdbVertexPar::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbVertexRec(void *p) {
      return  p ? new(p) ::EdbVertexRec : new ::EdbVertexRec;
   }
   static void *newArray_EdbVertexRec(Long_t nElements, void *p) {
      return p ? new(p) ::EdbVertexRec[nElements] : new ::EdbVertexRec[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbVertexRec(void *p) {
      delete ((::EdbVertexRec*)p);
   }
   static void deleteArray_EdbVertexRec(void *p) {
      delete [] ((::EdbVertexRec*)p);
   }
   static void destruct_EdbVertexRec(void *p) {
      typedef ::EdbVertexRec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbVertexRec(TBuffer &buf, void *obj) {
      ((::EdbVertexRec*)obj)->::EdbVertexRec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbVertexRec

//______________________________________________________________________________
void EdbVTA::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbVTA.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eTrack;
      R__b >> eVertex;
      R__b >> eZpos;
      R__b >> eFlag;
      R__b >> eImp;
      R__b >> eDist;
      R__b.CheckByteCount(R__s, R__c, EdbVTA::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbVTA::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eTrack;
      R__b << eVertex;
      R__b << eZpos;
      R__b << eFlag;
      R__b << eImp;
      R__b << eDist;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbVTA::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbVTA.
      typedef ::EdbVTA msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eTrack", &eTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVertex", &eVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZpos", &eZpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFlag", &eFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eImp", &eImp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDist", &eDist);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbVTA(void *p) {
      return  p ? new(p) ::EdbVTA : new ::EdbVTA;
   }
   static void *newArray_EdbVTA(Long_t nElements, void *p) {
      return p ? new(p) ::EdbVTA[nElements] : new ::EdbVTA[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbVTA(void *p) {
      delete ((::EdbVTA*)p);
   }
   static void deleteArray_EdbVTA(void *p) {
      delete [] ((::EdbVTA*)p);
   }
   static void destruct_EdbVTA(void *p) {
      typedef ::EdbVTA current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbVTA(TBuffer &buf, void *obj) {
      ((::EdbVTA*)obj)->::EdbVTA::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbVTA

//______________________________________________________________________________
void EdbVertexComb::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbVertexComb.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      eTracks.Streamer(R__b);
      R__b >> eRecursionMax;
      R__b >> eRecursion;
      eCond.Streamer(R__b);
      eVPar.Streamer(R__b);
      R__b >> eZ0;
      R__b >> eProbMinV;
      R__b >> eNProngMinV;
      R__b >> eProbDetached;
      eVertices.Streamer(R__b);
      eOther.Streamer(R__b);
      eTopologies.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbVertexComb::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbVertexComb::IsA(), kTRUE);
      TObject::Streamer(R__b);
      eTracks.Streamer(R__b);
      R__b << eRecursionMax;
      R__b << eRecursion;
      eCond.Streamer(R__b);
      eVPar.Streamer(R__b);
      R__b << eZ0;
      R__b << eProbMinV;
      R__b << eNProngMinV;
      R__b << eProbDetached;
      eVertices.Streamer(R__b);
      eOther.Streamer(R__b);
      eTopologies.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbVertexComb::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbVertexComb.
      typedef ::EdbVertexComb msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTracks", &eTracks);
      R__insp.InspectMember(eTracks, "eTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRecursionMax", &eRecursionMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRecursion", &eRecursion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCond", &eCond);
      R__insp.InspectMember(eCond, "eCond.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVPar", &eVPar);
      R__insp.InspectMember(eVPar, "eVPar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ0", &eZ0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eProbMinV", &eProbMinV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNProngMinV", &eNProngMinV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eProbDetached", &eProbDetached);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVertices", &eVertices);
      R__insp.InspectMember(eVertices, "eVertices.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eOther", &eOther);
      R__insp.InspectMember(eOther, "eOther.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTopologies", &eTopologies);
      R__insp.InspectMember(eTopologies, "eTopologies.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbVertexComb(void *p) {
      return  p ? new(p) ::EdbVertexComb : new ::EdbVertexComb;
   }
   static void *newArray_EdbVertexComb(Long_t nElements, void *p) {
      return p ? new(p) ::EdbVertexComb[nElements] : new ::EdbVertexComb[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbVertexComb(void *p) {
      delete ((::EdbVertexComb*)p);
   }
   static void deleteArray_EdbVertexComb(void *p) {
      delete [] ((::EdbVertexComb*)p);
   }
   static void destruct_EdbVertexComb(void *p) {
      typedef ::EdbVertexComb current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbVertexComb(TBuffer &buf, void *obj) {
      ((::EdbVertexComb*)obj)->::EdbVertexComb::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbVertexComb

//______________________________________________________________________________
void EdbTopology::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbTopology.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      eVertices.Streamer(R__b);
      eTracks.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbTopology::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbTopology::IsA(), kTRUE);
      TObject::Streamer(R__b);
      eVertices.Streamer(R__b);
      eTracks.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbTopology::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbTopology.
      typedef ::EdbTopology msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVertices", &eVertices);
      R__insp.InspectMember(eVertices, "eVertices.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTracks", &eTracks);
      R__insp.InspectMember(eTracks, "eTracks.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbTopology(void *p) {
      return  p ? new(p) ::EdbTopology : new ::EdbTopology;
   }
   static void *newArray_EdbTopology(Long_t nElements, void *p) {
      return p ? new(p) ::EdbTopology[nElements] : new ::EdbTopology[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbTopology(void *p) {
      delete ((::EdbTopology*)p);
   }
   static void deleteArray_EdbTopology(void *p) {
      delete [] ((::EdbTopology*)p);
   }
   static void destruct_EdbTopology(void *p) {
      typedef ::EdbTopology current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbTopology(TBuffer &buf, void *obj) {
      ((::EdbTopology*)obj)->::EdbTopology::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbTopology

//______________________________________________________________________________
void EdbVertexSpace::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbVertexSpace.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((float*)eVmin);
      R__b.ReadStaticArray((float*)eVmax);
      R__b.ReadStaticArray((float*)eBin);
      R__b.ReadStaticArray((int*)eNcell);
      R__b >> eCells;
      R__b.CheckByteCount(R__s, R__c, EdbVertexSpace::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbVertexSpace::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(eVmin, 3);
      R__b.WriteArray(eVmax, 3);
      R__b.WriteArray(eBin, 3);
      R__b.WriteArray(eNcell, 3);
      R__b << eCells;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbVertexSpace::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbVertexSpace.
      typedef ::EdbVertexSpace msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVmin[3]", eVmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVmax[3]", eVmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBin[3]", eBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNcell[3]", eNcell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCells", &eCells);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbVertexSpace(void *p) {
      delete ((::EdbVertexSpace*)p);
   }
   static void deleteArray_EdbVertexSpace(void *p) {
      delete [] ((::EdbVertexSpace*)p);
   }
   static void destruct_EdbVertexSpace(void *p) {
      typedef ::EdbVertexSpace current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbVertexSpace(TBuffer &buf, void *obj) {
      ((::EdbVertexSpace*)obj)->::EdbVertexSpace::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbVertexSpace

//______________________________________________________________________________
void EdbPlateTracking::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPlateTracking.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      ePred.Streamer(R__b);
      eSide1.Streamer(R__b);
      eSide2.Streamer(R__b);
      ePlate.Streamer(R__b);
      eS.Streamer(R__b);
      eS1.Streamer(R__b);
      eS2.Streamer(R__b);
      eNext.Streamer(R__b);
      R__b >> eStatus;
      eCondMT.Streamer(R__b);
      eCondBT.Streamer(R__b);
      R__b >> ePreliminaryChi2MaxMT;
      eS1pre.Streamer(R__b);
      eS2pre.Streamer(R__b);
      R__b >> eDeltaR;
      eSpre.Streamer(R__b);
      R__b >> ePulsMinBT;
      R__b >> ePulsMinDegradMT;
      R__b >> eChi2MaxBT;
      eScnd.Streamer(R__b);
      R__b >> ePulsMinMT;
      R__b >> ePulsMinDegradBT;
      R__b >> eChi2MaxMT;
      eS1cnd.Streamer(R__b);
      eS2cnd.Streamer(R__b);
      R__b >> eDegradPos;
      R__b >> eDegradSlope;
      R__b.ReadStaticArray((int*)eIdp);
      R__b.ReadStaticArray((int*)eIdf);
      R__b >> ePredictionScan;
      R__b.CheckByteCount(R__s, R__c, EdbPlateTracking::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPlateTracking::IsA(), kTRUE);
      TObject::Streamer(R__b);
      ePred.Streamer(R__b);
      eSide1.Streamer(R__b);
      eSide2.Streamer(R__b);
      ePlate.Streamer(R__b);
      eS.Streamer(R__b);
      eS1.Streamer(R__b);
      eS2.Streamer(R__b);
      eNext.Streamer(R__b);
      R__b << eStatus;
      eCondMT.Streamer(R__b);
      eCondBT.Streamer(R__b);
      R__b << ePreliminaryChi2MaxMT;
      eS1pre.Streamer(R__b);
      eS2pre.Streamer(R__b);
      R__b << eDeltaR;
      eSpre.Streamer(R__b);
      R__b << ePulsMinBT;
      R__b << ePulsMinDegradMT;
      R__b << eChi2MaxBT;
      eScnd.Streamer(R__b);
      R__b << ePulsMinMT;
      R__b << ePulsMinDegradBT;
      R__b << eChi2MaxMT;
      eS1cnd.Streamer(R__b);
      eS2cnd.Streamer(R__b);
      R__b << eDegradPos;
      R__b << eDegradSlope;
      R__b.WriteArray(eIdp, 4);
      R__b.WriteArray(eIdf, 4);
      R__b << ePredictionScan;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPlateTracking::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPlateTracking.
      typedef ::EdbPlateTracking msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePred", &ePred);
      R__insp.InspectMember(ePred, "ePred.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSide1", &eSide1);
      R__insp.InspectMember(eSide1, "eSide1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSide2", &eSide2);
      R__insp.InspectMember(eSide2, "eSide2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePlate", &ePlate);
      R__insp.InspectMember(ePlate, "ePlate.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS", &eS);
      R__insp.InspectMember(eS, "eS.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS1", &eS1);
      R__insp.InspectMember(eS1, "eS1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS2", &eS2);
      R__insp.InspectMember(eS2, "eS2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNext", &eNext);
      R__insp.InspectMember(eNext, "eNext.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStatus", &eStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCondMT", &eCondMT);
      R__insp.InspectMember(eCondMT, "eCondMT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCondBT", &eCondBT);
      R__insp.InspectMember(eCondBT, "eCondBT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePreliminaryChi2MaxMT", &ePreliminaryChi2MaxMT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS1pre", &eS1pre);
      R__insp.InspectMember(eS1pre, "eS1pre.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS2pre", &eS2pre);
      R__insp.InspectMember(eS2pre, "eS2pre.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDeltaR", &eDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSpre", &eSpre);
      R__insp.InspectMember(eSpre, "eSpre.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePulsMinBT", &ePulsMinBT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePulsMinDegradMT", &ePulsMinDegradMT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2MaxBT", &eChi2MaxBT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eScnd", &eScnd);
      R__insp.InspectMember(eScnd, "eScnd.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePulsMinMT", &ePulsMinMT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePulsMinDegradBT", &ePulsMinDegradBT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2MaxMT", &eChi2MaxMT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS1cnd", &eS1cnd);
      R__insp.InspectMember(eS1cnd, "eS1cnd.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS2cnd", &eS2cnd);
      R__insp.InspectMember(eS2cnd, "eS2cnd.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDegradPos", &eDegradPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDegradSlope", &eDegradSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eIdp[4]", eIdp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eIdf[4]", eIdf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePredictionScan", &ePredictionScan);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPlateTracking(void *p) {
      return  p ? new(p) ::EdbPlateTracking : new ::EdbPlateTracking;
   }
   static void *newArray_EdbPlateTracking(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPlateTracking[nElements] : new ::EdbPlateTracking[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPlateTracking(void *p) {
      delete ((::EdbPlateTracking*)p);
   }
   static void deleteArray_EdbPlateTracking(void *p) {
      delete [] ((::EdbPlateTracking*)p);
   }
   static void destruct_EdbPlateTracking(void *p) {
      typedef ::EdbPlateTracking current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPlateTracking(TBuffer &buf, void *obj) {
      ((::EdbPlateTracking*)obj)->::EdbPlateTracking::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPlateTracking

/********************************************************
* EdrDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableEdrDict();

extern "C" void G__set_cpp_environmentEdrDict() {
  G__add_ipath(".");
  G__add_ipath("..\\..\\include");
  G__cpp_reset_tagtableEdrDict();
}
#include <new>
extern "C" int G__cpp_dllrevEdrDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* EdbVTA */
static int G__EdrDict_596_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVTA* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbVTA[n];
     } else {
       p = new((void*) gvp) EdbVTA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbVTA;
     } else {
       p = new((void*) gvp) EdbVTA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVTA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVTA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbVTA(*(EdbVTA*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbVTA(*(EdbVTA*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVTA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVTA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbVTA((EdbTrackP*) G__int(libp->para[0]), (EdbVertex*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) EdbVTA((EdbTrackP*) G__int(libp->para[0]), (EdbVertex*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVTA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbVTA*) G__getstructoffset())->Zpos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbVTA*) G__getstructoffset())->Flag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbVTA*) G__getstructoffset())->Imp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbVTA*) G__getstructoffset())->Dist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbVTA*) G__getstructoffset())->GetTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbVTA*) G__getstructoffset())->GetVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVTA*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVTA*) G__getstructoffset())->SetZpos((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVTA*) G__getstructoffset())->SetFlag((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVTA*) G__getstructoffset())->SetImp((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVTA*) G__getstructoffset())->SetDist((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVTA*) G__getstructoffset())->SetTrack((EdbTrackP*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVTA*) G__getstructoffset())->SetVertex((EdbVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVTA*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVTA*) G__getstructoffset())->AddVandT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbVTA::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVTA::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbVTA::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbVTA::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVTA*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVTA::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVTA::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVTA::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_596_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVTA::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbVTA G__TEdbVTA;
static int G__EdrDict_596_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbVTA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbVTA*) (soff+(sizeof(EdbVTA)*i)))->~G__TEdbVTA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbVTA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbVTA*) (soff))->~G__TEdbVTA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdrDict_596_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVTA* dest = (EdbVTA*) G__getstructoffset();
   *dest = *(EdbVTA*) libp->para[0].ref;
   const EdbVTA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbVertex */
static int G__EdrDict_597_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbVertex[n];
     } else {
       p = new((void*) gvp) EdbVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbVertex;
     } else {
       p = new((void*) gvp) EdbVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertex*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertex*) G__getstructoffset())->ClearV();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertex*) G__getstructoffset())->ClearNeighborhood();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertex*) G__getstructoffset())->AddVTA((EdbVTA*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertex*) G__getstructoffset())->RemoveVTA((EdbVTA*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertex*) G__getstructoffset())->ResetTracks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertex*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbVertex*) G__getstructoffset())->EstimateVertexMath(*(float*) G__Floatref(&libp->para[0]), *(float*) G__Floatref(&libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbVertex*) G__getstructoffset())->Edb2Vt(*(EdbTrackP*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbVertex*) G__getstructoffset())->Edb2Vt(*(EdbTrackP*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbVertex*) G__getstructoffset())->Edb2Vt(*(EdbTrackP*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbVertex*) G__getstructoffset())->Edb2Vt(*(EdbSegP*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbVertex*) G__getstructoffset())->Edb2Vt(*(EdbSegP*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbVertex*) G__getstructoffset())->Edb2Vt(*(EdbSegP*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->Chi2Track((EdbTrackP*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->Chi2Track((EdbTrackP*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->MinDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->Volume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->MaxAperture());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->MaxImpact());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->GetConnectedVertex((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->GetConnectedVertexForTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbVertex*) G__getstructoffset())->N());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbVertex*) G__getstructoffset())->Nn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertex*) G__getstructoffset())->Nv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbVertex*) G__getstructoffset())->Flag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbVertex*) G__getstructoffset())->MCEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbVertex*) G__getstructoffset())->ID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertex*) G__getstructoffset())->Zpos((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbVertex*) G__getstructoffset())->X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbVertex*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbVertex*) G__getstructoffset())->Z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbVertex*) G__getstructoffset())->VX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbVertex*) G__getstructoffset())->VY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbVertex*) G__getstructoffset())->VZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->Quality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->VTa());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->VTn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->GetVTa((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->GetVTn((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->GetTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->GetTrackN((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->GetTrackV((int) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->GetTrackV((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->GetMaxImpVTA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->CheckImpGeom((EdbTrackP*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->CheckImp((EdbTrackP*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->CheckImp((EdbTrackP*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->Impact((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->DistSeg((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->DistSeg((EdbSegP*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->DistTrack((EdbTrackP*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->DistTrack((EdbTrackP*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbVertex*) G__getstructoffset())->ImpTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbVertex*) G__getstructoffset())->V());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbVertex*) G__getstructoffset())->SetID((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbVertex*) G__getstructoffset())->SetID();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertex*) G__getstructoffset())->SetXYZ((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbVertex*) G__getstructoffset())->SetFlag((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbVertex*) G__getstructoffset())->SetFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbVertex*) G__getstructoffset())->SetMC((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbVertex*) G__getstructoffset())->SetMC();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertex*) G__getstructoffset())->SetV((VERTEX::Vertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbVertex*) G__getstructoffset())->SetQuality((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbVertex*) G__getstructoffset())->SetQuality();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbVertex*) G__getstructoffset())->TrackInVertex((EdbTrackP*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertex*) G__getstructoffset())->CheckDiscardedTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertex*) G__getstructoffset())->EstimateVertexFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertex*) G__getstructoffset())->MeanTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_597_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbVertex G__TEdbVertex;
static int G__EdrDict_597_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbVertex*) (soff+(sizeof(EdbVertex)*i)))->~G__TEdbVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbVertex*) (soff))->~G__TEdbVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbSegmentsBox */
static int G__EdrDict_598_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegmentsBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegmentsBox((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbSegmentsBox((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbSegmentsBox[n];
       } else {
         p = new((void*) gvp) EdbSegmentsBox[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbSegmentsBox;
       } else {
         p = new((void*) gvp) EdbSegmentsBox;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegmentsBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbSegmentsBox(*(EdbSegmentsBox*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbSegmentsBox(*(EdbSegmentsBox*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegmentsBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegmentsBox(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbSegmentsBox(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegmentsBox(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbSegmentsBox(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbSegmentsBox*) G__getstructoffset())->AddSegment((int) G__int(libp->para[0]), *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbSegmentsBox*) G__getstructoffset())->AddSegment(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbSegmentsBox*) G__getstructoffset())->AddSegment(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) ((EdbSegmentsBox*) G__getstructoffset())->AddSegment(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((EdbSegmentsBox*) G__getstructoffset())->AddSegment((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((EdbSegmentsBox*) G__getstructoffset())->AddSegment((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbSegmentsBox*) G__getstructoffset())->AddSegmentNoDuplicate(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegmentsBox*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbSegmentsBox*) G__getstructoffset())->GetSegment((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbSegmentsBox*) G__getstructoffset())->GetSegmentLast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbSegmentsBox*) G__getstructoffset())->GetSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((EdbSegmentsBox*) G__getstructoffset())->GetSegmentsAddr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentsBox*) G__getstructoffset())->SetSegmentsZ();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentsBox*) G__getstructoffset())->SetSegmentsDZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentsBox*) G__getstructoffset())->SetSegmentsPlate((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegmentsBox*) G__getstructoffset())->DZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentsBox*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentsBox*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentsBox*) G__getstructoffset())->ProjectTo((const float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentsBox*) G__getstructoffset())->TransformA((EdbAffine2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentsBox*) G__getstructoffset())->TransformARot((EdbAffine2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentsBox*) G__getstructoffset())->TransformShr((const float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbSegmentsBox*) G__getstructoffset())->CalculateXY((EdbSegmentsBox*) G__int(libp->para[0]), (EdbAffine2D*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbSegmentsBox*) G__getstructoffset())->CalculateAXAY((EdbSegmentsBox*) G__int(libp->para[0]), (EdbAffine2D*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegmentsBox*) G__getstructoffset())->DiffAff((EdbAffine2D*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegmentsBox*) G__getstructoffset())->Diff(*(EdbSegmentsBox*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegmentsBox*) G__getstructoffset())->GetSize((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegmentsBox*) G__getstructoffset())->GetSizeX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegmentsBox*) G__getstructoffset())->GetSizeY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegmentsBox*) G__getstructoffset())->GetSizeXY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegmentsBox*) G__getstructoffset())->GetTrackDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbSegmentsBox*) G__getstructoffset())->GetTrackDensitymm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbSegmentsBox::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegmentsBox::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbSegmentsBox::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbSegmentsBox::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegmentsBox*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegmentsBox::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegmentsBox::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegmentsBox::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_598_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegmentsBox::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbSegmentsBox G__TEdbSegmentsBox;
static int G__EdrDict_598_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbSegmentsBox*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbSegmentsBox*) (soff+(sizeof(EdbSegmentsBox)*i)))->~G__TEdbSegmentsBox();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbSegmentsBox*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbSegmentsBox*) (soff))->~G__TEdbSegmentsBox();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdrDict_598_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegmentsBox* dest = (EdbSegmentsBox*) G__getstructoffset();
   *dest = *(EdbSegmentsBox*) libp->para[0].ref;
   const EdbSegmentsBox& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbTrackP */
static int G__EdrDict_599_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrackP* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrackP((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbTrackP((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbTrackP[n];
       } else {
         p = new((void*) gvp) EdbTrackP[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbTrackP;
       } else {
         p = new((void*) gvp) EdbTrackP;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrackP* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbTrackP(*(EdbSegP*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbTrackP(*(EdbSegP*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrackP* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrackP((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbTrackP((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrackP((EdbSegP*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbTrackP((EdbSegP*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrackP* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbTrackP(*(EdbTrackP*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbTrackP(*(EdbTrackP*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetOwner();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->AddVTA((EdbVTA*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->ClearVTA();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->ClearVTA((EdbVTA*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->VTAS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->VTAE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbTrackP*) G__getstructoffset())->VertexS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbTrackP*) G__getstructoffset())->VertexE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbTrackP*) G__getstructoffset())->Vertex((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetPDG((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrackP*) G__getstructoffset())->PDG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbTrackP*) G__getstructoffset())->Wmean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetM((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbTrackP*) G__getstructoffset())->M());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetCounters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetN0((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetN0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrackP*) G__getstructoffset())->N0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetDE((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbTrackP*) G__getstructoffset())->DE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetNpl((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetNpl();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrackP*) G__getstructoffset())->Npl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrackP*) G__getstructoffset())->N());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrackP*) G__getstructoffset())->NF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbTrackP*) G__getstructoffset())->GetBTEfficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbTrackP*) G__getstructoffset())->Wgrains());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrackP*) G__getstructoffset())->GetSegmentsFlag(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrackP*) G__getstructoffset())->GetSegmentsAid(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrackP*) G__getstructoffset())->GetSegmentsMCTrack(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbTrackP*) G__getstructoffset())->GetSegmentWithClosestZ((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->GetSegmentFirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->GetSegmentLast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->GetSegmentFFirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->GetSegmentFLast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->GetSegment((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->GetSegmentF((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->TrackZmin((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->TrackZmin());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->TrackZmax((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->TrackZmax());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->TrackExtremity((bool) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->TrackExtremity((bool) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->TrackStart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrackP*) G__getstructoffset())->TrackEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrackP*) G__getstructoffset())->Dir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbTrackP*) G__getstructoffset())->Zmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbTrackP*) G__getstructoffset())->Zmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbTrackP*) G__getstructoffset())->Zstart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbTrackP*) G__getstructoffset())->Zend());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->AddTrack(*(EdbTrackP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->AddSegment((EdbSegP*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->RemoveSegment((EdbSegP*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SubstituteSegment((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->AddSegmentF((EdbSegP*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->RemoveAliasSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->CheckMaxGap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->CheckAliasSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->SetSegmentsTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->SetSegmentsTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->FitTrackKFS((bool) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->FitTrackKFS((bool) G__int(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->FitTrackKFS((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->FitTrackKFS());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->MakeSelector(*(EdbSegP*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbTrackP*) G__getstructoffset())->MakeSelector(*(EdbSegP*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbTrackP*) G__getstructoffset())->MakePredictionTo((Float_t) G__double(libp->para[0]), *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbTrackP*) G__getstructoffset())->CHI2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbTrackP*) G__getstructoffset())->CHI2F());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->FitTrack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->Copy(*(EdbTrackP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->Transform(*(EdbAffine2D*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetPerrUp((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetPerrDown((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->SetPerr((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbTrackP*) G__getstructoffset())->PerrUp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbTrackP*) G__getstructoffset())->PerrDown());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->ClearF();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->PrintNice();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbTrackP::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrackP::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbTrackP::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbTrackP::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackP*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrackP::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrackP::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrackP::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_599_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrackP::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbTrackP G__TEdbTrackP;
static int G__EdrDict_599_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbTrackP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbTrackP*) (soff+(sizeof(EdbTrackP)*i)))->~G__TEdbTrackP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbTrackP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbTrackP*) (soff))->~G__TEdbTrackP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdrDict_599_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrackP* dest = (EdbTrackP*) G__getstructoffset();
   *dest = *(EdbTrackP*) libp->para[0].ref;
   const EdbTrackP& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPattern */
static int G__EdrDict_600_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPattern* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPattern[n];
     } else {
       p = new((void*) gvp) EdbPattern[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPattern;
     } else {
       p = new((void*) gvp) EdbPattern;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPattern* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbPattern(*(EdbPattern*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbPattern(*(EdbPattern*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPattern* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPattern(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbPattern(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPattern(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbPattern(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->SetScanID(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->SetSigma((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->SetStep((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPattern*) G__getstructoffset())->SummaryPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->FillCell((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPattern*) G__getstructoffset())->FindCompliments(*(EdbSegP*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->SetSegmentsPID();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->SetSegmentsScanID(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((EdbPattern*) G__getstructoffset())->ExtractSubPattern((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbPattern*) G__getstructoffset())->ExtractSubPattern((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->SetID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->SetPID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->SetNAff((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->SetSide((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPattern*) G__getstructoffset())->NAff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPattern*) G__getstructoffset())->StepX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPattern*) G__getstructoffset())->StepY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPattern*) G__getstructoffset())->StepTX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPattern*) G__getstructoffset())->StepTY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPattern*) G__getstructoffset())->ID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPattern*) G__getstructoffset())->PID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPattern*) G__getstructoffset())->Cell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPattern*) G__getstructoffset())->FindSegment((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPattern*) G__getstructoffset())->Xmean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPattern*) G__getstructoffset())->Ymean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const EdbID* pobj;
         const EdbID xobj = ((const EdbPattern*) G__getstructoffset())->ScanID();
         pobj = new EdbID(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPattern*) G__getstructoffset())->Plate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPattern*) G__getstructoffset())->Side());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPattern::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPattern::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPattern::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPattern::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPattern*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPattern::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPattern::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPattern::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_600_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPattern::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPattern G__TEdbPattern;
static int G__EdrDict_600_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPattern*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPattern*) (soff+(sizeof(EdbPattern)*i)))->~G__TEdbPattern();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPattern*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPattern*) (soff))->~G__TEdbPattern();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdrDict_600_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPattern* dest = (EdbPattern*) G__getstructoffset();
   *dest = *(EdbPattern*) libp->para[0].ref;
   const EdbPattern& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPatternsVolume */
static int G__EdrDict_601_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPatternsVolume* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPatternsVolume[n];
     } else {
       p = new((void*) gvp) EdbPatternsVolume[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPatternsVolume;
     } else {
       p = new((void*) gvp) EdbPatternsVolume;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPatternsVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPatternsVolume* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbPatternsVolume(*(EdbPatternsVolume*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbPatternsVolume(*(EdbPatternsVolume*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPatternsVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->SetPatternsID();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->Transform((EdbAffine2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->Shift((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->Centralize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->Centralize((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->SetXYZ((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatternsVolume*) G__getstructoffset())->X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatternsVolume*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatternsVolume*) G__getstructoffset())->Z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPatternsVolume*) G__getstructoffset())->Npatterns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatternsVolume*) G__getstructoffset())->Xmean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatternsVolume*) G__getstructoffset())->Ymean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->PassProperties(*(EdbPatternsVolume*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->AddPattern((EdbPattern*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->AddPatternAt((EdbPattern*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->GetPattern((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->GetPatternZLowestHighest((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->GetPatternZLowestHighest());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->GetPatternPreceding((EdbPattern*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->GetPatternSucceding((EdbPattern*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->NextPattern((float) G__double(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->GetPatternNext((float) G__double(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->GetPatternByPID((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->GetPatternByZ((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->GetPatternByZ((float) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->DropCell();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const EdbPatternsVolume*) G__getstructoffset())->PrintStat((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const EdbPatternsVolume*) G__getstructoffset())->PrintStat();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbPatternsVolume*) G__getstructoffset())->PrintStat(*(EdbPattern*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbPatternsVolume*) G__getstructoffset())->PrintAff();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatternsVolume*) G__getstructoffset())->DropCouples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const EdbPatternsVolume*) G__getstructoffset())->Vid((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPatternsVolume*) G__getstructoffset())->Pid((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPatternsVolume*) G__getstructoffset())->Sid((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPatternsVolume*) G__getstructoffset())->GetSegment((Long_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatternsVolume*) G__getstructoffset())->FindComplimentsVol(*(EdbSegP*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPatternsVolume*) G__getstructoffset())->GetPatternByPlate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((EdbPatternsVolume*) G__getstructoffset())->InsertPattern((EdbPattern*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbPatternsVolume*) G__getstructoffset())->InsertPattern((EdbPattern*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbPatternsVolume*) G__getstructoffset())->SortPatternsByZ((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbPatternsVolume*) G__getstructoffset())->SortPatternsByZ();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbPatternsVolume*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPatternsVolume::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPatternsVolume::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPatternsVolume::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPatternsVolume::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatternsVolume*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPatternsVolume::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPatternsVolume::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPatternsVolume::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_601_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPatternsVolume::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPatternsVolume G__TEdbPatternsVolume;
static int G__EdrDict_601_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPatternsVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPatternsVolume*) (soff+(sizeof(EdbPatternsVolume)*i)))->~G__TEdbPatternsVolume();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPatternsVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPatternsVolume*) (soff))->~G__TEdbPatternsVolume();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdrDict_601_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPatternsVolume* dest = (EdbPatternsVolume*) G__getstructoffset();
   *dest = *(EdbPatternsVolume*) libp->para[0].ref;
   const EdbPatternsVolume& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPatCouple */
static int G__EdrDict_654_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPatCouple* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPatCouple[n];
     } else {
       p = new((void*) gvp) EdbPatCouple[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPatCouple;
     } else {
       p = new((void*) gvp) EdbPatCouple;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->SetID((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->SetOffsetsMax((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->SetOffset((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->SetSigma((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->SetZlink((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->SetPat1((EdbPattern*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->SetPat2((EdbPattern*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->SetCond((EdbScanCond*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPatCouple*) G__getstructoffset())->GetAff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPatCouple*) G__getstructoffset())->Cond());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatCouple*) G__getstructoffset())->Zlink());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPatCouple*) G__getstructoffset())->Ncouples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->ClearSegCouples();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPatCouple*) G__getstructoffset())->AddSegCouple((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPatCouple*) G__getstructoffset())->GetSegCouple((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->RemoveSegCouple((EdbSegCouple*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPatCouple*) G__getstructoffset())->Pat1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPatCouple*) G__getstructoffset())->Pat2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->LinkSlow((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->LinkFast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->CheckSegmentsDuplication((EdbPattern*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->DiffPat((EdbPattern*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])
, (Long_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->DiffPatCell((TIndexCell*) G__int(libp->para[0]), (TIndexCell*) G__int(libp->para[1])
, (Long_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->SetCHI2mode((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPatCouple*) G__getstructoffset())->CHI2mode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatCouple*) G__getstructoffset())->Chi2Pz0((EdbSegCouple*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((EdbPatCouple*) G__getstructoffset())->Chi2A((EdbSegCouple*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((EdbPatCouple*) G__getstructoffset())->Chi2A((EdbSegCouple*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((EdbPatCouple*) G__getstructoffset())->Chi2A((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((EdbPatCouple*) G__getstructoffset())->Chi2A((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPatCouple*) G__getstructoffset())->Chi2KF((EdbSegCouple*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->FillCHI2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->FillCHI2P());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->SelectIsolated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->CutCHI2P((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->SortByCHI2P());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->PrintCouples();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->Align((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->FindOffset0((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->FindOffset01((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->FindOffset1((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPatCouple*) G__getstructoffset())->FindOffset((EdbPattern*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])
, (Long_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->CalculateAffXY((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->CalculateAffXYZ((float) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbPatCouple*) G__getstructoffset())->FillCell_XYaXaY((EdbScanCond*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbPatCouple*) G__getstructoffset())->FillCell_XYaXaY((EdbScanCond*) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->FillCell_XYaXaY((EdbPattern*) G__int(libp->para[0]), (EdbScanCond*) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPatCouple*) G__getstructoffset())->ID1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPatCouple*) G__getstructoffset())->ID2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatCouple*) G__getstructoffset())->OffsetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatCouple*) G__getstructoffset())->OffsetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatCouple*) G__getstructoffset())->OffsetTX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatCouple*) G__getstructoffset())->OffsetTY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatCouple*) G__getstructoffset())->SigmaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatCouple*) G__getstructoffset())->SigmaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatCouple*) G__getstructoffset())->SigmaTX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPatCouple*) G__getstructoffset())->SigmaTY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPatCouple::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPatCouple::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPatCouple::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPatCouple::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPatCouple*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPatCouple::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPatCouple::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPatCouple::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_654_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPatCouple::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdrDict_654_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbPatCouple* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbPatCouple(*(EdbPatCouple*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPatCouple G__TEdbPatCouple;
static int G__EdrDict_654_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPatCouple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPatCouple*) (soff+(sizeof(EdbPatCouple)*i)))->~G__TEdbPatCouple();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPatCouple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPatCouple*) (soff))->~G__TEdbPatCouple();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdrDict_654_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPatCouple* dest = (EdbPatCouple*) G__getstructoffset();
   *dest = *(EdbPatCouple*) libp->para[0].ref;
   const EdbPatCouple& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPVRec */
static int G__EdrDict_655_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPVRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPVRec[n];
     } else {
       p = new((void*) gvp) EdbPVRec[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPVRec;
     } else {
       p = new((void*) gvp) EdbPVRec;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->DummyCycle();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->FillCell((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetScanCond((EdbScanCond*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPVRec*) G__getstructoffset())->GetScanCond());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetBinsCheck((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPVRec*) G__getstructoffset())->AddCouple((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->AddCouple((EdbPatCouple*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetCouples();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->ResetCouples();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->DeleteCouples();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetCouplesAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetCouplesPeriodic((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetCouplesExclude(*(TArrayI*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPVRec*) G__getstructoffset())->Chi2Max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetChi2Max((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPVRec*) G__getstructoffset())->Ncouples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPVRec*) G__getstructoffset())->GetCouple((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPVRec*) G__getstructoffset())->GetTracksCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->ResetTracks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPVRec*) G__getstructoffset())->Chi2Fast(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->MergeTracks((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->MergeTracks());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->MergeTracks1((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->MakeTracks((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->MakeTracks((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->MakeTracks());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbPVRec*) G__getstructoffset())->FitTracks((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbPVRec*) G__getstructoffset())->FitTracks((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (TObjArray*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbPVRec*) G__getstructoffset())->FitTracks((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbPVRec*) G__getstructoffset())->FitTracks((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbPVRec*) G__getstructoffset())->FitTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPVRec*) G__getstructoffset())->Ntracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->LinkSlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->Link());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->Align((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->AlignOld((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->AlignPlates(*(EdbScanSet*) libp->para[0].ref, *(EdbScanSet*) libp->para[1].ref
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->AlignPlates(*(EdbScanSet*) libp->para[0].ref, *(EdbScanSet*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->FillTracksCellFast();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->AddCouplesToTracks((EdbPatCouple*) G__int(libp->para[0]), *(TIndex2*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->AddCouplesToTracksM((EdbPatCouple*) G__int(libp->para[0]), *(TIndex2*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->FillTracksCell2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->FillTracksCell1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->FillTracksCell();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->MakeHoles((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->InsertHole((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->CollectSegment((TIndexCell*) G__int(libp->para[0]), (TIndexCell*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->CollectSegment1((TIndexCell*) G__int(libp->para[0]), (THashList*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->SelectLongTracks((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->MakeSummaryTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->FineCorrXY((int) G__int(libp->para[0]), *(EdbAffine2D*) libp->para[1].ref
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->FineCorrTXTY((int) G__int(libp->para[0]), *(EdbAffine2D*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->FineCorrZ((int) G__int(libp->para[0]), *(float*) G__Floatref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->FineCorrZnew());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->FineCorrShr((int) G__int(libp->para[0]), *(float*) G__Floatref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->FineCorrF((int) G__int(libp->para[0]), *(EdbAffine2D*) libp->para[1].ref
, *(EdbAffine2D*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetSegmentsTracks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetOffsetsMax((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetSegmentsErrors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetSegmentErrors(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetSegmentProbability(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPVRec*) G__getstructoffset())->GetTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPVRec*) G__getstructoffset())->FindTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPVRec*) G__getstructoffset())->FindSegment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->AddTrack((EdbTrackP*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->AddVertex((EdbVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPVRec*) G__getstructoffset())->Nvtx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPVRec*) G__getstructoffset())->GetVertex(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPVRec*) G__getstructoffset())->GetTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPVRec*) G__getstructoffset())->GetVertices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->NSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->ExtractDataVolumeSeg(*(EdbTrackP*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->ExtractDataVolumeSegAll(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->CombTracks((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->CombTracks((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->PropagateTracks((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->PropagateTracks((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->PropagateTracks((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->PropagateTracks((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->PropagateTrack(*(EdbTrackP*) libp->para[0].ref, (bool) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->PropagateTrack(*(EdbTrackP*) libp->para[0].ref, (bool) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->PropagateTrack(*(EdbTrackP*) libp->para[0].ref, (bool) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->PropagateTrack(*(EdbTrackP*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) EdbPVRec::ProbeSeg((EdbTrackP*) G__int(libp->para[0]), (EdbTrackP*) G__int(libp->para[1])
, (const float) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) EdbPVRec::ProbeSeg((EdbTrackP*) G__int(libp->para[0]), (EdbTrackP*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) EdbPVRec::ProbeSeg((EdbTrackP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (const float) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) EdbPVRec::ProbeSeg((EdbTrackP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) EdbPVRec::ProbeSeg((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (const float) G__double(libp->para[2]), (const float) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) EdbPVRec::ProbeSeg((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (const float) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) EdbPVRec::ProbeSeg((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) EdbPVRec::AttachSeg(*(EdbTrackP*) libp->para[0].ref, (EdbSegP*) G__int(libp->para[1])
, (const float) G__double(libp->para[2]), (const float) G__double(libp->para[3])
, *(float*) G__Floatref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPVRec*) G__getstructoffset())->GetPatternByPID((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->AddSegments(*(EdbPVRec*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVRec*) G__getstructoffset())->AddSegments(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPVRec*) G__getstructoffset())->AddSegment(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetScanIDPatSeg(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->SetScanIDTrackSeg(*((EdbID*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPVRec*) G__getstructoffset())->Xmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPVRec*) G__getstructoffset())->Xmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPVRec*) G__getstructoffset())->Ymin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPVRec*) G__getstructoffset())->Ymax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->PrintSummary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPVRec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPVRec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPVRec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPVRec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVRec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPVRec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPVRec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPVRec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_655_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPVRec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdrDict_655_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbPVRec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbPVRec(*(EdbPVRec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPVRec G__TEdbPVRec;
static int G__EdrDict_655_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPVRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPVRec*) (soff+(sizeof(EdbPVRec)*i)))->~G__TEdbPVRec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPVRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPVRec*) (soff))->~G__TEdbPVRec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdrDict_655_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPVRec* dest = (EdbPVRec*) G__getstructoffset();
   *dest = *(EdbPVRec*) libp->para[0].ref;
   const EdbPVRec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbVertexPar */
static int G__EdrDict_752_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVertexPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbVertexPar[n];
     } else {
       p = new((void*) gvp) EdbVertexPar[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbVertexPar;
     } else {
       p = new((void*) gvp) EdbVertexPar;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_752_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbVertexPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_752_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_752_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbVertexPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_752_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbVertexPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_752_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_752_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_752_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVertexPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_752_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_752_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVertexPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdrDict_752_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbVertexPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbVertexPar(*(EdbVertexPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbVertexPar G__TEdbVertexPar;
static int G__EdrDict_752_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbVertexPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbVertexPar*) (soff+(sizeof(EdbVertexPar)*i)))->~G__TEdbVertexPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbVertexPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbVertexPar*) (soff))->~G__TEdbVertexPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdrDict_752_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVertexPar* dest = (EdbVertexPar*) G__getstructoffset();
   *dest = *(EdbVertexPar*) libp->para[0].ref;
   const EdbVertexPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbVertexRec */
static int G__EdrDict_753_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVertexRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbVertexRec[n];
     } else {
       p = new((void*) gvp) EdbVertexRec[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbVertexRec;
     } else {
       p = new((void*) gvp) EdbVertexRec;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVertexRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVertexRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbVertexRec(*(EdbVertexPar*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbVertexRec(*(EdbVertexPar*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVertexRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbVertexRec*) G__getstructoffset())->Vmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbVertexRec*) G__getstructoffset())->Vmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->RefitAll());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->AcceptPolish();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->RejectPolish();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->StatVertexN();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->AcceptModifiedVTX((EdbVertex*) G__int(libp->para[0]), (EdbVertex*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->CancelModifiedVTX((EdbVertex*) G__int(libp->para[0]), (EdbVertex*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->FillTracksStartEnd(*(TIndexCell*) libp->para[0].ref, *(TIndexCell*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->MakeV(*(EdbVertex*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->MakeV(*(EdbVertex*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->FindVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexRec*) G__getstructoffset())->Make1Vertex(*(TObjArray*) libp->para[0].ref, (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexRec*) G__getstructoffset())->StripBadTracks(*(EdbVertex*) libp->para[0].ref, (float) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexRec*) G__getstructoffset())->ProbVertex2((EdbTrackP*) G__int(libp->para[0]), (EdbTrackP*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->ProbVertexN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->ProbVertexN_old());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->ProbVertexNpos((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->CheckVTX();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexRec*) G__getstructoffset())->TestVTAGroup(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->EstimateVertexFlag((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbVertexRec*) G__getstructoffset())->CheckDZ2((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbVertexRec*) G__getstructoffset())->IsInsideLimits(*(EdbSegP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->FindSimilarTracks(*(EdbTrackP*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->FindSimilarTracks(*(EdbTrackP*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->FindSimilarTracks(*(EdbTrackP*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->FindSimilarTracks(*(EdbTrackP*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->FindSimilarTracks(*(EdbTrackP*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->FindSimilarTracksE(
*(EdbSegP*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, (bool) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (float) G__double(libp->para[8]), (float) G__double(libp->para[9])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbVertexRec*) G__getstructoffset())->CompatibleSegments(
*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (float) G__double(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->FindSimilarSegments(
*(EdbSegP*) libp->para[0].ref, *(TObjArray*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (float) G__double(libp->para[8]), (float) G__double(libp->para[9])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->LinkedVertexes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->LoopVertex(*(TIndexCell*) libp->para[0].ref, *(TIndexCell*) libp->para[1].ref
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->AddSegmentToVertex((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->AddSegmentToVertex((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->AddSegmentToVertex((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->AddSegmentToVertex((EdbSegP*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexPolish(
(EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexPolish((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexPolish((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexPolish((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexPolish((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexPolish((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexPolish((EdbVertex*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexTuning((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexTuning());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexNeighbor((float) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexNeighbor((float) G__double(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexNeighbor((float) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexNeighbor());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexNeighbor((EdbVertex*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexNeighbor((EdbVertex*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexNeighbor((EdbVertex*) G__int(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->VertexNeighbor((EdbVertex*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->SelVertNeighbor((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (TObjArray*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->SelSegNeighbor((EdbSegP*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (TObjArray*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->SegmentNeighbor(
(EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (TObjArray*) G__int(libp->para[5])
, (TObjArray*) G__int(libp->para[6]), (TObjArray*) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->SegmentNeighbor(
(EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (TObjArray*) G__int(libp->para[5])
, (TObjArray*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->SegmentNeighbor((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (TObjArray*) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->SegmentNeighbor((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->SegmentNeighbor((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->SegmentNeighbor((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->SegmentNeighbor((EdbSegP*) G__int(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->SegmentNeighbor((EdbSegP*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbVertexRec*) G__getstructoffset())->CheckImpact((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 102, (double) ((EdbVertexRec*) G__getstructoffset())->CheckImpactN((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), *(bool*) G__Boolref(&libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 102, (double) ((EdbVertexRec*) G__getstructoffset())->CheckImpactN((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), *(bool*) G__Boolref(&libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbVertexRec*) G__getstructoffset())->EstimateVertexQuality(*(EdbVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbVertexRec*) G__getstructoffset())->EstimateVertexPosition(*(EdbVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbVertexRec*) G__getstructoffset())->Tdistance(*(VERTEX::Track*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbVertexRec*) G__getstructoffset())->Tdistance(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbVertexRec*) G__getstructoffset())->TdistanceChi2(*(EdbTrackP*) libp->para[0].ref, *(EdbTrackP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbVertexRec*) G__getstructoffset())->TdistanceChi2(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbVertexRec*) G__getstructoffset())->MoveTrackToOtherVertex((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (EdbVertex*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (EdbVertex**) G__int(libp->para[4]), (EdbVertex**) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexRec*) G__getstructoffset())->AddTrackToVertex((EdbVertex*) G__int(libp->para[0]), (EdbTrackP*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexRec*) G__getstructoffset())->RemoveTrackFromVertex((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexRec*) G__getstructoffset())->RemoveVTAFromVertex(*(EdbVertex*) libp->para[0].ref, *(EdbVTA*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexRec*) G__getstructoffset())->GetEdbTrack((const int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexRec*) G__getstructoffset())->AddTrack(*(EdbVertex*) libp->para[0].ref, (EdbTrackP*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->SetPVRec((EdbPVRec*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->AddVTA((EdbVTA*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbVertexRec*) G__getstructoffset())->Nvtx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexRec*) G__getstructoffset())->GetVertex(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->AddVertex((EdbVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexRec*) G__getstructoffset())->CheckTrack(*(EdbTrackP*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbVertexRec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexRec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbVertexRec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbVertexRec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexRec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexRec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVertexRec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexRec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_753_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVertexRec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbVertexRec G__TEdbVertexRec;
static int G__EdrDict_753_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbVertexRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbVertexRec*) (soff+(sizeof(EdbVertexRec)*i)))->~G__TEdbVertexRec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbVertexRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbVertexRec*) (soff))->~G__TEdbVertexRec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbTopology */
static int G__EdrDict_754_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTopology* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTopology[n];
     } else {
       p = new((void*) gvp) EdbTopology[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTopology;
     } else {
       p = new((void*) gvp) EdbTopology;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbTopology));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTopology*) G__getstructoffset())->Nvtx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTopology*) G__getstructoffset())->Ntr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbTopology*) G__getstructoffset())->Probability());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbTopology*) G__getstructoffset())->DZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbTopology*) G__getstructoffset())->AddVertex((EdbVertex*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTopology*) G__getstructoffset())->GetVertex((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTopology*) G__getstructoffset())->GetTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTopology*) G__getstructoffset())->AddSingleTracks(*(TObjArray*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTopology*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTopology*) G__getstructoffset())->PrintTracks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbTopology*) G__getstructoffset())->TracksStr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbTopology*) G__getstructoffset())->VertexStr(*(EdbVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTopology*) G__getstructoffset())->OrderVtxByZ();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbTopology*) G__getstructoffset())->IsEqual(*(EdbTopology*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTopology*) G__getstructoffset())->MaxV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbTopology::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTopology::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbTopology::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbTopology::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTopology*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTopology::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTopology::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTopology::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_754_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTopology::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbTopology G__TEdbTopology;
static int G__EdrDict_754_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbTopology*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbTopology*) (soff+(sizeof(EdbTopology)*i)))->~G__TEdbTopology();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbTopology*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbTopology*) (soff))->~G__TEdbTopology();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbVertexComb */
static int G__EdrDict_755_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVertexComb* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbVertexComb[n];
     } else {
       p = new((void*) gvp) EdbVertexComb[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbVertexComb;
     } else {
       p = new((void*) gvp) EdbVertexComb;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVertexComb));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVertexComb* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbVertexComb(*(TObjArray*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbVertexComb(*(TObjArray*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVertexComb));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->CopyPar(*(EdbVertexComb*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->AddTrack((EdbTrackP*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->SetTracksErrors(*(EdbScanCond*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->SetTracksErrors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->SetTracksErrors(*(TObjArray*) libp->para[0].ref, *(EdbScanCond*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->FormVertices();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbVertexComb*) G__getstructoffset())->FindTopologies());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->PrintTopologies();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbVertexComb*) G__getstructoffset())->GetTopology((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbVertexComb*) G__getstructoffset())->Ntr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbVertexComb*) G__getstructoffset())->Nvtx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbVertexComb*) G__getstructoffset())->GetVertex((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbVertexComb*) G__getstructoffset())->GetVertexComb((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbVertexComb*) G__getstructoffset())->IsAcceptable(*(EdbVertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbVertexComb*) G__getstructoffset())->CheckVTX(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->PrintTracks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->SelectTopologies(*(TObjArray*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->SortTopologies(*(TObjArray*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->ClearDoublets(*(TObjArray*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->PrintTeoricalCombinations((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbVertexComb::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexComb::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbVertexComb::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbVertexComb::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexComb*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexComb::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVertexComb::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexComb::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_755_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVertexComb::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbVertexComb G__TEdbVertexComb;
static int G__EdrDict_755_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbVertexComb*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbVertexComb*) (soff+(sizeof(EdbVertexComb)*i)))->~G__TEdbVertexComb();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbVertexComb*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbVertexComb*) (soff))->~G__TEdbVertexComb();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbVertexSpace */
static int G__EdrDict_756_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVertexSpace* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbVertexSpace(
(float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) EdbVertexSpace(
(float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVertexSpace));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexSpace*) G__getstructoffset())->AddTrackLine((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexSpace*) G__getstructoffset())->Cycle();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbVertexSpace::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexSpace::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbVertexSpace::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbVertexSpace::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbVertexSpace*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexSpace::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVertexSpace::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbVertexSpace::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_756_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbVertexSpace::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdrDict_756_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbVertexSpace* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbVertexSpace(*(EdbVertexSpace*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbVertexSpace));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbVertexSpace G__TEdbVertexSpace;
static int G__EdrDict_756_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbVertexSpace*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbVertexSpace*) (soff+(sizeof(EdbVertexSpace)*i)))->~G__TEdbVertexSpace();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbVertexSpace*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbVertexSpace*) (soff))->~G__TEdbVertexSpace();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdrDict_756_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbVertexSpace* dest = (EdbVertexSpace*) G__getstructoffset();
   *dest = *(EdbVertexSpace*) libp->para[0].ref;
   const EdbVertexSpace& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbTrackFitter */
static int G__EdrDict_757_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrackFitter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrackFitter[n];
     } else {
       p = new((void*) gvp) EdbTrackFitter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrackFitter;
     } else {
       p = new((void*) gvp) EdbTrackFitter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackFitter*) G__getstructoffset())->SetNsegMax((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackFitter*) G__getstructoffset())->SetDefaultBrick();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTrackFitter*) G__getstructoffset())->FitTrackLine(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTrackFitter*) G__getstructoffset())->FitTrackLine(
*(EdbTrackP*) libp->para[0].ref, *(float*) G__Floatref(&libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3])
, *(float*) G__Floatref(&libp->para[4]), *(float*) G__Floatref(&libp->para[5])
, *(float*) G__Floatref(&libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbTrackFitter::MaxKink(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbTrackFitter::MeanKink(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbTrackFitter::Theta(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbTrackFitter::Chi2Seg((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbTrackFitter::MaxChi2Seg(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbTrackFitter::MeanChi2Seg(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbTrackFitter*) G__getstructoffset())->SplitTrack(*(EdbTrackP*) libp->para[0].ref, *(EdbTrackP*) libp->para[1].ref
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbTrackFitter*) G__getstructoffset())->SplitTrackByKink((EdbTrackP*) G__int(libp->para[0]), *(TObjArray*) libp->para[1].ref
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((EdbTrackFitter*) G__getstructoffset())->PMS_KF(*(EdbTrackP*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((EdbTrackFitter*) G__getstructoffset())->PMS_KF(*(EdbTrackP*) libp->para[0].ref, (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((EdbTrackFitter*) G__getstructoffset())->PMS_KF(*(EdbTrackP*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbTrackFitter::Chi2ACP(*((EdbSegP*) G__int(libp->para[0])), *((EdbSegP*) G__int(libp->para[1]))
, *(EdbScanCond*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbTrackFitter::Chi2ASeg(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref, *(EdbScanCond*) libp->para[3].ref
, *(EdbScanCond*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbTrackFitter::Chi2ASegLL(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref, *(EdbScanCond*) libp->para[3].ref
, *(EdbScanCond*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbTrackFitter*) G__getstructoffset())->Chi2SegM(*((EdbSegP*) G__int(libp->para[0])), *((EdbSegP*) G__int(libp->para[1]))
, *(EdbSegP*) libp->para[2].ref, *(EdbScanCond*) libp->para[3].ref
, *(EdbScanCond*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbTrackFitter*) G__getstructoffset())->Chi2SegMCS(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbTrackFitter*) G__getstructoffset())->ProbSegMCS((EdbSegP*) G__int(libp->para[0]), (EdbSegP*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackFitter*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrackFitter::RMSprojXY(*(EdbTrackP*) libp->para[0].ref, *(float*) G__Floatref(&libp->para[1])
, *(float*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbTrackFitter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrackFitter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbTrackFitter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbTrackFitter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrackFitter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrackFitter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrackFitter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrackFitter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_757_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrackFitter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdrDict_757_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbTrackFitter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbTrackFitter(*(EdbTrackFitter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbTrackFitter G__TEdbTrackFitter;
static int G__EdrDict_757_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbTrackFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbTrackFitter*) (soff+(sizeof(EdbTrackFitter)*i)))->~G__TEdbTrackFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbTrackFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbTrackFitter*) (soff))->~G__TEdbTrackFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdrDict_757_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrackFitter* dest = (EdbTrackFitter*) G__getstructoffset();
   *dest = *(EdbTrackFitter*) libp->para[0].ref;
   const EdbTrackFitter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbMomentumEstimator */
static int G__EdrDict_821_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMomentumEstimator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbMomentumEstimator[n];
     } else {
       p = new((void*) gvp) EdbMomentumEstimator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbMomentumEstimator;
     } else {
       p = new((void*) gvp) EdbMomentumEstimator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbMomentumEstimator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMomentumEstimator*) G__getstructoffset())->SetParPMS_Mag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMomentumEstimator*) G__getstructoffset())->SetParPMS_Mag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMomentumEstimator*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbMomentumEstimator*) G__getstructoffset())->PMS(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbMomentumEstimator*) G__getstructoffset())->PMSang(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbMomentumEstimator*) G__getstructoffset())->PMSang_corr(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbMomentumEstimator*) G__getstructoffset())->PMScoordinate(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbMomentumEstimator*) G__getstructoffset())->CellWeight((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMomentumEstimator*) G__getstructoffset())->EstimateMomentumError((float) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), *(float*) G__Floatref(&libp->para[3])
, *(float*) G__Floatref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbMomentumEstimator*) G__getstructoffset())->Mat((float) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbMomentumEstimator*) G__getstructoffset())->MCSErrorFunction((const char*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbMomentumEstimator*) G__getstructoffset())->MCSCoordErrorFunction((const char*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMomentumEstimator*) G__getstructoffset())->SetDTxErrorFunction(*(TF1*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMomentumEstimator*) G__getstructoffset())->SetDTyErrorFunction(*(TF1*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMomentumEstimator*) G__getstructoffset())->SetDTsErrorFunction(*(TF1*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbMomentumEstimator*) G__getstructoffset())->GetDTx((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbMomentumEstimator*) G__getstructoffset())->GetDTy((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((EdbMomentumEstimator*) G__getstructoffset())->GetDTs((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbMomentumEstimator*) G__getstructoffset())->PMSang_base(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbMomentumEstimator*) G__getstructoffset())->PMSang_base_A(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbMomentumEstimator*) G__getstructoffset())->MCSErrorFunction_base((const char*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbMomentumEstimator*) G__getstructoffset())->P_MS(*(EdbTrackP*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbMomentumEstimator*) G__getstructoffset())->DrawPlots((TCanvas*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbMomentumEstimator*) G__getstructoffset())->DrawPlots();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((EdbMomentumEstimator*) G__getstructoffset())->AlgStr((int) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMomentumEstimator*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbMomentumEstimator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMomentumEstimator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbMomentumEstimator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbMomentumEstimator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMomentumEstimator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMomentumEstimator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbMomentumEstimator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMomentumEstimator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_821_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbMomentumEstimator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbMomentumEstimator G__TEdbMomentumEstimator;
static int G__EdrDict_821_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbMomentumEstimator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbMomentumEstimator*) (soff+(sizeof(EdbMomentumEstimator)*i)))->~G__TEdbMomentumEstimator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbMomentumEstimator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbMomentumEstimator*) (soff))->~G__TEdbMomentumEstimator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPlateTracking */
static int G__EdrDict_883_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPlateTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlateTracking[n];
     } else {
       p = new((void*) gvp) EdbPlateTracking[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlateTracking;
     } else {
       p = new((void*) gvp) EdbPlateTracking;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPlateTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPlateTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbPlateTracking(
*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref, *(EdbPlateP*) libp->para[3].ref);
   } else {
     p = new((void*) gvp) EdbPlateTracking(
*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref, *(EdbPlateP*) libp->para[3].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPlateTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPlateTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbPlateTracking(
*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) EdbPlateTracking(
*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdrDictLN_EdbPlateTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateTracking*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateTracking*) G__getstructoffset())->SetCondMT(*(EdbScanCond*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateTracking*) G__getstructoffset())->SetCondBT(*(EdbScanCond*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateTracking*) G__getstructoffset())->SetPred(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->UpdateFlag((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPlateTracking::GetBTHoles((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPlateTracking::GetMTHoles((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->ExtrapolateCond(*(EdbScanCond*) libp->para[0].ref, (int) G__int(libp->para[1])
, *(EdbScanCond*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->FindCompliments(*(EdbSegP*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(TObjArray*) libp->para[2].ref, (float) G__double(libp->para[3])
, *(TArrayF*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->FindCandidates(*(EdbSegP*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, *(EdbPattern*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->FindCandidateMT(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->FindBestCandidate(*(EdbPattern*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->FindPrediction(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref, *(EdbSegP*) libp->para[3].ref
, *(EdbSegP*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->FindBestCandidateDS(
*(EdbPattern*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, *(EdbSegP*) libp->para[6].ref, (float) G__double(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->FindPredictionDS(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref, *(EdbSegP*) libp->para[3].ref
, *(EdbSegP*) libp->para[4].ref, (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->FindCandidateMTDS(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref, *(EdbSegP*) libp->para[3].ref
, (float) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateTracking*) G__getstructoffset())->TransformFromPlateRS();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlateTracking*) G__getstructoffset())->FindTrack(*(EdbTrackP*) libp->para[0].ref, *(EdbTrackP*) libp->para[1].ref
, *(EdbPlateP*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateTracking*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPlateTracking::CloseSBtree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) EdbPlateTracking::InitSBtree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) EdbPlateTracking::InitSBtree((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) EdbPlateTracking::InitSBtree());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbPlateTracking*) G__getstructoffset())->UpdateSBtree(*(TTree*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbPlateTracking*) G__getstructoffset())->GetSBtreeEntry((int) G__int(libp->para[0]), *(TTree*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPlateTracking::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlateTracking::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPlateTracking::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPlateTracking::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlateTracking*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlateTracking::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPlateTracking::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlateTracking::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdrDict_883_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPlateTracking::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPlateTracking G__TEdbPlateTracking;
static int G__EdrDict_883_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPlateTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPlateTracking*) (soff+(sizeof(EdbPlateTracking)*i)))->~G__TEdbPlateTracking();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPlateTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPlateTracking*) (soff))->~G__TEdbPlateTracking();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* EdbVTA */

/* EdbVertex */

/* EdbSegmentsBox */

/* EdbTrackP */

/* EdbPattern */

/* EdbPatternsVolume */

/* EdbPatCouple */

/* EdbPVRec */

/* EdbVertexPar */

/* EdbVertexRec */

/* EdbTopology */

/* EdbVertexComb */

/* EdbVertexSpace */

/* EdbTrackFitter */

/* EdbMomentumEstimator */

/* EdbPlateTracking */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncEdrDict {
 public:
  G__Sizep2memfuncEdrDict(): p(&G__Sizep2memfuncEdrDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncEdrDict::*p)();
};

size_t G__get_sizep2memfuncEdrDict()
{
  G__Sizep2memfuncEdrDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceEdrDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbVTA))) {
     EdbVTA *G__Lderived;
     G__Lderived=(EdbVTA*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVTA),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbVertex))) {
     EdbVertex *G__Lderived;
     G__Lderived=(EdbVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertex),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox))) {
     EdbSegmentsBox *G__Lderived;
     G__Lderived=(EdbSegmentsBox*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPointsBox2D *G__Lpbase=(EdbPointsBox2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox),G__get_linked_tagnum(&G__EdrDictLN_EdbPointsBox2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint3D *G__Lpbase=(EdbPoint3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox),G__get_linked_tagnum(&G__EdrDictLN_EdbPoint3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox),G__get_linked_tagnum(&G__EdrDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox),G__get_linked_tagnum(&G__EdrDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP))) {
     EdbTrackP *G__Lderived;
     G__Lderived=(EdbTrackP*)0x1000;
     {
       EdbSegP *G__Lpbase=(EdbSegP*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP),G__get_linked_tagnum(&G__EdrDictLN_EdbSegP),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbTrack2D *G__Lpbase=(EdbTrack2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP),G__get_linked_tagnum(&G__EdrDictLN_EdbTrack2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP),G__get_linked_tagnum(&G__EdrDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP),G__get_linked_tagnum(&G__EdrDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbAngle2D *G__Lpbase=(EdbAngle2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP),G__get_linked_tagnum(&G__EdrDictLN_EdbAngle2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbPattern))) {
     EdbPattern *G__Lderived;
     G__Lderived=(EdbPattern*)0x1000;
     {
       EdbSegmentsBox *G__Lpbase=(EdbSegmentsBox*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPointsBox2D *G__Lpbase=(EdbPointsBox2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),G__get_linked_tagnum(&G__EdrDictLN_EdbPointsBox2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint3D *G__Lpbase=(EdbPoint3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),G__get_linked_tagnum(&G__EdrDictLN_EdbPoint3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),G__get_linked_tagnum(&G__EdrDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),G__get_linked_tagnum(&G__EdrDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbPatternsVolume))) {
     EdbPatternsVolume *G__Lderived;
     G__Lderived=(EdbPatternsVolume*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPatternsVolume),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple))) {
     EdbPatCouple *G__Lderived;
     G__Lderived=(EdbPatCouple*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec))) {
     EdbPVRec *G__Lderived;
     G__Lderived=(EdbPVRec*)0x1000;
     {
       EdbPatternsVolume *G__Lpbase=(EdbPatternsVolume*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec),G__get_linked_tagnum(&G__EdrDictLN_EdbPatternsVolume),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar))) {
     EdbVertexPar *G__Lderived;
     G__Lderived=(EdbVertexPar*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexRec))) {
     EdbVertexRec *G__Lderived;
     G__Lderived=(EdbVertexRec*)0x1000;
     {
       EdbVertexPar *G__Lpbase=(EdbVertexPar*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexRec),G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexRec),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbTopology))) {
     EdbTopology *G__Lderived;
     G__Lderived=(EdbTopology*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTopology),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexComb))) {
     EdbVertexComb *G__Lderived;
     G__Lderived=(EdbVertexComb*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexComb),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexSpace))) {
     EdbVertexSpace *G__Lderived;
     G__Lderived=(EdbVertexSpace*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexSpace),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter))) {
     EdbTrackFitter *G__Lderived;
     G__Lderived=(EdbTrackFitter*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter),G__get_linked_tagnum(&G__EdrDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbMomentumEstimator))) {
     EdbMomentumEstimator *G__Lderived;
     G__Lderived=(EdbMomentumEstimator*)0x1000;
     {
       EdbTrackFitter *G__Lpbase=(EdbTrackFitter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbMomentumEstimator),G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbMomentumEstimator),G__get_linked_tagnum(&G__EdrDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbMomentumEstimator),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdrDictLN_EdbPlateTracking))) {
     EdbPlateTracking *G__Lderived;
     G__Lderived=(EdbPlateTracking*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPlateTracking),G__get_linked_tagnum(&G__EdrDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableEdrDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("iterator<iterator_traits<string::iterator>::iterator_category,iterator_traits<string::iterator>::value_type,iterator_traits<string::iterator>::difference_type,iterator_traits<string::iterator>::pointer,iterator_traits<string::iterator>::reference>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long,char*>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<string::const_iterator>::iterator_category,iterator_traits<string::const_iterator>::value_type,iterator_traits<string::const_iterator>::difference_type,iterator_traits<string::const_iterator>::pointer,iterator_traits<string::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EdrDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EdrDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EdrDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EdrDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EdrDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EdrDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__EdrDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EdrDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EdrDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__EdrDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__EdrDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<Relation*>",117,G__get_linked_tagnum(&G__EdrDictLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<VERTEX::Relation*>",117,G__get_linked_tagnum(&G__EdrDictLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<MassC*>",117,G__get_linked_tagnum(&G__EdrDictLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<VERTEX::MassC*>",117,G__get_linked_tagnum(&G__EdrDictLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Track*>",117,G__get_linked_tagnum(&G__EdrDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<VERTEX::Track*>",117,G__get_linked_tagnum(&G__EdrDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EdrDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EdrDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::iterator_category,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::value_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::difference_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::pointer,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Track*>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Track*,long>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Track*,long,VERTEX::Track**>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EdrDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EdrDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::iterator_category,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::value_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::difference_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::pointer,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__EdrDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__EdrDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__EdrDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__EdrDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EdrDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EdrDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>::iterator_category,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>::value_type,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>::difference_type,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>::pointer,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>::reference>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,pair<unsigned int,int>,long>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,pair<unsigned int,int>,long,pair<unsigned int,int>*>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EdrDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EdrDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>::iterator_category,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>::value_type,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>::difference_type,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>::pointer,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* EdbVTA */
static void G__setup_memvarEdbVTA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVTA));
   { EdbVTA *p; p=(EdbVTA*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP),-1,-1,4,"eTrack=",0,"pointer to track (or segment)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbVertex),-1,-1,4,"eVertex=",0,"pointer to vertex");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eZpos=",0,"1-track start, 0-track end connect to the vertex");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFlag=",0,"0-neighbor track;");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eImp=",0,"impact parameter");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDist=",0,"distance from vertex to the nearest track point");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbVertex */
static void G__setup_memvarEdbVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertex));
   { EdbVertex *p; p=(EdbVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TList),-1,-1,4,"eVTn=",0,"vertex neighborhood tracks and segments");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TList),-1,-1,4,"eVTa=",0,"attached tracks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eX=",0,"for generated vertexes - the real vertex position ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eY=",0,"for reconstructed ones - average of track connection  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZ=",0,"points, used as local coordiantes origin (0,0,0) ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFlag=",0,"0 - neutral (tracks starts attached only)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eMCEvt=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eQuality=",0,"Probability/(vsigmax**2+vsigmay**2)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_VERTEXcLcLVertex),-1,-1,4,"eV=",0,"pointer to VtVertex object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbSegmentsBox */
static void G__setup_memvarEdbSegmentsBox(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox));
   { EdbSegmentsBox *p; p=(EdbSegmentsBox*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZ=",0,"central point");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClonesArray),-1,-1,4,"eSegments=",0,"collection of segments (EdbSegP)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDZkeep=",0,"eDZkeep = eZ - Zoriginal (before any projections)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbTrackP */
static void G__setup_memvarEdbTrackP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP));
   { EdbTrackP *p; p=(EdbTrackP*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TSortedList),-1,-1,4,"eS=",0,"array of segments");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TSortedList),-1,-1,4,"eSF=",0,"array of fitted segments");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNpl=",0,"number of plates passed through");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eN0=",0,"number of holes (if any)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eM=",0,"invariant mass of the particle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDE=",0,"total energy loss of the particle between first and last segments");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ePDG=",0,"particle ID from PDG");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ePerrUp=",0,"error of P() in upper direction, obtained by MCS,or shower-algorithm");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ePerrDown=",0,"error of P() in lower direction, obtained by MCS,or shower-algorithm");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbVTA),-1,-1,4,"eVTAS=",0,"! vertex track start is attached to");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbVTA),-1,-1,4,"eVTAE=",0,"! vertex track end is attached to");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPattern */
static void G__setup_memvarEdbPattern(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPattern));
   { EdbPattern *p; p=(EdbPattern*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID=",0,"pattern id in the volume");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ePID=",0,"correspond to the piece ID");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TIndexCell),-1,-1,4,"eCell=",0,"! associated with eSegments");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eStepX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eStepY=",0,"bin size for the index cell ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eStepTX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eStepTY=",0,"bin size for the index cell ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigma[4]=",0,"accuracy in comparison to neibour pattern");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFlag=",0,"pattern flag");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNAff=",0,"number of segments selected for affine calculation");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbID),-1,-1,4,"eScanID=",0,"! main scanning ID for this pattern, defined when possible");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eSide=",0,"! emulsion side 0/1/2, defined when possible");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPatternsVolume */
static void G__setup_memvarEdbPatternsVolume(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPatternsVolume));
   { EdbPatternsVolume *p; p=(EdbPatternsVolume*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZ=",0,"central point");
   G__memvar_setup((void*)((long)(&p->ePatterns)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,1,"ePatterns=",0,"collection of patterns");
   G__memvar_setup((void*)((long)(&p->eTracksCell)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TIndexCell),-1,-1,1,"eTracksCell=",0,"! \"vidt:vids\" - connected segments cell");
   G__memvar_setup((void*)((long)(&p->ePatternsCell)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TIndexCell),-1,-1,1,"ePatternsCell=",0,"! \"pid:id1:chi2:id2\" - all found couples");
   G__memvar_setup((void*)((long)(&p->eDescendingZ)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eDescendingZ=",0,"if =0 - z increase in the pattrens array; if =1 - decrease ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPatCouple */
static void G__setup_memvarEdbPatCouple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple));
   { EdbPatCouple *p; p=(EdbPatCouple*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID[2]=",0,"id-s of patterns in volume");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"eCoupleType=",0,"1 - up/down link; 0 - plate-to-plate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),-1,-1,4,"ePat1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),-1,-1,4,"ePat2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eOffset[4]=",0,"maximal allowed offset before alignment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigma[4]=",0,"expected pat<->pat sigma after alignment");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbAffine2D),-1,-1,4,"eAff=",0,"affine transformation as: pat2 = pat1->Transform(aff)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,4,"eSegCouples=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbScanCond),-1,-1,4,"eCond=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eZlink=",0,"at this z patterns should be linked (aligned)");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eXoffsetMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eYoffsetMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eChi2Max=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"eCHI2mode=",0,"algorithm used for chi2 calculation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPVRec */
static void G__setup_memvarEdbPVRec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec));
   { EdbPVRec *p; p=(EdbPVRec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,4,"ePatCouples=",0,"patterns couples");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eChi2Max=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"eVdiff[4]=",0,"how many ajenced bins should be taken into account");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbScanCond),-1,-1,4,"eScanCond=",0,"scanning conditions (sigma, puls, etc)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TIndexCell),-1,-1,4,"eTracksCell=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eTracks)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,1,"eTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eVTX)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,1,"eVTX=",0,"array of vertex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbVertexPar */
static void G__setup_memvarEdbVertexPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar));
   { EdbVertexPar *p; p=(EdbVertexPar*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eZbin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZbin=",0,"z- granularity (default is 100 microns)");
   G__memvar_setup((void*)((long)(&p->eAbin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eAbin=",0,"safety margin for angular aperture of vertex products");
   G__memvar_setup((void*)((long)(&p->eDZmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDZmax=",0,"maximum z-gap in the track-vertex group");
   G__memvar_setup((void*)((long)(&p->eProbMin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eProbMin=",0,"minimum acceptable probability for chi2-distance between tracks");
   G__memvar_setup((void*)((long)(&p->eImpMax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eImpMax=",0,"maximal acceptable impact parameter (preliminary check)");
   G__memvar_setup((void*)((long)(&p->eImpMaxV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eImpMaxV=",0,"if the impact is <= eImpMaxV the 2-vertex is accepted disregard to it's probability");
   G__memvar_setup((void*)((long)(&p->eUseMom)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eUseMom=",0,"use or not track momentum for vertex calculations");
   G__memvar_setup((void*)((long)(&p->eUseSegPar)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eUseSegPar=",0,"use only the nearest measured segments for vertex fit (as Neuchatel)");
   G__memvar_setup((void*)((long)(&p->eQualityMode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eQualityMode=",0,"vertex quality estimation method (0:=Prob/(sigVX^2+sigVY^2); 1:= inverse average track-vertex distance)");
   G__memvar_setup((void*)((long)(&p->eUseKalman)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eUseKalman=",0,"use or not Kalman for the vertex fit. Default is true");
   G__memvar_setup((void*)((long)(&p->eUseLimits)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eUseLimits=",0,"if true - look for the vertex only inside limits defined by eVmin:eVmax, default is false");
   G__memvar_setup((void*)((long)(&p->eVmin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TVector3),-1,-1,1,"eVmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eVmax)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TVector3),-1,-1,1,"eVmax=",0,"limits for the vertex search");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbVertexRec */
static void G__setup_memvarEdbVertexRec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexRec));
   { EdbVertexRec *p; p=(EdbVertexRec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbVertex),-1,-1,4,"eVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbVertex),-1,-1,4,"eWorking=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eVTA)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TList),-1,-1,1,"eVTA=",0,"vertex-track associations");
   G__memvar_setup((void*)((long)(&p->eEdbTracks)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,1,"eEdbTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eVTX)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,1,"eVTX=",0,"array of vertex");
   G__memvar_setup((void*)((long)(&p->ePVR)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec),-1,-1,1,"ePVR=",0,"patterns volume (optional)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbTopology */
static void G__setup_memvarEdbTopology(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTopology));
   { EdbTopology *p; p=(EdbTopology*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,4,"eVertices=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,4,"eTracks=",0,"detached tracks - part of the topology but not participated in any vtx");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbVertexComb */
static void G__setup_memvarEdbVertexComb(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexComb));
   { EdbVertexComb *p; p=(EdbVertexComb*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eTracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,1,"eTracks=",0,"input EdbTracks");
   G__memvar_setup((void*)((long)(&p->eRecursionMax)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eRecursionMax=",0,"number of vertex/event to be searched");
   G__memvar_setup((void*)((long)(&p->eRecursion)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eRecursion=",0,"recursion level (0 - no recursion)");
   G__memvar_setup((void*)((long)(&p->eCond)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbScanCond),-1,-1,1,"eCond=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eVPar)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar),-1,-1,1,"eVPar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZ0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ0=",0,"input parameter: the first approximation for the vertex z-position");
   G__memvar_setup((void*)((long)(&p->eProbMinV)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eProbMinV=",0,"min probability to accept the vertex for topology calculation");
   G__memvar_setup((void*)((long)(&p->eNProngMinV)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNProngMinV=",0,"min prongs to accept the vertex for topology calculation");
   G__memvar_setup((void*)((long)(&p->eProbDetached)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eProbDetached=",0,"default probability for the detached track (1-prong vertex)");
   G__memvar_setup((void*)((long)(&p->eVertices)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,1,"eVertices=",0,"output vertices");
   G__memvar_setup((void*)((long)(&p->eOther)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,1,"eOther=",0,"recursive array of EdbVertexComb objects in multyvertex case");
   G__memvar_setup((void*)((long)(&p->eTopologies)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,1,"eTopologies=",0,"found EdbTopologies sorted by rating");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbVertexSpace */
static void G__setup_memvarEdbVertexSpace(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexSpace));
   { EdbVertexSpace *p; p=(EdbVertexSpace*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eVmin[3]=",0,"x,y,z of min point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eVmax[3]=",0,"x,y,z of max point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eBin[3]=",0,"xyz bin sizes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNcell[3]=",0,"number of cells in each dimension");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TObjArray),-1,-1,4,"eCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbTrackFitter */
static void G__setup_memvarEdbTrackFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter));
   { EdbTrackFitter *p; p=(EdbTrackFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"eNsegMax=",0,"max number of segments (for arrays allocation)");
   G__memvar_setup((void*)((long)(&p->eX0)-(long)(p)),102,0,0,-1,-1,-1,1,"eX0=",0,"rad length of the media [microns]");
   G__memvar_setup((void*)((long)(&p->eM)-(long)(p)),102,0,0,-1,-1,-1,1,"eM=",0,"mass of the particle (if negative - use the mass setted in the track)");
   G__memvar_setup((void*)((long)(&p->ePdef)-(long)(p)),102,0,0,-1,-1,-1,1,"ePdef=",0,"default momentum");
   G__memvar_setup((void*)((long)(&p->eTPb)-(long)(p)),102,0,0,-1,-1,-1,1,"eTPb=",0,"?");
   G__memvar_setup((void*)((long)(&p->ePcut)-(long)(p)),102,0,0,-1,-1,-1,1,"ePcut=",0,"minimal momentum?");
   G__memvar_setup((void*)((long)(&p->eDE_correction)-(long)(p)),103,0,0,-1,-1,-1,1,"eDE_correction=",0,"take into account the energy loss or not");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbMomentumEstimator */
static void G__setup_memvarEdbMomentumEstimator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbMomentumEstimator));
   { EdbMomentumEstimator *p; p=(EdbMomentumEstimator*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eAlg)-(long)(p)),105,0,0,-1,-1,-1,1,"eAlg=",0,"select the algorithm for PMS estimation");
   G__memvar_setup((void*)((long)(&p->eStatus)-(long)(p)),105,0,0,-1,-1,-1,1,"eStatus=",0,"status of the estimation (-1 nothing was done)");
   G__memvar_setup((void*)((long)(&p->eMinEntr)-(long)(p)),105,0,0,-1,-1,-1,1,"eMinEntr=",0,"min number of entries in the cell to accept it for fitting (def=1)");
   G__memvar_setup((void*)((long)(&p->eDTxErrorFun)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TF1),-1,-1,1,"eDTxErrorFun=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDTyErrorFun)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TF1),-1,-1,1,"eDTyErrorFun=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDTsErrorFun)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_TF1),-1,-1,1,"eDTsErrorFun=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePx)-(long)(p)),102,0,0,-1,-1,-1,1,"ePx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePy)-(long)(p)),102,0,0,-1,-1,-1,1,"ePy=",0,"the estimated momentum");
   G__memvar_setup((void*)((long)(&p->eDPx)-(long)(p)),102,0,0,-1,-1,-1,1,"eDPx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDPy)-(long)(p)),102,0,0,-1,-1,-1,1,"eDPy=",0,"the fit error");
   G__memvar_setup((void*)((long)(&p->ePXmin)-(long)(p)),102,0,0,-1,-1,-1,1,"ePXmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePXmax)-(long)(p)),102,0,0,-1,-1,-1,1,"ePXmax=",0,"momentum 90% errors range");
   G__memvar_setup((void*)((long)(&p->ePYmin)-(long)(p)),102,0,0,-1,-1,-1,1,"ePYmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePYmax)-(long)(p)),102,0,0,-1,-1,-1,1,"ePYmax=",0,"momentum 90% errors range");
   G__memvar_setup((void*)((long)(&p->eP)-(long)(p)),102,0,0,-1,-1,-1,1,"eP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDP)-(long)(p)),102,0,0,-1,-1,-1,1,"eDP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePmin)-(long)(p)),102,0,0,-1,-1,-1,1,"ePmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePmax)-(long)(p)),102,0,0,-1,-1,-1,1,"ePmax=",0,"momentum 90% errors range");
   G__memvar_setup((void*)((long)(&p->eTrack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP),-1,-1,1,"eTrack=",0,"the copy of the track to be used for plots");
   G__memvar_setup((void*)((long)(&p->eVerbose)-(long)(p)),103,0,0,-1,-1,-1,1,"eVerbose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eF1X)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TF1),-1,-1,1,"eF1X=",0,"! fit function");
   G__memvar_setup((void*)((long)(&p->eF1Y)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TF1),-1,-1,1,"eF1Y=",0,"!");
   G__memvar_setup((void*)((long)(&p->eF1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TF1),-1,-1,1,"eF1=",0,"!");
   G__memvar_setup((void*)((long)(&p->eG)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TGraphErrors),-1,-1,1,"eG=",0,"! 3D component of the momentum");
   G__memvar_setup((void*)((long)(&p->eGX)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TGraphErrors),-1,-1,1,"eGX=",0,"! longitudianl component of the momentum");
   G__memvar_setup((void*)((long)(&p->eGY)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TGraphErrors),-1,-1,1,"eGY=",0,"! transverse   component of the momentum");
   G__memvar_setup((void*)((long)(&p->eGA)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TGraphAsymmErrors),-1,-1,1,"eGA=",0,"! 3D component of the momentum");
   G__memvar_setup((void*)((long)(&p->eGAX)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TGraphAsymmErrors),-1,-1,1,"eGAX=",0,"! longitudianl component of the momentum");
   G__memvar_setup((void*)((long)(&p->eGAY)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TGraphAsymmErrors),-1,-1,1,"eGAY=",0,"! transverse   component of the momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPlateTracking */
static void G__setup_memvarEdbPlateTracking(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPlateTracking));
   { EdbPlateTracking *p; p=(EdbPlateTracking*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ePred)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbSegP),-1,-1,1,"ePred=",0,"prediction to be found in this plate in Brick reference system");
   G__memvar_setup((void*)((long)(&p->eSide1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),-1,-1,1,"eSide1=",0,"side 1 microtracks in plate reference system ");
   G__memvar_setup((void*)((long)(&p->eSide2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),-1,-1,1,"eSide2=",0,"side 2 microtracks in plate reference system ");
   G__memvar_setup((void*)((long)(&p->ePlate)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPlateP),-1,-1,1,"ePlate=",0,"plate geometry and correction parameters to be applied to prediction");
   G__memvar_setup((void*)((long)(&p->eS)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbSegP),-1,-1,1,"eS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eS1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbSegP),-1,-1,1,"eS1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eS2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbSegP),-1,-1,1,"eS2=",0,"found segments");
   G__memvar_setup((void*)((long)(&p->eNext)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbSegP),-1,-1,1,"eNext=",0,"next prediction");
   G__memvar_setup((void*)((long)(&p->eStatus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eStatus=",0,"-1-nothing, 0-bt, 1-mt1, 2-mt2");
   G__memvar_setup((void*)((long)(&p->eCondMT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbScanCond),-1,-1,1,"eCondMT=",0,"conditions for microtracks");
   G__memvar_setup((void*)((long)(&p->eCondBT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbScanCond),-1,-1,1,"eCondBT=",0,"conditions for basetracks");
   G__memvar_setup((void*)((long)(&p->ePreliminaryChi2MaxMT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePreliminaryChi2MaxMT=",0,"(1.6) /  microtracks and basetracks selection");
   G__memvar_setup((void*)((long)(&p->eS1pre)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),-1,-1,1,"eS1pre=",0,"the result of the selection of microtracks ordered by chi square");
   G__memvar_setup((void*)((long)(&p->eS2pre)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),-1,-1,1,"eS2pre=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDeltaR)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDeltaR=",0,"(20) ");
   G__memvar_setup((void*)((long)(&p->eSpre)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),-1,-1,1,"eSpre=",0,"the result of the selection of basetracks ordered by chi square");
   G__memvar_setup((void*)((long)(&p->ePulsMinBT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePulsMinBT=",0,"(18)");
   G__memvar_setup((void*)((long)(&p->ePulsMinDegradMT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePulsMinDegradMT=",0,"(0)");
   G__memvar_setup((void*)((long)(&p->eChi2MaxBT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eChi2MaxBT=",0,"(1.5) maximum chi2 accepted between prediction and basetrack candidates");
   G__memvar_setup((void*)((long)(&p->eScnd)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),-1,-1,1,"eScnd=",0,"basetracks candidates passed all cuts");
   G__memvar_setup((void*)((long)(&p->ePulsMinMT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePulsMinMT=",0,"(10) mimimal number of grains accepted to select microtracks");
   G__memvar_setup((void*)((long)(&p->ePulsMinDegradBT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePulsMinDegradBT=",0,"(0)");
   G__memvar_setup((void*)((long)(&p->eChi2MaxMT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eChi2MaxMT=",0,"(1.6) maximum chi2 accepted between prediction and microtrack candidates");
   G__memvar_setup((void*)((long)(&p->eS1cnd)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),-1,-1,1,"eS1cnd=",0,"microtrack candidates passed all cuts");
   G__memvar_setup((void*)((long)(&p->eS2cnd)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EdrDictLN_EdbPattern),-1,-1,1,"eS2cnd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDegradPos)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDegradPos=",0,"SigmaX  = SigmaX(0)  + degradPos   * mth");
   G__memvar_setup((void*)((long)(&p->eDegradSlope)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDegradSlope=",0,"SigmaTX = SigmaTX(0) + degradSlope * bth");
   G__memvar_setup((void*)((long)(&p->eIdp)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eIdp[4]=",0,"to read from sbt ");
   G__memvar_setup((void*)((long)(&p->eIdf)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eIdf[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePredictionScan)-(long)(p)),103,0,0,-1,-1,-1,1,"ePredictionScan=",0,"if true use GetPatternDataForPrediction( spred.ID(), side, pat ); in FindCandidates (default is false)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdrDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarEdrDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEdbVTA(void) {
   /* EdbVTA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVTA));
   G__memfunc_setup("EdbVTA",502,G__EdrDict_596_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbVTA",502,G__EdrDict_596_0_2, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 0, 1, 1, 1, 0, "u 'EdbVTA' - 1 - vta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbVTA",502,G__EdrDict_596_0_3, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 0, 2, 1, 1, 0, 
"U 'EdbTrackP' - 0 - tr U 'EdbVertex' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zpos",428,G__EdrDict_596_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Flag",378,G__EdrDict_596_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Imp",294,G__EdrDict_596_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dist",404,G__EdrDict_596_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__EdrDict_596_0_8, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__EdrDict_596_0_9, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdrDict_596_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZpos",728,G__EdrDict_596_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - zpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlag",678,G__EdrDict_596_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImp",594,G__EdrDict_596_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - imp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDist",704,G__EdrDict_596_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrack",801,G__EdrDict_596_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbTrackP' - 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertex",938,G__EdrDict_596_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbVertex' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdrDict_596_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVandT",742,G__EdrDict_596_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_596_0_19, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbVTA::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_596_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVTA::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_596_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbVTA::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_596_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbVTA::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_596_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_596_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVTA::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_596_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVTA::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_596_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVTA::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_596_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVTA::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbVTA", 628, G__EdrDict_596_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdrDict_596_0_32, (int) ('u'), G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 1, 1, 1, 1, 0, "u 'EdbVTA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbVertex(void) {
   /* EdbVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertex));
   G__memfunc_setup("EdbVertex",905,G__EdrDict_597_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__EdrDict_597_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearV",573,G__EdrDict_597_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearNeighborhood",1727,G__EdrDict_597_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVTA",500,G__EdrDict_597_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbVTA' - 0 - vta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveVTA",857,G__EdrDict_597_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbVTA' - 0 - vta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetTracks",1131,G__EdrDict_597_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdrDict_597_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EstimateVertexMath",1860,G__EdrDict_597_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"f - - 1 - xv f - - 1 - yv "
"f - - 1 - zv f - - 1 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Edb2Vt",519,G__EdrDict_597_0_11, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbTrackP' - 11 - tr u 'VERTEX::Track' - 1 - t "
"f - - 0 '0.' X0 f - - 0 '0.139' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Edb2Vt",519,G__EdrDict_597_0_12, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbSegP' - 11 - s u 'VERTEX::Track' - 1 - t "
"f - - 0 '0.' X0 f - - 0 '0.139' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2Track",827,G__EdrDict_597_0_13, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"U 'EdbTrackP' - 0 - tr i - - 0 - zpos "
"f - - 0 '0.' X0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MinDist",696,G__EdrDict_597_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Volume",632,G__EdrDict_597_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxAperture",1134,G__EdrDict_597_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxImpact",900,G__EdrDict_597_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConnectedVertex",1841,G__EdrDict_597_0_18, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 1, 1, 1, 0, "i - - 0 - nv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConnectedVertexForTrack",2637,G__EdrDict_597_0_19, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 1, 1, 1, 0, "i - - 0 - it", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEqual",692,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("N",78,G__EdrDict_597_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nn",188,G__EdrDict_597_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nv",196,G__EdrDict_597_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Flag",378,G__EdrDict_597_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCEvt",447,G__EdrDict_597_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID",141,G__EdrDict_597_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zpos",428,G__EdrDict_597_0_27, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hash",388,(G__InterfaceMethod) NULL,107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("X",88,G__EdrDict_597_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__EdrDict_597_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__EdrDict_597_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VX",174,G__EdrDict_597_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VY",175,G__EdrDict_597_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VZ",176,G__EdrDict_597_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Quality",745,G__EdrDict_597_0_36, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VTa",267,G__EdrDict_597_0_37, 85, G__get_linked_tagnum(&G__EdrDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VTn",280,G__EdrDict_597_0_38, 85, G__get_linked_tagnum(&G__EdrDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVTa",555,G__EdrDict_597_0_39, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVTn",568,G__EdrDict_597_0_40, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__EdrDict_597_0_41, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackN",867,G__EdrDict_597_0_42, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackV",875,G__EdrDict_597_0_43, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 2, 1, 1, 0, 
"i - - 0 - i g - - 0 'false' usesegpar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxImpVTA",1111,G__EdrDict_597_0_44, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckImpGeom",1164,G__EdrDict_597_0_45, 102, -1, -1, 0, 1, 1, 1, 0, "U 'EdbTrackP' - 10 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckImp",772,G__EdrDict_597_0_46, 102, -1, -1, 0, 1, 1, 1, 0, "U 'EdbTrackP' - 10 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckImp",772,G__EdrDict_597_0_47, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 0, 4, 1, 1, 0, 
"U 'EdbTrackP' - 10 - tr f - - 0 - ImpMax "
"i - - 0 - zpos f - - 0 - dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Impact",606,G__EdrDict_597_0_48, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistSeg",691,G__EdrDict_597_0_49, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"U 'EdbSegP' - 0 - seg f - - 0 '0.' X0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistTrack",905,G__EdrDict_597_0_50, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"U 'EdbTrackP' - 0 - tr i - - 0 - zpos "
"f - - 0 '0.' X0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ImpTrack",795,G__EdrDict_597_0_51, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("V",86,G__EdrDict_597_0_52, 85, G__get_linked_tagnum(&G__EdrDictLN_VERTEXcLcLVertex), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__EdrDict_597_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' ID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXYZ",567,G__EdrDict_597_0_54, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlag",678,G__EdrDict_597_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMC",444,G__EdrDict_597_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' mEvt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetV",386,G__EdrDict_597_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "U 'VERTEX::Vertex' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQuality",1045,G__EdrDict_597_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 '0' q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackInVertex",1322,G__EdrDict_597_0_59, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'EdbTrackP' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckDiscardedTracks",1993,G__EdrDict_597_0_60, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EstimateVertexFlag",1844,G__EdrDict_597_0_61, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MeanTrack",886,G__EdrDict_597_0_62, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_597_0_63, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_597_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_597_0_65, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_597_0_66, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_597_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_597_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_597_0_72, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_597_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_597_0_74, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVertex::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbVertex", 1031, G__EdrDict_597_0_75, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbSegmentsBox(void) {
   /* EdbSegmentsBox */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox));
   G__memfunc_setup("SetZ",390,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EdbSegmentsBox",1402,G__EdrDict_598_0_2, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox), -1, 0, 1, 1, 1, 0, "i - - 0 '0' nseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbSegmentsBox",1402,G__EdrDict_598_0_3, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox), -1, 0, 1, 1, 1, 0, "u 'EdbSegmentsBox' - 1 - box", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbSegmentsBox",1402,G__EdrDict_598_0_4, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox), -1, 0, 4, 1, 1, 0, 
"f - - 0 - x0 f - - 0 - y0 "
"f - - 0 - z0 i - - 0 '0' nseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__EdrDict_598_0_5, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 2, 1, 1, 0, 
"i - - 0 - i u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__EdrDict_598_0_6, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__EdrDict_598_0_7, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__EdrDict_598_0_8, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 7, 1, 1, 0, 
"i - - 0 - id f - - 0 - x "
"f - - 0 - y f - - 0 - tx "
"f - - 0 - ty f - - 0 '0' w "
"i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegmentNoDuplicate",2100,G__EdrDict_598_0_9, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN",366,G__EdrDict_598_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegment",1011,G__EdrDict_598_0_11, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentLast",1415,G__EdrDict_598_0_12, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegments",1126,G__EdrDict_598_0_13, 85, G__get_linked_tagnum(&G__EdrDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentsAddr",1505,G__EdrDict_598_0_14, 89, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentsZ",1228,G__EdrDict_598_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentsDZ",1296,G__EdrDict_598_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentsPlate",1640,G__EdrDict_598_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetY",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("X",88,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Z",90,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DZ",158,G__EdrDict_598_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N",78,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("At",181,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_EdbPoint), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Set0",348,G__EdrDict_598_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__EdrDict_598_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProjectTo",922,G__EdrDict_598_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 10 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformA",1021,G__EdrDict_598_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - affA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformARot",1330,G__EdrDict_598_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - affA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformShr",1257,G__EdrDict_598_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 10 - shr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateXY",1087,G__EdrDict_598_0_33, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'EdbSegmentsBox' - 0 - p U 'EdbAffine2D' - 0 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateAXAY",1217,G__EdrDict_598_0_34, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'EdbSegmentsBox' - 0 - p U 'EdbAffine2D' - 0 - affA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DiffAff",646,G__EdrDict_598_0_35, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 0 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Diff",377,G__EdrDict_598_0_36, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'EdbSegmentsBox' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__EdrDict_598_0_37, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - XorY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeX",787,G__EdrDict_598_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeY",788,G__EdrDict_598_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeXY",876,G__EdrDict_598_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackDensity",1525,G__EdrDict_598_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackDensitymm2",1793,G__EdrDict_598_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_598_0_43, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbSegmentsBox::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_598_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegmentsBox::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_598_0_45, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbSegmentsBox::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_598_0_46, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbSegmentsBox::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_598_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_598_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegmentsBox::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_598_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegmentsBox::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_598_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegmentsBox::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_598_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegmentsBox::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbSegmentsBox", 1528, G__EdrDict_598_0_55, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdrDict_598_0_56, (int) ('u'), G__get_linked_tagnum(&G__EdrDictLN_EdbSegmentsBox), -1, 1, 1, 1, 1, 0, "u 'EdbSegmentsBox' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbTrackP(void) {
   /* EdbTrackP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP));
   G__memfunc_setup("EdbTrackP",848,G__EdrDict_599_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "i - - 0 '0' nseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbTrackP",848,G__EdrDict_599_0_2, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbTrackP",848,G__EdrDict_599_0_3, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 2, 1, 1, 0, 
"U 'EdbSegP' - 0 - seg f - - 0 '0.12' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbTrackP",848,G__EdrDict_599_0_4, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdrDict_599_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwner",823,G__EdrDict_599_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVTA",500,G__EdrDict_599_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbVTA' - 0 - vta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearVTA",722,G__EdrDict_599_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearVTA",722,G__EdrDict_599_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbVTA' - 0 - vta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VTAS",318,G__EdrDict_599_0_10, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VTAE",304,G__EdrDict_599_0_11, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexS",721,G__EdrDict_599_0_12, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexE",707,G__EdrDict_599_0_13, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vertex",638,G__EdrDict_599_0_14, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 1, 1, 1, 0, "i - - 0 - zpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPDG",519,G__EdrDict_599_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PDG",219,G__EdrDict_599_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Wmean",504,G__EdrDict_599_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetM",377,G__EdrDict_599_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("M",77,G__EdrDict_599_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCounters",1151,G__EdrDict_599_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetN0",426,G__EdrDict_599_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetN0",426,G__EdrDict_599_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N0",126,G__EdrDict_599_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDE",437,G__EdrDict_599_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - de", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DE",137,G__EdrDict_599_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNpl",598,G__EdrDict_599_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - npl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNpl",598,G__EdrDict_599_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Npl",298,G__EdrDict_599_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N",78,G__EdrDict_599_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NF",148,G__EdrDict_599_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBTEfficiency",1451,G__EdrDict_599_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Wgrains",731,G__EdrDict_599_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentsFlag",1504,G__EdrDict_599_0_33, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - - 1 - nseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentsAid",1396,G__EdrDict_599_0_34, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - - 1 - nseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentsMCTrack",1771,G__EdrDict_599_0_35, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - - 1 - nseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentWithClosestZ",2246,G__EdrDict_599_0_36, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 2, 1, 1, 0, 
"f - - 0 - z f - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentFirst",1531,G__EdrDict_599_0_37, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentLast",1415,G__EdrDict_599_0_38, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentFFirst",1601,G__EdrDict_599_0_39, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentFLast",1485,G__EdrDict_599_0_40, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegment",1011,G__EdrDict_599_0_41, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentF",1081,G__EdrDict_599_0_42, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackZmin",915,G__EdrDict_599_0_43, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 1, 1, 1, 8, "g - - 0 'false' usesegpar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackZmax",917,G__EdrDict_599_0_44, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 1, 1, 1, 8, "g - - 0 'false' usesegpar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackExtremity",1472,G__EdrDict_599_0_45, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 2, 1, 1, 8, 
"g - - 0 - zpos g - - 0 'false' usesegpar", "0-end, 1-start (as in vertex class)", (void*) NULL, 0);
   G__memfunc_setup("TrackStart",1027,G__EdrDict_599_0_46, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackEnd",780,G__EdrDict_599_0_47, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dir",287,G__EdrDict_599_0_48, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zmax",416,G__EdrDict_599_0_49, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zmin",414,G__EdrDict_599_0_50, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zstart",648,G__EdrDict_599_0_51, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zend",401,G__EdrDict_599_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__EdrDict_599_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 11 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__EdrDict_599_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbSegP' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveSegment",1345,G__EdrDict_599_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbSegP' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SubstituteSegment",1807,G__EdrDict_599_0_56, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbSegP' - 0 - sold U 'EdbSegP' - 0 - snew", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegmentF",1058,G__EdrDict_599_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbSegP' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveAliasSegments",1950,G__EdrDict_599_0_58, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckMaxGap",1052,G__EdrDict_599_0_59, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckAliasSegments",1806,G__EdrDict_599_0_60, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentsTrack",1639,G__EdrDict_599_0_61, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentsTrack",1639,G__EdrDict_599_0_62, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTrackKFS",1020,G__EdrDict_599_0_63, 105, -1, -1, 0, 3, 1, 1, 0, 
"g - - 0 'false' zmax f - - 0 '5810.' X0 "
"i - - 0 '0' design", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeSelector",1215,G__EdrDict_599_0_64, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - ss g - - 0 'true' followZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakePredictionTo",1618,G__EdrDict_599_0_65, 102, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - z u 'EdbSegP' - 1 - ss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CHI2",262,G__EdrDict_599_0_66, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CHI2F",332,G__EdrDict_599_0_67, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTrack",792,G__EdrDict_599_0_68, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__EdrDict_599_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 11 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Transform",956,G__EdrDict_599_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbAffine2D' - 11 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPerrUp",906,G__EdrDict_599_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - perrUp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPerrDown",1117,G__EdrDict_599_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - perrDown", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPerr",709,G__EdrDict_599_0_73, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - perrDown f - 'Float_t' 0 - perrUp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PerrUp",606,G__EdrDict_599_0_74, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PerrDown",817,G__EdrDict_599_0_75, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__EdrDict_599_0_76, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearF",557,G__EdrDict_599_0_77, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdrDict_599_0_78, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintNice",908,G__EdrDict_599_0_79, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_599_0_80, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbTrackP::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_599_0_81, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrackP::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_599_0_82, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbTrackP::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_599_0_83, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbTrackP::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_599_0_87, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_599_0_88, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrackP::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_599_0_89, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTrackP::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_599_0_90, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrackP::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_599_0_91, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTrackP::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbTrackP", 974, G__EdrDict_599_0_92, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdrDict_599_0_93, (int) ('u'), G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 1, 1, 1, 1, 0, "u 'EdbTrackP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPattern(void) {
   /* EdbPattern */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPattern));
   G__memfunc_setup("EdbPattern",1001,G__EdrDict_600_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbPattern",1001,G__EdrDict_600_0_2, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 1, 1, 1, 0, "u 'EdbPattern' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbPattern",1001,G__EdrDict_600_0_3, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 4, 1, 1, 0, 
"f - - 0 - x0 f - - 0 - y0 "
"f - - 0 - z0 i - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdrDict_600_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScanID",830,G__EdrDict_600_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma",797,G__EdrDict_600_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - sx f - - 0 - sy "
"f - - 0 - stx f - - 0 - sty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStep",712,G__EdrDict_600_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - stepx f - - 0 - stepy "
"f - - 0 - steptx f - - 0 - stepty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__EdrDict_600_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SummaryPath",1147,G__EdrDict_600_0_9, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCell",775,G__EdrDict_600_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - stepx f - - 0 - stepy "
"f - - 0 - steptx f - - 0 - stepty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCompliments",1548,G__EdrDict_600_0_11, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbSegP' - 1 - s u 'TObjArray' - 1 - arr "
"f - - 0 - nsig f - - 0 - nsigt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentsPID",1359,G__EdrDict_600_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentsScanID",1668,G__EdrDict_600_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractSubPattern",1763,G__EdrDict_600_0_14, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 3, 1, 1, 0, 
"F - - 0 - min F - - 0 - max "
"i - - 0 '-1' MCevt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__EdrDict_600_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPID",521,G__EdrDict_600_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNAff",647,G__EdrDict_600_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSide",689,G__EdrDict_600_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NAff",347,G__EdrDict_600_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StepX",500,G__EdrDict_600_0_20, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StepY",501,G__EdrDict_600_0_21, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StepTX",584,G__EdrDict_600_0_22, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StepTY",585,G__EdrDict_600_0_23, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID",141,G__EdrDict_600_0_24, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PID",221,G__EdrDict_600_0_25, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cell",384,G__EdrDict_600_0_26, 85, G__get_linked_tagnum(&G__EdrDictLN_TIndexCell), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindSegment",1108,G__EdrDict_600_0_27, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmean",505,G__EdrDict_600_0_28, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ymean",506,G__EdrDict_600_0_29, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanID",530,G__EdrDict_600_0_30, 117, G__get_linked_tagnum(&G__EdrDictLN_EdbID), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Plate",502,G__EdrDict_600_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Side",389,G__EdrDict_600_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_600_0_33, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPattern::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_600_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPattern::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_600_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPattern::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_600_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPattern::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_600_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_600_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPattern::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_600_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPattern::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_600_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPattern::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_600_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPattern::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPattern", 1127, G__EdrDict_600_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdrDict_600_0_46, (int) ('u'), G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 1, 1, 1, 1, 0, "u 'EdbPattern' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPatternsVolume(void) {
   /* EdbPatternsVolume */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPatternsVolume));
   G__memfunc_setup("EdbPatternsVolume",1748,G__EdrDict_601_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbPatternsVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbPatternsVolume",1748,G__EdrDict_601_0_2, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbPatternsVolume), -1, 0, 1, 1, 1, 0, "u 'EdbPatternsVolume' - 1 - pvol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdrDict_601_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPatternsID",1290,G__EdrDict_601_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Transform",956,G__EdrDict_601_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Shift",510,G__EdrDict_601_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Centralize",1041,G__EdrDict_601_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Centralize",1041,G__EdrDict_601_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - xc f - - 0 - yc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXYZ",567,G__EdrDict_601_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__EdrDict_601_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__EdrDict_601_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__EdrDict_601_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Npatterns",959,G__EdrDict_601_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmean",505,G__EdrDict_601_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ymean",506,G__EdrDict_601_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PassProperties",1476,G__EdrDict_601_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPatternsVolume' - 1 - pvol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPattern",999,G__EdrDict_601_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPattern' - 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPatternAt",1180,G__EdrDict_601_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbPattern' - 0 - pat i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPattern",1022,G__EdrDict_601_0_19, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 1, 1, 1, 8, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternZLowestHighest",2466,G__EdrDict_601_0_20, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kTRUE' lowestZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternPreceding",1935,G__EdrDict_601_0_21, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 1, 1, 1, 8, "U 'EdbPattern' - 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternSucceding",1939,G__EdrDict_601_0_22, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 1, 1, 1, 8, "U 'EdbPattern' - 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NextPattern",1149,G__EdrDict_601_0_23, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 2, 1, 1, 8, 
"f - - 0 - z i - - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternNext",1437,G__EdrDict_601_0_24, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 2, 1, 1, 8, 
"f - - 0 - z i - - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternByPID",1430,G__EdrDict_601_0_25, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 1, 1, 1, 8, "i - - 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternByZ",1299,G__EdrDict_601_0_26, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 2, 1, 1, 8, 
"f - - 0 - z f - - 0 '5' tolerance", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DropCell",789,G__EdrDict_601_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintStat",937,G__EdrDict_601_0_28, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintStat",937,G__EdrDict_601_0_29, 121, -1, -1, 0, 1, 1, 1, 8, "u 'EdbPattern' - 1 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintAff",794,G__EdrDict_601_0_30, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DropCouples",1136,G__EdrDict_601_0_31, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vid",291,G__EdrDict_601_0_32, 108, -1, G__defined_typename("Long_t"), 0, 2, 1, 1, 8, 
"i - - 0 - pid i - - 0 - sid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pid",285,G__EdrDict_601_0_33, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "l - 'Long_t' 0 - vid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sid",288,G__EdrDict_601_0_34, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "l - 'Long_t' 0 - vid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegment",1011,G__EdrDict_601_0_35, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 1, 1, 1, 8, "l - 'Long_t' 0 - vid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindComplimentsVol",1853,G__EdrDict_601_0_36, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbSegP' - 1 - s u 'TObjArray' - 1 - arr "
"f - - 0 - nsig f - - 0 - nsigt "
"i - - 0 - dpat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternByPlate",1711,G__EdrDict_601_0_37, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 2, 1, 1, 0, 
"i - - 0 - plate i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InsertPattern",1363,G__EdrDict_601_0_38, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 2, 1, 1, 0, 
"U 'EdbPattern' - 0 - pat g - 'Bool_t' 0 '0' descendingZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortPatternsByZ",1550,G__EdrDict_601_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 '0' descendingZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdrDict_601_0_40, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_601_0_41, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPatternsVolume::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_601_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPatternsVolume::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_601_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPatternsVolume::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_601_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPatternsVolume::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_601_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_601_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPatternsVolume::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_601_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPatternsVolume::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_601_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPatternsVolume::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_601_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPatternsVolume::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPatternsVolume", 1874, G__EdrDict_601_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdrDict_601_0_54, (int) ('u'), G__get_linked_tagnum(&G__EdrDictLN_EdbPatternsVolume), -1, 1, 1, 1, 1, 0, "u 'EdbPatternsVolume' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPatCouple(void) {
   /* EdbPatCouple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple));
   G__memfunc_setup("EdbPatCouple",1176,G__EdrDict_654_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__EdrDict_654_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOffsetsMax",1324,G__EdrDict_654_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - ox f - - 0 - oy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOffset",915,G__EdrDict_654_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - o1 f - - 0 - o2 "
"f - - 0 - o3 f - - 0 - o4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma",797,G__EdrDict_654_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - s1 f - - 0 - s2 "
"f - - 0 - s3 f - - 0 - s4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZlink",820,G__EdrDict_654_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPat1",642,G__EdrDict_654_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPattern' - 0 - pat1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPat2",643,G__EdrDict_654_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPattern' - 0 - pat2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCond",688,G__EdrDict_654_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbScanCond' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAff",557,G__EdrDict_654_0_10, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbAffine2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cond",388,G__EdrDict_654_0_11, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbScanCond), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zlink",520,G__EdrDict_654_0_12, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ncouples",841,G__EdrDict_654_0_13, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearSegCouples",1505,G__EdrDict_654_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegCouple",1168,G__EdrDict_654_0_15, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegCouple), -1, 0, 2, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegCouple",1191,G__EdrDict_654_0_16, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegCouple), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveSegCouple",1525,G__EdrDict_654_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbSegCouple' - 0 - sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pat1",342,G__EdrDict_654_0_18, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pat2",343,G__EdrDict_654_0_19, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkSlow",819,G__EdrDict_654_0_20, 105, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - chi2max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkFast",796,G__EdrDict_654_0_21, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckSegmentsDuplication",2464,G__EdrDict_654_0_22, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPattern' - 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DiffPat",670,G__EdrDict_654_0_23, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbPattern' - 0 - pat1 U 'EdbPattern' - 0 - pat2 "
"L - 'Long_t' 0 - vdiff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DiffPatCell",1054,G__EdrDict_654_0_24, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'TIndexCell' - 0 - cel1 U 'TIndexCell' - 0 - cel2 "
"L - 'Long_t' 0 - vdiff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCHI2mode",983,G__EdrDict_654_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CHI2mode",683,G__EdrDict_654_0_26, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2Pz0",576,G__EdrDict_654_0_27, 102, -1, -1, 0, 1, 1, 1, 0, "U 'EdbSegCouple' - 0 - scp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2A",391,G__EdrDict_654_0_28, 102, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbSegCouple' - 0 - scp i - - 0 '1' iprob", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2A",391,G__EdrDict_654_0_29, 102, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbSegP' - 0 - s1 U 'EdbSegP' - 0 - s2 "
"i - - 0 '1' iprob", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2KF",471,G__EdrDict_654_0_30, 102, -1, -1, 0, 1, 1, 1, 0, "U 'EdbSegCouple' - 0 - scp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCHI2",653,G__EdrDict_654_0_31, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCHI2P",733,G__EdrDict_654_0_32, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectIsolated",1429,G__EdrDict_654_0_33, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CutCHI2P",642,G__EdrDict_654_0_34, 105, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - chimax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortByCHI2P",953,G__EdrDict_654_0_35, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintCouples",1256,G__EdrDict_654_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Align",491,G__EdrDict_654_0_37, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - alignFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindOffset0",1048,G__EdrDict_654_0_38, 105, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - xmax f - - 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindOffset01",1097,G__EdrDict_654_0_39, 105, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - xmax f - - 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindOffset1",1049,G__EdrDict_654_0_40, 105, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - xmax f - - 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindOffset",1000,G__EdrDict_654_0_41, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbPattern' - 0 - pat1 U 'EdbPattern' - 0 - pat2 "
"L - 'Long_t' 0 - vdiff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateAffXY",1356,G__EdrDict_654_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - alignFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateAffXYZ",1446,G__EdrDict_654_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - z i - - 0 - alignFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCell_XYaXaY",1418,G__EdrDict_654_0_44, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbScanCond' - 0 - cond f - - 0 - zlink "
"i - - 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCell_XYaXaY",1418,G__EdrDict_654_0_45, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'EdbPattern' - 0 - pat U 'EdbScanCond' - 0 - cond "
"f - - 0 - dz f - - 0 - stepx "
"f - - 0 - stepy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID1",190,G__EdrDict_654_0_46, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID2",191,G__EdrDict_654_0_47, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OffsetX",703,G__EdrDict_654_0_48, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OffsetY",704,G__EdrDict_654_0_49, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OffsetTX",787,G__EdrDict_654_0_50, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OffsetTY",788,G__EdrDict_654_0_51, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaX",585,G__EdrDict_654_0_52, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaY",586,G__EdrDict_654_0_53, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaTX",669,G__EdrDict_654_0_54, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SigmaTY",670,G__EdrDict_654_0_55, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_654_0_56, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPatCouple::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_654_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPatCouple::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_654_0_58, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPatCouple::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_654_0_59, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPatCouple::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_654_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_654_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPatCouple::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_654_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPatCouple::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_654_0_66, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPatCouple::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_654_0_67, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPatCouple::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbPatCouple", 1176, G__EdrDict_654_0_68, (int) ('i'), G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple), -1, 0, 1, 1, 1, 0, "u 'EdbPatCouple' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbPatCouple", 1302, G__EdrDict_654_0_69, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdrDict_654_0_70, (int) ('u'), G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple), -1, 1, 1, 1, 1, 0, "u 'EdbPatCouple' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPVRec(void) {
   /* EdbPVRec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec));
   G__memfunc_setup("EdbPVRec",715,G__EdrDict_655_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DummyCycle",1020,G__EdrDict_655_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCell",775,G__EdrDict_655_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - stepx f - - 0 - stepy "
"f - - 0 - steptx f - - 0 - stepty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScanCond",1077,G__EdrDict_655_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbScanCond' - 0 - scan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScanCond",1065,G__EdrDict_655_0_5, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbScanCond), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinsCheck",1174,G__EdrDict_655_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - nx i - - 0 - ny "
"i - - 0 - ntx i - - 0 - nty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCouple",881,G__EdrDict_655_0_7, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple), -1, 0, 2, 1, 1, 0, 
"i - - 0 - id1 i - - 0 - id2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCouple",881,G__EdrDict_655_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPatCouple' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCouples",1031,G__EdrDict_655_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCouples",1246,G__EdrDict_655_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteCouples",1326,G__EdrDict_655_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCouplesAll",1312,G__EdrDict_655_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCouplesPeriodic",1846,G__EdrDict_655_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - istart i - - 0 - iperiod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCouplesExclude",1745,G__EdrDict_655_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayI' - 1 - exclude", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2Max",620,G__EdrDict_655_0_15, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChi2Max",920,G__EdrDict_655_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - chi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ncouples",841,G__EdrDict_655_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCouple",904,G__EdrDict_655_0_18, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPatCouple), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTracksCell",1288,G__EdrDict_655_0_19, 85, G__get_linked_tagnum(&G__EdrDictLN_TIndexCell), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetTracks",1131,G__EdrDict_655_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2Fast",724,G__EdrDict_655_0_21, 102, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeTracks",1112,G__EdrDict_655_0_22, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '2' maxgap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeTracks1",1161,G__EdrDict_655_0_23, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - maxgap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTracks",998,G__EdrDict_655_0_24, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 '2' nsegments i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTracks",907,G__EdrDict_655_0_25, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 '10.' p f - - 0 '0.139' mass "
"U 'TObjArray' - 0 '0' gener i - - 0 '0' design", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ntracks",726,G__EdrDict_655_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkSlow",819,G__EdrDict_655_0_27, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Link",398,G__EdrDict_655_0_28, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Align",491,G__EdrDict_655_0_29, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - alignFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignOld",778,G__EdrDict_655_0_30, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - alignFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignPlates",1108,G__EdrDict_655_0_31, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbScanSet' - 1 - sci u 'EdbScanSet' - 1 - sca "
"C - - 10 '0' reportdir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTracksCellFast",1789,G__EdrDict_655_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCouplesToTracks",1807,G__EdrDict_655_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbPatCouple' - 0 - pc u 'TIndex2' - 1 - itracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCouplesToTracksM",1884,G__EdrDict_655_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbPatCouple' - 0 - pc u 'TIndex2' - 1 - itracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTracksCell2",1441,G__EdrDict_655_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTracksCell1",1440,G__EdrDict_655_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTracksCell",1391,G__EdrDict_655_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeHoles",889,G__EdrDict_655_0_38, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ort", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InsertHole",1021,G__EdrDict_655_0_39, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbSegP' - 10 - s1 U 'EdbSegP' - 10 - s2 "
"i - - 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CollectSegment",1433,G__EdrDict_655_0_40, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'TIndexCell' - 0 - ct U 'TIndexCell' - 0 - cross", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CollectSegment1",1482,G__EdrDict_655_0_41, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'TIndexCell' - 0 - ct U 'THashList' - 0 - cross", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectLongTracks",1624,G__EdrDict_655_0_42, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nsegments", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeSummaryTracks",1748,G__EdrDict_655_0_43, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineCorrXY",969,G__EdrDict_655_0_44, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - ipat u 'EdbAffine2D' - 1 - aff "
"i - - 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineCorrTXTY",1137,G__EdrDict_655_0_45, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ipat u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineCorrZ",882,G__EdrDict_655_0_46, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ipat f - - 1 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineCorrZnew",1212,G__EdrDict_655_0_47, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineCorrShr",1093,G__EdrDict_655_0_48, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ipat f - - 1 - shr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineCorrF",862,G__EdrDict_655_0_49, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - ipat u 'EdbAffine2D' - 1 - aff "
"u 'EdbAffine2D' - 1 - afft", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentsTracks",1754,G__EdrDict_655_0_50, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOffsetsMax",1324,G__EdrDict_655_0_51, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - ox f - - 0 - oy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentsErrors",1775,G__EdrDict_655_0_52, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentErrors",1660,G__EdrDict_655_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentProbability",2176,G__EdrDict_655_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__EdrDict_655_0_55, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTrack",886,G__EdrDict_655_0_56, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 1, 1, 1, 8, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindSegment",1108,G__EdrDict_655_0_57, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 2, 1, 1, 8, 
"i - - 0 - PlateID i - - 0 - SegmentID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__EdrDict_655_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbTrackP' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVertex",903,G__EdrDict_655_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbVertex' - 0 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nvtx",432,G__EdrDict_655_0_60, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__EdrDict_655_0_61, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTracks",904,G__EdrDict_655_0_62, 85, G__get_linked_tagnum(&G__EdrDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertices",1125,G__EdrDict_655_0_63, 85, G__get_linked_tagnum(&G__EdrDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NSeg",365,G__EdrDict_655_0_64, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractDataVolumeSeg",2028,G__EdrDict_655_0_65, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbTrackP' - 1 - tr u 'TObjArray' - 1 - arr "
"f - - 0 - binx f - - 0 - bint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractDataVolumeSegAll",2309,G__EdrDict_655_0_66, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CombTracks",1001,G__EdrDict_655_0_67, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - nplmin i - - 0 - ngapMax "
"f - - 0 '0.01' probMin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateTracks",1547,G__EdrDict_655_0_68, 105, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - nplmax i - - 0 - nplmin "
"f - - 0 '0.05' probMin i - - 0 '3' ngapMax "
"i - - 0 '0' design", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateTrack",1432,G__EdrDict_655_0_69, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbTrackP' - 1 - tr g - - 0 - followZ "
"f - - 0 '0.05' probMin i - - 0 '3' ngapMax "
"i - - 0 '0' design", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbeSeg",791,G__EdrDict_655_0_70, 100, -1, -1, 0, 3, 3, 1, 0, 
"U 'EdbTrackP' - 10 - s1 U 'EdbTrackP' - 0 - s2 "
"f - - 10 '5810.' X0", (char*)NULL, (void*) G__func2void( (double (*)(const EdbTrackP*, EdbTrackP*, const float))(&EdbPVRec::ProbeSeg) ), 0);
   G__memfunc_setup("ProbeSeg",791,G__EdrDict_655_0_71, 100, -1, -1, 0, 3, 3, 1, 0, 
"U 'EdbTrackP' - 10 - s1 U 'EdbSegP' - 0 - s2 "
"f - - 10 '5810.' X0", (char*)NULL, (void*) G__func2void( (double (*)(const EdbTrackP*, EdbSegP*, const float))(&EdbPVRec::ProbeSeg) ), 0);
   G__memfunc_setup("ProbeSeg",791,G__EdrDict_655_0_72, 100, -1, -1, 0, 4, 3, 1, 0, 
"U 'EdbSegP' - 10 - s1 U 'EdbSegP' - 0 - s2 "
"f - - 10 '5810.' X0 f - - 10 '0.1396' mass", (char*)NULL, (void*) G__func2void( (double (*)(const EdbSegP*, EdbSegP*, const float, const float))(&EdbPVRec::ProbeSeg) ), 0);
   G__memfunc_setup("AttachSeg",884,G__EdrDict_655_0_73, 103, -1, -1, 0, 5, 3, 1, 0, 
"u 'EdbTrackP' - 1 - tr U 'EdbSegP' - 0 - s "
"f - - 10 - X0 f - - 10 - ProbMin "
"f - - 1 - prob", (char*)NULL, (void*) G__func2void( (bool (*)(EdbTrackP&, EdbSegP*, const float, const float, float&))(&EdbPVRec::AttachSeg) ), 0);
   G__memfunc_setup("GetPatternByPID",1430,G__EdrDict_655_0_74, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbPattern), -1, 0, 1, 1, 1, 0, "i - - 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegments",1103,G__EdrDict_655_0_75, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPVRec' - 1 - ali", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegments",1103,G__EdrDict_655_0_76, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__EdrDict_655_0_77, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbSegP), -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScanIDPatSeg",1410,G__EdrDict_655_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScanIDTrackSeg",1618,G__EdrDict_655_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbID' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmin",412,G__EdrDict_655_0_80, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmax",414,G__EdrDict_655_0_81, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ymin",413,G__EdrDict_655_0_82, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ymax",415,G__EdrDict_655_0_83, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintSummary",1275,G__EdrDict_655_0_84, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_655_0_85, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPVRec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_655_0_86, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPVRec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_655_0_87, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPVRec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_655_0_88, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPVRec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_655_0_92, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_655_0_93, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPVRec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_655_0_94, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPVRec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_655_0_95, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPVRec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_655_0_96, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPVRec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbPVRec", 715, G__EdrDict_655_0_97, (int) ('i'), G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec), -1, 0, 1, 1, 1, 0, "u 'EdbPVRec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbPVRec", 841, G__EdrDict_655_0_98, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdrDict_655_0_99, (int) ('u'), G__get_linked_tagnum(&G__EdrDictLN_EdbPVRec), -1, 1, 1, 1, 1, 0, "u 'EdbPVRec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbVertexPar(void) {
   /* EdbVertexPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar));
   G__memfunc_setup("EdbVertexPar",1196,G__EdrDict_752_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_752_0_2, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbVertexPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_752_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_752_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbVertexPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_752_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbVertexPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_752_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_752_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_752_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVertexPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_752_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_752_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVertexPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbVertexPar", 1196, G__EdrDict_752_0_14, (int) ('i'), G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar), -1, 0, 1, 1, 1, 0, "u 'EdbVertexPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbVertexPar", 1322, G__EdrDict_752_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdrDict_752_0_16, (int) ('u'), G__get_linked_tagnum(&G__EdrDictLN_EdbVertexPar), -1, 1, 1, 1, 1, 0, "u 'EdbVertexPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbVertexRec(void) {
   /* EdbVertexRec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexRec));
   G__memfunc_setup("EdbVertexRec",1187,G__EdrDict_753_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbVertexRec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbVertexRec",1187,G__EdrDict_753_0_2, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbVertexRec), -1, 0, 1, 1, 1, 0, "u 'EdbVertexPar' - 1 - vpar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdrDict_753_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__EdrDict_753_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vmin",410,G__EdrDict_753_0_5, 85, G__get_linked_tagnum(&G__EdrDictLN_TVector3), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vmax",412,G__EdrDict_753_0_6, 85, G__get_linked_tagnum(&G__EdrDictLN_TVector3), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RefitAll",787,G__EdrDict_753_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AcceptPolish",1215,G__EdrDict_753_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RejectPolish",1228,G__EdrDict_753_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StatVertexN",1128,G__EdrDict_753_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AcceptModifiedVTX",1651,G__EdrDict_753_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbVertex' - 0 - eVertex U 'EdbVertex' - 0 - eWorking", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CancelModifiedVTX",1641,G__EdrDict_753_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbVertex' - 0 - eVertex U 'EdbVertex' - 0 - eWorking", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTracksStartEnd",1812,G__EdrDict_753_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TIndexCell' - 1 - starts u 'TIndexCell' - 1 - ends", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeV",468,G__EdrDict_753_0_14, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'EdbVertex' - 1 - edbv g - - 0 'false' isRefit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindVertex",1023,G__EdrDict_753_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Make1Vertex",1069,G__EdrDict_753_0_16, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 1 - tracks f - - 0 - zexpected", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StripBadTracks",1409,G__EdrDict_753_0_17, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 3, 1, 1, 0, 
"u 'EdbVertex' - 1 - v f - - 0 - impMax "
"i - - 0 - ntrMin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbVertex2",1091,G__EdrDict_753_0_18, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 4, 1, 1, 0, 
"U 'EdbTrackP' - 0 - tr1 U 'EdbTrackP' - 0 - tr2 "
"i - - 0 - zpos1 i - - 0 - zpos2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbVertexN",1119,G__EdrDict_753_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbVertexN_old",1533,G__EdrDict_753_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbVertexNpos",1457,G__EdrDict_753_0_21, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - - 0 - zpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckVTX",736,G__EdrDict_753_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestVTAGroup",1176,G__EdrDict_753_0_23, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - arrvta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EstimateVertexFlag",1844,G__EdrDict_753_0_24, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - zpos1 i - - 0 - zpos2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckDZ2",686,G__EdrDict_753_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"f - - 0 - z1 f - - 0 - z2 "
"i - - 0 - zpos1 i - - 0 - zpos2 "
"f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInsideLimits",1418,G__EdrDict_753_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'EdbSegP' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindSimilarTracks",1722,G__EdrDict_753_0_27, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"u 'EdbTrackP' - 1 - t u 'TObjArray' - 1 - found "
"i - - 0 '2' nsegmin f - - 0 '100.' dMax "
"f - - 0 '0.01' dTheta f - - 0 '50000.' dZmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindSimilarTracksE",1791,G__EdrDict_753_0_28, 105, -1, G__defined_typename("Int_t"), 0, 10, 1, 1, 0, 
"u 'EdbSegP' - 1 - spred u 'TObjArray' - 1 - found "
"g - - 0 - startend f - - 0 - impact "
"f - - 0 - dthetaMax f - - 0 - dxy "
"f - - 0 - zminT f - - 0 - zmaxT "
"f - - 0 - zminV f - - 0 - zmaxV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CompatibleSegments",1862,G__EdrDict_753_0_29, 103, -1, -1, 0, 9, 1, 1, 0, 
"u 'EdbSegP' - 1 - spred u 'EdbSegP' - 1 - stest "
"f - - 0 - impact f - - 0 - dthetaMax "
"f - - 0 - dxy f - - 0 - zminT "
"f - - 0 - zmaxT f - - 0 - zminV "
"f - - 0 - zmaxV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindSimilarSegments",1944,G__EdrDict_753_0_30, 105, -1, G__defined_typename("Int_t"), 0, 10, 1, 1, 0, 
"u 'EdbSegP' - 1 - spred u 'TObjArray' - 1 - found "
"u 'EdbPattern' - 1 - pat f - - 0 - impact "
"f - - 0 - dthetaMax f - - 0 - dxy "
"f - - 0 - zminT f - - 0 - zmaxT "
"f - - 0 - zminV f - - 0 - zmaxV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkedVertexes",1453,G__EdrDict_753_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoopVertex",1048,G__EdrDict_753_0_32, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"u 'TIndexCell' - 1 - list1 u 'TIndexCell' - 1 - list2 "
"i - - 0 - zpos1 i - - 0 - zpos2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegmentToVertex",1821,G__EdrDict_753_0_33, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'EdbSegP' - 0 - s f - - 0 '25.' ImpMax "
"f - - 0 '0.01' ProbMin f - - 0 '0.3' Mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexPolish",1261,G__EdrDict_753_0_34, 105, -1, G__defined_typename("Int_t"), 0, 7, 1, 1, 0, 
"U 'EdbVertex' - 0 - v i - - 0 '0' refill "
"f - - 0 '1000.' RadMax i - - 0 '2' Dpat "
"f - - 0 '25.' ImpMax f - - 0 '0.01' ProbMin "
"f - - 0 '0.3' Mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexTuning",1267,G__EdrDict_753_0_35, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - - 0 '0' seltype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexNeighbor",1452,G__EdrDict_753_0_36, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"f - - 0 '1000.' RadMax i - - 0 '1' Dpat "
"f - - 0 '1000000.' ImpMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexNeighbor",1452,G__EdrDict_753_0_37, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'EdbVertex' - 0 - v f - - 0 '1000.' RadMax "
"i - - 0 '1' Dpat f - - 0 '1000000.' ImpMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelVertNeighbor",1523,G__EdrDict_753_0_38, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"U 'EdbVertex' - 0 - v i - - 0 - seltype "
"f - - 0 - RadMax i - - 0 - Dpat "
"U 'TObjArray' - 0 - ao", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelSegNeighbor",1393,G__EdrDict_753_0_39, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"U 'EdbSegP' - 0 - s i - - 0 - seltype "
"f - - 0 - RadMax i - - 0 - Dpat "
"U 'TObjArray' - 0 - ao", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SegmentNeighbor",1537,G__EdrDict_753_0_40, 105, -1, G__defined_typename("Int_t"), 0, 8, 1, 1, 0, 
"U 'EdbSegP' - 0 - s f - - 0 '1000.' RadMax "
"i - - 0 '1' Dpat f - - 0 '1000000.' ImpMax "
"f - - 0 '9' SegWmin U 'TObjArray' - 0 '0' aseg "
"U 'TObjArray' - 0 '0' atr U 'TObjArray' - 0 '0' arv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckImpact",1084,G__EdrDict_753_0_41, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 0, 
"U 'EdbSegP' - 0 - s1 U 'EdbSegP' - 0 - s2 "
"i - - 0 - zpos1 i - - 0 - zpos2 "
"F - - 0 - pv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckImpactN",1162,G__EdrDict_753_0_42, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 0, 
"U 'EdbSegP' - 0 - s1 U 'EdbSegP' - 0 - s2 "
"F - - 0 - pv g - - 1 - parallel "
"f - - 0 '6000.' dzMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EstimateVertexQuality",2211,G__EdrDict_753_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'EdbVertex' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EstimateVertexPosition",2319,G__EdrDict_753_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'EdbVertex' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Tdistance",927,G__EdrDict_753_0_45, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'VERTEX::Track' - 11 - t1 u 'VERTEX::Track' - 11 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Tdistance",927,G__EdrDict_753_0_46, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 11 - s1 u 'EdbSegP' - 11 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TdistanceChi2",1253,G__EdrDict_753_0_47, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'EdbTrackP' - 11 - tr1 u 'EdbTrackP' - 11 - tr2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TdistanceChi2",1253,G__EdrDict_753_0_48, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"u 'EdbSegP' - 11 - s1 u 'EdbSegP' - 11 - s2 "
"f - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MoveTrackToOtherVertex",2255,G__EdrDict_753_0_49, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 1, 0, 
"U 'EdbVertex' - 0 - v2 i - - 0 - it2max "
"U 'EdbVertex' - 0 - v1 i - - 0 - seltype "
"U 'EdbVertex' - 2 - v2n U 'EdbVertex' - 2 - v1n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrackToVertex",1599,G__EdrDict_753_0_50, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 3, 1, 1, 0, 
"U 'EdbVertex' - 0 - eVertex U 'EdbTrackP' - 0 - eTr "
"i - - 0 - zpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveTrackFromVertex",2165,G__EdrDict_753_0_51, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 2, 1, 1, 0, 
"U 'EdbVertex' - 0 - eVertex i - - 0 - itr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveVTAFromVertex",1899,G__EdrDict_753_0_52, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 2, 1, 1, 0, 
"u 'EdbVertex' - 1 - vtx u 'EdbVTA' - 1 - vta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEdbTrack",1056,G__EdrDict_753_0_53, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "i - - 10 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__EdrDict_753_0_54, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVTA), -1, 0, 3, 1, 1, 0, 
"u 'EdbVertex' - 1 - edbv U 'EdbTrackP' - 0 - track "
"i - - 0 - zpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPVRec",748,G__EdrDict_753_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPVRec' - 0 - pvr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVTA",500,G__EdrDict_753_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbVTA' - 0 - vta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nvtx",432,G__EdrDict_753_0_57, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__EdrDict_753_0_58, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVertex",903,G__EdrDict_753_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbVertex' - 0 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckTrack",979,G__EdrDict_753_0_60, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbTrackP' - 1 - track i - - 0 - zpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_753_0_61, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbVertexRec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_753_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexRec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_753_0_63, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbVertexRec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_753_0_64, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbVertexRec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_753_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_753_0_69, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexRec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_753_0_70, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVertexRec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_753_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexRec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_753_0_72, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVertexRec::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbVertexRec", 1313, G__EdrDict_753_0_73, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbTopology(void) {
   /* EdbTopology */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTopology));
   G__memfunc_setup("EdbTopology",1128,G__EdrDict_754_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbTopology), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nvtx",432,G__EdrDict_754_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ntr",308,G__EdrDict_754_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Probability",1153,G__EdrDict_754_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DZ",158,G__EdrDict_754_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVertex",903,G__EdrDict_754_0_6, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 1, 1, 1, 0, "U 'EdbVertex' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__EdrDict_754_0_7, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__EdrDict_754_0_8, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackP), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSingleTracks",1491,G__EdrDict_754_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - tracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdrDict_754_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintTracks",1141,G__EdrDict_754_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TracksStr",929,G__EdrDict_754_0_12, 67, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VertexStr",951,G__EdrDict_754_0_13, 67, -1, -1, 0, 1, 1, 1, 0, "u 'EdbVertex' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OrderVtxByZ",1107,G__EdrDict_754_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEqual",692,G__EdrDict_754_0_15, 103, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTopology' - 1 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxV",380,G__EdrDict_754_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_754_0_17, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbTopology::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_754_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTopology::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_754_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbTopology::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_754_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbTopology::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_754_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_754_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTopology::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_754_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTopology::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_754_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTopology::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_754_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTopology::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbTopology", 1254, G__EdrDict_754_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbVertexComb(void) {
   /* EdbVertexComb */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexComb));
   G__memfunc_setup("EdbVertexComb",1290,G__EdrDict_755_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbVertexComb), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbVertexComb",1290,G__EdrDict_755_0_2, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbVertexComb), -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - tracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdrDict_755_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyPar",702,G__EdrDict_755_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbVertexComb' - 1 - comb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__EdrDict_755_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbTrackP' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTracksErrors",1553,G__EdrDict_755_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTracksErrors",1553,G__EdrDict_755_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTracksErrors",1553,G__EdrDict_755_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TObjArray' - 1 - tracks u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FormVertices",1241,G__EdrDict_755_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTopologies",1446,G__EdrDict_755_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintTopologies",1586,G__EdrDict_755_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTopology",1149,G__EdrDict_755_0_12, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbTopology), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ntr",308,G__EdrDict_755_0_13, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nvtx",432,G__EdrDict_755_0_14, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__EdrDict_755_0_15, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexComb",1311,G__EdrDict_755_0_16, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertexComb), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAcceptable",1184,G__EdrDict_755_0_17, 103, -1, -1, 0, 1, 1, 1, 0, "u 'EdbVertex' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckVTX",736,G__EdrDict_755_0_18, 85, G__get_linked_tagnum(&G__EdrDictLN_EdbVertex), -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - tracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintTracks",1141,G__EdrDict_755_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectTopologies",1669,G__EdrDict_755_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - topoarr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortTopologies",1485,G__EdrDict_755_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - topoarr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearDoublets",1321,G__EdrDict_755_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 1 - topoarr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintTeoricalCombinations",2598,G__EdrDict_755_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_755_0_24, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbVertexComb::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_755_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexComb::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_755_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbVertexComb::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_755_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbVertexComb::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_755_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_755_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexComb::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_755_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVertexComb::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_755_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexComb::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_755_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVertexComb::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbVertexComb", 1416, G__EdrDict_755_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbVertexSpace(void) {
   /* EdbVertexSpace */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbVertexSpace));
   G__memfunc_setup("EdbVertexSpace",1397,G__EdrDict_756_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbVertexSpace), -1, 0, 3, 1, 1, 0, 
"F - - 0 - vmin F - - 0 - vmax "
"F - - 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrackLine",1158,G__EdrDict_756_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - - 0 - x1 F - - 0 - x2 "
"i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cycle",496,G__EdrDict_756_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_756_0_4, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbVertexSpace::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_756_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexSpace::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_756_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbVertexSpace::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_756_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbVertexSpace::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_756_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_756_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexSpace::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_756_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVertexSpace::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_756_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbVertexSpace::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_756_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbVertexSpace::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbVertexSpace", 1397, G__EdrDict_756_0_16, (int) ('i'), G__get_linked_tagnum(&G__EdrDictLN_EdbVertexSpace), -1, 0, 1, 1, 1, 0, "u 'EdbVertexSpace' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbVertexSpace", 1523, G__EdrDict_756_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdrDict_756_0_18, (int) ('u'), G__get_linked_tagnum(&G__EdrDictLN_EdbVertexSpace), -1, 1, 1, 1, 1, 0, "u 'EdbVertexSpace' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbTrackFitter(void) {
   /* EdbTrackFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter));
   G__memfunc_setup("EdbTrackFitter",1390,G__EdrDict_757_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNsegMax",991,G__EdrDict_757_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaultBrick",1500,G__EdrDict_757_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTrackLine",1184,G__EdrDict_757_0_4, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTrackLine",1184,G__EdrDict_757_0_5, 105, -1, -1, 0, 7, 1, 1, 0, 
"u 'EdbTrackP' - 11 - tr f - - 1 - x "
"f - - 1 - y f - - 1 - z "
"f - - 1 - tx f - - 1 - ty "
"f - - 1 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxKink",691,G__EdrDict_757_0_6, 102, -1, -1, 0, 1, 3, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) G__func2void( (float (*)(EdbTrackP&))(&EdbTrackFitter::MaxKink) ), 0);
   G__memfunc_setup("MeanKink",782,G__EdrDict_757_0_7, 102, -1, -1, 0, 1, 3, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) G__func2void( (float (*)(EdbTrackP&))(&EdbTrackFitter::MeanKink) ), 0);
   G__memfunc_setup("Theta",502,G__EdrDict_757_0_8, 102, -1, -1, 0, 2, 3, 1, 0, 
"u 'EdbSegP' - 1 - s u 'EdbSegP' - 1 - s1", (char*)NULL, (void*) G__func2void( (float (*)(EdbSegP&, EdbSegP&))(&EdbTrackFitter::Theta) ), 0);
   G__memfunc_setup("Chi2Seg",613,G__EdrDict_757_0_9, 102, -1, -1, 0, 2, 3, 1, 0, 
"U 'EdbSegP' - 0 - s1 U 'EdbSegP' - 0 - s2", (char*)NULL, (void*) G__func2void( (float (*)(EdbSegP*, EdbSegP*))(&EdbTrackFitter::Chi2Seg) ), 0);
   G__memfunc_setup("MaxChi2Seg",907,G__EdrDict_757_0_10, 102, -1, -1, 0, 1, 3, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) G__func2void( (float (*)(EdbTrackP&))(&EdbTrackFitter::MaxChi2Seg) ), 0);
   G__memfunc_setup("MeanChi2Seg",998,G__EdrDict_757_0_11, 102, -1, -1, 0, 1, 3, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) G__func2void( (float (*)(EdbTrackP&))(&EdbTrackFitter::MeanChi2Seg) ), 0);
   G__memfunc_setup("SplitTrack",1025,G__EdrDict_757_0_12, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbTrackP' - 1 - t u 'EdbTrackP' - 1 - t1 "
"i - - 0 - isplit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SplitTrackByKink",1609,G__EdrDict_757_0_13, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbTrackP' - 0 - t u 'TObjArray' - 1 - tracks "
"f - - 0 - maxkink", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMS_KF",480,G__EdrDict_757_0_14, 102, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbTrackP' - 1 - t f - - 0 '10.' p0 "
"f - - 0 '0.5' probbest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2ACP",538,G__EdrDict_757_0_15, 102, -1, -1, 0, 3, 3, 1, 0, 
"u 'EdbSegP' - 0 - s1 u 'EdbSegP' - 0 - s2 "
"u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) G__func2void( (float (*)(EdbSegP, EdbSegP, EdbScanCond&))(&EdbTrackFitter::Chi2ACP) ), 0);
   G__memfunc_setup("Chi2ASeg",678,G__EdrDict_757_0_16, 102, -1, -1, 0, 5, 3, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2 "
"u 'EdbSegP' - 1 - s u 'EdbScanCond' - 1 - cond1 "
"u 'EdbScanCond' - 1 - cond2", (char*)NULL, (void*) G__func2void( (float (*)(EdbSegP&, EdbSegP&, EdbSegP&, EdbScanCond&, EdbScanCond&))(&EdbTrackFitter::Chi2ASeg) ), 0);
   G__memfunc_setup("Chi2ASegLL",830,G__EdrDict_757_0_17, 102, -1, -1, 0, 5, 3, 1, 0, 
"u 'EdbSegP' - 1 - s1 u 'EdbSegP' - 1 - s2 "
"u 'EdbSegP' - 1 - s u 'EdbScanCond' - 1 - cond1 "
"u 'EdbScanCond' - 1 - cond2", (char*)NULL, (void*) G__func2void( (float (*)(EdbSegP&, EdbSegP&, EdbSegP&, EdbScanCond&, EdbScanCond&))(&EdbTrackFitter::Chi2ASegLL) ), 0);
   G__memfunc_setup("Chi2SegM",690,G__EdrDict_757_0_18, 102, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbSegP' - 0 - s1 u 'EdbSegP' - 0 - s2 "
"u 'EdbSegP' - 1 - s u 'EdbScanCond' - 1 - cond1 "
"u 'EdbScanCond' - 1 - cond2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2SegMCS",840,G__EdrDict_757_0_19, 102, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 11 - s1 u 'EdbSegP' - 11 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProbSegMCS",917,G__EdrDict_757_0_20, 100, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbSegP' - 0 - s1 U 'EdbSegP' - 0 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdrDict_757_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RMSprojXY",862,G__EdrDict_757_0_22, 105, -1, -1, 0, 3, 3, 1, 0, 
"u 'EdbTrackP' - 1 - tr f - - 1 - ex "
"f - - 1 - ey", (char*)NULL, (void*) G__func2void( (int (*)(EdbTrackP&, float&, float&))(&EdbTrackFitter::RMSprojXY) ), 0);
   G__memfunc_setup("Class",502,G__EdrDict_757_0_23, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbTrackFitter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_757_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrackFitter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_757_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbTrackFitter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_757_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbTrackFitter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_757_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_757_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrackFitter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_757_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTrackFitter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_757_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrackFitter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_757_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTrackFitter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbTrackFitter", 1390, G__EdrDict_757_0_35, (int) ('i'), G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter), -1, 0, 1, 1, 1, 0, "u 'EdbTrackFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbTrackFitter", 1516, G__EdrDict_757_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdrDict_757_0_37, (int) ('u'), G__get_linked_tagnum(&G__EdrDictLN_EdbTrackFitter), -1, 1, 1, 1, 1, 0, "u 'EdbTrackFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbMomentumEstimator(void) {
   /* EdbMomentumEstimator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbMomentumEstimator));
   G__memfunc_setup("EdbMomentumEstimator",2069,G__EdrDict_821_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbMomentumEstimator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParPMS_Mag",1203,G__EdrDict_821_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParPMS_Mag",1203,G__EdrDict_821_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - parNumber "
"d - 'Double_t' 0 - parvalue", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdrDict_821_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMS",240,G__EdrDict_821_0_5, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMSang",550,G__EdrDict_821_0_6, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMSang_corr",1083,G__EdrDict_821_0_7, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMScoordinate",1304,G__EdrDict_821_0_8, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CellWeight",1000,G__EdrDict_821_0_9, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - npl i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EstimateMomentumError",2200,G__EdrDict_821_0_10, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - - 0 - P i - - 0 - npl "
"f - - 0 - ang f - - 1 - pmin "
"f - - 1 - pmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Mat",290,G__EdrDict_821_0_11, 100, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - P i - - 0 - npl "
"f - - 0 - ang", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCSErrorFunction",1587,G__EdrDict_821_0_12, 85, G__get_linked_tagnum(&G__EdrDictLN_TF1), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name f - - 0 - x0 "
"f - - 0 - dtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCSCoordErrorFunction",2090,G__EdrDict_821_0_13, 85, G__get_linked_tagnum(&G__EdrDictLN_TF1), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name f - - 0 - tmean "
"f - - 0 - x0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDTxErrorFunction",1932,G__EdrDict_821_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TF1' - 1 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDTyErrorFunction",1933,G__EdrDict_821_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TF1' - 1 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDTsErrorFunction",1927,G__EdrDict_821_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TF1' - 1 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDTx",560,G__EdrDict_821_0_17, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - Tx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDTy",561,G__EdrDict_821_0_18, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - Ty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDTs",555,G__EdrDict_821_0_19, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - Ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMSang_base",1056,G__EdrDict_821_0_20, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMSang_base_A",1216,G__EdrDict_821_0_21, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCSErrorFunction_base",2093,G__EdrDict_821_0_22, 85, G__get_linked_tagnum(&G__EdrDictLN_TF1), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name f - - 0 - x0 "
"f - - 0 - dtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("P_MS",335,G__EdrDict_821_0_23, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbTrackP' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawPlots",928,G__EdrDict_821_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TCanvas' - 0 '0' c1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlgStr",589,G__EdrDict_821_0_25, 117, G__get_linked_tagnum(&G__EdrDictLN_TString), -1, 0, 1, 1, 1, 0, "i - - 0 - alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdrDict_821_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_821_0_27, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbMomentumEstimator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_821_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMomentumEstimator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_821_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbMomentumEstimator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_821_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbMomentumEstimator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_821_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_821_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMomentumEstimator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_821_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbMomentumEstimator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_821_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMomentumEstimator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_821_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbMomentumEstimator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbMomentumEstimator", 2195, G__EdrDict_821_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPlateTracking(void) {
   /* EdbPlateTracking */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdrDictLN_EdbPlateTracking));
   G__memfunc_setup("EdbPlateTracking",1588,G__EdrDict_883_0_1, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbPlateTracking), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbPlateTracking",1588,G__EdrDict_883_0_2, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbPlateTracking), -1, 0, 4, 1, 1, 0, 
"u 'EdbPattern' - 1 - S1 u 'EdbPattern' - 1 - S2 "
"u 'EdbSegP' - 1 - prediction u 'EdbPlateP' - 1 - plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbPlateTracking",1588,G__EdrDict_883_0_3, 105, G__get_linked_tagnum(&G__EdrDictLN_EdbPlateTracking), -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - S1 u 'EdbPattern' - 1 - S2 "
"u 'EdbSegP' - 1 - prediction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdrDict_883_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCondMT",849,G__EdrDict_883_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCondBT",838,G__EdrDict_883_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPred",695,G__EdrDict_883_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 11 - pred", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateFlag",989,G__EdrDict_883_0_8, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - flag i - - 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBTHoles",945,G__EdrDict_883_0_9, 105, -1, -1, 0, 1, 3, 1, 0, "i - - 0 - flag", (char*)NULL, (void*) G__func2void( (int (*)(int))(&EdbPlateTracking::GetBTHoles) ), 0);
   G__memfunc_setup("GetMTHoles",956,G__EdrDict_883_0_10, 105, -1, -1, 0, 1, 3, 1, 0, "i - - 0 - flag", (char*)NULL, (void*) G__func2void( (int (*)(int))(&EdbPlateTracking::GetMTHoles) ), 0);
   G__memfunc_setup("ExtrapolateCond",1549,G__EdrDict_883_0_11, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbScanCond' - 1 - inputcond i - - 0 - flag "
"u 'EdbScanCond' - 1 - outputcond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCompliments",1548,G__EdrDict_883_0_12, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbSegP' - 1 - s u 'EdbPattern' - 1 - pat "
"u 'TObjArray' - 1 - found f - - 0 - chi2max "
"u 'TArrayF' - 1 - chiarr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCandidates",1393,G__EdrDict_883_0_13, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbSegP' - 1 - spred u 'EdbPattern' - 1 - fndbt "
"u 'EdbPattern' - 1 - fnds1 u 'EdbPattern' - 1 - fnds2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCandidateMT",1439,G__EdrDict_883_0_14, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - fnds1 u 'EdbPattern' - 1 - fnds2 "
"u 'EdbSegP' - 1 - fnd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBestCandidate",1676,G__EdrDict_883_0_15, 105, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbPattern' - 1 - fndbt u 'EdbSegP' - 1 - fnd "
"u 'EdbPattern' - 1 - cnd f - - 0 - wmin "
"f - - 0 - wmindegrad f - - 0 - chi2max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPrediction",1426,G__EdrDict_883_0_16, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbSegP' - 1 - spred u 'EdbSegP' - 1 - fndbt "
"u 'EdbSegP' - 1 - fnds1 u 'EdbSegP' - 1 - fnds2 "
"u 'EdbSegP' - 1 - snewpred", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBestCandidateDS",1827,G__EdrDict_883_0_17, 105, -1, -1, 0, 8, 1, 1, 0, 
"u 'EdbPattern' - 1 - fndbt u 'EdbSegP' - 1 - fnd "
"u 'EdbPattern' - 1 - cnd f - - 0 - wmin "
"f - - 0 - wmindegrad f - - 0 - chi2max "
"u 'EdbSegP' - 1 - spred f - - 0 - maxdmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPredictionDS",1577,G__EdrDict_883_0_18, 105, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbSegP' - 1 - spred u 'EdbSegP' - 1 - fndbt "
"u 'EdbSegP' - 1 - fnds1 u 'EdbSegP' - 1 - fnds2 "
"u 'EdbSegP' - 1 - snewpred f - - 0 - maxdmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCandidateMTDS",1590,G__EdrDict_883_0_19, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbPattern' - 1 - fnds1 u 'EdbPattern' - 1 - fnds2 "
"u 'EdbSegP' - 1 - fnd u 'EdbSegP' - 1 - spred "
"f - - 0 - maxdmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformFromPlateRS",2027,G__EdrDict_883_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTrack",886,G__EdrDict_883_0_21, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbTrackP' - 1 - pred u 'EdbTrackP' - 1 - found "
"u 'EdbPlateP' - 1 - plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdrDict_883_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseSBtree",1083,G__EdrDict_883_0_23, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) G__func2void( (void (*)(TTree*))(&EdbPlateTracking::CloseSBtree) ), 0);
   G__memfunc_setup("InitSBtree",985,G__EdrDict_883_0_24, 85, G__get_linked_tagnum(&G__EdrDictLN_TTree), -1, 0, 2, 3, 1, 0, 
"C - - 10 '\"sbt.root\"' file_name C - - 10 '\"RECREATE\"' mode", (char*)NULL, (void*) G__func2void( (TTree* (*)(const char*, const char*))(&EdbPlateTracking::InitSBtree) ), 0);
   G__memfunc_setup("UpdateSBtree",1192,G__EdrDict_883_0_25, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'TTree' - 1 - tsbt I - - 0 - idp "
"I - - 0 - idf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSBtreeEntry",1399,G__EdrDict_883_0_26, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - entry u 'TTree' - 1 - tsbt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdrDict_883_0_27, 85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPlateTracking::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdrDict_883_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlateTracking::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdrDict_883_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPlateTracking::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdrDict_883_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPlateTracking::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdrDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdrDict_883_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdrDict_883_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlateTracking::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdrDict_883_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPlateTracking::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdrDict_883_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlateTracking::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdrDict_883_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPlateTracking::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPlateTracking", 1714, G__EdrDict_883_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncEdrDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalEdrDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcEdrDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__EdrDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR = { "iterator<random_access_iterator_tag,char,long,char*,char&>" , 115 , -1 };
G__linked_taginfo G__EdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__EdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__EdrDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__EdrDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TSortedList = { "TSortedList" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbAffine2D = { "EdbAffine2D" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbPoint = { "EdbPoint" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbPoint2D = { "EdbPoint2D" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbPoint3D = { "EdbPoint3D" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbAngle2D = { "EdbAngle2D" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbTrack2D = { "EdbTrack2D" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbPointsBox2D = { "EdbPointsBox2D" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbID = { "EdbID" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbSegP = { "EdbSegP" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TIndexCell = { "TIndexCell" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbVTA = { "EdbVTA" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbVertex = { "EdbVertex" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbSegmentsBox = { "EdbSegmentsBox" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbTrackP = { "EdbTrackP" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbPattern = { "EdbPattern" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbPatternsVolume = { "EdbPatternsVolume" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_THashList = { "THashList" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbScanCond = { "EdbScanCond" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbSegCouple = { "EdbSegCouple" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TIndex2 = { "TIndex2" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbScanSet = { "EdbScanSet" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbPatCouple = { "EdbPatCouple" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbPVRec = { "EdbPVRec" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TGraphAsymmErrors = { "TGraphAsymmErrors" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_VERTEX = { "VERTEX" , 110 , -1 };
G__linked_taginfo G__EdrDictLN_VERTEXcLcLTrack = { "VERTEX::Track" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_VERTEXcLcLVertex = { "VERTEX::Vertex" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR = { "list<VERTEX::Relation*,allocator<VERTEX::Relation*> >" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR = { "list<VERTEX::MassC*,allocator<VERTEX::MassC*> >" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR = { "vector<VERTEX::Track*,allocator<VERTEX::Track*> >" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR = { "iterator<random_access_iterator_tag,VERTEX::Track*,long,VERTEX::Track**,VERTEX::Track*&>" , 115 , -1 };
G__linked_taginfo G__EdrDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbVertexPar = { "EdbVertexPar" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbVertexRec = { "EdbVertexRec" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbTopology = { "EdbTopology" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbVertexComb = { "EdbVertexComb" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbVertexSpace = { "EdbVertexSpace" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbTrackFitter = { "EdbTrackFitter" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__EdrDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR = { "iterator<random_access_iterator_tag,pair<unsigned int,int>,long,pair<unsigned int,int>*,pair<unsigned int,int>&>" , 115 , -1 };
G__linked_taginfo G__EdrDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbMomentumEstimator = { "EdbMomentumEstimator" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbPlateP = { "EdbPlateP" , 99 , -1 };
G__linked_taginfo G__EdrDictLN_EdbPlateTracking = { "EdbPlateTracking" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableEdrDict() {
  G__EdrDictLN_TClass.tagnum = -1 ;
  G__EdrDictLN_TBuffer.tagnum = -1 ;
  G__EdrDictLN_TMemberInspector.tagnum = -1 ;
  G__EdrDictLN_TObject.tagnum = -1 ;
  G__EdrDictLN_TNamed.tagnum = -1 ;
  G__EdrDictLN_TString.tagnum = -1 ;
  G__EdrDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR.tagnum = -1 ;
  G__EdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__EdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EdrDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__EdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EdrDictLN_TList.tagnum = -1 ;
  G__EdrDictLN_TObjArray.tagnum = -1 ;
  G__EdrDictLN_TClonesArray.tagnum = -1 ;
  G__EdrDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__EdrDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EdrDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__EdrDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__EdrDictLN_TTree.tagnum = -1 ;
  G__EdrDictLN_TArrayI.tagnum = -1 ;
  G__EdrDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__EdrDictLN_TSortedList.tagnum = -1 ;
  G__EdrDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__EdrDictLN_EdbAffine2D.tagnum = -1 ;
  G__EdrDictLN_EdbPoint.tagnum = -1 ;
  G__EdrDictLN_EdbPoint2D.tagnum = -1 ;
  G__EdrDictLN_EdbPoint3D.tagnum = -1 ;
  G__EdrDictLN_EdbAngle2D.tagnum = -1 ;
  G__EdrDictLN_EdbTrack2D.tagnum = -1 ;
  G__EdrDictLN_EdbPointsBox2D.tagnum = -1 ;
  G__EdrDictLN_EdbID.tagnum = -1 ;
  G__EdrDictLN_EdbSegP.tagnum = -1 ;
  G__EdrDictLN_TIndexCell.tagnum = -1 ;
  G__EdrDictLN_EdbVTA.tagnum = -1 ;
  G__EdrDictLN_EdbVertex.tagnum = -1 ;
  G__EdrDictLN_EdbSegmentsBox.tagnum = -1 ;
  G__EdrDictLN_EdbTrackP.tagnum = -1 ;
  G__EdrDictLN_EdbPattern.tagnum = -1 ;
  G__EdrDictLN_EdbPatternsVolume.tagnum = -1 ;
  G__EdrDictLN_THashList.tagnum = -1 ;
  G__EdrDictLN_TArrayF.tagnum = -1 ;
  G__EdrDictLN_TF1.tagnum = -1 ;
  G__EdrDictLN_EdbScanCond.tagnum = -1 ;
  G__EdrDictLN_EdbSegCouple.tagnum = -1 ;
  G__EdrDictLN_TIndex2.tagnum = -1 ;
  G__EdrDictLN_EdbScanSet.tagnum = -1 ;
  G__EdrDictLN_EdbPatCouple.tagnum = -1 ;
  G__EdrDictLN_EdbPVRec.tagnum = -1 ;
  G__EdrDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__EdrDictLN_TVector3.tagnum = -1 ;
  G__EdrDictLN_TGraphErrors.tagnum = -1 ;
  G__EdrDictLN_TGraphAsymmErrors.tagnum = -1 ;
  G__EdrDictLN_VERTEX.tagnum = -1 ;
  G__EdrDictLN_VERTEXcLcLTrack.tagnum = -1 ;
  G__EdrDictLN_VERTEXcLcLVertex.tagnum = -1 ;
  G__EdrDictLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR.tagnum = -1 ;
  G__EdrDictLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR.tagnum = -1 ;
  G__EdrDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR.tagnum = -1 ;
  G__EdrDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EdrDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR.tagnum = -1 ;
  G__EdrDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EdrDictLN_EdbVertexPar.tagnum = -1 ;
  G__EdrDictLN_EdbVertexRec.tagnum = -1 ;
  G__EdrDictLN_EdbTopology.tagnum = -1 ;
  G__EdrDictLN_EdbVertexComb.tagnum = -1 ;
  G__EdrDictLN_EdbVertexSpace.tagnum = -1 ;
  G__EdrDictLN_EdbTrackFitter.tagnum = -1 ;
  G__EdrDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__EdrDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__EdrDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EdrDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR.tagnum = -1 ;
  G__EdrDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EdrDictLN_TCanvas.tagnum = -1 ;
  G__EdrDictLN_EdbMomentumEstimator.tagnum = -1 ;
  G__EdrDictLN_EdbPlateP.tagnum = -1 ;
  G__EdrDictLN_EdbPlateTracking.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableEdrDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TString);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TList);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TSortedList);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbAffine2D);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbPoint);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbPoint2D);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbPoint3D);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbAngle2D);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbTrack2D);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbPointsBox2D);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbID);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbSegP);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TIndexCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbVTA),sizeof(EdbVTA),-1,63232,"vertex-track association",G__setup_memvarEdbVTA,G__setup_memfuncEdbVTA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbVertex),sizeof(EdbVertex),-1,29952,"vertex class for OPERA emulsion data",G__setup_memvarEdbVertex,G__setup_memfuncEdbVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbSegmentsBox),sizeof(EdbSegmentsBox),-1,63232,"collection of segments",G__setup_memvarEdbSegmentsBox,G__setup_memfuncEdbSegmentsBox);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbTrackP),sizeof(EdbTrackP),-1,63232,"track consists of segments",G__setup_memvarEdbTrackP,G__setup_memfuncEdbTrackP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbPattern),sizeof(EdbPattern),-1,63232,"pattern of segments",G__setup_memvarEdbPattern,G__setup_memfuncEdbPattern);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbPatternsVolume),sizeof(EdbPatternsVolume),-1,30464,"patterns nostri",G__setup_memvarEdbPatternsVolume,G__setup_memfuncEdbPatternsVolume);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_THashList);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbScanCond);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbSegCouple);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TIndex2);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbScanSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbPatCouple),sizeof(EdbPatCouple),-1,29952,"couple of patterns to be aligned",G__setup_memvarEdbPatCouple,G__setup_memfuncEdbPatCouple);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbPVRec),sizeof(EdbPVRec),-1,29952,"Patterns Volume reconstructor",G__setup_memvarEdbPVRec,G__setup_memfuncEdbPVRec);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TGraphErrors);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TGraphAsymmErrors);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_VERTEX);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_VERTEXcLcLTrack);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_VERTEXcLcLVertex);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbVertexPar),sizeof(EdbVertexPar),-1,29952,"vertex reconstruction parameters",G__setup_memvarEdbVertexPar,G__setup_memfuncEdbVertexPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbVertexRec),sizeof(EdbVertexRec),-1,62720,"reconstruct vertexes in OPERA emulsion data",G__setup_memvarEdbVertexRec,G__setup_memfuncEdbVertexRec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbTopology),sizeof(EdbTopology),-1,29952,"class to keep the reconstructed topology",G__setup_memvarEdbTopology,G__setup_memfuncEdbTopology);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbVertexComb),sizeof(EdbVertexComb),-1,62720,"combinatorial selection of the best vertex combinations",G__setup_memvarEdbVertexComb,G__setup_memfuncEdbVertexComb);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbVertexSpace),sizeof(EdbVertexSpace),-1,62464,"vertex-track association",G__setup_memvarEdbVertexSpace,G__setup_memfuncEdbVertexSpace);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbTrackFitter),sizeof(EdbTrackFitter),-1,62720,"track fitter",G__setup_memvarEdbTrackFitter,G__setup_memfuncEdbTrackFitter);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_TCanvas);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbMomentumEstimator),sizeof(EdbMomentumEstimator),-1,62720,"track momentum estimator",G__setup_memvarEdbMomentumEstimator,G__setup_memfuncEdbMomentumEstimator);
   G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbPlateP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdrDictLN_EdbPlateTracking),sizeof(EdbPlateTracking),-1,62720,"track following in one emulsion plate",G__setup_memvarEdbPlateTracking,G__setup_memfuncEdbPlateTracking);
}
extern "C" void G__cpp_setupEdrDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupEdrDict()");
  G__set_cpp_environmentEdrDict();
  G__cpp_setup_tagtableEdrDict();

  G__cpp_setup_inheritanceEdrDict();

  G__cpp_setup_typetableEdrDict();

  G__cpp_setup_memvarEdrDict();

  G__cpp_setup_memfuncEdrDict();
  G__cpp_setup_globalEdrDict();
  G__cpp_setup_funcEdrDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncEdrDict();
  return;
}
class G__cpp_setup_initEdrDict {
  public:
    G__cpp_setup_initEdrDict() { G__add_setup_func("EdrDict",(G__incsetup)(&G__cpp_setupEdrDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initEdrDict() { G__remove_setup_func("EdrDict"); }
};
G__cpp_setup_initEdrDict G__cpp_setup_initializerEdrDict;

