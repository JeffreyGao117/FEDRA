//
// File generated by C:\root_v5.34.38\bin\rootcint.EXE at Tue Jun 02 09:11:53 2020

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME bmatrixDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "bmatrixDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void TBaseMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TBaseMatrix(void *p);
   static void deleteArray_TBaseMatrix(void *p);
   static void destruct_TBaseMatrix(void *p);
   static void streamer_TBaseMatrix(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TBaseMatrix*)
   {
      ::TBaseMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TBaseMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TBaseMatrix", ::TBaseMatrix::Class_Version(), "c:/users/user/downloads/fedra/src/appl/bmatrix/basematrix.h", 20,
                  typeid(::TBaseMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TBaseMatrix::Dictionary, isa_proxy, 0,
                  sizeof(::TBaseMatrix) );
      instance.SetDelete(&delete_TBaseMatrix);
      instance.SetDeleteArray(&deleteArray_TBaseMatrix);
      instance.SetDestructor(&destruct_TBaseMatrix);
      instance.SetStreamerFunc(&streamer_TBaseMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TBaseMatrix*)
   {
      return GenerateInitInstanceLocal((::TBaseMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TBaseMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TBitMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TBitMatrix(void *p = 0);
   static void *newArray_TBitMatrix(Long_t size, void *p);
   static void delete_TBitMatrix(void *p);
   static void deleteArray_TBitMatrix(void *p);
   static void destruct_TBitMatrix(void *p);
   static void streamer_TBitMatrix(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TBitMatrix*)
   {
      ::TBitMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TBitMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TBitMatrix", ::TBitMatrix::Class_Version(), "./bitmatrix.h", 13,
                  typeid(::TBitMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TBitMatrix::Dictionary, isa_proxy, 0,
                  sizeof(::TBitMatrix) );
      instance.SetNew(&new_TBitMatrix);
      instance.SetNewArray(&newArray_TBitMatrix);
      instance.SetDelete(&delete_TBitMatrix);
      instance.SetDeleteArray(&deleteArray_TBitMatrix);
      instance.SetDestructor(&destruct_TBitMatrix);
      instance.SetStreamerFunc(&streamer_TBitMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TBitMatrix*)
   {
      return GenerateInitInstanceLocal((::TBitMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TBitMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TByteMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TByteMatrix(void *p = 0);
   static void *newArray_TByteMatrix(Long_t size, void *p);
   static void delete_TByteMatrix(void *p);
   static void deleteArray_TByteMatrix(void *p);
   static void destruct_TByteMatrix(void *p);
   static void streamer_TByteMatrix(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TByteMatrix*)
   {
      ::TByteMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TByteMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TByteMatrix", ::TByteMatrix::Class_Version(), "./bytematrix.h", 12,
                  typeid(::TByteMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TByteMatrix::Dictionary, isa_proxy, 0,
                  sizeof(::TByteMatrix) );
      instance.SetNew(&new_TByteMatrix);
      instance.SetNewArray(&newArray_TByteMatrix);
      instance.SetDelete(&delete_TByteMatrix);
      instance.SetDeleteArray(&deleteArray_TByteMatrix);
      instance.SetDestructor(&destruct_TByteMatrix);
      instance.SetStreamerFunc(&streamer_TByteMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TByteMatrix*)
   {
      return GenerateInitInstanceLocal((::TByteMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TByteMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TBitView_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TBitView(void *p = 0);
   static void *newArray_TBitView(Long_t size, void *p);
   static void delete_TBitView(void *p);
   static void deleteArray_TBitView(void *p);
   static void destruct_TBitView(void *p);
   static void streamer_TBitView(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TBitView*)
   {
      ::TBitView *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TBitView >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TBitView", ::TBitView::Class_Version(), "./bitview.h", 27,
                  typeid(::TBitView), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TBitView::Dictionary, isa_proxy, 0,
                  sizeof(::TBitView) );
      instance.SetNew(&new_TBitView);
      instance.SetNewArray(&newArray_TBitView);
      instance.SetDelete(&delete_TBitView);
      instance.SetDeleteArray(&deleteArray_TBitView);
      instance.SetDestructor(&destruct_TBitView);
      instance.SetStreamerFunc(&streamer_TBitView);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TBitView*)
   {
      return GenerateInitInstanceLocal((::TBitView*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TBitView*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TBinTracking_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TBinTracking(void *p = 0);
   static void *newArray_TBinTracking(Long_t size, void *p);
   static void delete_TBinTracking(void *p);
   static void deleteArray_TBinTracking(void *p);
   static void destruct_TBinTracking(void *p);
   static void streamer_TBinTracking(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TBinTracking*)
   {
      ::TBinTracking *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TBinTracking >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TBinTracking", ::TBinTracking::Class_Version(), "./bitview.h", 62,
                  typeid(::TBinTracking), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TBinTracking::Dictionary, isa_proxy, 0,
                  sizeof(::TBinTracking) );
      instance.SetNew(&new_TBinTracking);
      instance.SetNewArray(&newArray_TBinTracking);
      instance.SetDelete(&delete_TBinTracking);
      instance.SetDeleteArray(&deleteArray_TBinTracking);
      instance.SetDestructor(&destruct_TBinTracking);
      instance.SetStreamerFunc(&streamer_TBinTracking);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TBinTracking*)
   {
      return GenerateInitInstanceLocal((::TBinTracking*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TBinTracking*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Deriv_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Deriv(void *p = 0);
   static void *newArray_Deriv(Long_t size, void *p);
   static void delete_Deriv(void *p);
   static void deleteArray_Deriv(void *p);
   static void destruct_Deriv(void *p);
   static void streamer_Deriv(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Deriv*)
   {
      ::Deriv *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Deriv >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Deriv", ::Deriv::Class_Version(), "./deriv.h", 7,
                  typeid(::Deriv), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Deriv::Dictionary, isa_proxy, 0,
                  sizeof(::Deriv) );
      instance.SetNew(&new_Deriv);
      instance.SetNewArray(&newArray_Deriv);
      instance.SetDelete(&delete_Deriv);
      instance.SetDeleteArray(&deleteArray_Deriv);
      instance.SetDestructor(&destruct_Deriv);
      instance.SetStreamerFunc(&streamer_Deriv);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Deriv*)
   {
      return GenerateInitInstanceLocal((::Deriv*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Deriv*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr TBaseMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TBaseMatrix::Class_Name()
{
   return "TBaseMatrix";
}

//______________________________________________________________________________
const char *TBaseMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TBaseMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TBaseMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TBaseMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TBaseMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TBaseMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TBaseMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TBaseMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TBitMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TBitMatrix::Class_Name()
{
   return "TBitMatrix";
}

//______________________________________________________________________________
const char *TBitMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TBitMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TBitMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TBitMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TBitMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TBitMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TBitMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TBitMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TByteMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TByteMatrix::Class_Name()
{
   return "TByteMatrix";
}

//______________________________________________________________________________
const char *TByteMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TByteMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TByteMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TByteMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TByteMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TByteMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TByteMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TByteMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TBitView::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TBitView::Class_Name()
{
   return "TBitView";
}

//______________________________________________________________________________
const char *TBitView::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TBitView*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TBitView::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TBitView*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TBitView::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TBitView*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TBitView::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TBitView*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TBinTracking::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TBinTracking::Class_Name()
{
   return "TBinTracking";
}

//______________________________________________________________________________
const char *TBinTracking::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TBinTracking*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TBinTracking::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TBinTracking*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TBinTracking::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TBinTracking*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TBinTracking::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TBinTracking*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Deriv::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Deriv::Class_Name()
{
   return "Deriv";
}

//______________________________________________________________________________
const char *Deriv::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Deriv*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Deriv::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Deriv*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Deriv::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Deriv*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Deriv::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Deriv*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TBitMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class TBitMatrix.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TBaseMatrix::Streamer(R__b);
      R__b >> Z;
      R__b.CheckByteCount(R__s, R__c, TBitMatrix::IsA());
   } else {
      R__c = R__b.WriteVersion(TBitMatrix::IsA(), kTRUE);
      TBaseMatrix::Streamer(R__b);
      R__b << Z;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TBitMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TBitMatrix.
      typedef ::TBitMatrix msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", &Z);
      TBaseMatrix::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TBitMatrix(void *p) {
      return  p ? new(p) ::TBitMatrix : new ::TBitMatrix;
   }
   static void *newArray_TBitMatrix(Long_t nElements, void *p) {
      return p ? new(p) ::TBitMatrix[nElements] : new ::TBitMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_TBitMatrix(void *p) {
      delete ((::TBitMatrix*)p);
   }
   static void deleteArray_TBitMatrix(void *p) {
      delete [] ((::TBitMatrix*)p);
   }
   static void destruct_TBitMatrix(void *p) {
      typedef ::TBitMatrix current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TBitMatrix(TBuffer &buf, void *obj) {
      ((::TBitMatrix*)obj)->::TBitMatrix::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TBitMatrix

//______________________________________________________________________________
void TByteMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class TByteMatrix.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TBaseMatrix::Streamer(R__b);
      R__b >> Tgx;
      R__b >> Tgy;
      R__b.CheckByteCount(R__s, R__c, TByteMatrix::IsA());
   } else {
      R__c = R__b.WriteVersion(TByteMatrix::IsA(), kTRUE);
      TBaseMatrix::Streamer(R__b);
      R__b << Tgx;
      R__b << Tgy;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TByteMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TByteMatrix.
      typedef ::TByteMatrix msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tgx", &Tgx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tgy", &Tgy);
      TBaseMatrix::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TByteMatrix(void *p) {
      return  p ? new(p) ::TByteMatrix : new ::TByteMatrix;
   }
   static void *newArray_TByteMatrix(Long_t nElements, void *p) {
      return p ? new(p) ::TByteMatrix[nElements] : new ::TByteMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_TByteMatrix(void *p) {
      delete ((::TByteMatrix*)p);
   }
   static void deleteArray_TByteMatrix(void *p) {
      delete [] ((::TByteMatrix*)p);
   }
   static void destruct_TByteMatrix(void *p) {
      typedef ::TByteMatrix current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TByteMatrix(TBuffer &buf, void *obj) {
      ((::TByteMatrix*)obj)->::TByteMatrix::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TByteMatrix

//______________________________________________________________________________
void TBaseMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class TBaseMatrix.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> xSize;
      R__b >> ySize;
      R__b >> byteSize;
      R__b >> shiftX;
      R__b >> shiftY;
      R__b.CheckByteCount(R__s, R__c, TBaseMatrix::IsA());
   } else {
      R__c = R__b.WriteVersion(TBaseMatrix::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << xSize;
      R__b << ySize;
      R__b << byteSize;
      R__b << shiftX;
      R__b << shiftY;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TBaseMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TBaseMatrix.
      typedef ::TBaseMatrix msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xSize", &xSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ySize", &ySize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "byteSize", &byteSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mas", &mas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shiftX", &shiftX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shiftY", &shiftY);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_TBaseMatrix(void *p) {
      delete ((::TBaseMatrix*)p);
   }
   static void deleteArray_TBaseMatrix(void *p) {
      delete [] ((::TBaseMatrix*)p);
   }
   static void destruct_TBaseMatrix(void *p) {
      typedef ::TBaseMatrix current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TBaseMatrix(TBuffer &buf, void *obj) {
      ((::TBaseMatrix*)obj)->::TBaseMatrix::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TBaseMatrix

//______________________________________________________________________________
void TBitView::Streamer(TBuffer &R__b)
{
   // Stream an object of class TBitView.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> TBitArray;
      R__b >> Z1;
      R__b >> Z2;
      R__b >> Z3;
      R__b >> Z4;
      R__b >> delta;
      R__b >> ZBase;
      R__b >> bitSize;
      R__b.CheckByteCount(R__s, R__c, TBitView::IsA());
   } else {
      R__c = R__b.WriteVersion(TBitView::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << TBitArray;
      R__b << Z1;
      R__b << Z2;
      R__b << Z3;
      R__b << Z4;
      R__b << delta;
      R__b << ZBase;
      R__b << bitSize;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TBitView::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TBitView.
      typedef ::TBitView msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TBitArray", &TBitArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z1", &Z1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z2", &Z2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z3", &Z3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z4", &Z4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delta", &delta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZBase", &ZBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bitSize", &bitSize);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TBitView(void *p) {
      return  p ? new(p) ::TBitView : new ::TBitView;
   }
   static void *newArray_TBitView(Long_t nElements, void *p) {
      return p ? new(p) ::TBitView[nElements] : new ::TBitView[nElements];
   }
   // Wrapper around operator delete
   static void delete_TBitView(void *p) {
      delete ((::TBitView*)p);
   }
   static void deleteArray_TBitView(void *p) {
      delete [] ((::TBitView*)p);
   }
   static void destruct_TBitView(void *p) {
      typedef ::TBitView current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TBitView(TBuffer &buf, void *obj) {
      ((::TBitView*)obj)->::TBitView::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TBitView

//______________________________________________________________________________
void TBinTracking::Streamer(TBuffer &R__b)
{
   // Stream an object of class TBinTracking.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> TByteArray;
      R__b >> Tgxmin;
      R__b >> Tgxmax;
      R__b >> Tgymin;
      R__b >> Tgymax;
      R__b >> Tgstep;
      R__b >> ZBase;
      R__b >> dX;
      R__b >> dY;
      R__b >> dZ;
      R__b.CheckByteCount(R__s, R__c, TBinTracking::IsA());
   } else {
      R__c = R__b.WriteVersion(TBinTracking::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << TByteArray;
      R__b << Tgxmin;
      R__b << Tgxmax;
      R__b << Tgymin;
      R__b << Tgymax;
      R__b << Tgstep;
      R__b << ZBase;
      R__b << dX;
      R__b << dY;
      R__b << dZ;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TBinTracking::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TBinTracking.
      typedef ::TBinTracking msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TByteArray", &TByteArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tgxmin", &Tgxmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tgxmax", &Tgxmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tgymin", &Tgymin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tgymax", &Tgymax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tgstep", &Tgstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZBase", &ZBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dX", &dX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dY", &dY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZ", &dZ);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TBinTracking(void *p) {
      return  p ? new(p) ::TBinTracking : new ::TBinTracking;
   }
   static void *newArray_TBinTracking(Long_t nElements, void *p) {
      return p ? new(p) ::TBinTracking[nElements] : new ::TBinTracking[nElements];
   }
   // Wrapper around operator delete
   static void delete_TBinTracking(void *p) {
      delete ((::TBinTracking*)p);
   }
   static void deleteArray_TBinTracking(void *p) {
      delete [] ((::TBinTracking*)p);
   }
   static void destruct_TBinTracking(void *p) {
      typedef ::TBinTracking current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TBinTracking(TBuffer &buf, void *obj) {
      ((::TBinTracking*)obj)->::TBinTracking::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::TBinTracking

//______________________________________________________________________________
void Deriv::Streamer(TBuffer &R__b)
{
   // Stream an object of class Deriv.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eZp;
      R__b >> eDp;
      R__b.CheckByteCount(R__s, R__c, Deriv::IsA());
   } else {
      R__c = R__b.WriteVersion(Deriv::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eZp;
      R__b << eDp;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Deriv::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Deriv.
      typedef ::Deriv msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZp", &eZp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDp", &eDp);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Deriv(void *p) {
      return  p ? new(p) ::Deriv : new ::Deriv;
   }
   static void *newArray_Deriv(Long_t nElements, void *p) {
      return p ? new(p) ::Deriv[nElements] : new ::Deriv[nElements];
   }
   // Wrapper around operator delete
   static void delete_Deriv(void *p) {
      delete ((::Deriv*)p);
   }
   static void deleteArray_Deriv(void *p) {
      delete [] ((::Deriv*)p);
   }
   static void destruct_Deriv(void *p) {
      typedef ::Deriv current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Deriv(TBuffer &buf, void *obj) {
      ((::Deriv*)obj)->::Deriv::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::Deriv

/********************************************************
* bmatrixDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtablebmatrixDict();

extern "C" void G__set_cpp_environmentbmatrixDict() {
  G__add_ipath(".");
  G__add_ipath("..\\..\\include");
  G__cpp_reset_tagtablebmatrixDict();
}
#include <new>
extern "C" int G__cpp_dllrevbmatrixDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TBaseMatrix */
static int G__bmatrixDict_274_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBaseMatrix*) G__getstructoffset())->Init((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBaseMatrix*) G__getstructoffset())->ResetShift();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBaseMatrix*) G__getstructoffset())->Adopt((unsigned char*) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (long) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 108, (long) ((TBaseMatrix*) G__getstructoffset())->GetSize((long*) G__int(libp->para[0]), (long*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) ((TBaseMatrix*) G__getstructoffset())->GetSize((long*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((TBaseMatrix*) G__getstructoffset())->GetSize());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBaseMatrix*) G__getstructoffset())->GetElement((int) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (long) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBaseMatrix*) G__getstructoffset())->Print((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBaseMatrix*) G__getstructoffset())->MoveMatrix((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBaseMatrix& obj = ((TBaseMatrix*) G__getstructoffset())->operator=(*(TBaseMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TBaseMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBaseMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TBaseMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TBaseMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBaseMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBaseMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBaseMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBaseMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_274_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBaseMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TBaseMatrix G__TTBaseMatrix;
static int G__bmatrixDict_274_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TBaseMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TBaseMatrix*) (soff+(sizeof(TBaseMatrix)*i)))->~G__TTBaseMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TBaseMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TBaseMatrix*) (soff))->~G__TTBaseMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TBitMatrix */
static int G__bmatrixDict_275_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBitMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBitMatrix[n];
     } else {
       p = new((void*) gvp) TBitMatrix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBitMatrix;
     } else {
       p = new((void*) gvp) TBitMatrix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBitMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TBitMatrix((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TBitMatrix((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBitMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TBitMatrix(
(long) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TBitMatrix(
(long) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBitMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TBitMatrix(*(TBaseMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TBitMatrix(*(TBaseMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBitMatrix*) G__getstructoffset())->GetBit((int) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (long) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBitMatrix*) G__getstructoffset())->SetBit((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBitMatrix*) G__getstructoffset())->SetBit((long) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBitMatrix*) G__getstructoffset())->ClearBit((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBitMatrix*) G__getstructoffset())->ClearBit((long) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBitMatrix*) G__getstructoffset())->SetZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TBitMatrix*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TBitMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBitMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TBitMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TBitMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBitMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBitMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBitMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBitMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_275_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBitMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__bmatrixDict_275_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TBitMatrix* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TBitMatrix(*(TBitMatrix*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TBitMatrix G__TTBitMatrix;
static int G__bmatrixDict_275_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TBitMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TBitMatrix*) (soff+(sizeof(TBitMatrix)*i)))->~G__TTBitMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TBitMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TBitMatrix*) (soff))->~G__TTBitMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__bmatrixDict_275_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBitMatrix* dest = (TBitMatrix*) G__getstructoffset();
   *dest = *(TBitMatrix*) libp->para[0].ref;
   const TBitMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TByteMatrix */
static int G__bmatrixDict_276_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TByteMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TByteMatrix[n];
     } else {
       p = new((void*) gvp) TByteMatrix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TByteMatrix;
     } else {
       p = new((void*) gvp) TByteMatrix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TByteMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TByteMatrix((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TByteMatrix((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TByteMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TByteMatrix(
(long) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TByteMatrix(
(long) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TByteMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TByteMatrix(*(TBaseMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TByteMatrix(*(TBaseMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TByteMatrix*) G__getstructoffset())->SetAngle((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TByteMatrix*) G__getstructoffset())->GetAngle((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TByteMatrix*) G__getstructoffset())->GetByte((int) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (long) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TByteMatrix*) G__getstructoffset())->SetByte((long) G__int(libp->para[0]), (long) G__int(libp->para[1])
, (unsigned char) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TByteMatrix*) G__getstructoffset())->SetByte((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TByteMatrix*) G__getstructoffset())->ClearByte((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TByteMatrix*) G__getstructoffset())->ClearAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TByteMatrix*) G__getstructoffset())->Add1((long) G__int(libp->para[0]), (long) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TByteMatrix& obj = ((TByteMatrix*) G__getstructoffset())->operator+=(*(TBitMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TByteMatrix& obj = ((TByteMatrix*) G__getstructoffset())->operator+=(*(TByteMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TByteMatrix*) G__getstructoffset())->Pick8((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TByteMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TByteMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TByteMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TByteMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TByteMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TByteMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TByteMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TByteMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_276_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TByteMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__bmatrixDict_276_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TByteMatrix* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TByteMatrix(*(TByteMatrix*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TByteMatrix G__TTByteMatrix;
static int G__bmatrixDict_276_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TByteMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TByteMatrix*) (soff+(sizeof(TByteMatrix)*i)))->~G__TTByteMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TByteMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TByteMatrix*) (soff))->~G__TTByteMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__bmatrixDict_276_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TByteMatrix* dest = (TByteMatrix*) G__getstructoffset();
   *dest = *(TByteMatrix*) libp->para[0].ref;
   const TByteMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TBitView */
static int G__bmatrixDict_343_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBitView* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBitView[n];
     } else {
       p = new((void*) gvp) TBitView[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBitView;
     } else {
       p = new((void*) gvp) TBitView;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBitView));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBitView* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TBitView((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) TBitView((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBitView));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TBitView*) G__getstructoffset())->GetZ1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TBitView*) G__getstructoffset())->GetZ2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TBitView*) G__getstructoffset())->GetZ3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TBitView*) G__getstructoffset())->GetZ4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBitView*) G__getstructoffset())->AddNewLayer((TBitMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TBitView*) G__getstructoffset())->GetLayer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TBitView*) G__getstructoffset())->operator[]((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBitView*) G__getstructoffset())->GetNumberOfLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      ((TBitView*) G__getstructoffset())->FillBitView(
(EdbView*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((TBitView*) G__getstructoffset())->FillBitView(
(EdbView*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (int) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((TBitView*) G__getstructoffset())->FillBitView(
(EdbView*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TBitView::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBitView::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TBitView::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TBitView::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBitView*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBitView::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBitView::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBitView::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_343_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBitView::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__bmatrixDict_343_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TBitView* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TBitView(*(TBitView*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBitView));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TBitView G__TTBitView;
static int G__bmatrixDict_343_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TBitView*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TBitView*) (soff+(sizeof(TBitView)*i)))->~G__TTBitView();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TBitView*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TBitView*) (soff))->~G__TTBitView();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__bmatrixDict_343_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBitView* dest = (TBitView*) G__getstructoffset();
   *dest = *(TBitView*) libp->para[0].ref;
   const TBitView& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TBinTracking */
static int G__bmatrixDict_344_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBinTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBinTracking[n];
     } else {
       p = new((void*) gvp) TBinTracking[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBinTracking;
     } else {
       p = new((void*) gvp) TBinTracking;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBinTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TBinTracking(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) TBinTracking(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBinTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 8
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TBinTracking(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7]));
   } else {
     p = new((void*) gvp) TBinTracking(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TBinTracking*) G__getstructoffset())->GetElement((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TBinTracking*) G__getstructoffset())->GetElement((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TBinTracking*) G__getstructoffset())->operator[]((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBinTracking*) G__getstructoffset())->GetNelements());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBinTracking*) G__getstructoffset())->FillByteArray((TBitView*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TBinTracking*) G__getstructoffset())->FindBinTracks((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBinTracking*) G__getstructoffset())->ImproveTracksArray((TObjArray*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 13:
      G__letint(result7, 85, (long) ((TBinTracking*) G__getstructoffset())->AdoptSegment(
(EdbView*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (int) G__int(libp->para[8]), (float) G__double(libp->para[9])
, (int) G__int(libp->para[10]), (int) G__int(libp->para[11])
, (int) G__int(libp->para[12])));
      break;
   case 12:
      G__letint(result7, 85, (long) ((TBinTracking*) G__getstructoffset())->AdoptSegment(
(EdbView*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (int) G__int(libp->para[8]), (float) G__double(libp->para[9])
, (int) G__int(libp->para[10]), (int) G__int(libp->para[11])));
      break;
   case 11:
      G__letint(result7, 85, (long) ((TBinTracking*) G__getstructoffset())->AdoptSegment(
(EdbView*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (int) G__int(libp->para[8]), (float) G__double(libp->para[9])
, (int) G__int(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 85, (long) ((TBinTracking*) G__getstructoffset())->AdoptSegment(
(EdbView*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (int) G__int(libp->para[8]), (float) G__double(libp->para[9])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TBinTracking*) G__getstructoffset())->Histo((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TBinTracking::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBinTracking::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TBinTracking::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TBinTracking::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBinTracking*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBinTracking::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBinTracking::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBinTracking::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_344_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBinTracking::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__bmatrixDict_344_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TBinTracking* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TBinTracking(*(TBinTracking*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TBinTracking G__TTBinTracking;
static int G__bmatrixDict_344_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TBinTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TBinTracking*) (soff+(sizeof(TBinTracking)*i)))->~G__TTBinTracking();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TBinTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TBinTracking*) (soff))->~G__TTBinTracking();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__bmatrixDict_344_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBinTracking* dest = (TBinTracking*) G__getstructoffset();
   *dest = *(TBinTracking*) libp->para[0].ref;
   const TBinTracking& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Deriv */
static int G__bmatrixDict_345_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Deriv* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Deriv[n];
     } else {
       p = new((void*) gvp) Deriv[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Deriv;
     } else {
       p = new((void*) gvp) Deriv;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_Deriv));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Deriv*) G__getstructoffset())->derivate((EdbFrame*) G__int(libp->para[0]), (EdbFrame*) G__int(libp->para[1])
, (EdbFrame*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Deriv*) G__getstructoffset())->GetDerivate((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Deriv*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Deriv*) G__getstructoffset())->GetD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Deriv::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Deriv::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Deriv::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Deriv::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Deriv*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Deriv::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Deriv::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Deriv::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__bmatrixDict_345_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Deriv::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__bmatrixDict_345_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Deriv* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Deriv(*(Deriv*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__bmatrixDictLN_Deriv));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Deriv G__TDeriv;
static int G__bmatrixDict_345_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Deriv*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Deriv*) (soff+(sizeof(Deriv)*i)))->~G__TDeriv();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Deriv*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Deriv*) (soff))->~G__TDeriv();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__bmatrixDict_345_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Deriv* dest = (Deriv*) G__getstructoffset();
   *dest = *(Deriv*) libp->para[0].ref;
   const Deriv& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TBaseMatrix */

/* TBitMatrix */

/* TByteMatrix */

/* TBitView */

/* TBinTracking */

/* Deriv */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncbmatrixDict {
 public:
  G__Sizep2memfuncbmatrixDict(): p(&G__Sizep2memfuncbmatrixDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncbmatrixDict::*p)();
};

size_t G__get_sizep2memfuncbmatrixDict()
{
  G__Sizep2memfuncbmatrixDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancebmatrixDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__bmatrixDictLN_TBaseMatrix))) {
     TBaseMatrix *G__Lderived;
     G__Lderived=(TBaseMatrix*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBaseMatrix),G__get_linked_tagnum(&G__bmatrixDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix))) {
     TBitMatrix *G__Lderived;
     G__Lderived=(TBitMatrix*)0x1000;
     {
       TBaseMatrix *G__Lpbase=(TBaseMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix),G__get_linked_tagnum(&G__bmatrixDictLN_TBaseMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix),G__get_linked_tagnum(&G__bmatrixDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix))) {
     TByteMatrix *G__Lderived;
     G__Lderived=(TByteMatrix*)0x1000;
     {
       TBaseMatrix *G__Lpbase=(TBaseMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix),G__get_linked_tagnum(&G__bmatrixDictLN_TBaseMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix),G__get_linked_tagnum(&G__bmatrixDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__bmatrixDictLN_TBitView))) {
     TBitView *G__Lderived;
     G__Lderived=(TBitView*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBitView),G__get_linked_tagnum(&G__bmatrixDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking))) {
     TBinTracking *G__Lderived;
     G__Lderived=(TBinTracking*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking),G__get_linked_tagnum(&G__bmatrixDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__bmatrixDictLN_Deriv))) {
     Deriv *G__Lderived;
     G__Lderived=(Deriv*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__bmatrixDictLN_Deriv),G__get_linked_tagnum(&G__bmatrixDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablebmatrixDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("iterator<iterator_traits<string::iterator>::iterator_category,iterator_traits<string::iterator>::value_type,iterator_traits<string::iterator>::difference_type,iterator_traits<string::iterator>::pointer,iterator_traits<string::iterator>::reference>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long,char*>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<string::const_iterator>::iterator_category,iterator_traits<string::const_iterator>::value_type,iterator_traits<string::const_iterator>::difference_type,iterator_traits<string::const_iterator>::pointer,iterator_traits<string::const_iterator>::reference>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__bmatrixDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__bmatrixDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__bmatrixDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__bmatrixDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__bmatrixDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__bmatrixDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__bmatrixDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__bmatrixDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__bmatrixDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__bmatrixDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__bmatrixDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__bmatrixDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__bmatrixDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__bmatrixDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__bmatrixDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__bmatrixDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__bmatrixDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TBaseMatrix */
static void G__setup_memvarTBaseMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBaseMatrix));
   { TBaseMatrix *p; p=(TBaseMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,2,"xSize=",0,"dimension in BIN!");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,2,"ySize=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,2,"byteSize=",0,"size in Byte!");
   G__memvar_setup((void*)0,66,0,0,-1,-1,-1,2,"mas=",0,"!");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,2,"shiftX=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,2,"shiftY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__bmatrixDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TBitMatrix */
static void G__setup_memvarTBitMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix));
   { TBitMatrix *p; p=(TBitMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"Z=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__bmatrixDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TByteMatrix */
static void G__setup_memvarTByteMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix));
   { TByteMatrix *p; p=(TByteMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"Tgx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"Tgy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__bmatrixDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TBitView */
static void G__setup_memvarTBitView(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBitView));
   { TBitView *p; p=(TBitView*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__bmatrixDictLN_TObjArray),-1,-1,2,"TBitArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"Z1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"Z2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"Z3=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"Z4=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"delta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ZBase)-(long)(p)),102,0,0,-1,-1,-1,1,"ZBase=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bitSize)-(long)(p)),102,0,0,-1,-1,-1,1,"bitSize=",0,"size of bit in microns");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__bmatrixDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TBinTracking */
static void G__setup_memvarTBinTracking(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking));
   { TBinTracking *p; p=(TBinTracking*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__bmatrixDictLN_TObjArray),-1,-1,2,"TByteArray=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tgxmin)-(long)(p)),100,0,0,-1,-1,-1,1,"Tgxmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tgxmax)-(long)(p)),100,0,0,-1,-1,-1,1,"Tgxmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tgymin)-(long)(p)),100,0,0,-1,-1,-1,1,"Tgymin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tgymax)-(long)(p)),100,0,0,-1,-1,-1,1,"Tgymax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tgstep)-(long)(p)),100,0,0,-1,-1,-1,1,"Tgstep=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ZBase)-(long)(p)),102,0,0,-1,-1,-1,1,"ZBase=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dX)-(long)(p)),100,0,0,-1,-1,-1,1,"dX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dY)-(long)(p)),100,0,0,-1,-1,-1,1,"dY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dZ)-(long)(p)),100,0,0,-1,-1,-1,1,"dZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__bmatrixDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Deriv */
static void G__setup_memvarDeriv(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__bmatrixDictLN_Deriv));
   { Deriv *p; p=(Deriv*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eZp=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eDp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__bmatrixDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarbmatrixDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTBaseMatrix(void) {
   /* TBaseMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBaseMatrix));
   G__memfunc_setup("GetPointer",1025,(G__InterfaceMethod) NULL, 66, -1, -1, 0, 0, 1, 2, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__bmatrixDict_274_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"l - - 0 - ix_size l - - 0 - iy_size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetShift",1025,G__bmatrixDict_274_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Adopt",504,G__bmatrixDict_274_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"B - - 0 - mas l - - 0 - rows "
"l - - 0 - columns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__bmatrixDict_274_0_8, 108, -1, -1, 0, 2, 1, 1, 0, 
"L - - 0 '0' ix_size L - - 0 '0' iy_size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElement",1002,G__bmatrixDict_274_0_9, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - type l - - 0 - i "
"l - - 0 - j", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,G__bmatrixDict_274_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MoveMatrix",1036,G__bmatrixDict_274_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"l - - 0 - ud l - - 0 - lr", "down +;r +", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__bmatrixDict_274_0_12, 117, G__get_linked_tagnum(&G__bmatrixDictLN_TBaseMatrix), -1, 1, 1, 1, 1, 0, "u 'TBaseMatrix' - 1 - T", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__bmatrixDict_274_0_13, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TBaseMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__bmatrixDict_274_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBaseMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__bmatrixDict_274_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TBaseMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__bmatrixDict_274_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TBaseMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__bmatrixDict_274_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__bmatrixDict_274_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBaseMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__bmatrixDict_274_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBaseMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__bmatrixDict_274_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBaseMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__bmatrixDict_274_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBaseMatrix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TBaseMatrix", 1218, G__bmatrixDict_274_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTBitMatrix(void) {
   /* TBitMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix));
   G__memfunc_setup("TBitMatrix",1000,G__bmatrixDict_275_0_1, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBitMatrix",1000,G__bmatrixDict_275_0_2, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix), -1, 0, 2, 1, 1, 0, 
"l - - 0 - x_size l - - 0 - y_size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBitMatrix",1000,G__bmatrixDict_275_0_3, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix), -1, 0, 3, 1, 1, 0, 
"l - - 0 - x_size l - - 0 - y_size "
"f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBitMatrix",1000,G__bmatrixDict_275_0_4, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix), -1, 0, 1, 1, 1, 0, "u 'TBaseMatrix' - 1 - T", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBit",575,G__bmatrixDict_275_0_5, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - type l - - 0 - i "
"l - - 0 - j", "i - x, j - y	type=0 - init mas 1 - shifted mas allways!", (void*) NULL, 0);
   G__memfunc_setup("SetBit",587,G__bmatrixDict_275_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"l - - 0 - i l - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBit",587,G__bmatrixDict_275_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"l - - 0 - i l - - 0 - j "
"i - - 0 - area", "area in bins!!!!!!", (void*) NULL, 0);
   G__memfunc_setup("ClearBit",774,G__bmatrixDict_275_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"l - - 0 - i l - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearBit",774,G__bmatrixDict_275_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"l - - 0 - i l - - 0 - j "
"i - - 0 - area", "area in bins!!!!!!", (void*) NULL, 0);
   G__memfunc_setup("GetElement",1002,(G__InterfaceMethod) NULL,105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - type l - - 0 - i "
"l - - 0 - j", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZ",390,G__bmatrixDict_275_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__bmatrixDict_275_0_12, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__bmatrixDict_275_0_13, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TBitMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__bmatrixDict_275_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBitMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__bmatrixDict_275_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TBitMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__bmatrixDict_275_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TBitMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__bmatrixDict_275_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__bmatrixDict_275_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBitMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__bmatrixDict_275_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBitMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__bmatrixDict_275_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBitMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__bmatrixDict_275_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBitMatrix::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TBitMatrix", 1000, G__bmatrixDict_275_0_25, (int) ('i'), G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix), -1, 0, 1, 1, 1, 0, "u 'TBitMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TBitMatrix", 1126, G__bmatrixDict_275_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__bmatrixDict_275_0_27, (int) ('u'), G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix), -1, 1, 1, 1, 1, 0, "u 'TBitMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTByteMatrix(void) {
   /* TByteMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix));
   G__memfunc_setup("TByteMatrix",1117,G__bmatrixDict_276_0_1, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TByteMatrix",1117,G__bmatrixDict_276_0_2, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 0, 2, 1, 1, 0, 
"l - - 0 - x_size l - - 0 - y_size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TByteMatrix",1117,G__bmatrixDict_276_0_3, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 0, 4, 1, 1, 0, 
"l - - 0 - x_size l - - 0 - y_size "
"d - - 0 - tgx d - - 0 - tgy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TByteMatrix",1117,G__bmatrixDict_276_0_4, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 0, 1, 1, 1, 0, "u 'TBaseMatrix' - 1 - T", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAngle",787,G__bmatrixDict_276_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - tgx d - - 0 - tgy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngle",775,G__bmatrixDict_276_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - - 0 - tgx D - - 0 - tgy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetByte",692,G__bmatrixDict_276_0_7, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - type l - - 0 - i "
"l - - 0 - j", "i - x, j - y", (void*) NULL, 0);
   G__memfunc_setup("SetByte",704,G__bmatrixDict_276_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"l - - 0 - i l - - 0 - j "
"b - - 0 '0xff' byte", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearByte",891,G__bmatrixDict_276_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"l - - 0 - i l - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearAll",768,G__bmatrixDict_276_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add1",314,G__bmatrixDict_276_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"l - - 0 - i l - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElement",1002,(G__InterfaceMethod) NULL,105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - type l - - 0 - i "
"l - - 0 - j", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__bmatrixDict_276_0_13, 117, G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 1, 1, 1, 1, 0, "u 'TBitMatrix' - 1 - TBit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__bmatrixDict_276_0_14, 117, G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 1, 1, 1, 1, 0, "u 'TByteMatrix' - 1 - TByt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pick8",447,G__bmatrixDict_276_0_15, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TObjArray), -1, 0, 2, 1, 1, 0, 
"i - - 0 - type i - - 0 - thr", "Array of MyPoint", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__bmatrixDict_276_0_16, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TByteMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__bmatrixDict_276_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TByteMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__bmatrixDict_276_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TByteMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__bmatrixDict_276_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TByteMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__bmatrixDict_276_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__bmatrixDict_276_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TByteMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__bmatrixDict_276_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TByteMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__bmatrixDict_276_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TByteMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__bmatrixDict_276_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TByteMatrix::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TByteMatrix", 1117, G__bmatrixDict_276_0_28, (int) ('i'), G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 0, 1, 1, 1, 0, "u 'TByteMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TByteMatrix", 1243, G__bmatrixDict_276_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__bmatrixDict_276_0_30, (int) ('u'), G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 1, 1, 1, 1, 0, "u 'TByteMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTBitView(void) {
   /* TBitView */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBitView));
   G__memfunc_setup("TBitView",782,G__bmatrixDict_343_0_1, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TBitView), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBitView",782,G__bmatrixDict_343_0_2, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TBitView), -1, 0, 2, 1, 1, 0, 
"f - - 0 - z f - - 0 - bs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ1",427,G__bmatrixDict_343_0_3, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ2",428,G__bmatrixDict_343_0_4, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ3",429,G__bmatrixDict_343_0_5, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ4",430,G__bmatrixDict_343_0_6, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddNewLayer",1072,G__bmatrixDict_343_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TBitMatrix' - 0 - TLayer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayer",797,G__bmatrixDict_343_0_8, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__bmatrixDict_343_0_9, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TBitMatrix), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfLayers",1710,G__bmatrixDict_343_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillBitView",1089,G__bmatrixDict_343_0_11, 121, -1, -1, 0, 9, 1, 1, 0, 
"U 'EdbView' - 0 - view f - - 0 - sx "
"f - - 0 - sy f - - 0 - Xmin "
"f - - 0 - Xmax f - - 0 - Ymin "
"f - - 0 - Ymax i - - 0 '1' inside "
"i - - 0 '1' rep", "in View coordinates", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__bmatrixDict_343_0_12, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TBitView::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__bmatrixDict_343_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBitView::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__bmatrixDict_343_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TBitView::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__bmatrixDict_343_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TBitView::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__bmatrixDict_343_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__bmatrixDict_343_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBitView::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__bmatrixDict_343_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBitView::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__bmatrixDict_343_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBitView::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__bmatrixDict_343_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBitView::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TBitView", 782, G__bmatrixDict_343_0_24, (int) ('i'), G__get_linked_tagnum(&G__bmatrixDictLN_TBitView), -1, 0, 1, 1, 1, 0, "u 'TBitView' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TBitView", 908, G__bmatrixDict_343_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__bmatrixDict_343_0_26, (int) ('u'), G__get_linked_tagnum(&G__bmatrixDictLN_TBitView), -1, 1, 1, 1, 1, 0, "u 'TBitView' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTBinTracking(void) {
   /* TBinTracking */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking));
   G__memfunc_setup("TBinTracking",1184,G__bmatrixDict_344_0_1, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBinTracking",1184,G__bmatrixDict_344_0_2, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking), -1, 0, 5, 1, 1, 0, 
"d - - 0 - tgxmin d - - 0 - tgxmax "
"d - - 0 - tgymin d - - 0 - tgymax "
"d - - 0 - tgstep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBinTracking",1184,G__bmatrixDict_344_0_3, 105, G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking), -1, 0, 8, 1, 1, 0, 
"d - - 0 - tgxmin d - - 0 - tgxmax "
"d - - 0 - tgymin d - - 0 - tgymax "
"d - - 0 - tgstep d - - 0 - dx "
"d - - 0 - dy d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElement",1002,G__bmatrixDict_344_0_4, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElement",1002,G__bmatrixDict_344_0_5, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 0, 2, 1, 1, 0, 
"d - - 0 - tgx d - - 0 - tgy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__bmatrixDict_344_0_6, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TByteMatrix), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNelements",1227,G__bmatrixDict_344_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillByteArray",1306,G__bmatrixDict_344_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TBitView' - 0 - Tv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBinTracks",1282,G__bmatrixDict_344_0_9, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TObjArray), -1, 0, 1, 1, 1, 0, "i - - 0 - thr", "Array of tracks !!!", (void*) NULL, 0);
   G__memfunc_setup("ImproveTracksArray",1865,G__bmatrixDict_344_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TObjArray' - 0 - tracks i - - 0 - thr "
"f - - 0 - accept", "Improve Array of tracks	(now testing)", (void*) NULL, 0);
   G__memfunc_setup("AdoptSegment",1227,G__bmatrixDict_344_0_11, 85, G__get_linked_tagnum(&G__bmatrixDictLN_EdbView), -1, 0, 13, 1, 1, 0, 
"U 'EdbView' - 0 - view f - - 0 - sx "
"f - - 0 - sy f - - 0 - Xmin "
"f - - 0 - Xmax f - - 0 - Ymin "
"f - - 0 - Ymax f - - 0 - bs "
"i - - 0 - thr f - - 0 - accept "
"i - - 0 '1' inside i - - 0 '0' excludeCommonClusters "
"i - - 0 '1' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Histo",519,G__bmatrixDict_344_0_12, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TH2F), -1, 0, 2, 1, 1, 0, 
"d - - 0 - tgx d - - 0 - tgy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__bmatrixDict_344_0_13, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TBinTracking::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__bmatrixDict_344_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBinTracking::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__bmatrixDict_344_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TBinTracking::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__bmatrixDict_344_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TBinTracking::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__bmatrixDict_344_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__bmatrixDict_344_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBinTracking::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__bmatrixDict_344_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBinTracking::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__bmatrixDict_344_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBinTracking::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__bmatrixDict_344_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBinTracking::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TBinTracking", 1184, G__bmatrixDict_344_0_25, (int) ('i'), G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking), -1, 0, 1, 1, 1, 0, "u 'TBinTracking' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TBinTracking", 1310, G__bmatrixDict_344_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__bmatrixDict_344_0_27, (int) ('u'), G__get_linked_tagnum(&G__bmatrixDictLN_TBinTracking), -1, 1, 1, 1, 1, 0, "u 'TBinTracking' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDeriv(void) {
   /* Deriv */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__bmatrixDictLN_Deriv));
   G__memfunc_setup("Deriv",506,G__bmatrixDict_345_0_1, 105, G__get_linked_tagnum(&G__bmatrixDictLN_Deriv), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("derivate",852,G__bmatrixDict_345_0_2, 102, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbFrame' - 0 - fpred U 'EdbFrame' - 0 - f "
"U 'EdbFrame' - 0 - fsuc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDerivate",1108,G__bmatrixDict_345_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - - 0 - Z F - - 0 - D", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__bmatrixDict_345_0_4, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetD",356,G__bmatrixDict_345_0_5, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__bmatrixDict_345_0_6, 85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Deriv::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__bmatrixDict_345_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Deriv::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__bmatrixDict_345_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Deriv::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__bmatrixDict_345_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Deriv::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__bmatrixDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__bmatrixDict_345_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__bmatrixDict_345_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Deriv::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__bmatrixDict_345_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Deriv::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__bmatrixDict_345_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Deriv::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__bmatrixDict_345_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Deriv::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Deriv", 506, G__bmatrixDict_345_0_18, (int) ('i'), G__get_linked_tagnum(&G__bmatrixDictLN_Deriv), -1, 0, 1, 1, 1, 0, "u 'Deriv' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Deriv", 632, G__bmatrixDict_345_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__bmatrixDict_345_0_20, (int) ('u'), G__get_linked_tagnum(&G__bmatrixDictLN_Deriv), -1, 1, 1, 1, 1, 0, "u 'Deriv' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncbmatrixDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalbmatrixDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcbmatrixDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__bmatrixDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR = { "iterator<random_access_iterator_tag,char,long,char*,char&>" , 115 , -1 };
G__linked_taginfo G__bmatrixDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__bmatrixDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__bmatrixDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__bmatrixDictLN_TBaseMatrix = { "TBaseMatrix" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TBitMatrix = { "TBitMatrix" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TByteMatrix = { "TByteMatrix" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_EdbFrame = { "EdbFrame" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_EdbView = { "EdbView" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TBitView = { "TBitView" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_TBinTracking = { "TBinTracking" , 99 , -1 };
G__linked_taginfo G__bmatrixDictLN_Deriv = { "Deriv" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablebmatrixDict() {
  G__bmatrixDictLN_TClass.tagnum = -1 ;
  G__bmatrixDictLN_TBuffer.tagnum = -1 ;
  G__bmatrixDictLN_TMemberInspector.tagnum = -1 ;
  G__bmatrixDictLN_TObject.tagnum = -1 ;
  G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR.tagnum = -1 ;
  G__bmatrixDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__bmatrixDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__bmatrixDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__bmatrixDictLN_TObjArray.tagnum = -1 ;
  G__bmatrixDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__bmatrixDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__bmatrixDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__bmatrixDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__bmatrixDictLN_TBaseMatrix.tagnum = -1 ;
  G__bmatrixDictLN_TBitMatrix.tagnum = -1 ;
  G__bmatrixDictLN_TByteMatrix.tagnum = -1 ;
  G__bmatrixDictLN_TH2F.tagnum = -1 ;
  G__bmatrixDictLN_EdbFrame.tagnum = -1 ;
  G__bmatrixDictLN_EdbView.tagnum = -1 ;
  G__bmatrixDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__bmatrixDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__bmatrixDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__bmatrixDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__bmatrixDictLN_TBitView.tagnum = -1 ;
  G__bmatrixDictLN_TBinTracking.tagnum = -1 ;
  G__bmatrixDictLN_Deriv.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablebmatrixDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TBaseMatrix),sizeof(TBaseMatrix),-1,65281,(char*)NULL,G__setup_memvarTBaseMatrix,G__setup_memfuncTBaseMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TBitMatrix),sizeof(TBitMatrix),-1,62720,(char*)NULL,G__setup_memvarTBitMatrix,G__setup_memfuncTBitMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TByteMatrix),sizeof(TByteMatrix),-1,62720,(char*)NULL,G__setup_memvarTByteMatrix,G__setup_memfuncTByteMatrix);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_EdbFrame);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_EdbView);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TMatrixTBaselEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TBitView),sizeof(TBitView),-1,62720,(char*)NULL,G__setup_memvarTBitView,G__setup_memfuncTBitView);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__bmatrixDictLN_TBinTracking),sizeof(TBinTracking),-1,62720,(char*)NULL,G__setup_memvarTBinTracking,G__setup_memfuncTBinTracking);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__bmatrixDictLN_Deriv),sizeof(Deriv),-1,29952,(char*)NULL,G__setup_memvarDeriv,G__setup_memfuncDeriv);
}
extern "C" void G__cpp_setupbmatrixDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupbmatrixDict()");
  G__set_cpp_environmentbmatrixDict();
  G__cpp_setup_tagtablebmatrixDict();

  G__cpp_setup_inheritancebmatrixDict();

  G__cpp_setup_typetablebmatrixDict();

  G__cpp_setup_memvarbmatrixDict();

  G__cpp_setup_memfuncbmatrixDict();
  G__cpp_setup_globalbmatrixDict();
  G__cpp_setup_funcbmatrixDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncbmatrixDict();
  return;
}
class G__cpp_setup_initbmatrixDict {
  public:
    G__cpp_setup_initbmatrixDict() { G__add_setup_func("bmatrixDict",(G__incsetup)(&G__cpp_setupbmatrixDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initbmatrixDict() { G__remove_setup_func("bmatrixDict"); }
};
G__cpp_setup_initbmatrixDict G__cpp_setup_initializerbmatrixDict;

