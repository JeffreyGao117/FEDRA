//
// File generated by C:\root_v5.34.38\bin\rootcint.EXE at Tue Jun 02 09:04:12 2020

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME EGADict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "EGADict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void EdbGA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbGA(void *p = 0);
   static void *newArray_EdbGA(Long_t size, void *p);
   static void delete_EdbGA(void *p);
   static void deleteArray_EdbGA(void *p);
   static void destruct_EdbGA(void *p);
   static void streamer_EdbGA(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbGA*)
   {
      ::EdbGA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbGA >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbGA", ::EdbGA::Class_Version(), "./EdbGA.h", 17,
                  typeid(::EdbGA), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbGA::Dictionary, isa_proxy, 0,
                  sizeof(::EdbGA) );
      instance.SetNew(&new_EdbGA);
      instance.SetNewArray(&newArray_EdbGA);
      instance.SetDelete(&delete_EdbGA);
      instance.SetDeleteArray(&deleteArray_EdbGA);
      instance.SetDestructor(&destruct_EdbGA);
      instance.SetStreamerFunc(&streamer_EdbGA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbGA*)
   {
      return GenerateInitInstanceLocal((::EdbGA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbGA*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbFIRF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbFIRF(void *p = 0);
   static void *newArray_EdbFIRF(Long_t size, void *p);
   static void delete_EdbFIRF(void *p);
   static void deleteArray_EdbFIRF(void *p);
   static void destruct_EdbFIRF(void *p);
   static void streamer_EdbFIRF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbFIRF*)
   {
      ::EdbFIRF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbFIRF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbFIRF", ::EdbFIRF::Class_Version(), "./EdbIP.h", 22,
                  typeid(::EdbFIRF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbFIRF::Dictionary, isa_proxy, 0,
                  sizeof(::EdbFIRF) );
      instance.SetNew(&new_EdbFIRF);
      instance.SetNewArray(&newArray_EdbFIRF);
      instance.SetDelete(&delete_EdbFIRF);
      instance.SetDeleteArray(&deleteArray_EdbFIRF);
      instance.SetDestructor(&destruct_EdbFIRF);
      instance.SetStreamerFunc(&streamer_EdbFIRF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbFIRF*)
   {
      return GenerateInitInstanceLocal((::EdbFIRF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbFIRF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbClustP_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbClustP(void *p = 0);
   static void *newArray_EdbClustP(Long_t size, void *p);
   static void delete_EdbClustP(void *p);
   static void deleteArray_EdbClustP(void *p);
   static void destruct_EdbClustP(void *p);
   static void streamer_EdbClustP(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbClustP*)
   {
      ::EdbClustP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbClustP >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbClustP", ::EdbClustP::Class_Version(), "./EdbIP.h", 58,
                  typeid(::EdbClustP), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbClustP::Dictionary, isa_proxy, 0,
                  sizeof(::EdbClustP) );
      instance.SetNew(&new_EdbClustP);
      instance.SetNewArray(&newArray_EdbClustP);
      instance.SetDelete(&delete_EdbClustP);
      instance.SetDeleteArray(&deleteArray_EdbClustP);
      instance.SetDestructor(&destruct_EdbClustP);
      instance.SetStreamerFunc(&streamer_EdbClustP);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbClustP*)
   {
      return GenerateInitInstanceLocal((::EdbClustP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbClustP*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbIP_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbIP(void *p = 0);
   static void *newArray_EdbIP(Long_t size, void *p);
   static void delete_EdbIP(void *p);
   static void deleteArray_EdbIP(void *p);
   static void destruct_EdbIP(void *p);
   static void streamer_EdbIP(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbIP*)
   {
      ::EdbIP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbIP >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbIP", ::EdbIP::Class_Version(), "./EdbIP.h", 87,
                  typeid(::EdbIP), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbIP::Dictionary, isa_proxy, 0,
                  sizeof(::EdbIP) );
      instance.SetNew(&new_EdbIP);
      instance.SetNewArray(&newArray_EdbIP);
      instance.SetDelete(&delete_EdbIP);
      instance.SetDeleteArray(&deleteArray_EdbIP);
      instance.SetDestructor(&destruct_EdbIP);
      instance.SetStreamerFunc(&streamer_EdbIP);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbIP*)
   {
      return GenerateInitInstanceLocal((::EdbIP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbIP*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr EdbGA::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbGA::Class_Name()
{
   return "EdbGA";
}

//______________________________________________________________________________
const char *EdbGA::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbGA*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbGA::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbGA*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbGA::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbGA*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbGA::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbGA*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbFIRF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbFIRF::Class_Name()
{
   return "EdbFIRF";
}

//______________________________________________________________________________
const char *EdbFIRF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbFIRF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbFIRF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbFIRF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbFIRF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbFIRF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbFIRF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbFIRF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbClustP::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbClustP::Class_Name()
{
   return "EdbClustP";
}

//______________________________________________________________________________
const char *EdbClustP::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClustP*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbClustP::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClustP*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbClustP::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClustP*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbClustP::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClustP*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbIP::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbIP::Class_Name()
{
   return "EdbIP";
}

//______________________________________________________________________________
const char *EdbIP::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbIP*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbIP::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbIP*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbIP::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbIP*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbIP::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbIP*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void EdbGA::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbGA.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eRun;
      R__b >> eBinX;
      R__b >> eBinY;
      R__b >> eBinZ;
      R__b >> eVid;
      R__b >> eGrainsFile;
      R__b >> eGrains;
      eClusters->Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbGA::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbGA::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eRun;
      R__b << eBinX;
      R__b << eBinY;
      R__b << eBinZ;
      R__b << eVid;
      R__b << eGrainsFile;
      R__b << eGrains;
      eClusters->Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbGA::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbGA.
      typedef ::EdbGA msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eRun", &eRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinX", &eBinX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinY", &eBinY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinZ", &eBinZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVid", &eVid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGrainsFile", &eGrainsFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGrains", &eGrains);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eClusters", &eClusters);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbGA(void *p) {
      return  p ? new(p) ::EdbGA : new ::EdbGA;
   }
   static void *newArray_EdbGA(Long_t nElements, void *p) {
      return p ? new(p) ::EdbGA[nElements] : new ::EdbGA[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbGA(void *p) {
      delete ((::EdbGA*)p);
   }
   static void deleteArray_EdbGA(void *p) {
      delete [] ((::EdbGA*)p);
   }
   static void destruct_EdbGA(void *p) {
      typedef ::EdbGA current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbGA(TBuffer &buf, void *obj) {
      ((::EdbGA*)obj)->::EdbGA::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbGA

//______________________________________________________________________________
void EdbFIRF::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbFIRF.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> eArr;
      R__b >> eColumns;
      R__b >> eRows;
      R__b.CheckByteCount(R__s, R__c, EdbFIRF::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbFIRF::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << eArr;
      R__b << eColumns;
      R__b << eRows;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbFIRF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbFIRF.
      typedef ::EdbFIRF msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eArr", &eArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eColumns", &eColumns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRows", &eRows);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbFIRF(void *p) {
      return  p ? new(p) ::EdbFIRF : new ::EdbFIRF;
   }
   static void *newArray_EdbFIRF(Long_t nElements, void *p) {
      return p ? new(p) ::EdbFIRF[nElements] : new ::EdbFIRF[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbFIRF(void *p) {
      delete ((::EdbFIRF*)p);
   }
   static void deleteArray_EdbFIRF(void *p) {
      delete [] ((::EdbFIRF*)p);
   }
   static void destruct_EdbFIRF(void *p) {
      typedef ::EdbFIRF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbFIRF(TBuffer &buf, void *obj) {
      ((::EdbFIRF*)obj)->::EdbFIRF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbFIRF

//______________________________________________________________________________
void EdbClustP::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbClustP.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbCluster::Streamer(R__b);
      R__b >> eXcg;
      R__b >> eYcg;
      R__b >> ePeak;
      R__b >> eXp;
      R__b >> eYp;
      R__b.CheckByteCount(R__s, R__c, EdbClustP::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbClustP::IsA(), kTRUE);
      EdbCluster::Streamer(R__b);
      R__b << eXcg;
      R__b << eYcg;
      R__b << ePeak;
      R__b << eXp;
      R__b << eYp;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbClustP::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbClustP.
      typedef ::EdbClustP msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXcg", &eXcg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYcg", &eYcg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePeak", &ePeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXp", &eXp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYp", &eYp);
      EdbCluster::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbClustP(void *p) {
      return  p ? new(p) ::EdbClustP : new ::EdbClustP;
   }
   static void *newArray_EdbClustP(Long_t nElements, void *p) {
      return p ? new(p) ::EdbClustP[nElements] : new ::EdbClustP[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbClustP(void *p) {
      delete ((::EdbClustP*)p);
   }
   static void deleteArray_EdbClustP(void *p) {
      delete [] ((::EdbClustP*)p);
   }
   static void destruct_EdbClustP(void *p) {
      typedef ::EdbClustP current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbClustP(TBuffer &buf, void *obj) {
      ((::EdbClustP*)obj)->::EdbClustP::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbClustP

//______________________________________________________________________________
void EdbIP::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbIP.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eFIR;
      R__b >> eThr;
      R__b.CheckByteCount(R__s, R__c, EdbIP::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbIP::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eFIR;
      R__b << eThr;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbIP::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbIP.
      typedef ::EdbIP msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFIR", &eFIR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eThr", &eThr);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbIP(void *p) {
      return  p ? new(p) ::EdbIP : new ::EdbIP;
   }
   static void *newArray_EdbIP(Long_t nElements, void *p) {
      return p ? new(p) ::EdbIP[nElements] : new ::EdbIP[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbIP(void *p) {
      delete ((::EdbIP*)p);
   }
   static void deleteArray_EdbIP(void *p) {
      delete [] ((::EdbIP*)p);
   }
   static void destruct_EdbIP(void *p) {
      typedef ::EdbIP current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbIP(TBuffer &buf, void *obj) {
      ((::EdbIP*)obj)->::EdbIP::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbIP

/********************************************************
* EGADict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableEGADict();

extern "C" void G__set_cpp_environmentEGADict() {
  G__add_ipath(".");
  G__add_ipath("..\\..\\include");
  G__cpp_reset_tagtableEGADict();
}
#include <new>
extern "C" int G__cpp_dllrevEGADict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* EdbGA */
static int G__EGADict_614_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbGA* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbGA[n];
     } else {
       p = new((void*) gvp) EdbGA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbGA;
     } else {
       p = new((void*) gvp) EdbGA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbGA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbGA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbGA(
(char*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) EdbGA(
(char*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbGA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbGA*) G__getstructoffset())->SetRun((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbGA*) G__getstructoffset())->SetBin((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbGA*) G__getstructoffset())->GetClustPFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbGA*) G__getstructoffset())->InitTree((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbGA*) G__getstructoffset())->InitTree();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbGA*) G__getstructoffset())->CheckViewGrains((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbGA*) G__getstructoffset())->CheckViewGrains();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbGA*) G__getstructoffset())->CheckViewGrains((int) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbGA*) G__getstructoffset())->CheckViewGrains((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbGA*) G__getstructoffset())->VerticalChains((TClonesArray*) G__int(libp->para[0]), *(TIndexCell*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbGA*) G__getstructoffset())->VerticalChainsA((TClonesArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbGA*) G__getstructoffset())->MakeGrainsTree((TClonesArray*) G__int(libp->para[0]), *(TIndexCell*) libp->para[1].ref
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbGA*) G__getstructoffset())->MakeGrainsTree((TClonesArray*) G__int(libp->para[0]), *(TIndexCell*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbGA*) G__getstructoffset())->GrainStat((TClonesArray*) G__int(libp->para[0]), *(float*) G__Floatref(&libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbGA*) G__getstructoffset())->GrainStat2(
(TClonesArray*) G__int(libp->para[0]), *(float*) G__Floatref(&libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3])
, *(float*) G__Floatref(&libp->para[4]), *(float*) G__Floatref(&libp->para[5])
, *(float*) G__Floatref(&libp->para[6]), *(float*) G__Floatref(&libp->para[7])
, *(float*) G__Floatref(&libp->para[8]), *(int*) G__Intref(&libp->para[9])
, *(int*) G__Intref(&libp->para[10])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbGA*) G__getstructoffset())->SelectGrains(*((TCut*) G__int(libp->para[0])), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbGA*) G__getstructoffset())->SelectGrains(*((TCut*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbGA*) G__getstructoffset())->SelectGrains((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbGA*) G__getstructoffset())->SelectGrains((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbGA*) G__getstructoffset())->GetTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbGA::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbGA::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbGA::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbGA::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbGA*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbGA::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbGA::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbGA::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_614_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbGA::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EGADict_614_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbGA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbGA(*(EdbGA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbGA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbGA G__TEdbGA;
static int G__EGADict_614_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbGA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbGA*) (soff+(sizeof(EdbGA)*i)))->~G__TEdbGA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbGA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbGA*) (soff))->~G__TEdbGA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EGADict_614_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbGA* dest = (EdbGA*) G__getstructoffset();
   *dest = *(EdbGA*) libp->para[0].ref;
   const EdbGA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbFIRF */
static int G__EGADict_616_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbFIRF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbFIRF[n];
     } else {
       p = new((void*) gvp) EdbFIRF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbFIRF;
     } else {
       p = new((void*) gvp) EdbFIRF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbFIRF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbFIRF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbFIRF((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) EdbFIRF((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbFIRF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbFIRF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbFIRF((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbFIRF((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbFIRF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbFIRF*) G__getstructoffset())->Cell((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const EdbFIRF*) G__getstructoffset())->GetBuffer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbFIRF*) G__getstructoffset())->SetArr((int) G__int(libp->para[0]), (float*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbFIRF*) G__getstructoffset())->SetAt((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbFIRF*) G__getstructoffset())->Reflect4();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbFIRF*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbFIRF::PrintList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbFIRF*) G__getstructoffset())->ApplyTo((EdbImage*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbFIRF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbFIRF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbFIRF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbFIRF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbFIRF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbFIRF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbFIRF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbFIRF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_616_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbFIRF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EGADict_616_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbFIRF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbFIRF(*(EdbFIRF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbFIRF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbFIRF G__TEdbFIRF;
static int G__EGADict_616_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbFIRF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbFIRF*) (soff+(sizeof(EdbFIRF)*i)))->~G__TEdbFIRF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbFIRF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbFIRF*) (soff))->~G__TEdbFIRF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EGADict_616_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbFIRF* dest = (EdbFIRF*) G__getstructoffset();
   *dest = *(EdbFIRF*) libp->para[0].ref;
   const EdbFIRF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbClustP */
static int G__EGADict_617_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbClustP* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbClustP[n];
     } else {
       p = new((void*) gvp) EdbClustP[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbClustP;
     } else {
       p = new((void*) gvp) EdbClustP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbClustP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustP*) G__getstructoffset())->SetCG((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustP*) G__getstructoffset())->SetPeak((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbClustP*) G__getstructoffset())->Xcg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbClustP*) G__getstructoffset())->Ycg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbClustP*) G__getstructoffset())->Peak());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbClustP*) G__getstructoffset())->Xp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbClustP*) G__getstructoffset())->Yp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustP*) G__getstructoffset())->AddPixel((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustP*) G__getstructoffset())->AddPixelSum((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustP*) G__getstructoffset())->AddClusterSum((EdbClustP*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustP*) G__getstructoffset())->Normalize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustP*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustP*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbClustP::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbClustP::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbClustP::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbClustP::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustP*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbClustP::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbClustP::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbClustP::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_617_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbClustP::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EGADict_617_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbClustP* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbClustP(*(EdbClustP*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbClustP));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbClustP G__TEdbClustP;
static int G__EGADict_617_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbClustP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbClustP*) (soff+(sizeof(EdbClustP)*i)))->~G__TEdbClustP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbClustP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbClustP*) (soff))->~G__TEdbClustP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EGADict_617_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbClustP* dest = (EdbClustP*) G__getstructoffset();
   *dest = *(EdbClustP*) libp->para[0].ref;
   const EdbClustP& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbIP */
static int G__EGADict_618_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbIP* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbIP[n];
     } else {
       p = new((void*) gvp) EdbIP[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbIP;
     } else {
       p = new((void*) gvp) EdbIP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbIP));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbIP*) G__getstructoffset())->InitTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbIP*) G__getstructoffset())->SetFIR((EdbFIRF*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbIP*) G__getstructoffset())->SetThr((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbIP::Peak8((TH2F*) G__int(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbIP::Peak12((TH2F*) G__int(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbIP*) G__getstructoffset())->CutBG((EdbFrame*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbIP*) G__getstructoffset())->Clusterize((EdbFrame*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbIP::Clusterize((TH2F*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (TTree*) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) EdbIP::BurnPix((TH2F*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, *(EdbClustP*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbIP*) G__getstructoffset())->Clusterize2((EdbFrame*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbIP::Clusterize2((TH2F*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (TTree*) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbIP::Clusterize((EdbFrame*) G__int(libp->para[0]), (unsigned char) G__int(libp->para[1])
, *(EdbView*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbIP::BurnPix((unsigned char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (unsigned char) G__int(libp->para[4]), *(EdbCluster*) libp->para[5].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbIP::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbIP::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbIP::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbIP::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbIP*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbIP::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbIP::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbIP::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EGADict_618_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbIP::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EGADict_618_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbIP* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbIP(*(EdbIP*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EGADictLN_EdbIP));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbIP G__TEdbIP;
static int G__EGADict_618_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbIP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbIP*) (soff+(sizeof(EdbIP)*i)))->~G__TEdbIP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbIP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbIP*) (soff))->~G__TEdbIP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EGADict_618_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbIP* dest = (EdbIP*) G__getstructoffset();
   *dest = *(EdbIP*) libp->para[0].ref;
   const EdbIP& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* EdbGA */

/* EdbFIRF */

/* EdbClustP */

/* EdbIP */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncEGADict {
 public:
  G__Sizep2memfuncEGADict(): p(&G__Sizep2memfuncEGADict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncEGADict::*p)();
};

size_t G__get_sizep2memfuncEGADict()
{
  G__Sizep2memfuncEGADict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceEGADict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EGADictLN_EdbGA))) {
     EdbGA *G__Lderived;
     G__Lderived=(EdbGA*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EGADictLN_EdbGA),G__get_linked_tagnum(&G__EGADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EGADictLN_EdbFIRF))) {
     EdbFIRF *G__Lderived;
     G__Lderived=(EdbFIRF*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EGADictLN_EdbFIRF),G__get_linked_tagnum(&G__EGADictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EGADictLN_EdbFIRF),G__get_linked_tagnum(&G__EGADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EGADictLN_EdbClustP))) {
     EdbClustP *G__Lderived;
     G__Lderived=(EdbClustP*)0x1000;
     {
       EdbCluster *G__Lpbase=(EdbCluster*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EGADictLN_EdbClustP),G__get_linked_tagnum(&G__EGADictLN_EdbCluster),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EGADictLN_EdbClustP),G__get_linked_tagnum(&G__EGADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint3D *G__Lpbase=(EdbPoint3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EGADictLN_EdbClustP),G__get_linked_tagnum(&G__EGADictLN_EdbPoint3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EGADictLN_EdbClustP),G__get_linked_tagnum(&G__EGADictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EGADictLN_EdbClustP),G__get_linked_tagnum(&G__EGADictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EGADictLN_EdbIP))) {
     EdbIP *G__Lderived;
     G__Lderived=(EdbIP*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EGADictLN_EdbIP),G__get_linked_tagnum(&G__EGADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableEGADict() {

   /* Setting up typedef entry */
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("iterator<iterator_traits<string::iterator>::iterator_category,iterator_traits<string::iterator>::value_type,iterator_traits<string::iterator>::difference_type,iterator_traits<string::iterator>::pointer,iterator_traits<string::iterator>::reference>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long,char*>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<string::const_iterator>::iterator_category,iterator_traits<string::const_iterator>::value_type,iterator_traits<string::const_iterator>::difference_type,iterator_traits<string::const_iterator>::pointer,iterator_traits<string::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EGADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EGADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EGADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EGADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EGADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EGADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EGADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EGADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EGADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EGADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EGADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EGADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__EGADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__EGADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EGADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EGADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__EGADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* EdbGA */
static void G__setup_memvarEdbGA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EGADictLN_EdbGA));
   { EdbGA *p; p=(EdbGA*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EGADictLN_EdbRun),-1,-1,4,"eRun=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eBinX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eBinY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eBinZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eVid=",0,"view under prcessing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EGADictLN_TFile),-1,-1,4,"eGrainsFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EGADictLN_TTree),-1,-1,4,"eGrains=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EGADictLN_TClonesArray),-1,-1,4,"eClusters=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EGADictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbFIRF */
static void G__setup_memvarEdbFIRF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EGADictLN_EdbFIRF));
   { EdbFIRF *p; p=(EdbFIRF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EGADictLN_TArrayF),-1,-1,4,"eArr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eColumns=",0,"number of columns of the matrix (1 row length)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eRows=",0,"number of rows of the matrix");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"eg3x3A[]=",0,"!");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"egHP1[]=",0,"!");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"egHP2[]=",0,"!");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"egHP3[]=",0,"!");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"eg5x5A[]=",0,"!");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"eg5x5B[]=",0,"!");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"eg5x5C[]=",0,"!");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"eg6x6A[]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EGADictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbClustP */
static void G__setup_memvarEdbClustP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EGADictLN_EdbClustP));
   { EdbClustP *p; p=(EdbClustP*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eXcg=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eYcg=",0,"center of gravity with gray level");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ePeak=",0,"peak height (above threshold)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eXp=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eYp=",0,"peak position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EGADictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbIP */
static void G__setup_memvarEdbIP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EGADictLN_EdbIP));
   { EdbIP *p; p=(EdbIP*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EGADictLN_EdbFIRF),-1,-1,4,"eFIR=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eThr=",0,"threshold");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EGADictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarEGADict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEdbGA(void) {
   /* EdbGA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EGADictLN_EdbGA));
   G__memfunc_setup("EdbGA",403,G__EGADict_614_0_1, 105, G__get_linked_tagnum(&G__EGADictLN_EdbGA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbGA",403,G__EGADict_614_0_2, 105, G__get_linked_tagnum(&G__EGADictLN_EdbGA), -1, 0, 4, 1, 1, 0, 
"C - - 0 - fname f - - 0 - bx "
"f - - 0 - by f - - 0 - bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRun",609,G__EGADict_614_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBin",581,G__EGADict_614_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - bx f - - 0 - by "
"f - - 0 - bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClustPFile",1275,G__EGADict_614_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTree",804,G__EGADict_614_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"grain_chains.root\"' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckViewGrains",1501,G__EGADict_614_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckViewGrains",1501,G__EGADict_614_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - vid C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VerticalChains",1424,G__EGADict_614_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TClonesArray' - 0 - clusters u 'TIndexCell' - 1 - chains", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VerticalChainsA",1489,G__EGADict_614_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TClonesArray' - 0 - clusters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeGrainsTree",1394,G__EGADict_614_0_11, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'TClonesArray' - 0 - clust u 'TIndexCell' - 1 - chains "
"C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GrainStat",909,G__EGADict_614_0_12, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TClonesArray' - 0 - clusters f - - 1 - x0 "
"f - - 1 - y0 f - - 1 - z0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GrainStat2",959,G__EGADict_614_0_13, 105, -1, -1, 0, 11, 1, 1, 0, 
"U 'TClonesArray' - 0 - clusters f - - 1 - x0 "
"f - - 1 - y0 f - - 1 - z0 "
"f - - 1 - vol f - - 1 - amin "
"f - - 1 - amax f - - 1 - zmin "
"f - - 1 - zmax i - - 1 - fmin "
"i - - 1 - fmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectGrains",1220,G__EGADict_614_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TCut' - 0 - c1 C - - 10 '\"grains_chains_selection.root\"' outfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectGrains",1220,G__EGADict_614_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - selection C - - 10 '\"grains_chains_selection.root\"' outfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,G__EGADict_614_0_16, 85, G__get_linked_tagnum(&G__EGADictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EGADict_614_0_17, 85, G__get_linked_tagnum(&G__EGADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbGA::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EGADict_614_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbGA::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EGADict_614_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbGA::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EGADict_614_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbGA::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EGADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EGADict_614_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EGADict_614_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbGA::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EGADict_614_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbGA::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EGADict_614_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbGA::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EGADict_614_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbGA::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbGA", 403, G__EGADict_614_0_29, (int) ('i'), G__get_linked_tagnum(&G__EGADictLN_EdbGA), -1, 0, 1, 1, 1, 0, "u 'EdbGA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbGA", 529, G__EGADict_614_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EGADict_614_0_31, (int) ('u'), G__get_linked_tagnum(&G__EGADictLN_EdbGA), -1, 1, 1, 1, 1, 0, "u 'EdbGA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbFIRF(void) {
   /* EdbFIRF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EGADictLN_EdbFIRF));
   G__memfunc_setup("EdbFIRF",562,G__EGADict_616_0_1, 105, G__get_linked_tagnum(&G__EGADictLN_EdbFIRF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbFIRF",562,G__EGADict_616_0_2, 105, G__get_linked_tagnum(&G__EGADictLN_EdbFIRF), -1, 0, 2, 1, 1, 0, 
"i - - 0 - cols i - - 0 - rows", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbFIRF",562,G__EGADict_616_0_3, 105, G__get_linked_tagnum(&G__EGADictLN_EdbFIRF), -1, 0, 1, 1, 1, 0, "C - - 10 - firf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cell",384,G__EGADict_616_0_4, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - x i - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBuffer",890,G__EGADict_616_0_5, 70, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetArr",593,G__EGADict_616_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - n F - - 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAt",481,G__EGADict_616_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - x i - - 0 - y "
"f - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reflect4",761,G__EGADict_616_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", "Copy left top corner to other quadrants with reflection", (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EGADict_616_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintList",937,G__EGADict_616_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbFIRF::PrintList) ), 0);
   G__memfunc_setup("ApplyTo",713,G__EGADict_616_0_11, 85, G__get_linked_tagnum(&G__EGADictLN_TH2F), -1, 0, 1, 1, 1, 0, "U 'EdbImage' - 0 - img", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EGADict_616_0_12, 85, G__get_linked_tagnum(&G__EGADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbFIRF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EGADict_616_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbFIRF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EGADict_616_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbFIRF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EGADict_616_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbFIRF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EGADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EGADict_616_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EGADict_616_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbFIRF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EGADict_616_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbFIRF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EGADict_616_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbFIRF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EGADict_616_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbFIRF::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbFIRF", 562, G__EGADict_616_0_24, (int) ('i'), G__get_linked_tagnum(&G__EGADictLN_EdbFIRF), -1, 0, 1, 1, 1, 0, "u 'EdbFIRF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbFIRF", 688, G__EGADict_616_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EGADict_616_0_26, (int) ('u'), G__get_linked_tagnum(&G__EGADictLN_EdbFIRF), -1, 1, 1, 1, 1, 0, "u 'EdbFIRF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbClustP(void) {
   /* EdbClustP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EGADictLN_EdbClustP));
   G__memfunc_setup("EdbClustP",870,G__EGADict_617_0_1, 105, G__get_linked_tagnum(&G__EGADictLN_EdbClustP), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCG",438,G__EGADict_617_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPeak",685,G__EGADict_617_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - peak", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xcg",290,G__EGADict_617_0_4, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ycg",291,G__EGADict_617_0_5, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Peak",385,G__EGADict_617_0_6, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xp",200,G__EGADict_617_0_7, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Yp",201,G__EGADict_617_0_8, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPixel",779,G__EGADict_617_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - ic f - - 0 - ir "
"f - - 0 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPixelSum",1088,G__EGADict_617_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - ic f - - 0 - ir "
"f - - 0 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddClusterSum",1312,G__EGADict_617_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbClustP' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Normalize",945,G__EGADict_617_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__EGADict_617_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EGADict_617_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EGADict_617_0_15, 85, G__get_linked_tagnum(&G__EGADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbClustP::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EGADict_617_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbClustP::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EGADict_617_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbClustP::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EGADict_617_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbClustP::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EGADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EGADict_617_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EGADict_617_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbClustP::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EGADict_617_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbClustP::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EGADict_617_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbClustP::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EGADict_617_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbClustP::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbClustP", 870, G__EGADict_617_0_27, (int) ('i'), G__get_linked_tagnum(&G__EGADictLN_EdbClustP), -1, 0, 1, 1, 1, 0, "u 'EdbClustP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbClustP", 996, G__EGADict_617_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EGADict_617_0_29, (int) ('u'), G__get_linked_tagnum(&G__EGADictLN_EdbClustP), -1, 1, 1, 1, 1, 0, "u 'EdbClustP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbIP(void) {
   /* EdbIP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EGADictLN_EdbIP));
   G__memfunc_setup("EdbIP",420,G__EGADict_618_0_1, 105, G__get_linked_tagnum(&G__EGADictLN_EdbIP), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTree",804,G__EGADict_618_0_2, 85, G__get_linked_tagnum(&G__EGADictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFIR",525,G__EGADict_618_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbFIRF' - 0 - fir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThr",602,G__EGADict_618_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Peak8",441,G__EGADict_618_0_5, 105, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH2F' - 0 - h f - - 0 - thr", (char*)NULL, (void*) G__func2void( (int (*)(TH2F*, float))(&EdbIP::Peak8) ), 0);
   G__memfunc_setup("Peak12",484,G__EGADict_618_0_6, 105, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH2F' - 0 - h f - - 0 - thr", (char*)NULL, (void*) G__func2void( (int (*)(TH2F*, float))(&EdbIP::Peak12) ), 0);
   G__memfunc_setup("CutBG",437,G__EGADict_618_0_7, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbFrame' - 0 - frame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clusterize",1066,G__EGADict_618_0_8, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbFrame' - 0 - frame U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clusterize",1066,G__EGADict_618_0_9, 105, -1, -1, 0, 5, 3, 1, 0, 
"U 'TH2F' - 0 - h f - - 0 - thr "
"U 'TTree' - 0 - tree f - - 0 - z "
"i - - 0 - ifr", (char*)NULL, (void*) G__func2void( (int (*)(TH2F*, float, TTree*, float, int))(&EdbIP::Clusterize) ), 0);
   G__memfunc_setup("BurnPix",712,G__EGADict_618_0_10, 102, -1, -1, 0, 5, 3, 1, 0, 
"U 'TH2F' - 0 - h i - - 0 - ic "
"i - - 0 - ir f - - 0 - thr "
"u 'EdbClustP' - 1 - cl", (char*)NULL, (void*) G__func2void( (float (*)(TH2F*, int, int, float, EdbClustP&))(&EdbIP::BurnPix) ), 0);
   G__memfunc_setup("Clusterize2",1116,G__EGADict_618_0_11, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbFrame' - 0 - frame U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clusterize2",1116,G__EGADict_618_0_12, 105, -1, -1, 0, 5, 3, 1, 0, 
"U 'TH2F' - 0 - h f - - 0 - thr "
"U 'TTree' - 0 - tree f - - 0 - z "
"i - - 0 - ifr", (char*)NULL, (void*) G__func2void( (int (*)(TH2F*, float, TTree*, float, int))(&EdbIP::Clusterize2) ), 0);
   G__memfunc_setup("Clusterize",1066,G__EGADict_618_0_13, 105, -1, -1, 0, 3, 3, 1, 0, 
"U 'EdbFrame' - 0 - f b - - 0 - thr "
"u 'EdbView' - 1 - v", (char*)NULL, (void*) G__func2void( (int (*)(EdbFrame*, unsigned char, EdbView&))(&EdbIP::Clusterize) ), 0);
   G__memfunc_setup("BurnPix",712,G__EGADict_618_0_14, 105, -1, -1, 0, 6, 3, 1, 0, 
"B - - 0 - img i - - 0 - ic "
"i - - 0 - ir i - - 0 - nc "
"b - - 0 - thr u 'EdbCluster' - 1 - cl", (char*)NULL, (void*) G__func2void( (int (*)(unsigned char*, int, int, int, unsigned char, EdbCluster&))(&EdbIP::BurnPix) ), 0);
   G__memfunc_setup("Class",502,G__EGADict_618_0_15, 85, G__get_linked_tagnum(&G__EGADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbIP::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EGADict_618_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbIP::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EGADict_618_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbIP::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EGADict_618_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbIP::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EGADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EGADict_618_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EGADict_618_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbIP::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EGADict_618_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbIP::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EGADict_618_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbIP::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EGADict_618_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbIP::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbIP", 420, G__EGADict_618_0_27, (int) ('i'), G__get_linked_tagnum(&G__EGADictLN_EdbIP), -1, 0, 1, 1, 1, 0, "u 'EdbIP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbIP", 546, G__EGADict_618_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EGADict_618_0_29, (int) ('u'), G__get_linked_tagnum(&G__EGADictLN_EdbIP), -1, 1, 1, 1, 1, 0, "u 'EdbIP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncEGADict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalEGADict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcEGADict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__EGADictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__EGADictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__EGADictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__EGADictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__EGADictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__EGADictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR = { "iterator<random_access_iterator_tag,char,long,char*,char&>" , 115 , -1 };
G__linked_taginfo G__EGADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__EGADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EGADictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__EGADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EGADictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__EGADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__EGADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EGADictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__EGADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EGADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__EGADictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__EGADictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__EGADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__EGADictLN_TCut = { "TCut" , 99 , -1 };
G__linked_taginfo G__EGADictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__EGADictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbPoint = { "EdbPoint" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbPoint2D = { "EdbPoint2D" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbPoint3D = { "EdbPoint3D" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbCluster = { "EdbCluster" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbFrame = { "EdbFrame" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbView = { "EdbView" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbRun = { "EdbRun" , 99 , -1 };
G__linked_taginfo G__EGADictLN_TIndexCell = { "TIndexCell" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbGA = { "EdbGA" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbImage = { "EdbImage" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbFIRF = { "EdbFIRF" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbClustP = { "EdbClustP" , 99 , -1 };
G__linked_taginfo G__EGADictLN_EdbIP = { "EdbIP" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableEGADict() {
  G__EGADictLN_TClass.tagnum = -1 ;
  G__EGADictLN_TBuffer.tagnum = -1 ;
  G__EGADictLN_TMemberInspector.tagnum = -1 ;
  G__EGADictLN_TObject.tagnum = -1 ;
  G__EGADictLN_TNamed.tagnum = -1 ;
  G__EGADictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR.tagnum = -1 ;
  G__EGADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__EGADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EGADictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__EGADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EGADictLN_TClonesArray.tagnum = -1 ;
  G__EGADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__EGADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EGADictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__EGADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EGADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__EGADictLN_TFile.tagnum = -1 ;
  G__EGADictLN_TTree.tagnum = -1 ;
  G__EGADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__EGADictLN_TCut.tagnum = -1 ;
  G__EGADictLN_TArrayF.tagnum = -1 ;
  G__EGADictLN_TH2F.tagnum = -1 ;
  G__EGADictLN_EdbPoint.tagnum = -1 ;
  G__EGADictLN_EdbPoint2D.tagnum = -1 ;
  G__EGADictLN_EdbPoint3D.tagnum = -1 ;
  G__EGADictLN_EdbCluster.tagnum = -1 ;
  G__EGADictLN_EdbFrame.tagnum = -1 ;
  G__EGADictLN_EdbView.tagnum = -1 ;
  G__EGADictLN_EdbRun.tagnum = -1 ;
  G__EGADictLN_TIndexCell.tagnum = -1 ;
  G__EGADictLN_EdbGA.tagnum = -1 ;
  G__EGADictLN_EdbImage.tagnum = -1 ;
  G__EGADictLN_EdbFIRF.tagnum = -1 ;
  G__EGADictLN_EdbClustP.tagnum = -1 ;
  G__EGADictLN_EdbIP.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableEGADict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__EGADictLN_TClass);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TObject);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__EGADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TFile);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TTree);
   G__get_linked_tagnum_fwd(&G__EGADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TCut);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__EGADictLN_EdbPoint);
   G__get_linked_tagnum_fwd(&G__EGADictLN_EdbPoint2D);
   G__get_linked_tagnum_fwd(&G__EGADictLN_EdbPoint3D);
   G__get_linked_tagnum_fwd(&G__EGADictLN_EdbCluster);
   G__get_linked_tagnum_fwd(&G__EGADictLN_EdbFrame);
   G__get_linked_tagnum_fwd(&G__EGADictLN_EdbView);
   G__get_linked_tagnum_fwd(&G__EGADictLN_EdbRun);
   G__get_linked_tagnum_fwd(&G__EGADictLN_TIndexCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EGADictLN_EdbGA),sizeof(EdbGA),-1,62720,"grains analysys",G__setup_memvarEdbGA,G__setup_memfuncEdbGA);
   G__get_linked_tagnum_fwd(&G__EGADictLN_EdbImage);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EGADictLN_EdbFIRF),sizeof(EdbFIRF),-1,62720,"FIR filter",G__setup_memvarEdbFIRF,G__setup_memfuncEdbFIRF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EGADictLN_EdbClustP),sizeof(EdbClustP),-1,61696,"cluster reconstruction",G__setup_memvarEdbClustP,G__setup_memfuncEdbClustP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EGADictLN_EdbIP),sizeof(EdbIP),-1,28928,"Image Processing",G__setup_memvarEdbIP,G__setup_memfuncEdbIP);
}
extern "C" void G__cpp_setupEGADict(void) {
  G__check_setup_version(30051515,"G__cpp_setupEGADict()");
  G__set_cpp_environmentEGADict();
  G__cpp_setup_tagtableEGADict();

  G__cpp_setup_inheritanceEGADict();

  G__cpp_setup_typetableEGADict();

  G__cpp_setup_memvarEGADict();

  G__cpp_setup_memfuncEGADict();
  G__cpp_setup_globalEGADict();
  G__cpp_setup_funcEGADict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncEGADict();
  return;
}
class G__cpp_setup_initEGADict {
  public:
    G__cpp_setup_initEGADict() { G__add_setup_func("EGADict",(G__incsetup)(&G__cpp_setupEGADict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initEGADict() { G__remove_setup_func("EGADict"); }
};
G__cpp_setup_initEGADict G__cpp_setup_initializerEGADict;

