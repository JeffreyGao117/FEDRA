//
// File generated by C:\root_v5.34.38\bin\rootcint.EXE at Tue Jun 02 09:02:20 2020

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME vtCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "vtCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace MATRIX {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void MATRIX_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("MATRIX", 0 /*version*/, "./include/VtNegMatrix.hh", 34,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &MATRIX_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void MATRIX_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void MATRIXcLcLVtVector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MATRIXcLcLVtVector(void *p);
   static void deleteArray_MATRIXcLcLVtVector(void *p);
   static void destruct_MATRIXcLcLVtVector(void *p);
   static void streamer_MATRIXcLcLVtVector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MATRIX::VtVector*)
   {
      ::MATRIX::VtVector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MATRIX::VtVector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MATRIX::VtVector", "./include/VtVector.hh", 44,
                  typeid(::MATRIX::VtVector), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &MATRIXcLcLVtVector_Dictionary, isa_proxy, 0,
                  sizeof(::MATRIX::VtVector) );
      instance.SetDelete(&delete_MATRIXcLcLVtVector);
      instance.SetDeleteArray(&deleteArray_MATRIXcLcLVtVector);
      instance.SetDestructor(&destruct_MATRIXcLcLVtVector);
      instance.SetStreamerFunc(&streamer_MATRIXcLcLVtVector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MATRIX::VtVector*)
   {
      return GenerateInitInstanceLocal((::MATRIX::VtVector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MATRIX::VtVector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MATRIXcLcLVtNegMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MATRIXcLcLVtNegMatrix(void *p);
   static void deleteArray_MATRIXcLcLVtNegMatrix(void *p);
   static void destruct_MATRIXcLcLVtNegMatrix(void *p);
   static void streamer_MATRIXcLcLVtNegMatrix(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MATRIX::VtNegMatrix*)
   {
      ::MATRIX::VtNegMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MATRIX::VtNegMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MATRIX::VtNegMatrix", ::MATRIX::VtNegMatrix::Class_Version(), "./include/VtNegMatrix.hh", 44,
                  typeid(::MATRIX::VtNegMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MATRIX::VtNegMatrix::Dictionary, isa_proxy, 0,
                  sizeof(::MATRIX::VtNegMatrix) );
      instance.SetDelete(&delete_MATRIXcLcLVtNegMatrix);
      instance.SetDeleteArray(&deleteArray_MATRIXcLcLVtNegMatrix);
      instance.SetDestructor(&destruct_MATRIXcLcLVtNegMatrix);
      instance.SetStreamerFunc(&streamer_MATRIXcLcLVtNegMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MATRIX::VtNegMatrix*)
   {
      return GenerateInitInstanceLocal((::MATRIX::VtNegMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MATRIX::VtNegMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MATRIXcLcLVtMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MATRIXcLcLVtMatrix(void *p);
   static void deleteArray_MATRIXcLcLVtMatrix(void *p);
   static void destruct_MATRIXcLcLVtMatrix(void *p);
   static void streamer_MATRIXcLcLVtMatrix(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MATRIX::VtMatrix*)
   {
      ::MATRIX::VtMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MATRIX::VtMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MATRIX::VtMatrix", ::MATRIX::VtMatrix::Class_Version(), "./include/VtMatrix.hh", 49,
                  typeid(::MATRIX::VtMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MATRIX::VtMatrix::Dictionary, isa_proxy, 0,
                  sizeof(::MATRIX::VtMatrix) );
      instance.SetDelete(&delete_MATRIXcLcLVtMatrix);
      instance.SetDeleteArray(&deleteArray_MATRIXcLcLVtMatrix);
      instance.SetDestructor(&destruct_MATRIXcLcLVtMatrix);
      instance.SetStreamerFunc(&streamer_MATRIXcLcLVtMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MATRIX::VtMatrix*)
   {
      return GenerateInitInstanceLocal((::MATRIX::VtMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MATRIX::VtMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MATRIXcLcLVtSqMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MATRIXcLcLVtSqMatrix(void *p);
   static void deleteArray_MATRIXcLcLVtSqMatrix(void *p);
   static void destruct_MATRIXcLcLVtSqMatrix(void *p);
   static void streamer_MATRIXcLcLVtSqMatrix(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MATRIX::VtSqMatrix*)
   {
      ::MATRIX::VtSqMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MATRIX::VtSqMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MATRIX::VtSqMatrix", ::MATRIX::VtSqMatrix::Class_Version(), "./include/VtSqMatrix.hh", 50,
                  typeid(::MATRIX::VtSqMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MATRIX::VtSqMatrix::Dictionary, isa_proxy, 0,
                  sizeof(::MATRIX::VtSqMatrix) );
      instance.SetDelete(&delete_MATRIXcLcLVtSqMatrix);
      instance.SetDeleteArray(&deleteArray_MATRIXcLcLVtSqMatrix);
      instance.SetDestructor(&destruct_MATRIXcLcLVtSqMatrix);
      instance.SetStreamerFunc(&streamer_MATRIXcLcLVtSqMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MATRIX::VtSqMatrix*)
   {
      return GenerateInitInstanceLocal((::MATRIX::VtSqMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MATRIX::VtSqMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MATRIXcLcLVtSymMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MATRIXcLcLVtSymMatrix(void *p);
   static void deleteArray_MATRIXcLcLVtSymMatrix(void *p);
   static void destruct_MATRIXcLcLVtSymMatrix(void *p);
   static void streamer_MATRIXcLcLVtSymMatrix(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MATRIX::VtSymMatrix*)
   {
      ::MATRIX::VtSymMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MATRIX::VtSymMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MATRIX::VtSymMatrix", ::MATRIX::VtSymMatrix::Class_Version(), "./include/VtSymMatrix.hh", 49,
                  typeid(::MATRIX::VtSymMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MATRIX::VtSymMatrix::Dictionary, isa_proxy, 0,
                  sizeof(::MATRIX::VtSymMatrix) );
      instance.SetDelete(&delete_MATRIXcLcLVtSymMatrix);
      instance.SetDeleteArray(&deleteArray_MATRIXcLcLVtSymMatrix);
      instance.SetDestructor(&destruct_MATRIXcLcLVtSymMatrix);
      instance.SetStreamerFunc(&streamer_MATRIXcLcLVtSymMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MATRIX::VtSymMatrix*)
   {
      return GenerateInitInstanceLocal((::MATRIX::VtSymMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MATRIX::VtSymMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MATRIXcLcLCMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MATRIXcLcLCMatrix(void *p = 0);
   static void *newArray_MATRIXcLcLCMatrix(Long_t size, void *p);
   static void delete_MATRIXcLcLCMatrix(void *p);
   static void deleteArray_MATRIXcLcLCMatrix(void *p);
   static void destruct_MATRIXcLcLCMatrix(void *p);
   static void streamer_MATRIXcLcLCMatrix(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MATRIX::CMatrix*)
   {
      ::MATRIX::CMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MATRIX::CMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MATRIX::CMatrix", ::MATRIX::CMatrix::Class_Version(), "./include/CMatrix.hh", 63,
                  typeid(::MATRIX::CMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MATRIX::CMatrix::Dictionary, isa_proxy, 0,
                  sizeof(::MATRIX::CMatrix) );
      instance.SetNew(&new_MATRIXcLcLCMatrix);
      instance.SetNewArray(&newArray_MATRIXcLcLCMatrix);
      instance.SetDelete(&delete_MATRIXcLcLCMatrix);
      instance.SetDeleteArray(&deleteArray_MATRIXcLcLCMatrix);
      instance.SetDestructor(&destruct_MATRIXcLcLCMatrix);
      instance.SetStreamerFunc(&streamer_MATRIXcLcLCMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MATRIX::CMatrix*)
   {
      return GenerateInitInstanceLocal((::MATRIX::CMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MATRIX::CMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace VERTEX {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void VERTEX_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("VERTEX", 0 /*version*/, "./include/VtDistance.hh", 30,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &VERTEX_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void VERTEX_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void VERTEXcLcLRelation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_VERTEXcLcLRelation(void *p);
   static void deleteArray_VERTEXcLcLRelation(void *p);
   static void destruct_VERTEXcLcLRelation(void *p);
   static void streamer_VERTEXcLcLRelation(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VERTEX::Relation*)
   {
      ::VERTEX::Relation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VERTEX::Relation >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VERTEX::Relation", ::VERTEX::Relation::Class_Version(), "./include/VtRelation.hh", 51,
                  typeid(::VERTEX::Relation), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VERTEX::Relation::Dictionary, isa_proxy, 0,
                  sizeof(::VERTEX::Relation) );
      instance.SetDelete(&delete_VERTEXcLcLRelation);
      instance.SetDeleteArray(&deleteArray_VERTEXcLcLRelation);
      instance.SetDestructor(&destruct_VERTEXcLcLRelation);
      instance.SetStreamerFunc(&streamer_VERTEXcLcLRelation);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VERTEX::Relation*)
   {
      return GenerateInitInstanceLocal((::VERTEX::Relation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VERTEX::Relation*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void VERTEXcLcLRelationIterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_VERTEXcLcLRelationIterator(void *p = 0);
   static void *newArray_VERTEXcLcLRelationIterator(Long_t size, void *p);
   static void delete_VERTEXcLcLRelationIterator(void *p);
   static void deleteArray_VERTEXcLcLRelationIterator(void *p);
   static void destruct_VERTEXcLcLRelationIterator(void *p);
   static void streamer_VERTEXcLcLRelationIterator(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VERTEX::RelationIterator*)
   {
      ::VERTEX::RelationIterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VERTEX::RelationIterator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VERTEX::RelationIterator", ::VERTEX::RelationIterator::Class_Version(), "C:/Users/User/Downloads/Fedra/include/vt++/VtRelationList.hh", 67,
                  typeid(::VERTEX::RelationIterator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VERTEX::RelationIterator::Dictionary, isa_proxy, 0,
                  sizeof(::VERTEX::RelationIterator) );
      instance.SetNew(&new_VERTEXcLcLRelationIterator);
      instance.SetNewArray(&newArray_VERTEXcLcLRelationIterator);
      instance.SetDelete(&delete_VERTEXcLcLRelationIterator);
      instance.SetDeleteArray(&deleteArray_VERTEXcLcLRelationIterator);
      instance.SetDestructor(&destruct_VERTEXcLcLRelationIterator);
      instance.SetStreamerFunc(&streamer_VERTEXcLcLRelationIterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VERTEX::RelationIterator*)
   {
      return GenerateInitInstanceLocal((::VERTEX::RelationIterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VERTEX::RelationIterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void VERTEXcLcLConstRelationIterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_VERTEXcLcLConstRelationIterator(void *p = 0);
   static void *newArray_VERTEXcLcLConstRelationIterator(Long_t size, void *p);
   static void delete_VERTEXcLcLConstRelationIterator(void *p);
   static void deleteArray_VERTEXcLcLConstRelationIterator(void *p);
   static void destruct_VERTEXcLcLConstRelationIterator(void *p);
   static void streamer_VERTEXcLcLConstRelationIterator(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VERTEX::ConstRelationIterator*)
   {
      ::VERTEX::ConstRelationIterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VERTEX::ConstRelationIterator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VERTEX::ConstRelationIterator", ::VERTEX::ConstRelationIterator::Class_Version(), "C:/Users/User/Downloads/Fedra/include/vt++/VtRelationList.hh", 107,
                  typeid(::VERTEX::ConstRelationIterator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VERTEX::ConstRelationIterator::Dictionary, isa_proxy, 0,
                  sizeof(::VERTEX::ConstRelationIterator) );
      instance.SetNew(&new_VERTEXcLcLConstRelationIterator);
      instance.SetNewArray(&newArray_VERTEXcLcLConstRelationIterator);
      instance.SetDelete(&delete_VERTEXcLcLConstRelationIterator);
      instance.SetDeleteArray(&deleteArray_VERTEXcLcLConstRelationIterator);
      instance.SetDestructor(&destruct_VERTEXcLcLConstRelationIterator);
      instance.SetStreamerFunc(&streamer_VERTEXcLcLConstRelationIterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VERTEX::ConstRelationIterator*)
   {
      return GenerateInitInstanceLocal((::VERTEX::ConstRelationIterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VERTEX::ConstRelationIterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void VERTEXcLcLReverseRelationIterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_VERTEXcLcLReverseRelationIterator(void *p = 0);
   static void *newArray_VERTEXcLcLReverseRelationIterator(Long_t size, void *p);
   static void delete_VERTEXcLcLReverseRelationIterator(void *p);
   static void deleteArray_VERTEXcLcLReverseRelationIterator(void *p);
   static void destruct_VERTEXcLcLReverseRelationIterator(void *p);
   static void streamer_VERTEXcLcLReverseRelationIterator(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VERTEX::ReverseRelationIterator*)
   {
      ::VERTEX::ReverseRelationIterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VERTEX::ReverseRelationIterator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VERTEX::ReverseRelationIterator", ::VERTEX::ReverseRelationIterator::Class_Version(), "C:/Users/User/Downloads/Fedra/include/vt++/VtRelationList.hh", 148,
                  typeid(::VERTEX::ReverseRelationIterator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VERTEX::ReverseRelationIterator::Dictionary, isa_proxy, 0,
                  sizeof(::VERTEX::ReverseRelationIterator) );
      instance.SetNew(&new_VERTEXcLcLReverseRelationIterator);
      instance.SetNewArray(&newArray_VERTEXcLcLReverseRelationIterator);
      instance.SetDelete(&delete_VERTEXcLcLReverseRelationIterator);
      instance.SetDeleteArray(&deleteArray_VERTEXcLcLReverseRelationIterator);
      instance.SetDestructor(&destruct_VERTEXcLcLReverseRelationIterator);
      instance.SetStreamerFunc(&streamer_VERTEXcLcLReverseRelationIterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VERTEX::ReverseRelationIterator*)
   {
      return GenerateInitInstanceLocal((::VERTEX::ReverseRelationIterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VERTEX::ReverseRelationIterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void VERTEXcLcLConstReverseRelationIterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_VERTEXcLcLConstReverseRelationIterator(void *p = 0);
   static void *newArray_VERTEXcLcLConstReverseRelationIterator(Long_t size, void *p);
   static void delete_VERTEXcLcLConstReverseRelationIterator(void *p);
   static void deleteArray_VERTEXcLcLConstReverseRelationIterator(void *p);
   static void destruct_VERTEXcLcLConstReverseRelationIterator(void *p);
   static void streamer_VERTEXcLcLConstReverseRelationIterator(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VERTEX::ConstReverseRelationIterator*)
   {
      ::VERTEX::ConstReverseRelationIterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VERTEX::ConstReverseRelationIterator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VERTEX::ConstReverseRelationIterator", ::VERTEX::ConstReverseRelationIterator::Class_Version(), "C:/Users/User/Downloads/Fedra/include/vt++/VtRelationList.hh", 186,
                  typeid(::VERTEX::ConstReverseRelationIterator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VERTEX::ConstReverseRelationIterator::Dictionary, isa_proxy, 0,
                  sizeof(::VERTEX::ConstReverseRelationIterator) );
      instance.SetNew(&new_VERTEXcLcLConstReverseRelationIterator);
      instance.SetNewArray(&newArray_VERTEXcLcLConstReverseRelationIterator);
      instance.SetDelete(&delete_VERTEXcLcLConstReverseRelationIterator);
      instance.SetDeleteArray(&deleteArray_VERTEXcLcLConstReverseRelationIterator);
      instance.SetDestructor(&destruct_VERTEXcLcLConstReverseRelationIterator);
      instance.SetStreamerFunc(&streamer_VERTEXcLcLConstReverseRelationIterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VERTEX::ConstReverseRelationIterator*)
   {
      return GenerateInitInstanceLocal((::VERTEX::ConstReverseRelationIterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VERTEX::ConstReverseRelationIterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void VERTEXcLcLTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_VERTEXcLcLTrack(void *p = 0);
   static void *newArray_VERTEXcLcLTrack(Long_t size, void *p);
   static void delete_VERTEXcLcLTrack(void *p);
   static void deleteArray_VERTEXcLcLTrack(void *p);
   static void destruct_VERTEXcLcLTrack(void *p);
   static void streamer_VERTEXcLcLTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VERTEX::Track*)
   {
      ::VERTEX::Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VERTEX::Track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VERTEX::Track", ::VERTEX::Track::Class_Version(), "./include/VtTrack.hh", 64,
                  typeid(::VERTEX::Track), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VERTEX::Track::Dictionary, isa_proxy, 0,
                  sizeof(::VERTEX::Track) );
      instance.SetNew(&new_VERTEXcLcLTrack);
      instance.SetNewArray(&newArray_VERTEXcLcLTrack);
      instance.SetDelete(&delete_VERTEXcLcLTrack);
      instance.SetDeleteArray(&deleteArray_VERTEXcLcLTrack);
      instance.SetDestructor(&destruct_VERTEXcLcLTrack);
      instance.SetStreamerFunc(&streamer_VERTEXcLcLTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VERTEX::Track*)
   {
      return GenerateInitInstanceLocal((::VERTEX::Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VERTEX::Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void VERTEXcLcLVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_VERTEXcLcLVertex(void *p = 0);
   static void *newArray_VERTEXcLcLVertex(Long_t size, void *p);
   static void delete_VERTEXcLcLVertex(void *p);
   static void deleteArray_VERTEXcLcLVertex(void *p);
   static void destruct_VERTEXcLcLVertex(void *p);
   static void streamer_VERTEXcLcLVertex(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VERTEX::Vertex*)
   {
      ::VERTEX::Vertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VERTEX::Vertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VERTEX::Vertex", ::VERTEX::Vertex::Class_Version(), "./include/VtVertex.hh", 88,
                  typeid(::VERTEX::Vertex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VERTEX::Vertex::Dictionary, isa_proxy, 0,
                  sizeof(::VERTEX::Vertex) );
      instance.SetNew(&new_VERTEXcLcLVertex);
      instance.SetNewArray(&newArray_VERTEXcLcLVertex);
      instance.SetDelete(&delete_VERTEXcLcLVertex);
      instance.SetDeleteArray(&deleteArray_VERTEXcLcLVertex);
      instance.SetDestructor(&destruct_VERTEXcLcLVertex);
      instance.SetStreamerFunc(&streamer_VERTEXcLcLVertex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VERTEX::Vertex*)
   {
      return GenerateInitInstanceLocal((::VERTEX::Vertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VERTEX::Vertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void VERTEXcLcLRelationList_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_VERTEXcLcLRelationList(void *p = 0);
   static void *newArray_VERTEXcLcLRelationList(Long_t size, void *p);
   static void delete_VERTEXcLcLRelationList(void *p);
   static void deleteArray_VERTEXcLcLRelationList(void *p);
   static void destruct_VERTEXcLcLRelationList(void *p);
   static void streamer_VERTEXcLcLRelationList(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VERTEX::RelationList*)
   {
      ::VERTEX::RelationList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VERTEX::RelationList >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VERTEX::RelationList", ::VERTEX::RelationList::Class_Version(), "C:/Users/User/Downloads/Fedra/include/vt++/VtRelationList.hh", 227,
                  typeid(::VERTEX::RelationList), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VERTEX::RelationList::Dictionary, isa_proxy, 0,
                  sizeof(::VERTEX::RelationList) );
      instance.SetNew(&new_VERTEXcLcLRelationList);
      instance.SetNewArray(&newArray_VERTEXcLcLRelationList);
      instance.SetDelete(&delete_VERTEXcLcLRelationList);
      instance.SetDeleteArray(&deleteArray_VERTEXcLcLRelationList);
      instance.SetDestructor(&destruct_VERTEXcLcLRelationList);
      instance.SetStreamerFunc(&streamer_VERTEXcLcLRelationList);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VERTEX::RelationList*)
   {
      return GenerateInitInstanceLocal((::VERTEX::RelationList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VERTEX::RelationList*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void VERTEXcLcLKalman_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_VERTEXcLcLKalman(void *p);
   static void deleteArray_VERTEXcLcLKalman(void *p);
   static void destruct_VERTEXcLcLKalman(void *p);
   static void streamer_VERTEXcLcLKalman(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VERTEX::Kalman*)
   {
      ::VERTEX::Kalman *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VERTEX::Kalman >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VERTEX::Kalman", ::VERTEX::Kalman::Class_Version(), "./include/VtKalman.hh", 69,
                  typeid(::VERTEX::Kalman), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VERTEX::Kalman::Dictionary, isa_proxy, 0,
                  sizeof(::VERTEX::Kalman) );
      instance.SetDelete(&delete_VERTEXcLcLKalman);
      instance.SetDeleteArray(&deleteArray_VERTEXcLcLKalman);
      instance.SetDestructor(&destruct_VERTEXcLcLKalman);
      instance.SetStreamerFunc(&streamer_VERTEXcLcLKalman);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VERTEX::Kalman*)
   {
      return GenerateInitInstanceLocal((::VERTEX::Kalman*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VERTEX::Kalman*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void VERTEXcLcLMassC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_VERTEXcLcLMassC(void *p = 0);
   static void *newArray_VERTEXcLcLMassC(Long_t size, void *p);
   static void delete_VERTEXcLcLMassC(void *p);
   static void deleteArray_VERTEXcLcLMassC(void *p);
   static void destruct_VERTEXcLcLMassC(void *p);
   static void streamer_VERTEXcLcLMassC(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::VERTEX::MassC*)
   {
      ::VERTEX::MassC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VERTEX::MassC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VERTEX::MassC", ::VERTEX::MassC::Class_Version(), "./include/VtMassC.hh", 50,
                  typeid(::VERTEX::MassC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::VERTEX::MassC::Dictionary, isa_proxy, 0,
                  sizeof(::VERTEX::MassC) );
      instance.SetNew(&new_VERTEXcLcLMassC);
      instance.SetNewArray(&newArray_VERTEXcLcLMassC);
      instance.SetDelete(&delete_VERTEXcLcLMassC);
      instance.SetDeleteArray(&deleteArray_VERTEXcLcLMassC);
      instance.SetDestructor(&destruct_VERTEXcLcLMassC);
      instance.SetStreamerFunc(&streamer_VERTEXcLcLMassC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::VERTEX::MassC*)
   {
      return GenerateInitInstanceLocal((::VERTEX::MassC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VERTEX::MassC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

      namespace MATRIX {
//______________________________________________________________________________
atomic_TClass_ptr VtVector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *VtVector::Class_Name()
{
   return "MATRIX::VtVector";
}

//______________________________________________________________________________
const char *VtVector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtVector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int VtVector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtVector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void VtVector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtVector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *VtVector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtVector*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace MATRIX
      namespace MATRIX {
//______________________________________________________________________________
atomic_TClass_ptr VtNegMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *VtNegMatrix::Class_Name()
{
   return "MATRIX::VtNegMatrix";
}

//______________________________________________________________________________
const char *VtNegMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtNegMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int VtNegMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtNegMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void VtNegMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtNegMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *VtNegMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtNegMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace MATRIX
      namespace MATRIX {
//______________________________________________________________________________
atomic_TClass_ptr VtMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *VtMatrix::Class_Name()
{
   return "MATRIX::VtMatrix";
}

//______________________________________________________________________________
const char *VtMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int VtMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void VtMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *VtMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace MATRIX
      namespace MATRIX {
//______________________________________________________________________________
atomic_TClass_ptr VtSqMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *VtSqMatrix::Class_Name()
{
   return "MATRIX::VtSqMatrix";
}

//______________________________________________________________________________
const char *VtSqMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtSqMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int VtSqMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtSqMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void VtSqMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtSqMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *VtSqMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtSqMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace MATRIX
      namespace MATRIX {
//______________________________________________________________________________
atomic_TClass_ptr VtSymMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *VtSymMatrix::Class_Name()
{
   return "MATRIX::VtSymMatrix";
}

//______________________________________________________________________________
const char *VtSymMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtSymMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int VtSymMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtSymMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void VtSymMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtSymMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *VtSymMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::VtSymMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace MATRIX
      namespace MATRIX {
//______________________________________________________________________________
atomic_TClass_ptr CMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *CMatrix::Class_Name()
{
   return "MATRIX::CMatrix";
}

//______________________________________________________________________________
const char *CMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::CMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::CMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::CMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MATRIX::CMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace MATRIX
      namespace VERTEX {
//______________________________________________________________________________
atomic_TClass_ptr Relation::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Relation::Class_Name()
{
   return "VERTEX::Relation";
}

//______________________________________________________________________________
const char *Relation::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Relation*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Relation::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Relation*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Relation::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Relation*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Relation::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Relation*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace VERTEX
      namespace VERTEX {
//______________________________________________________________________________
atomic_TClass_ptr RelationIterator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RelationIterator::Class_Name()
{
   return "VERTEX::RelationIterator";
}

//______________________________________________________________________________
const char *RelationIterator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::RelationIterator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RelationIterator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::RelationIterator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RelationIterator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::RelationIterator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RelationIterator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::RelationIterator*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace VERTEX
      namespace VERTEX {
//______________________________________________________________________________
atomic_TClass_ptr ConstRelationIterator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ConstRelationIterator::Class_Name()
{
   return "VERTEX::ConstRelationIterator";
}

//______________________________________________________________________________
const char *ConstRelationIterator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ConstRelationIterator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ConstRelationIterator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ConstRelationIterator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ConstRelationIterator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ConstRelationIterator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ConstRelationIterator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ConstRelationIterator*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace VERTEX
      namespace VERTEX {
//______________________________________________________________________________
atomic_TClass_ptr ReverseRelationIterator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ReverseRelationIterator::Class_Name()
{
   return "VERTEX::ReverseRelationIterator";
}

//______________________________________________________________________________
const char *ReverseRelationIterator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ReverseRelationIterator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ReverseRelationIterator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ReverseRelationIterator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ReverseRelationIterator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ReverseRelationIterator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ReverseRelationIterator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ReverseRelationIterator*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace VERTEX
      namespace VERTEX {
//______________________________________________________________________________
atomic_TClass_ptr ConstReverseRelationIterator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ConstReverseRelationIterator::Class_Name()
{
   return "VERTEX::ConstReverseRelationIterator";
}

//______________________________________________________________________________
const char *ConstReverseRelationIterator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ConstReverseRelationIterator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ConstReverseRelationIterator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ConstReverseRelationIterator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ConstReverseRelationIterator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ConstReverseRelationIterator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ConstReverseRelationIterator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::ConstReverseRelationIterator*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace VERTEX
      namespace VERTEX {
//______________________________________________________________________________
atomic_TClass_ptr Track::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Track::Class_Name()
{
   return "VERTEX::Track";
}

//______________________________________________________________________________
const char *Track::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Track::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Track::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Track::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Track*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace VERTEX
      namespace VERTEX {
//______________________________________________________________________________
atomic_TClass_ptr Vertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Vertex::Class_Name()
{
   return "VERTEX::Vertex";
}

//______________________________________________________________________________
const char *Vertex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Vertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Vertex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Vertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Vertex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Vertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Vertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Vertex*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace VERTEX
      namespace VERTEX {
//______________________________________________________________________________
atomic_TClass_ptr RelationList::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RelationList::Class_Name()
{
   return "VERTEX::RelationList";
}

//______________________________________________________________________________
const char *RelationList::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::RelationList*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RelationList::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::RelationList*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RelationList::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::RelationList*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RelationList::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::RelationList*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace VERTEX
      namespace VERTEX {
//______________________________________________________________________________
atomic_TClass_ptr Kalman::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Kalman::Class_Name()
{
   return "VERTEX::Kalman";
}

//______________________________________________________________________________
const char *Kalman::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Kalman*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Kalman::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Kalman*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Kalman::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Kalman*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Kalman::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::Kalman*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace VERTEX
      namespace VERTEX {
//______________________________________________________________________________
atomic_TClass_ptr MassC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MassC::Class_Name()
{
   return "VERTEX::MassC";
}

//______________________________________________________________________________
const char *MassC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::MassC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MassC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::MassC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MassC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::MassC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MassC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::VERTEX::MassC*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace VERTEX
      namespace VERTEX {
//______________________________________________________________________________
void Track::Streamer(TBuffer &R__b)
{
   // Stream an object of class VERTEX::Track.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::VERTEX::Track thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef VERTEX::RelationList baseClass0;
      baseClass0::Streamer(R__b);
      TObject::Streamer(R__b);
      R__b >> t_Q;
      R__b >> t_rm;
      R__b >> t_rmCC;
      t_p.Streamer(R__b);
      t_V.Streamer(R__b);
      t_G.Streamer(R__b);
      t_GM.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      //This works around a msvc bug and should be harmless on other platforms
      typedef VERTEX::RelationList baseClass0;
      baseClass0::Streamer(R__b);
      TObject::Streamer(R__b);
      R__b << t_Q;
      R__b << t_rm;
      R__b << t_rmCC;
      t_p.Streamer(R__b);
      t_V.Streamer(R__b);
      t_G.Streamer(R__b);
      t_GM.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace VERTEX
//______________________________________________________________________________
      namespace VERTEX {
void Track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VERTEX::Track.
      typedef ::VERTEX::Track msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_Q", &t_Q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_rm", &t_rm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_rmCC", &t_rmCC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_p", &t_p);
      R__insp.InspectMember(t_p, "t_p.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_V", &t_V);
      R__insp.InspectMember(t_V, "t_V.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_G", &t_G);
      R__insp.InspectMember(t_G, "t_G.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_GM", &t_GM);
      R__insp.InspectMember(t_GM, "t_GM.");
      //This works around a msvc bug and should be harmless on other platforms
      typedef VERTEX::RelationList baseClass1;
      baseClass1::ShowMembers(R__insp);
      TObject::ShowMembers(R__insp);
}

} // namespace VERTEX
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_VERTEXcLcLTrack(void *p) {
      return  p ? new(p) ::VERTEX::Track : new ::VERTEX::Track;
   }
   static void *newArray_VERTEXcLcLTrack(Long_t nElements, void *p) {
      return p ? new(p) ::VERTEX::Track[nElements] : new ::VERTEX::Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_VERTEXcLcLTrack(void *p) {
      delete ((::VERTEX::Track*)p);
   }
   static void deleteArray_VERTEXcLcLTrack(void *p) {
      delete [] ((::VERTEX::Track*)p);
   }
   static void destruct_VERTEXcLcLTrack(void *p) {
      typedef ::VERTEX::Track current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_VERTEXcLcLTrack(TBuffer &buf, void *obj) {
      ((::VERTEX::Track*)obj)->::VERTEX::Track::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::VERTEX::Track

      namespace VERTEX {
//______________________________________________________________________________
void Relation::Streamer(TBuffer &R__b)
{
   // Stream an object of class VERTEX::Relation.

   ::Error("VERTEX::Relation::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace VERTEX
//______________________________________________________________________________
      namespace VERTEX {
void Relation::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VERTEX::Relation.
      typedef ::VERTEX::Relation msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "massc", (void*)&massc);
      R__insp.InspectMember("VERTEX::MassC_v", (void*)&massc, "massc.", false);
}

} // namespace VERTEX
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_VERTEXcLcLRelation(void *p) {
      delete ((::VERTEX::Relation*)p);
   }
   static void deleteArray_VERTEXcLcLRelation(void *p) {
      delete [] ((::VERTEX::Relation*)p);
   }
   static void destruct_VERTEXcLcLRelation(void *p) {
      typedef ::VERTEX::Relation current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_VERTEXcLcLRelation(TBuffer &buf, void *obj) {
      ((::VERTEX::Relation*)obj)->::VERTEX::Relation::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::VERTEX::Relation

      namespace VERTEX {
//______________________________________________________________________________
void Kalman::Streamer(TBuffer &R__b)
{
   // Stream an object of class VERTEX::Kalman.

   ::Error("VERTEX::Kalman::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace VERTEX
//______________________________________________________________________________
      namespace VERTEX {
void Kalman::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VERTEX::Kalman.
      typedef ::VERTEX::Kalman msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rel", &rel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "G", &G);
      R__insp.InspectMember(G, "G.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_use_momentum", &k_use_momentum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_tx", &k_tx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_ty", &k_ty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_qvs", &k_qvs);
      R__insp.InspectMember(k_qvs, "k_qvs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_xv", &k_xv);
      R__insp.InspectMember(k_xv, "k_xv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_qv", &k_qv);
      R__insp.InspectMember(k_qv, "k_qv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_pc", &k_pc);
      R__insp.InspectMember(k_pc, "k_pc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_xnk", &k_xnk);
      R__insp.InspectMember(k_xnk, "k_xnk.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_W", &k_W);
      R__insp.InspectMember(k_W, "k_W.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_GB", &k_GB);
      R__insp.InspectMember(k_GB, "k_GB.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_WBG", &k_WBG);
      R__insp.InspectMember(k_WBG, "k_WBG.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_Gb", &k_Gb);
      R__insp.InspectMember(k_Gb, "k_Gb.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_C", &k_C);
      R__insp.InspectMember(k_C, "k_C.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_CINV", &k_CINV);
      R__insp.InspectMember(k_CINV, "k_CINV.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_F", &k_F);
      R__insp.InspectMember(k_F, "k_F.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_ES", &k_ES);
      R__insp.InspectMember(k_ES, "k_ES.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_DS", &k_DS);
      R__insp.InspectMember(k_DS, "k_DS.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_alpc", &k_alpc);
      R__insp.InspectMember(k_alpc, "k_alpc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_alp", &k_alp);
      R__insp.InspectMember(k_alp, "k_alp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_nalpc", &k_nalpc);
      R__insp.InspectMember(k_nalpc, "k_nalpc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_erg", &k_erg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_chi2", &k_chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "k_chi2s", &k_chi2s);
}

} // namespace VERTEX
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_VERTEXcLcLKalman(void *p) {
      delete ((::VERTEX::Kalman*)p);
   }
   static void deleteArray_VERTEXcLcLKalman(void *p) {
      delete [] ((::VERTEX::Kalman*)p);
   }
   static void destruct_VERTEXcLcLKalman(void *p) {
      typedef ::VERTEX::Kalman current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_VERTEXcLcLKalman(TBuffer &buf, void *obj) {
      ((::VERTEX::Kalman*)obj)->::VERTEX::Kalman::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::VERTEX::Kalman

      namespace VERTEX {
//______________________________________________________________________________
void MassC::Streamer(TBuffer &R__b)
{
   // Stream an object of class VERTEX::MassC.

   ::Error("VERTEX::MassC::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace VERTEX
//______________________________________________________________________________
      namespace VERTEX {
void MassC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VERTEX::MassC.
      typedef ::VERTEX::MassC msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_mass", &m_mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_SE", &m_SE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_Sl", &m_Sl);
      R__insp.InspectMember(m_Sl, "m_Sl.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_rel", (void*)&m_rel);
      R__insp.InspectMember("VERTEX::Rel_v", (void*)&m_rel, "m_rel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_galp", &m_galp);
}

} // namespace VERTEX
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_VERTEXcLcLMassC(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::MassC : new ::VERTEX::MassC;
   }
   static void *newArray_VERTEXcLcLMassC(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::MassC[nElements] : new ::VERTEX::MassC[nElements];
   }
   // Wrapper around operator delete
   static void delete_VERTEXcLcLMassC(void *p) {
      delete ((::VERTEX::MassC*)p);
   }
   static void deleteArray_VERTEXcLcLMassC(void *p) {
      delete [] ((::VERTEX::MassC*)p);
   }
   static void destruct_VERTEXcLcLMassC(void *p) {
      typedef ::VERTEX::MassC current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_VERTEXcLcLMassC(TBuffer &buf, void *obj) {
      ((::VERTEX::MassC*)obj)->::VERTEX::MassC::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::VERTEX::MassC

      namespace VERTEX {
//______________________________________________________________________________
void RelationList::Streamer(TBuffer &R__b)
{
   // Stream an object of class VERTEX::RelationList.

   ::Error("VERTEX::RelationList::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace VERTEX
//______________________________________________________________________________
      namespace VERTEX {
void RelationList::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VERTEX::RelationList.
      typedef ::VERTEX::RelationList msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rellist", (void*)&rellist);
      R__insp.InspectMember("VERTEX::Relation_v", (void*)&rellist, "rellist.", false);
}

} // namespace VERTEX
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_VERTEXcLcLRelationList(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::RelationList : new ::VERTEX::RelationList;
   }
   static void *newArray_VERTEXcLcLRelationList(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::RelationList[nElements] : new ::VERTEX::RelationList[nElements];
   }
   // Wrapper around operator delete
   static void delete_VERTEXcLcLRelationList(void *p) {
      delete ((::VERTEX::RelationList*)p);
   }
   static void deleteArray_VERTEXcLcLRelationList(void *p) {
      delete [] ((::VERTEX::RelationList*)p);
   }
   static void destruct_VERTEXcLcLRelationList(void *p) {
      typedef ::VERTEX::RelationList current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_VERTEXcLcLRelationList(TBuffer &buf, void *obj) {
      ((::VERTEX::RelationList*)obj)->::VERTEX::RelationList::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::VERTEX::RelationList

      namespace VERTEX {
//______________________________________________________________________________
void RelationIterator::Streamer(TBuffer &R__b)
{
   // Stream an object of class VERTEX::RelationIterator.

   ::Error("VERTEX::RelationIterator::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace VERTEX
//______________________________________________________________________________
      namespace VERTEX {
void RelationIterator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VERTEX::RelationIterator.
      typedef ::VERTEX::RelationIterator msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iter", (void*)&iter);
      R__insp.InspectMember("VERTEX::Relation_it", (void*)&iter, "iter.", false);
}

} // namespace VERTEX
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_VERTEXcLcLRelationIterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::RelationIterator : new ::VERTEX::RelationIterator;
   }
   static void *newArray_VERTEXcLcLRelationIterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::RelationIterator[nElements] : new ::VERTEX::RelationIterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_VERTEXcLcLRelationIterator(void *p) {
      delete ((::VERTEX::RelationIterator*)p);
   }
   static void deleteArray_VERTEXcLcLRelationIterator(void *p) {
      delete [] ((::VERTEX::RelationIterator*)p);
   }
   static void destruct_VERTEXcLcLRelationIterator(void *p) {
      typedef ::VERTEX::RelationIterator current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_VERTEXcLcLRelationIterator(TBuffer &buf, void *obj) {
      ((::VERTEX::RelationIterator*)obj)->::VERTEX::RelationIterator::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::VERTEX::RelationIterator

      namespace VERTEX {
//______________________________________________________________________________
void ConstRelationIterator::Streamer(TBuffer &R__b)
{
   // Stream an object of class VERTEX::ConstRelationIterator.

   ::Error("VERTEX::ConstRelationIterator::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace VERTEX
//______________________________________________________________________________
      namespace VERTEX {
void ConstRelationIterator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VERTEX::ConstRelationIterator.
      typedef ::VERTEX::ConstRelationIterator msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iter", (void*)&iter);
      R__insp.InspectMember("VERTEX::Relation_cit", (void*)&iter, "iter.", false);
}

} // namespace VERTEX
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_VERTEXcLcLConstRelationIterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::ConstRelationIterator : new ::VERTEX::ConstRelationIterator;
   }
   static void *newArray_VERTEXcLcLConstRelationIterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::ConstRelationIterator[nElements] : new ::VERTEX::ConstRelationIterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_VERTEXcLcLConstRelationIterator(void *p) {
      delete ((::VERTEX::ConstRelationIterator*)p);
   }
   static void deleteArray_VERTEXcLcLConstRelationIterator(void *p) {
      delete [] ((::VERTEX::ConstRelationIterator*)p);
   }
   static void destruct_VERTEXcLcLConstRelationIterator(void *p) {
      typedef ::VERTEX::ConstRelationIterator current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_VERTEXcLcLConstRelationIterator(TBuffer &buf, void *obj) {
      ((::VERTEX::ConstRelationIterator*)obj)->::VERTEX::ConstRelationIterator::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::VERTEX::ConstRelationIterator

      namespace VERTEX {
//______________________________________________________________________________
void ReverseRelationIterator::Streamer(TBuffer &R__b)
{
   // Stream an object of class VERTEX::ReverseRelationIterator.

   ::Error("VERTEX::ReverseRelationIterator::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace VERTEX
//______________________________________________________________________________
      namespace VERTEX {
void ReverseRelationIterator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VERTEX::ReverseRelationIterator.
      typedef ::VERTEX::ReverseRelationIterator msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iter", (void*)&iter);
      R__insp.InspectMember("VERTEX::Relation_rit", (void*)&iter, "iter.", false);
}

} // namespace VERTEX
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_VERTEXcLcLReverseRelationIterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::ReverseRelationIterator : new ::VERTEX::ReverseRelationIterator;
   }
   static void *newArray_VERTEXcLcLReverseRelationIterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::ReverseRelationIterator[nElements] : new ::VERTEX::ReverseRelationIterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_VERTEXcLcLReverseRelationIterator(void *p) {
      delete ((::VERTEX::ReverseRelationIterator*)p);
   }
   static void deleteArray_VERTEXcLcLReverseRelationIterator(void *p) {
      delete [] ((::VERTEX::ReverseRelationIterator*)p);
   }
   static void destruct_VERTEXcLcLReverseRelationIterator(void *p) {
      typedef ::VERTEX::ReverseRelationIterator current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_VERTEXcLcLReverseRelationIterator(TBuffer &buf, void *obj) {
      ((::VERTEX::ReverseRelationIterator*)obj)->::VERTEX::ReverseRelationIterator::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::VERTEX::ReverseRelationIterator

      namespace VERTEX {
//______________________________________________________________________________
void ConstReverseRelationIterator::Streamer(TBuffer &R__b)
{
   // Stream an object of class VERTEX::ConstReverseRelationIterator.

   ::Error("VERTEX::ConstReverseRelationIterator::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace VERTEX
//______________________________________________________________________________
      namespace VERTEX {
void ConstReverseRelationIterator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VERTEX::ConstReverseRelationIterator.
      typedef ::VERTEX::ConstReverseRelationIterator msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iter", (void*)&iter);
      R__insp.InspectMember("VERTEX::Relation_rcit", (void*)&iter, "iter.", false);
}

} // namespace VERTEX
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_VERTEXcLcLConstReverseRelationIterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::ConstReverseRelationIterator : new ::VERTEX::ConstReverseRelationIterator;
   }
   static void *newArray_VERTEXcLcLConstReverseRelationIterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VERTEX::ConstReverseRelationIterator[nElements] : new ::VERTEX::ConstReverseRelationIterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_VERTEXcLcLConstReverseRelationIterator(void *p) {
      delete ((::VERTEX::ConstReverseRelationIterator*)p);
   }
   static void deleteArray_VERTEXcLcLConstReverseRelationIterator(void *p) {
      delete [] ((::VERTEX::ConstReverseRelationIterator*)p);
   }
   static void destruct_VERTEXcLcLConstReverseRelationIterator(void *p) {
      typedef ::VERTEX::ConstReverseRelationIterator current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_VERTEXcLcLConstReverseRelationIterator(TBuffer &buf, void *obj) {
      ((::VERTEX::ConstReverseRelationIterator*)obj)->::VERTEX::ConstReverseRelationIterator::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::VERTEX::ConstReverseRelationIterator

      namespace VERTEX {
//______________________________________________________________________________
void Vertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class VERTEX::Vertex.

   //This works around a msvc bug and should be harmless on other platforms
   typedef VERTEX::Track baseClass0;
   baseClass0::Streamer(R__b);
}

} // namespace VERTEX
//______________________________________________________________________________
      namespace VERTEX {
void Vertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class VERTEX::Vertex.
      typedef ::VERTEX::Vertex msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_use_kalman", &v_use_kalman);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_valid", &v_valid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_Mvalid", &v_Mvalid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_mother", &v_mother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_angdist", &v_angdist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_angle", &v_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_dist", &v_dist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_bk13", &v_bk13);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_chi2", &v_chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kal_xv", &kal_xv);
      R__insp.InspectMember(kal_xv, "kal_xv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kal_xvs", &kal_xvs);
      R__insp.InspectMember(kal_xvs, "kal_xvs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_CS", &v_CS);
      R__insp.InspectMember(v_CS, "v_CS.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_CINV", &v_CINV);
      R__insp.InspectMember(v_CINV, "v_CINV.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*v_covn", &v_covn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracks", (void*)&tracks);
      R__insp.InspectMember("VERTEX::Track_v", (void*)&tracks, "tracks.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmass", (void*)&xmass);
      R__insp.InspectMember("VERTEX::MassC_v", (void*)&xmass, "xmass.", false);
      //This works around a msvc bug and should be harmless on other platforms
      typedef VERTEX::Track baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace VERTEX
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_VERTEXcLcLVertex(void *p) {
      return  p ? new(p) ::VERTEX::Vertex : new ::VERTEX::Vertex;
   }
   static void *newArray_VERTEXcLcLVertex(Long_t nElements, void *p) {
      return p ? new(p) ::VERTEX::Vertex[nElements] : new ::VERTEX::Vertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_VERTEXcLcLVertex(void *p) {
      delete ((::VERTEX::Vertex*)p);
   }
   static void deleteArray_VERTEXcLcLVertex(void *p) {
      delete [] ((::VERTEX::Vertex*)p);
   }
   static void destruct_VERTEXcLcLVertex(void *p) {
      typedef ::VERTEX::Vertex current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_VERTEXcLcLVertex(TBuffer &buf, void *obj) {
      ((::VERTEX::Vertex*)obj)->::VERTEX::Vertex::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::VERTEX::Vertex

      namespace MATRIX {
//______________________________________________________________________________
void VtMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MATRIX::VtMatrix.

   ::Error("MATRIX::VtMatrix::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace MATRIX
//______________________________________________________________________________
      namespace MATRIX {
void VtMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MATRIX::VtMatrix.
      typedef ::MATRIX::VtMatrix msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m", &m);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*work", &work);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nrow", &m_nrow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_ncol", &m_ncol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_size", &m_size);
}

} // namespace MATRIX
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MATRIXcLcLVtMatrix(void *p) {
      delete ((::MATRIX::VtMatrix*)p);
   }
   static void deleteArray_MATRIXcLcLVtMatrix(void *p) {
      delete [] ((::MATRIX::VtMatrix*)p);
   }
   static void destruct_MATRIXcLcLVtMatrix(void *p) {
      typedef ::MATRIX::VtMatrix current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MATRIXcLcLVtMatrix(TBuffer &buf, void *obj) {
      ((::MATRIX::VtMatrix*)obj)->::MATRIX::VtMatrix::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::MATRIX::VtMatrix

      namespace MATRIX {
//______________________________________________________________________________
void VtNegMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MATRIX::VtNegMatrix.

   //This works around a msvc bug and should be harmless on other platforms
   typedef MATRIX::VtMatrix baseClass0;
   baseClass0::Streamer(R__b);
}

} // namespace MATRIX
//______________________________________________________________________________
      namespace MATRIX {
void VtNegMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MATRIX::VtNegMatrix.
      typedef ::MATRIX::VtNegMatrix msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef MATRIX::VtMatrix baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace MATRIX
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MATRIXcLcLVtNegMatrix(void *p) {
      delete ((::MATRIX::VtNegMatrix*)p);
   }
   static void deleteArray_MATRIXcLcLVtNegMatrix(void *p) {
      delete [] ((::MATRIX::VtNegMatrix*)p);
   }
   static void destruct_MATRIXcLcLVtNegMatrix(void *p) {
      typedef ::MATRIX::VtNegMatrix current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MATRIXcLcLVtNegMatrix(TBuffer &buf, void *obj) {
      ((::MATRIX::VtNegMatrix*)obj)->::MATRIX::VtNegMatrix::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::MATRIX::VtNegMatrix

      namespace MATRIX {
//______________________________________________________________________________
void VtSqMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MATRIX::VtSqMatrix.

   //This works around a msvc bug and should be harmless on other platforms
   typedef MATRIX::VtMatrix baseClass0;
   baseClass0::Streamer(R__b);
}

} // namespace MATRIX
//______________________________________________________________________________
      namespace MATRIX {
void VtSqMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MATRIX::VtSqMatrix.
      typedef ::MATRIX::VtSqMatrix msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef MATRIX::VtMatrix baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace MATRIX
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MATRIXcLcLVtSqMatrix(void *p) {
      delete ((::MATRIX::VtSqMatrix*)p);
   }
   static void deleteArray_MATRIXcLcLVtSqMatrix(void *p) {
      delete [] ((::MATRIX::VtSqMatrix*)p);
   }
   static void destruct_MATRIXcLcLVtSqMatrix(void *p) {
      typedef ::MATRIX::VtSqMatrix current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MATRIXcLcLVtSqMatrix(TBuffer &buf, void *obj) {
      ((::MATRIX::VtSqMatrix*)obj)->::MATRIX::VtSqMatrix::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::MATRIX::VtSqMatrix

      namespace MATRIX {
//______________________________________________________________________________
void VtSymMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MATRIX::VtSymMatrix.

   //This works around a msvc bug and should be harmless on other platforms
   typedef MATRIX::VtSqMatrix baseClass0;
   baseClass0::Streamer(R__b);
}

} // namespace MATRIX
//______________________________________________________________________________
      namespace MATRIX {
void VtSymMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MATRIX::VtSymMatrix.
      typedef ::MATRIX::VtSymMatrix msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef MATRIX::VtSqMatrix baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace MATRIX
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MATRIXcLcLVtSymMatrix(void *p) {
      delete ((::MATRIX::VtSymMatrix*)p);
   }
   static void deleteArray_MATRIXcLcLVtSymMatrix(void *p) {
      delete [] ((::MATRIX::VtSymMatrix*)p);
   }
   static void destruct_MATRIXcLcLVtSymMatrix(void *p) {
      typedef ::MATRIX::VtSymMatrix current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MATRIXcLcLVtSymMatrix(TBuffer &buf, void *obj) {
      ((::MATRIX::VtSymMatrix*)obj)->::MATRIX::VtSymMatrix::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::MATRIX::VtSymMatrix

      namespace MATRIX {
//______________________________________________________________________________
void CMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MATRIX::CMatrix.

   //This works around a msvc bug and should be harmless on other platforms
   typedef MATRIX::VtSymMatrix baseClass0;
   baseClass0::Streamer(R__b);
}

} // namespace MATRIX
//______________________________________________________________________________
      namespace MATRIX {
void CMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MATRIX::CMatrix.
      typedef ::MATRIX::CMatrix msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef MATRIX::VtSymMatrix baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace MATRIX
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MATRIXcLcLCMatrix(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MATRIX::CMatrix : new ::MATRIX::CMatrix;
   }
   static void *newArray_MATRIXcLcLCMatrix(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MATRIX::CMatrix[nElements] : new ::MATRIX::CMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MATRIXcLcLCMatrix(void *p) {
      delete ((::MATRIX::CMatrix*)p);
   }
   static void deleteArray_MATRIXcLcLCMatrix(void *p) {
      delete [] ((::MATRIX::CMatrix*)p);
   }
   static void destruct_MATRIXcLcLCMatrix(void *p) {
      typedef ::MATRIX::CMatrix current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MATRIXcLcLCMatrix(TBuffer &buf, void *obj) {
      ((::MATRIX::CMatrix*)obj)->::MATRIX::CMatrix::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::MATRIX::CMatrix

      namespace MATRIX {
//______________________________________________________________________________
void VtVector::Streamer(TBuffer &R__b)
{
   // Stream an object of class MATRIX::VtVector.

   ::Error("MATRIX::VtVector::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

} // namespace MATRIX
//______________________________________________________________________________
      namespace MATRIX {
void VtVector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MATRIX::VtVector.
      typedef ::MATRIX::VtVector msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_size", &v_size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*v", &v);
}

} // namespace MATRIX
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MATRIXcLcLVtVector(void *p) {
      delete ((::MATRIX::VtVector*)p);
   }
   static void deleteArray_MATRIXcLcLVtVector(void *p) {
      delete [] ((::MATRIX::VtVector*)p);
   }
   static void destruct_MATRIXcLcLVtVector(void *p) {
      typedef ::MATRIX::VtVector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MATRIXcLcLVtVector(TBuffer &buf, void *obj) {
      ((::MATRIX::VtVector*)obj)->::MATRIX::VtVector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::MATRIX::VtVector

/********************************************************
* vtCint.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtablevtCint();

extern "C" void G__set_cpp_environmentvtCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("include\\VtVector.hh");
  G__add_compiledheader("include\\CMatrix.hh");
  G__add_compiledheader("include\\VtMatrix.hh");
  G__add_compiledheader("include\\VtNegMatrix.hh");
  G__add_compiledheader("include\\VtSqMatrix.hh");
  G__add_compiledheader("include\\VtSymMatrix.hh");
  G__add_compiledheader("include\\VtIni.hh");
  G__add_compiledheader("include\\VtTrack.hh");
  G__add_compiledheader("include\\VtRelation.hh");
  G__add_compiledheader("include\\VtKalman.hh");
  G__add_compiledheader("include\\VtMassC.hh");
  G__add_compiledheader("include\\VtRelationList.hh");
  G__add_compiledheader("include\\VtVertex.hh");
  G__add_compiledheader("include\\VtDistance.hh");
  G__cpp_reset_tagtablevtCint();
}
#include <new>
extern "C" int G__cpp_dllrevvtCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MATRIX */
static int G__vtCint_249_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = MATRIX::operator<<(*(ostream*) libp->para[0].ref, *(MATRIX::VtVector*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_249_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = MATRIX::operator<<(*(ostream*) libp->para[0].ref, *(MATRIX::VtMatrix*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_249_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = MATRIX::operator<<(*(ostream*) libp->para[0].ref, *(MATRIX::VtSqMatrix*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_249_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = MATRIX::operator<<(*(ostream*) libp->para[0].ref, *(MATRIX::VtSymMatrix*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_249_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = MATRIX::operator<<(*(ostream*) libp->para[0].ref, *(MATRIX::VtNegMatrix*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/* MATRIX::VtVector */
static int G__vtCint_250_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtVector((const unsigned int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MATRIX::VtVector((const unsigned int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtVector((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) MATRIX::VtVector((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) MATRIX::VtVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) MATRIX::VtVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) MATRIX::VtVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5]));
   } else {
     p = new((void*) gvp) MATRIX::VtVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtVector(*(MATRIX::VtVector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::VtVector(*(MATRIX::VtVector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::VtVector*) G__getstructoffset())->operator[]((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((MATRIX::VtVector*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::VtVector*) G__getstructoffset())->operator()((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((MATRIX::VtVector*) G__getstructoffset())->operator()((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((MATRIX::VtVector*) G__getstructoffset())->operator=(*(MATRIX::VtVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((MATRIX::VtVector*) G__getstructoffset())->operator+=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((MATRIX::VtVector*) G__getstructoffset())->operator-=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((MATRIX::VtVector*) G__getstructoffset())->operator*=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((MATRIX::VtVector*) G__getstructoffset())->operator/=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((MATRIX::VtVector*) G__getstructoffset())->operator+=(*(MATRIX::VtVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((MATRIX::VtVector*) G__getstructoffset())->operator-=(*(MATRIX::VtVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const MATRIX::VtVector*) G__getstructoffset())->operator+(*(MATRIX::VtVector*) libp->para[0].ref);
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const MATRIX::VtVector*) G__getstructoffset())->operator-(*(MATRIX::VtVector*) libp->para[0].ref);
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::VtVector*) G__getstructoffset())->operator*(*(MATRIX::VtVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const MATRIX::VtVector*) G__getstructoffset())->operator*((const double) G__double(libp->para[0]));
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MATRIX::VtVector*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MATRIX::VtVector*) G__getstructoffset())->nrow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::VtVector*) G__getstructoffset())->mag2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::VtVector*) G__getstructoffset())->mag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const MATRIX::VtVector*) G__getstructoffset())->unit();
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MATRIX::VtVector*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtVector*) G__getstructoffset())->place_at(*(MATRIX::VtVector*) libp->para[0].ref, (const unsigned int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtVector*) G__getstructoffset())->copy(*(MATRIX::VtVector*) libp->para[0].ref, (const unsigned int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtVector*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MATRIX::VtVector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtVector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MATRIX::VtVector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MATRIX::VtVector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MATRIX::VtVector*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtVector*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtVector*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtVector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtVector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::VtVector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtVector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_250_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::VtVector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MATRIX::VtVector G__TMATRIXcLcLVtVector;
static int G__vtCint_250_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MATRIX::VtVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MATRIX::VtVector*) (soff+(sizeof(MATRIX::VtVector)*i)))->~G__TMATRIXcLcLVtVector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MATRIX::VtVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MATRIX::VtVector*) (soff))->~G__TMATRIXcLcLVtVector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MATRIX::VtNegMatrix */
static int G__vtCint_251_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtNegMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtNegMatrix((const unsigned int) G__int(libp->para[0]), (const unsigned int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) MATRIX::VtNegMatrix((const unsigned int) G__int(libp->para[0]), (const unsigned int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtNegMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtNegMatrix(*(MATRIX::VtNegMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::VtNegMatrix(*(MATRIX::VtNegMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtNegMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtNegMatrix(*(MATRIX::VtMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::VtNegMatrix(*(MATRIX::VtMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::VtNegMatrix*) G__getstructoffset())->nget((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((MATRIX::VtNegMatrix*) G__getstructoffset())->nget((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtNegMatrix* pobj;
         const MATRIX::VtNegMatrix xobj = ((const MATRIX::VtNegMatrix*) G__getstructoffset())->T();
         pobj = new MATRIX::VtNegMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtNegMatrix& obj = ((MATRIX::VtNegMatrix*) G__getstructoffset())->operator+=(*(MATRIX::VtMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtNegMatrix& obj = ((MATRIX::VtNegMatrix*) G__getstructoffset())->operator+=(*(MATRIX::VtNegMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtNegMatrix& obj = ((MATRIX::VtNegMatrix*) G__getstructoffset())->operator-=(*(MATRIX::VtMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtNegMatrix& obj = ((MATRIX::VtNegMatrix*) G__getstructoffset())->operator-=(*(MATRIX::VtNegMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtNegMatrix*) G__getstructoffset())->operator+(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtNegMatrix*) G__getstructoffset())->operator+(*(MATRIX::VtNegMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtNegMatrix*) G__getstructoffset())->operator-(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtNegMatrix*) G__getstructoffset())->operator-();
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtNegMatrix*) G__getstructoffset())->operator*(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const MATRIX::VtNegMatrix*) G__getstructoffset())->operator*(*(MATRIX::VtVector*) libp->para[0].ref);
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MATRIX::VtNegMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtNegMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MATRIX::VtNegMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MATRIX::VtNegMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtNegMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtNegMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::VtNegMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtNegMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_251_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::VtNegMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MATRIX::VtNegMatrix G__TMATRIXcLcLVtNegMatrix;
static int G__vtCint_251_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MATRIX::VtNegMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MATRIX::VtNegMatrix*) (soff+(sizeof(MATRIX::VtNegMatrix)*i)))->~G__TMATRIXcLcLVtNegMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MATRIX::VtNegMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MATRIX::VtNegMatrix*) (soff))->~G__TMATRIXcLcLVtNegMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__vtCint_251_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtNegMatrix* dest = (MATRIX::VtNegMatrix*) G__getstructoffset();
   *dest = *(MATRIX::VtNegMatrix*) libp->para[0].ref;
   const MATRIX::VtNegMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MATRIX::VtMatrix */
static int G__vtCint_252_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtMatrix((const unsigned int) G__int(libp->para[0]), (const unsigned int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) MATRIX::VtMatrix((const unsigned int) G__int(libp->para[0]), (const unsigned int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtMatrix(*(MATRIX::VtMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::VtMatrix(*(MATRIX::VtMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MATRIX::VtMatrix*) G__getstructoffset())->nrow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MATRIX::VtMatrix*) G__getstructoffset())->ncol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MATRIX::VtMatrix*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         MATRIX::VtMatrix::VtMatrix_row* pobj;
         MATRIX::VtMatrix::VtMatrix_row xobj = ((MATRIX::VtMatrix*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new MATRIX::VtMatrix::VtMatrix_row(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix::VtMatrix_row_const* pobj;
         const MATRIX::VtMatrix::VtMatrix_row_const xobj = ((const MATRIX::VtMatrix*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new MATRIX::VtMatrix::VtMatrix_row_const(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::VtMatrix*) G__getstructoffset())->operator()((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((MATRIX::VtMatrix*) G__getstructoffset())->operator()((const unsigned int) G__int(libp->para[0]), (const unsigned int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::VtMatrix*) G__getstructoffset())->get((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((MATRIX::VtMatrix*) G__getstructoffset())->get((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtMatrix*) G__getstructoffset())->VtT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtMatrix*) G__getstructoffset())->T();
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtMatrix*) G__getstructoffset())->place_at(*(MATRIX::VtMatrix*) libp->para[0].ref, (const unsigned int) G__int(libp->para[1])
, (const unsigned int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtMatrix*) G__getstructoffset())->place_at(*(MATRIX::VtVector*) libp->para[0].ref, (const unsigned int) G__int(libp->para[1])
, (const unsigned int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtMatrix*) G__getstructoffset())->copy(*(MATRIX::VtMatrix*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtMatrix*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix& obj = ((MATRIX::VtMatrix*) G__getstructoffset())->operator=(*(MATRIX::VtMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix& obj = ((MATRIX::VtMatrix*) G__getstructoffset())->operator=(*(MATRIX::VtNegMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix& obj = ((MATRIX::VtMatrix*) G__getstructoffset())->operator+=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix& obj = ((MATRIX::VtMatrix*) G__getstructoffset())->operator-=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix& obj = ((MATRIX::VtMatrix*) G__getstructoffset())->operator*=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix& obj = ((MATRIX::VtMatrix*) G__getstructoffset())->operator/=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix& obj = ((MATRIX::VtMatrix*) G__getstructoffset())->operator+=(*(MATRIX::VtMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix& obj = ((MATRIX::VtMatrix*) G__getstructoffset())->operator-=(*(MATRIX::VtMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtMatrix*) G__getstructoffset())->operator+(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtMatrix*) G__getstructoffset())->operator+(*(MATRIX::VtNegMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtMatrix*) G__getstructoffset())->operator-(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtMatrix*) G__getstructoffset())->operator-(*(MATRIX::VtNegMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtNegMatrix* pobj;
         const MATRIX::VtNegMatrix xobj = ((const MATRIX::VtMatrix*) G__getstructoffset())->operator-();
         pobj = new MATRIX::VtNegMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtMatrix*) G__getstructoffset())->operator*(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const MATRIX::VtMatrix*) G__getstructoffset())->operator*(*(MATRIX::VtVector*) libp->para[0].ref);
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const MATRIX::VtMatrix*) G__getstructoffset())->array());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MATRIX::VtMatrix*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MATRIX::VtMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MATRIX::VtMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MATRIX::VtMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MATRIX::VtMatrix*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtMatrix*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtMatrix*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::VtMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_252_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::VtMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MATRIX::VtMatrix G__TMATRIXcLcLVtMatrix;
static int G__vtCint_252_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MATRIX::VtMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MATRIX::VtMatrix*) (soff+(sizeof(MATRIX::VtMatrix)*i)))->~G__TMATRIXcLcLVtMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MATRIX::VtMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MATRIX::VtMatrix*) (soff))->~G__TMATRIXcLcLVtMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MATRIX::VtSqMatrix */
static int G__vtCint_255_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtSqMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtSqMatrix((const int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MATRIX::VtSqMatrix((const int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtSqMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtSqMatrix(*(MATRIX::VtSqMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::VtSqMatrix(*(MATRIX::VtSqMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtSqMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtSqMatrix(*(MATRIX::VtMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::VtSqMatrix(*(MATRIX::VtMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MATRIX::VtSqMatrix*) G__getstructoffset())->VtDinv((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MATRIX::VtSqMatrix*) G__getstructoffset())->VtDinv());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const MATRIX::VtSqMatrix* pobj;
         const MATRIX::VtSqMatrix xobj = ((const MATRIX::VtSqMatrix*) G__getstructoffset())->dinv((int) G__int(libp->para[0]));
         pobj = new MATRIX::VtSqMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const MATRIX::VtSqMatrix* pobj;
         const MATRIX::VtSqMatrix xobj = ((const MATRIX::VtSqMatrix*) G__getstructoffset())->dinv();
         pobj = new MATRIX::VtSqMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::VtSqMatrix*) G__getstructoffset())->det());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         MATRIX::VtMatrix* pobj;
         MATRIX::VtMatrix xobj = ((MATRIX::VtSqMatrix*) G__getstructoffset())->operator*(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const MATRIX::VtSqMatrix*) G__getstructoffset())->operator*(*(MATRIX::VtVector*) libp->para[0].ref);
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MATRIX::VtSqMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtSqMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MATRIX::VtSqMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MATRIX::VtSqMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtSqMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtSqMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::VtSqMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtSqMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_255_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::VtSqMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MATRIX::VtSqMatrix G__TMATRIXcLcLVtSqMatrix;
static int G__vtCint_255_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MATRIX::VtSqMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MATRIX::VtSqMatrix*) (soff+(sizeof(MATRIX::VtSqMatrix)*i)))->~G__TMATRIXcLcLVtSqMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MATRIX::VtSqMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MATRIX::VtSqMatrix*) (soff))->~G__TMATRIXcLcLVtSqMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__vtCint_255_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtSqMatrix* dest = (MATRIX::VtSqMatrix*) G__getstructoffset();
   *dest = *(MATRIX::VtSqMatrix*) libp->para[0].ref;
   const MATRIX::VtSqMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MATRIX::VtSymMatrix */
static int G__vtCint_256_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtSymMatrix((const unsigned int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MATRIX::VtSymMatrix((const unsigned int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtSymMatrix((const unsigned int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) MATRIX::VtSymMatrix((const unsigned int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtSymMatrix(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::VtSymMatrix(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtSymMatrix(*(MATRIX::VtSqMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::VtSymMatrix(*(MATRIX::VtSqMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::VtSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::VtSymMatrix(*(MATRIX::VtMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::VtSymMatrix(*(MATRIX::VtMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MATRIX::VtSymMatrix*) G__getstructoffset())->invert((const bool) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MATRIX::VtSymMatrix*) G__getstructoffset())->VtDsinv((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MATRIX::VtSymMatrix*) G__getstructoffset())->VtDsinv());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const MATRIX::VtSymMatrix* pobj;
         const MATRIX::VtSymMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->dsinv((int) G__int(libp->para[0]));
         pobj = new MATRIX::VtSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const MATRIX::VtSymMatrix* pobj;
         const MATRIX::VtSymMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->dsinv();
         pobj = new MATRIX::VtSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const MATRIX::VtSymMatrix*) G__getstructoffset())->product(*(MATRIX::VtVector*) libp->para[0].ref, (unsigned int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const MATRIX::VtSymMatrix*) G__getstructoffset())->product(*(MATRIX::VtVector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix* pobj;
         const MATRIX::VtSymMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->product(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtSymMatrix*) G__getstructoffset())->copy(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix& obj = ((MATRIX::VtSymMatrix*) G__getstructoffset())->operator=(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix& obj = ((MATRIX::VtSymMatrix*) G__getstructoffset())->operator+=(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix& obj = ((MATRIX::VtSymMatrix*) G__getstructoffset())->operator-=(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix* pobj;
         const MATRIX::VtSymMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator+(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSqMatrix* pobj;
         const MATRIX::VtSqMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator+(*(MATRIX::VtSqMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtSqMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator+(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix* pobj;
         const MATRIX::VtSymMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator-(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix* pobj;
         const MATRIX::VtSymMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator-();
         pobj = new MATRIX::VtSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSqMatrix* pobj;
         const MATRIX::VtSqMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator-(*(MATRIX::VtSqMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtSqMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator-(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSqMatrix* pobj;
         const MATRIX::VtSqMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator*(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtSqMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSqMatrix* pobj;
         const MATRIX::VtSqMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator*(*(MATRIX::VtSqMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtSqMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtMatrix* pobj;
         const MATRIX::VtMatrix xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator*(*(MATRIX::VtMatrix*) libp->para[0].ref);
         pobj = new MATRIX::VtMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const MATRIX::VtSymMatrix*) G__getstructoffset())->operator*(*(MATRIX::VtVector*) libp->para[0].ref);
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MATRIX::VtSymMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtSymMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MATRIX::VtSymMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MATRIX::VtSymMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::VtSymMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtSymMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::VtSymMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::VtSymMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_256_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::VtSymMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MATRIX::VtSymMatrix G__TMATRIXcLcLVtSymMatrix;
static int G__vtCint_256_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MATRIX::VtSymMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MATRIX::VtSymMatrix*) (soff+(sizeof(MATRIX::VtSymMatrix)*i)))->~G__TMATRIXcLcLVtSymMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MATRIX::VtSymMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MATRIX::VtSymMatrix*) (soff))->~G__TMATRIXcLcLVtSymMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MATRIX::CMatrix */
static int G__vtCint_257_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::CMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MATRIX::CMatrix[n];
     } else {
       p = new((void*) gvp) MATRIX::CMatrix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MATRIX::CMatrix;
     } else {
       p = new((void*) gvp) MATRIX::CMatrix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::CMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::CMatrix(*(MATRIX::CMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::CMatrix(*(MATRIX::CMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::CMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::CMatrix(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::CMatrix(*(MATRIX::VtSymMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::CMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::CMatrix(*(MATRIX::VtSqMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::CMatrix(*(MATRIX::VtSqMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::CMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MATRIX::CMatrix(*(MATRIX::VtMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MATRIX::CMatrix(*(MATRIX::VtMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->x());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->x_y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->x_tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->x_ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->x_p());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->y_tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->y_ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->y_p());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->tx_ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->tx_p());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->ty_p());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->p());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_x((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_x_y((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_x_tx((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_x_ty((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_x_p((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_y((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_y_tx((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_y_ty((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_y_p((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_tx((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_tx_ty((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_tx_p((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_ty((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_ty_p((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->set_p((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->x_prop((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->x_y_prop((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->x_tx_prop((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->x_ty_prop((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->x_p_prop((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->y_prop((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->y_tx_prop((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->y_ty_prop((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MATRIX::CMatrix*) G__getstructoffset())->y_p_prop((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->propagate((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MATRIX::CMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::CMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MATRIX::CMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MATRIX::CMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MATRIX::CMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::CMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::CMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MATRIX::CMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_257_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MATRIX::CMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MATRIX::CMatrix G__TMATRIXcLcLCMatrix;
static int G__vtCint_257_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MATRIX::CMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MATRIX::CMatrix*) (soff+(sizeof(MATRIX::CMatrix)*i)))->~G__TMATRIXcLcLCMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MATRIX::CMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MATRIX::CMatrix*) (soff))->~G__TMATRIXcLcLCMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__vtCint_257_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MATRIX::CMatrix* dest = (MATRIX::CMatrix*) G__getstructoffset();
   *dest = *(MATRIX::CMatrix*) libp->para[0].ref;
   const MATRIX::CMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX */
static int G__vtCint_258_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = VERTEX::operator<<(*(ostream*) libp->para[0].ref, *(VERTEX::VtIni*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) VERTEX::createRelation(*(VERTEX::Track*) libp->para[0].ref, *(VERTEX::Vertex*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = VERTEX::operator<<(*(ostream*) libp->para[0].ref, *(VERTEX::RelationList*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = VERTEX::operator<<(*(ostream*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = VERTEX::operator<<(*(ostream*) libp->para[0].ref, *(VERTEX::Relation*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = VERTEX::operator<<(*(ostream*) libp->para[0].ref, *(VERTEX::Kalman*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = VERTEX::operator<<(*(ostream*) libp->para[0].ref, *(VERTEX::MassC*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = VERTEX::operator<<(*(ostream*) libp->para[0].ref, *(VERTEX::Vertex*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) VERTEX::distanceChi2(*(VERTEX::Track*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) VERTEX::distance(*(VERTEX::Track*) libp->para[0].ref, *(VERTEX::Vertex*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) VERTEX::distance(*(VERTEX::Vertex*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) VERTEX::SGNdistance(*(VERTEX::Track*) libp->para[0].ref, *(VERTEX::Vertex*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) VERTEX::SGNdistance(*(VERTEX::Vertex*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) VERTEX::SGNdistance(*(VERTEX::Track*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) VERTEX::distanceChi2(*(VERTEX::Vertex*) libp->para[0].ref, *(VERTEX::Vertex*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_258_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) VERTEX::distanceChi2(*(VERTEX::Vertex*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX::Relation */
static int G__vtCint_285_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::Relation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::Relation(*(VERTEX::Track*) libp->para[0].ref, *(VERTEX::Vertex*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) VERTEX::Relation(*(VERTEX::Track*) libp->para[0].ref, *(VERTEX::Vertex*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const VERTEX::Relation*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::Track& obj = ((VERTEX::Relation*) G__getstructoffset())->getTrack();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::Vertex& obj = ((VERTEX::Relation*) G__getstructoffset())->getVertex();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::Kalman& obj = ((VERTEX::Relation*) G__getstructoffset())->getKalman();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VERTEX::Relation::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Relation::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VERTEX::Relation::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VERTEX::Relation::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::Relation*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Relation*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Relation*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Relation*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Relation::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::Relation::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Relation::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_285_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::Relation::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__vtCint_285_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   VERTEX::Relation* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new VERTEX::Relation(*(VERTEX::Relation*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VERTEX::Relation G__TVERTEXcLcLRelation;
static int G__vtCint_285_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VERTEX::Relation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VERTEX::Relation*) (soff+(sizeof(VERTEX::Relation)*i)))->~G__TVERTEXcLcLRelation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VERTEX::Relation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VERTEX::Relation*) (soff))->~G__TVERTEXcLcLRelation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX::RelationIterator */
static int G__vtCint_286_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::RelationIterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::RelationIterator[n];
     } else {
       p = new((void*) gvp) VERTEX::RelationIterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::RelationIterator;
     } else {
       p = new((void*) gvp) VERTEX::RelationIterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::RelationIterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::RelationIterator(*(VERTEX::Relation_it*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) VERTEX::RelationIterator(*(VERTEX::Relation_it*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::RelationIterator::self& obj = ((VERTEX::RelationIterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::RelationIterator::self& obj = ((VERTEX::RelationIterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::Relation& obj = ((const VERTEX::RelationIterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::RelationIterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VERTEX::RelationIterator*) G__getstructoffset())->operator==(*(VERTEX::RelationIterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VERTEX::RelationIterator*) G__getstructoffset())->operator!=(*(VERTEX::RelationIterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VERTEX::RelationIterator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::RelationIterator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VERTEX::RelationIterator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VERTEX::RelationIterator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::RelationIterator*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::RelationIterator*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::RelationIterator*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::RelationIterator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::RelationIterator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::RelationIterator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::RelationIterator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_286_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::RelationIterator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__vtCint_286_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   VERTEX::RelationIterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new VERTEX::RelationIterator(*(VERTEX::RelationIterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VERTEX::RelationIterator G__TVERTEXcLcLRelationIterator;
static int G__vtCint_286_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VERTEX::RelationIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VERTEX::RelationIterator*) (soff+(sizeof(VERTEX::RelationIterator)*i)))->~G__TVERTEXcLcLRelationIterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VERTEX::RelationIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VERTEX::RelationIterator*) (soff))->~G__TVERTEXcLcLRelationIterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__vtCint_286_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::RelationIterator* dest = (VERTEX::RelationIterator*) G__getstructoffset();
   *dest = *(VERTEX::RelationIterator*) libp->para[0].ref;
   const VERTEX::RelationIterator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX::ConstRelationIterator */
static int G__vtCint_287_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::ConstRelationIterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::ConstRelationIterator[n];
     } else {
       p = new((void*) gvp) VERTEX::ConstRelationIterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::ConstRelationIterator;
     } else {
       p = new((void*) gvp) VERTEX::ConstRelationIterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::ConstRelationIterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::ConstRelationIterator(*(VERTEX::Relation_cit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) VERTEX::ConstRelationIterator(*(VERTEX::Relation_cit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::ConstRelationIterator::self& obj = ((VERTEX::ConstRelationIterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::ConstRelationIterator::self& obj = ((VERTEX::ConstRelationIterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::Relation& obj = ((const VERTEX::ConstRelationIterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::ConstRelationIterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VERTEX::ConstRelationIterator*) G__getstructoffset())->operator==(*(VERTEX::ConstRelationIterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VERTEX::ConstRelationIterator*) G__getstructoffset())->operator!=(*(VERTEX::ConstRelationIterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VERTEX::ConstRelationIterator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::ConstRelationIterator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VERTEX::ConstRelationIterator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VERTEX::ConstRelationIterator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::ConstRelationIterator*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::ConstRelationIterator*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::ConstRelationIterator*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::ConstRelationIterator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::ConstRelationIterator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::ConstRelationIterator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::ConstRelationIterator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_287_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::ConstRelationIterator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__vtCint_287_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   VERTEX::ConstRelationIterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new VERTEX::ConstRelationIterator(*(VERTEX::ConstRelationIterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VERTEX::ConstRelationIterator G__TVERTEXcLcLConstRelationIterator;
static int G__vtCint_287_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VERTEX::ConstRelationIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VERTEX::ConstRelationIterator*) (soff+(sizeof(VERTEX::ConstRelationIterator)*i)))->~G__TVERTEXcLcLConstRelationIterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VERTEX::ConstRelationIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VERTEX::ConstRelationIterator*) (soff))->~G__TVERTEXcLcLConstRelationIterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__vtCint_287_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::ConstRelationIterator* dest = (VERTEX::ConstRelationIterator*) G__getstructoffset();
   *dest = *(VERTEX::ConstRelationIterator*) libp->para[0].ref;
   const VERTEX::ConstRelationIterator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX::ReverseRelationIterator */
static int G__vtCint_288_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::ReverseRelationIterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::ReverseRelationIterator[n];
     } else {
       p = new((void*) gvp) VERTEX::ReverseRelationIterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::ReverseRelationIterator;
     } else {
       p = new((void*) gvp) VERTEX::ReverseRelationIterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::ReverseRelationIterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::ReverseRelationIterator(*(VERTEX::Relation_rit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) VERTEX::ReverseRelationIterator(*(VERTEX::Relation_rit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::ReverseRelationIterator::self& obj = ((VERTEX::ReverseRelationIterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::ReverseRelationIterator::self& obj = ((VERTEX::ReverseRelationIterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::Relation& obj = ((const VERTEX::ReverseRelationIterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::ReverseRelationIterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VERTEX::ReverseRelationIterator*) G__getstructoffset())->operator==(*(VERTEX::ReverseRelationIterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VERTEX::ReverseRelationIterator*) G__getstructoffset())->operator!=(*(VERTEX::ReverseRelationIterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VERTEX::ReverseRelationIterator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::ReverseRelationIterator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VERTEX::ReverseRelationIterator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VERTEX::ReverseRelationIterator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::ReverseRelationIterator*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::ReverseRelationIterator*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::ReverseRelationIterator*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::ReverseRelationIterator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::ReverseRelationIterator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::ReverseRelationIterator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::ReverseRelationIterator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_288_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::ReverseRelationIterator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__vtCint_288_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   VERTEX::ReverseRelationIterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new VERTEX::ReverseRelationIterator(*(VERTEX::ReverseRelationIterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VERTEX::ReverseRelationIterator G__TVERTEXcLcLReverseRelationIterator;
static int G__vtCint_288_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VERTEX::ReverseRelationIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VERTEX::ReverseRelationIterator*) (soff+(sizeof(VERTEX::ReverseRelationIterator)*i)))->~G__TVERTEXcLcLReverseRelationIterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VERTEX::ReverseRelationIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VERTEX::ReverseRelationIterator*) (soff))->~G__TVERTEXcLcLReverseRelationIterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__vtCint_288_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::ReverseRelationIterator* dest = (VERTEX::ReverseRelationIterator*) G__getstructoffset();
   *dest = *(VERTEX::ReverseRelationIterator*) libp->para[0].ref;
   const VERTEX::ReverseRelationIterator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX::ConstReverseRelationIterator */
static int G__vtCint_289_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::ConstReverseRelationIterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::ConstReverseRelationIterator[n];
     } else {
       p = new((void*) gvp) VERTEX::ConstReverseRelationIterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::ConstReverseRelationIterator;
     } else {
       p = new((void*) gvp) VERTEX::ConstReverseRelationIterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::ConstReverseRelationIterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::ConstReverseRelationIterator(*(VERTEX::Relation_rcit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) VERTEX::ConstReverseRelationIterator(*(VERTEX::Relation_rcit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::ConstReverseRelationIterator::self& obj = ((VERTEX::ConstReverseRelationIterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::ConstReverseRelationIterator::self& obj = ((VERTEX::ConstReverseRelationIterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::Relation& obj = ((const VERTEX::ConstReverseRelationIterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::ConstReverseRelationIterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VERTEX::ConstReverseRelationIterator*) G__getstructoffset())->operator==(*(VERTEX::ConstReverseRelationIterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VERTEX::ConstReverseRelationIterator*) G__getstructoffset())->operator!=(*(VERTEX::ConstReverseRelationIterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VERTEX::ConstReverseRelationIterator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::ConstReverseRelationIterator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VERTEX::ConstReverseRelationIterator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VERTEX::ConstReverseRelationIterator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::ConstReverseRelationIterator*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::ConstReverseRelationIterator*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::ConstReverseRelationIterator*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::ConstReverseRelationIterator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::ConstReverseRelationIterator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::ConstReverseRelationIterator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::ConstReverseRelationIterator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_289_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::ConstReverseRelationIterator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__vtCint_289_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   VERTEX::ConstReverseRelationIterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new VERTEX::ConstReverseRelationIterator(*(VERTEX::ConstReverseRelationIterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VERTEX::ConstReverseRelationIterator G__TVERTEXcLcLConstReverseRelationIterator;
static int G__vtCint_289_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VERTEX::ConstReverseRelationIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VERTEX::ConstReverseRelationIterator*) (soff+(sizeof(VERTEX::ConstReverseRelationIterator)*i)))->~G__TVERTEXcLcLConstReverseRelationIterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VERTEX::ConstReverseRelationIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VERTEX::ConstReverseRelationIterator*) (soff))->~G__TVERTEXcLcLConstReverseRelationIterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__vtCint_289_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::ConstReverseRelationIterator* dest = (VERTEX::ConstReverseRelationIterator*) G__getstructoffset();
   *dest = *(VERTEX::ConstReverseRelationIterator*) libp->para[0].ref;
   const VERTEX::ConstReverseRelationIterator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX::Track */
static int G__vtCint_290_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::Track[n];
     } else {
       p = new((void*) gvp) VERTEX::Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::Track;
     } else {
       p = new((void*) gvp) VERTEX::Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::Track((VERTEX::Track*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) VERTEX::Track((VERTEX::Track*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::Track(*(VERTEX::Track*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) VERTEX::Track(*(VERTEX::Track*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::Track(*(MATRIX::VtVector*) libp->para[0].ref, *(MATRIX::CMatrix*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) VERTEX::Track(*(MATRIX::VtVector*) libp->para[0].ref, *(MATRIX::CMatrix*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Track*) G__getstructoffset())->set(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, *(MATRIX::CMatrix*) libp->para[6].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::Track& obj = ((VERTEX::Track*) G__getstructoffset())->operator=(*(VERTEX::Track*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->x());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->x((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->y((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->p());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->pt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->pz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->chi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const VERTEX::Track*) G__getstructoffset())->ndf());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->eta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VERTEX::Track*) G__getstructoffset())->charge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->energy((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->energy());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->xf((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->xf());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->rap((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->rap());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::Track*) G__getstructoffset())->evec();
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::Track*) G__getstructoffset())->tvec();
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::Track*) G__getstructoffset())->pvec();
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->cov_x((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->cov_x());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->cov_y((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->cov_y());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->cov_tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->cov_ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Track*) G__getstructoffset())->cov_p());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VERTEX::Track*) G__getstructoffset())->isValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Track*) G__getstructoffset())->valid();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Track*) G__getstructoffset())->invalid();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Track*) G__getstructoffset())->propagate((const double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->px());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->py());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->ex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->ey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->ez());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->xerr((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->xerr());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->yerr((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->yerr());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->txerr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->tyerr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->perr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::CMatrix& obj = ((const VERTEX::Track*) G__getstructoffset())->V();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::CMatrix& obj = ((const VERTEX::Track*) G__getstructoffset())->G();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::CMatrix& obj = ((const VERTEX::Track*) G__getstructoffset())->GM();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const VERTEX::Track*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->rm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Track*) G__getstructoffset())->rm((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Track*) G__getstructoffset())->rmCC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Track*) G__getstructoffset())->rmCC((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Track*) G__getstructoffset())->delete_mom();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VERTEX::Track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VERTEX::Track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VERTEX::Track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::Track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_290_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::Track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VERTEX::Track G__TVERTEXcLcLTrack;
static int G__vtCint_290_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VERTEX::Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VERTEX::Track*) (soff+(sizeof(VERTEX::Track)*i)))->~G__TVERTEXcLcLTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VERTEX::Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VERTEX::Track*) (soff))->~G__TVERTEXcLcLTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX::Vertex */
static int G__vtCint_291_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::Vertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::Vertex[n];
     } else {
       p = new((void*) gvp) VERTEX::Vertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::Vertex;
     } else {
       p = new((void*) gvp) VERTEX::Vertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::Vertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::Vertex(*(VERTEX::Vertex*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) VERTEX::Vertex(*(VERTEX::Vertex*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::Vertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::Vertex(*(VERTEX::Track_v*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) VERTEX::Vertex(*(VERTEX::Track_v*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::Vertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::Vertex(*(VERTEX::Track*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) VERTEX::Vertex(*(VERTEX::Track*) libp->para[0].ref, *(VERTEX::Track*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Vertex*) G__getstructoffset())->vx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Vertex*) G__getstructoffset())->vy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Vertex*) G__getstructoffset())->vz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Vertex*) G__getstructoffset())->chi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Vertex*) G__getstructoffset())->prob());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const VERTEX::Vertex*) G__getstructoffset())->ndf());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const VERTEX::Vertex*) G__getstructoffset())->ntracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Vertex*) G__getstructoffset())->vtx_cov_x());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Vertex*) G__getstructoffset())->vtx_cov_y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const VERTEX::Vertex*) G__getstructoffset())->vtx_cov_z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->angle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->dist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->vxerr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->vyerr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->vzerr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->pmaxfrac());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix& obj = ((const VERTEX::Vertex*) G__getstructoffset())->CS();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix& obj = ((const VERTEX::Vertex*) G__getstructoffset())->covn();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VERTEX::Vertex*) G__getstructoffset())->valid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->set_invalid();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->mass((const bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->mass());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->massCC((const bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->massCC());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->mass((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->mass((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->mass((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->mass((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->mass(*(VERTEX::Vector_d*) libp->para[0].ref, (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->mass(*(VERTEX::Vector_d*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->mass(*(VERTEX::Vector_d*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->findVertex2D());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->findVertex3D());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->findVertexVt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->VtEstimateVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->VtEstimateVertexMath(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->VtEstimateVertexMathTA(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->VtMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->push_back(*(VERTEX::Track*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->rmsDistAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->calc_mother((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->calc_mother());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->calc_mother_cov());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->remove_last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->remove_worst();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((VERTEX::Vertex*) G__getstructoffset())->track_chi2((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((VERTEX::Vertex*) G__getstructoffset())->track_worst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->use_momentum((const bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->use_kalman((const bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VERTEX::Vertex*) G__getstructoffset())->use_kalman());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->distance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->distance(*(VERTEX::Track*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->distance(*(VERTEX::Vertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->VtFilter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VERTEX::Vertex*) G__getstructoffset())->VtInverseFilter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->VtSmoothX();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->VtSmoothQ();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->VtRemoveTrack(*(VERTEX::Relation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Vertex*) G__getstructoffset())->VtFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((const VERTEX::Vertex*) G__getstructoffset())->xv();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((const VERTEX::Vertex*) G__getstructoffset())->xvs();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const VERTEX::Vertex*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->chi2n());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->chi2l());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->remove((VERTEX::Relation*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix& obj = ((VERTEX::Vertex*) G__getstructoffset())->bigcov();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->MassConstr((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const VERTEX::MassC& obj = ((VERTEX::Vertex*) G__getstructoffset())->addMassConstr((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 0:
      {
         const VERTEX::MassC& obj = ((VERTEX::Vertex*) G__getstructoffset())->addMassConstr();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->clearMassConstr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const VERTEX::Vertex*) G__getstructoffset())->nMassConstr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::Vertex& obj = ((VERTEX::Vertex*) G__getstructoffset())->operator=(*(VERTEX::Vertex*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VERTEX::Vertex*) G__getstructoffset())->operator==(*(VERTEX::Vertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Vertex*) G__getstructoffset())->operator-(*(VERTEX::Vertex*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->add_track(*(VERTEX::Track*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::Vertex*) G__getstructoffset())->get_track((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VERTEX::Vertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Vertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VERTEX::Vertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VERTEX::Vertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Vertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Vertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::Vertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Vertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_291_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::Vertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VERTEX::Vertex G__TVERTEXcLcLVertex;
static int G__vtCint_291_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VERTEX::Vertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VERTEX::Vertex*) (soff+(sizeof(VERTEX::Vertex)*i)))->~G__TVERTEXcLcLVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VERTEX::Vertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VERTEX::Vertex*) (soff))->~G__TVERTEXcLcLVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX::RelationList */
static int G__vtCint_300_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::RelationList* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::RelationList[n];
     } else {
       p = new((void*) gvp) VERTEX::RelationList[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::RelationList;
     } else {
       p = new((void*) gvp) VERTEX::RelationList;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::RelationList*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::RelationList*) G__getstructoffset())->push__back((VERTEX::Relation*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::RelationList*) G__getstructoffset())->back());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const VERTEX::RelationList*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         VERTEX::RelationList::iterator* pobj;
         VERTEX::RelationList::iterator xobj = ((VERTEX::RelationList*) G__getstructoffset())->erase(*(VERTEX::RelationList::iterator*) libp->para[0].ref);
         pobj = new VERTEX::RelationList::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         VERTEX::RelationList::iterator* pobj;
         VERTEX::RelationList::iterator xobj = ((VERTEX::RelationList*) G__getstructoffset())->begin();
         pobj = new VERTEX::RelationList::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         VERTEX::RelationList::iterator* pobj;
         VERTEX::RelationList::iterator xobj = ((VERTEX::RelationList*) G__getstructoffset())->end();
         pobj = new VERTEX::RelationList::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::RelationList::const_iterator* pobj;
         const VERTEX::RelationList::const_iterator xobj = ((const VERTEX::RelationList*) G__getstructoffset())->begin();
         pobj = new VERTEX::RelationList::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::RelationList::const_iterator* pobj;
         const VERTEX::RelationList::const_iterator xobj = ((const VERTEX::RelationList*) G__getstructoffset())->end();
         pobj = new VERTEX::RelationList::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         VERTEX::RelationList::reverse_iterator* pobj;
         VERTEX::RelationList::reverse_iterator xobj = ((VERTEX::RelationList*) G__getstructoffset())->rbegin();
         pobj = new VERTEX::RelationList::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         VERTEX::RelationList::reverse_iterator* pobj;
         VERTEX::RelationList::reverse_iterator xobj = ((VERTEX::RelationList*) G__getstructoffset())->rend();
         pobj = new VERTEX::RelationList::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::RelationList::const_reverse_iterator* pobj;
         const VERTEX::RelationList::const_reverse_iterator xobj = ((const VERTEX::RelationList*) G__getstructoffset())->rbegin();
         pobj = new VERTEX::RelationList::const_reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::RelationList::const_reverse_iterator* pobj;
         const VERTEX::RelationList::const_reverse_iterator xobj = ((const VERTEX::RelationList*) G__getstructoffset())->rend();
         pobj = new VERTEX::RelationList::const_reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::RelationList*) G__getstructoffset())->operator[]((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const VERTEX::RelationList*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::RelationList*) G__getstructoffset())->unbook((VERTEX::Relation*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::RelationList*) G__getstructoffset())->remove((VERTEX::Relation*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VERTEX::RelationList& obj = ((VERTEX::RelationList*) G__getstructoffset())->operator=(*(VERTEX::RelationList*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VERTEX::RelationList*) G__getstructoffset())->operator==(*(VERTEX::RelationList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VERTEX::RelationList::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::RelationList::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VERTEX::RelationList::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VERTEX::RelationList::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::RelationList*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::RelationList*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::RelationList*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::RelationList*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::RelationList::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::RelationList::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::RelationList::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_300_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::RelationList::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__vtCint_300_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   VERTEX::RelationList* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new VERTEX::RelationList(*(VERTEX::RelationList*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VERTEX::RelationList G__TVERTEXcLcLRelationList;
static int G__vtCint_300_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VERTEX::RelationList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VERTEX::RelationList*) (soff+(sizeof(VERTEX::RelationList)*i)))->~G__TVERTEXcLcLRelationList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VERTEX::RelationList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VERTEX::RelationList*) (soff))->~G__TVERTEXcLcLRelationList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX::Kalman */
static int G__vtCint_301_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::Kalman* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::Kalman((VERTEX::Relation*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) VERTEX::Kalman((VERTEX::Relation*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLKalman));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->chi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->chi2s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->p());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->px());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->py());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->pz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->ex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->ey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->ez());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->E((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->E());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::Kalman*) G__getstructoffset())->evec();
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::Kalman*) G__getstructoffset())->tvec();
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::Kalman*) G__getstructoffset())->pvec();
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix& obj = ((const VERTEX::Kalman*) G__getstructoffset())->W();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix& obj = ((const VERTEX::Kalman*) G__getstructoffset())->C();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix& obj = ((const VERTEX::Kalman*) G__getstructoffset())->CINV();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSqMatrix& obj = ((const VERTEX::Kalman*) G__getstructoffset())->F();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSqMatrix& obj = ((const VERTEX::Kalman*) G__getstructoffset())->ES();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtSymMatrix& obj = ((const VERTEX::Kalman*) G__getstructoffset())->DS();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((const VERTEX::Kalman*) G__getstructoffset())->xv();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((const VERTEX::Kalman*) G__getstructoffset())->xnk();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((const VERTEX::Kalman*) G__getstructoffset())->qvs();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->use_momentum((const bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VERTEX::Kalman*) G__getstructoffset())->use_momentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((VERTEX::Kalman*) G__getstructoffset())->set_chi2((const double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const VERTEX::Kalman*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Kalman*) G__getstructoffset())->filter((double) G__double(libp->para[0]), *(MATRIX::VtSymMatrix*) libp->para[1].ref
, *(MATRIX::VtVector*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((VERTEX::Kalman*) G__getstructoffset())->filter_chi2((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(MATRIX::VtSymMatrix*) libp->para[2].ref, *(MATRIX::VtVector*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VERTEX::Kalman*) G__getstructoffset())->inverse_filter((double) G__double(libp->para[0]), *(MATRIX::VtSymMatrix*) libp->para[1].ref
, *(MATRIX::VtSymMatrix*) libp->para[2].ref, *(MATRIX::VtVector*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->smooth((double) G__double(libp->para[0]), *(MATRIX::VtVector*) libp->para[1].ref
, *(MATRIX::VtSymMatrix*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::Kalman*) G__getstructoffset())->calc_dp((double) G__double(libp->para[0]), *(MATRIX::VtVector*) libp->para[1].ref
, *(MATRIX::VtVector*) libp->para[2].ref);
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::Kalman*) G__getstructoffset())->calc_pcAx(*(MATRIX::VtVector*) libp->para[0].ref);
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::Kalman*) G__getstructoffset())->calc_AGpc();
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::Kalman*) G__getstructoffset())->calc_qk(*(MATRIX::VtVector*) libp->para[0].ref);
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->calc_qvs(*(MATRIX::VtVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->calc_dchi2((double) G__double(libp->para[0]), *(MATRIX::VtSymMatrix*) libp->para[1].ref
, *(MATRIX::VtVector*) libp->para[2].ref, *(MATRIX::VtVector*) libp->para[3].ref
, *(MATRIX::VtVector*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->calc_pc((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->alpc_init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->alp_init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->calc_ealpc();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((const VERTEX::Kalman*) G__getstructoffset())->alpc();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((const VERTEX::Kalman*) G__getstructoffset())->alp();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->xn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->yn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->zn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::Kalman*) G__getstructoffset())->erg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((const VERTEX::Kalman*) G__getstructoffset())->nalpc();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector& obj = ((VERTEX::Kalman*) G__getstructoffset())->qvs_nc();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VERTEX::Kalman::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Kalman::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VERTEX::Kalman::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VERTEX::Kalman::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::Kalman*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::Kalman*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Kalman::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::Kalman::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::Kalman::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_301_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::Kalman::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__vtCint_301_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   VERTEX::Kalman* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new VERTEX::Kalman(*(VERTEX::Kalman*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLKalman));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VERTEX::Kalman G__TVERTEXcLcLKalman;
static int G__vtCint_301_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VERTEX::Kalman*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VERTEX::Kalman*) (soff+(sizeof(VERTEX::Kalman)*i)))->~G__TVERTEXcLcLKalman();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VERTEX::Kalman*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VERTEX::Kalman*) (soff))->~G__TVERTEXcLcLKalman();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VERTEX::MassC */
static int G__vtCint_302_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::MassC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::MassC[n];
     } else {
       p = new((void*) gvp) VERTEX::MassC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VERTEX::MassC;
     } else {
       p = new((void*) gvp) VERTEX::MassC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLMassC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::MassC* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VERTEX::MassC((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) VERTEX::MassC((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLMassC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::MassC*) G__getstructoffset())->push_back(*(VERTEX::Relation*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::MassC*) G__getstructoffset())->push_back((VERTEX::Relation*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::MassC*) G__getstructoffset())->mass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::MassC*) G__getstructoffset())->mass((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VERTEX::MassC*) G__getstructoffset())->galp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const VERTEX::MassC*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::MassC*) G__getstructoffset())->calc_Sl();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VERTEX::MassC*) G__getstructoffset())->check_kinematic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MATRIX::VtVector* pobj;
         const MATRIX::VtVector xobj = ((const VERTEX::MassC*) G__getstructoffset())->gam(*(VERTEX::Relation*) libp->para[0].ref);
         pobj = new MATRIX::VtVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VERTEX::MassC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::MassC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VERTEX::MassC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VERTEX::MassC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VERTEX::MassC*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::MassC*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::MassC*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VERTEX::MassC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::MassC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::MassC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VERTEX::MassC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vtCint_302_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VERTEX::MassC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__vtCint_302_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   VERTEX::MassC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new VERTEX::MassC(*(VERTEX::MassC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLMassC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VERTEX::MassC G__TVERTEXcLcLMassC;
static int G__vtCint_302_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VERTEX::MassC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VERTEX::MassC*) (soff+(sizeof(VERTEX::MassC)*i)))->~G__TVERTEXcLcLMassC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VERTEX::MassC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VERTEX::MassC*) (soff))->~G__TVERTEXcLcLMassC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__vtCint_302_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VERTEX::MassC* dest = (VERTEX::MassC*) G__getstructoffset();
   *dest = *(VERTEX::MassC*) libp->para[0].ref;
   const VERTEX::MassC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MATRIX */

/* MATRIX::VtVector */

/* MATRIX::VtNegMatrix */

/* MATRIX::VtMatrix */

/* MATRIX::VtSqMatrix */

/* MATRIX::VtSymMatrix */

/* MATRIX::CMatrix */

/* VERTEX */

/* VERTEX::Relation */

/* VERTEX::RelationIterator */

/* VERTEX::ConstRelationIterator */

/* VERTEX::ReverseRelationIterator */

/* VERTEX::ConstReverseRelationIterator */

/* VERTEX::Track */

/* VERTEX::Vertex */

/* VERTEX::RelationList */

/* VERTEX::Kalman */

/* VERTEX::MassC */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncvtCint {
 public:
  G__Sizep2memfuncvtCint(): p(&G__Sizep2memfuncvtCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncvtCint::*p)();
};

size_t G__get_sizep2memfuncvtCint()
{
  G__Sizep2memfuncvtCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancevtCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix))) {
     MATRIX::VtNegMatrix *G__Lderived;
     G__Lderived=(MATRIX::VtNegMatrix*)0x1000;
     {
       MATRIX::VtMatrix *G__Lpbase=(MATRIX::VtMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix),G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix))) {
     MATRIX::VtSqMatrix *G__Lderived;
     G__Lderived=(MATRIX::VtSqMatrix*)0x1000;
     {
       MATRIX::VtMatrix *G__Lpbase=(MATRIX::VtMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix),G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix))) {
     MATRIX::VtSymMatrix *G__Lderived;
     G__Lderived=(MATRIX::VtSymMatrix*)0x1000;
     {
       MATRIX::VtSqMatrix *G__Lpbase=(MATRIX::VtSqMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix),G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MATRIX::VtMatrix *G__Lpbase=(MATRIX::VtMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix),G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix))) {
     MATRIX::CMatrix *G__Lderived;
     G__Lderived=(MATRIX::CMatrix*)0x1000;
     {
       MATRIX::VtSymMatrix *G__Lpbase=(MATRIX::VtSymMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix),G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MATRIX::VtSqMatrix *G__Lpbase=(MATRIX::VtSqMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix),G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MATRIX::VtMatrix *G__Lpbase=(MATRIX::VtMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix),G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack))) {
     VERTEX::Track *G__Lderived;
     G__Lderived=(VERTEX::Track*)0x1000;
     {
       VERTEX::RelationList *G__Lpbase=(VERTEX::RelationList*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack),G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack),G__get_linked_tagnum(&G__vtCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex))) {
     VERTEX::Vertex *G__Lderived;
     G__Lderived=(VERTEX::Vertex*)0x1000;
     {
       VERTEX::Track *G__Lpbase=(VERTEX::Track*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex),G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       VERTEX::RelationList *G__Lpbase=(VERTEX::RelationList*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex),G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex),G__get_linked_tagnum(&G__vtCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablevtCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__vtCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__vtCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__vtCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__vtCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__vtCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__vtCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__vtCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__vtCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__vtCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__vtCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("wchar_t",104,-1,0,G__get_linked_tagnum(&G__vtCintLN_MATRIX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("clock_t",107,-1,0,G__get_linked_tagnum(&G__vtCintLN_MATRIX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("time_t",108,-1,0,G__get_linked_tagnum(&G__vtCintLN_MATRIX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<Relation*>",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<VERTEX::Relation*>",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Relation_v",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Relation_it",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Relation_cit",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Relation_rit",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLreverse_iterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Relation_rcit",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLreverse_iterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("self",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),2,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),1,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("self",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),2,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),1,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("self",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),2,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),1,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("self",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),2,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),1,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<MassC*>",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<VERTEX::MassC*>",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("MassC_v",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("MassC_it",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("MassC_cit",117,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Relation*>",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<VERTEX::Relation*>",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::iterator>::iterator_category,iterator_traits<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::iterator>::value_type,iterator_traits<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::iterator>::difference_type,iterator_traits<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::iterator>::pointer,iterator_traits<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLRelationmUcOlongcOVERTEXcLcLRelationmUmUcOVERTEXcLcLRelationmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Relation*>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLRelationmUcOlongcOVERTEXcLcLRelationmUmUcOVERTEXcLcLRelationmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Relation*,long>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLRelationmUcOlongcOVERTEXcLcLRelationmUmUcOVERTEXcLcLRelationmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Relation*,long,VERTEX::Relation**>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLRelationmUcOlongcOVERTEXcLcLRelationmUmUcOVERTEXcLcLRelationmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::const_iterator>::iterator_category,iterator_traits<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::const_iterator>::value_type,iterator_traits<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::const_iterator>::difference_type,iterator_traits<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::const_iterator>::pointer,iterator_traits<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLRelationmUcOlongcOVERTEXcLcLRelationmUmUcOVERTEXcLcLRelationmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Rel_v",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Rel_it",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Rel_cit",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLconst_iterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Vector_d",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Track*>",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<VERTEX::Track*>",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::iterator_category,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::value_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::difference_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::pointer,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Track*>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Track*,long>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Track*,long,VERTEX::Track**>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::iterator_category,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::value_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::difference_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::pointer,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Track_v",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Track_it",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Track_cit",117,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iterator),0,G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MATRIX */
static void G__setup_memvarMATRIX(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIX));
   {
   }
   G__tag_memvar_reset();
}


   /* MATRIX::VtVector */
static void G__setup_memvarMATRIXcLcLVtVector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector));
   { MATRIX::VtVector *p; p=(MATRIX::VtVector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"v_size=",0,"no of rows");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"v=",0,"data array");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MATRIX::VtNegMatrix */
static void G__setup_memvarMATRIXcLcLVtNegMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix));
   { MATRIX::VtNegMatrix *p; p=(MATRIX::VtNegMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MATRIX::VtMatrix */
static void G__setup_memvarMATRIXcLcLVtMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix));
   { MATRIX::VtMatrix *p; p=(MATRIX::VtMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,2,"m=",0,"pointer to matrix array");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,2,"work=",0,"workspace for CERNLIB routines ");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"m_nrow=",0,"no of rows");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"m_ncol=",0,"no of col");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"m_size=",0,"size of matrix array");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MATRIX::VtSqMatrix */
static void G__setup_memvarMATRIXcLcLVtSqMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix));
   { MATRIX::VtSqMatrix *p; p=(MATRIX::VtSqMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MATRIX::VtSymMatrix */
static void G__setup_memvarMATRIXcLcLVtSymMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix));
   { MATRIX::VtSymMatrix *p; p=(MATRIX::VtSymMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MATRIX::CMatrix */
static void G__setup_memvarMATRIXcLcLCMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix));
   { MATRIX::CMatrix *p; p=(MATRIX::CMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VERTEX */
static void G__setup_memvarVERTEX(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   {
   }
   G__tag_memvar_reset();
}


   /* VERTEX::Relation */
static void G__setup_memvarVERTEXcLcLRelation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation));
   { VERTEX::Relation *p; p=(VERTEX::Relation*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack),-1,-1,4,"track=",0,"reference to track");
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex),-1,-1,4,"vertex=",0,"reference to vertex ");
   G__memvar_setup((void*)0,117,1,0,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLKalman),-1,-1,4,"kalman=",0,"reference to Kalman-object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR),G__defined_typename("MassC_v"),-1,4,"massc=",0,"vector of mass-constraint objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VERTEX::RelationIterator */
static void G__setup_memvarVERTEXcLcLRelationIterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator));
   { VERTEX::RelationIterator *p; p=(VERTEX::RelationIterator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator),G__defined_typename("Relation_it"),-1,4,"iter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VERTEX::ConstRelationIterator */
static void G__setup_memvarVERTEXcLcLConstRelationIterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator));
   { VERTEX::ConstRelationIterator *p; p=(VERTEX::ConstRelationIterator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator),G__defined_typename("Relation_cit"),-1,4,"iter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VERTEX::ReverseRelationIterator */
static void G__setup_memvarVERTEXcLcLReverseRelationIterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator));
   { VERTEX::ReverseRelationIterator *p; p=(VERTEX::ReverseRelationIterator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLreverse_iterator),G__defined_typename("Relation_rit"),-1,4,"iter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VERTEX::ConstReverseRelationIterator */
static void G__setup_memvarVERTEXcLcLConstReverseRelationIterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator));
   { VERTEX::ConstReverseRelationIterator *p; p=(VERTEX::ConstReverseRelationIterator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLreverse_iterator),G__defined_typename("Relation_rcit"),-1,4,"iter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VERTEX::Track */
static void G__setup_memvarVERTEXcLcLTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack));
   { VERTEX::Track *p; p=(VERTEX::Track*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,-1,-1,4,"t_Q=",0,"charge");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"t_rm=",0,"rest-mass (in Vt: xmass)");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"t_rmCC=",0,"a conjugated mass hypothesis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,2,"t_p=",0,"track parameter vector (x,y,z,tx,ty,p)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix),-1,-1,2,"t_V=",0,"5x5 covariance matrix of Track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix),-1,-1,2,"t_G=",0,"inverse of t_cov (5x5)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix),-1,-1,2,"t_GM=",0,"inverse of t_cov (4x4, without momentum)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VERTEX::Vertex */
static void G__setup_memvarVERTEXcLcLVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex));
   { VERTEX::Vertex *p; p=(VERTEX::Vertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"v_use_kalman=",0,"use refitted track parameters");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"v_valid=",0,"is vertex information valid?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"v_Mvalid=",0,"is mass constrained vertex information valid?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"v_mother=",0,"is the mother particle calculated?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"v_angdist=",0,"is angle and dist calculated?");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"v_angle=",0,"rms of opening angle");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"v_dist=",0,"rms of distance to vertex");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"v_bk13=",0,"vtx-z at begin of iteration step");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"v_chi2=",0,"chi2 of vertex-fit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"kal_xv=",0,"x,y,z of vtx from kalman filter");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"kal_xvs=",0,"pos of Vertex after smooth");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix),-1,-1,4,"v_CS=",0,"v_C smoothed (=v_C of last");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix),-1,-1,4,"v_CINV=",0,"inverse of CS at initialization time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix),-1,-1,4,"v_covn=",0,"(3*n+3)x(3*n+3) big cov. matrix");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR),G__defined_typename("Track_v"),-1,4,"tracks=",0,"tracks owned by vertex");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR),G__defined_typename("MassC_v"),-1,4,"xmass=",0,"vector of mass constraint pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VERTEX::RelationList */
static void G__setup_memvarVERTEXcLcLRelationList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList));
   { VERTEX::RelationList *p; p=(VERTEX::RelationList*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),G__defined_typename("Relation_v"),-1,4,"rellist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VERTEX::Kalman */
static void G__setup_memvarVERTEXcLcLKalman(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLKalman));
   { VERTEX::Kalman *p; p=(VERTEX::Kalman*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation),-1,-1,4,"rel=",0,"relation to Track & Vertex");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix),-1,-1,4,"G=",0,"copy of inverse track cov. Matrix");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"k_use_momentum=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"k_tx=",0,"in Vt: Ak33(iv,k) = -qvs(1,..) before filter step");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"k_ty=",0,"in Vt: Ak34(iv,k) = -qvs(2,..) before filter step");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"k_qvs=",0,"smoothed tx,ty,p (in Vt: qvs(1..3,..))");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"k_xv=",0,"in Vt: xv(..)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"k_qv=",0,"filtered tx,ty,p (in Vt: qv(1..3,..))");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"k_pc=",0,"vector p_k-c_k^(0) (in Vt: pc)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"k_xnk=",0,"inverse kalman vertex position (in Vt: xnk)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix),-1,-1,4,"k_W=",0,"3x3 matrix of filtered (tx,ty,p) cov. values");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix),-1,-1,4,"k_GB=",0,"5x3 matrix GB = G_k*B_k (in Vt: AGB)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix),-1,-1,4,"k_WBG=",0,"3x5 matrix WBG = W_k*B_k^T*G_k (in Vt: WBG)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix),-1,-1,4,"k_Gb=",0,"5x5 Gb = G - GBWBG (in Vt: GB, G^B)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix),-1,-1,4,"k_C=",0,"3x3 C_k: contribution to vertex covariance matrix");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix),-1,-1,4,"k_CINV=",0,"3x3 inverse C_k = (C_k-1^-1 + A^T_kG^B_kA_k)^-1");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix),-1,-1,4,"k_F=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix),-1,-1,4,"k_ES=",0,"track-vertex correlation matrix");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix),-1,-1,4,"k_DS=",0,"track param. covariance matrix");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"k_alpc=",0,"(in Vt: alpc): (tx,ty,p) for mass constraint fit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"k_alp=",0,"(in Vt: alp)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"k_nalpc=",0,"(in Vt: xn,yn,zn)");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"k_erg=",0,"(in Vt: erg)");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"k_chi2=",0,"(in Vt: chi^2_k) chi2 contrib. to vertex");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"k_chi2s=",0,"(in Vt: chi^2_k,S) smoothed chi2 contrib. to vertex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VERTEX::MassC */
static void G__setup_memvarVERTEXcLcLMassC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLMassC));
   { VERTEX::MassC *p; p=(VERTEX::MassC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"m_mass=",0,"mass for mass constraint (in Vt: xmc)");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"m_SE=",0,"S_l^E in Vt (eq. 41)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector),-1,-1,4,"m_Sl=",0,"S_l   in Vt (eq. 42)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),G__defined_typename("Rel_v"),-1,4,"m_rel=",0,"list of tracks participating im mass constr.");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"m_galp=",0,"constraint (in Vt: eq. 43)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__vtCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarvtCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMATRIX(void) {
   /* MATRIX */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIX));
   G__memfunc_setup("operator<<",996,G__vtCint_249_0_1, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'MATRIX::VtVector' - 11 - t", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const MATRIX::VtVector&))(&MATRIX::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__vtCint_249_0_125, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'MATRIX::VtMatrix' - 11 - t", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const MATRIX::VtMatrix&))(&MATRIX::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__vtCint_249_0_126, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'MATRIX::VtSqMatrix' - 11 - t", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const MATRIX::VtSqMatrix&))(&MATRIX::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__vtCint_249_0_127, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'MATRIX::VtSymMatrix' - 11 - t", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const MATRIX::VtSymMatrix&))(&MATRIX::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__vtCint_249_0_128, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'MATRIX::VtNegMatrix' - 11 - t", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const MATRIX::VtNegMatrix&))(&MATRIX::operator<<) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMATRIXcLcLVtVector(void) {
   /* MATRIX::VtVector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector));
   G__memfunc_setup("VtVector",829,G__vtCint_250_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 0, "h - - 10 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtVector",829,G__vtCint_250_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 2, 1, 1, 0, 
"d - - 0 - v1 d - - 0 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtVector",829,G__vtCint_250_0_3, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 3, 1, 1, 0, 
"d - - 0 - v1 d - - 0 - v2 "
"d - - 0 - v3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtVector",829,G__vtCint_250_0_4, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 4, 1, 1, 0, 
"d - - 0 - v1 d - - 0 - v2 "
"d - - 0 - v3 d - - 0 - v4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtVector",829,G__vtCint_250_0_5, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 5, 1, 1, 0, 
"d - - 0 - v1 d - - 0 - v2 "
"d - - 0 - v3 d - - 0 - v4 "
"d - - 0 - v5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtVector",829,G__vtCint_250_0_6, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 6, 1, 1, 0, 
"d - - 0 - v1 d - - 0 - v2 "
"d - - 0 - v3 d - - 0 - v4 "
"d - - 0 - v5 d - - 0 - v6", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtVector",829,G__vtCint_250_0_7, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__vtCint_250_0_8, 100, -1, -1, 0, 1, 1, 1, 8, "h - - 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__vtCint_250_0_9, 100, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__vtCint_250_0_10, 100, -1, -1, 0, 1, 1, 1, 8, "h - - 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__vtCint_250_0_11, 100, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__vtCint_250_0_12, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__vtCint_250_0_13, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__vtCint_250_0_14, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__vtCint_250_0_15, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__vtCint_250_0_16, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__vtCint_250_0_17, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__vtCint_250_0_18, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__vtCint_250_0_19, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_250_0_20, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_250_0_21, 100, -1, -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_250_0_22, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 8, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__vtCint_250_0_23, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nrow",454,G__vtCint_250_0_24, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mag2",359,G__vtCint_250_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mag",309,G__vtCint_250_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unit",448,G__vtCint_250_0_27, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__vtCint_250_0_28, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("place_at",825,G__vtCint_250_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'MATRIX::VtVector' - 11 - rhs h - - 10 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copy",443,G__vtCint_250_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'MATRIX::VtVector' - 11 - rhs h - - 10 - offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__vtCint_250_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_250_0_32, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MATRIX::VtVector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_250_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtVector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_250_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MATRIX::VtVector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_250_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MATRIX::VtVector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__vtCint_250_0_36, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__vtCint_250_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__vtCint_250_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_250_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_250_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtVector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_250_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::VtVector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_250_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtVector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_250_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::VtVector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~VtVector", 955, G__vtCint_250_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMATRIXcLcLVtNegMatrix(void) {
   /* MATRIX::VtNegMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix));
   G__memfunc_setup("VtNegMatrix",1113,G__vtCint_251_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 0, 2, 1, 1, 0, 
"h - - 10 - row h - - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtNegMatrix",1113,G__vtCint_251_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtNegMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtNegMatrix",1113,G__vtCint_251_0_3, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, -1, 0, 2, 1, 1, 8, 
"h - - 0 - row h - - 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, -1, 1, 2, 1, 1, 0, 
"h - - 10 - row h - - 10 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("nget",430,G__vtCint_251_0_6, 100, -1, -1, 0, 2, 1, 1, 8, 
"h - - 0 - row h - - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nget",430,G__vtCint_251_0_7, 100, -1, -1, 1, 2, 1, 1, 0, 
"h - - 0 - row h - - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("T",84,G__vtCint_251_0_8, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator/=",984,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__vtCint_251_0_13, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__vtCint_251_0_14, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtNegMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__vtCint_251_0_15, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__vtCint_251_0_16, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtNegMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__vtCint_251_0_17, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__vtCint_251_0_18, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtNegMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_251_0_19, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_251_0_20, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_251_0_21, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_251_0_22, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_251_0_23, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MATRIX::VtNegMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_251_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtNegMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_251_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MATRIX::VtNegMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_251_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MATRIX::VtNegMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_251_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_251_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtNegMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_251_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::VtNegMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_251_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtNegMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_251_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::VtNegMatrix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~VtNegMatrix", 1239, G__vtCint_251_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__vtCint_251_0_36, (int) ('u'), G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 1, 1, 1, 1, 0, "u 'MATRIX::VtNegMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMATRIXcLcLVtMatrix(void) {
   /* MATRIX::VtMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix));
   G__memfunc_setup("VtMatrix",831,G__vtCint_252_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 2, 1, 1, 0, 
"h - - 10 - row h - - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtMatrix",831,G__vtCint_252_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nrow",454,G__vtCint_252_0_3, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ncol",428,G__vtCint_252_0_4, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__vtCint_252_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__vtCint_252_0_6, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrixcLcLVtMatrix_row), -1, 0, 1, 1, 1, 0, "i - - 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__vtCint_252_0_7, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrixcLcLVtMatrix_row_const), -1, 0, 1, 1, 1, 8, "i - - 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__vtCint_252_0_8, 100, -1, -1, 0, 2, 1, 1, 8, 
"h - - 0 - row h - - 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,G__vtCint_252_0_9, 100, -1, -1, 1, 2, 1, 1, 0, 
"h - - 10 - row h - - 10 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get",320,G__vtCint_252_0_10, 100, -1, -1, 0, 2, 1, 1, 8, 
"h - - 0 - row h - - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__vtCint_252_0_11, 100, -1, -1, 1, 2, 1, 1, 0, 
"h - - 0 - row h - - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtT",286,G__vtCint_252_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("T",84,G__vtCint_252_0_13, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("place_at",825,G__vtCint_252_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'MATRIX::VtMatrix' - 11 - rhs h - - 10 - row "
"h - - 10 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("place_at",825,G__vtCint_252_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'MATRIX::VtVector' - 11 - rhs h - - 10 - row "
"h - - 10 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("copy",443,G__vtCint_252_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__vtCint_252_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__vtCint_252_0_18, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__vtCint_252_0_19, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtNegMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__vtCint_252_0_20, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__vtCint_252_0_21, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__vtCint_252_0_22, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator/=",984,G__vtCint_252_0_23, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__vtCint_252_0_24, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__vtCint_252_0_25, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__vtCint_252_0_26, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__vtCint_252_0_27, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtNegMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_252_0_28, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_252_0_29, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtNegMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_252_0_30, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtNegMatrix), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_252_0_31, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_252_0_32, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("array",543,G__vtCint_252_0_33, 68, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__vtCint_252_0_34, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__vtCint_252_0_35, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MATRIX::VtMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_252_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_252_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MATRIX::VtMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_252_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MATRIX::VtMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__vtCint_252_0_39, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__vtCint_252_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__vtCint_252_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_252_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_252_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_252_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::VtMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_252_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_252_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::VtMatrix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~VtMatrix", 957, G__vtCint_252_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMATRIXcLcLVtSqMatrix(void) {
   /* MATRIX::VtSqMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix));
   G__memfunc_setup("VtSqMatrix",1027,G__vtCint_255_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 0, 1, 1, 1, 0, "i - - 10 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtSqMatrix",1027,G__vtCint_255_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtSqMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtSqMatrix",1027,G__vtCint_255_0_3, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtDinv",603,G__vtCint_255_0_4, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dinv",433,G__vtCint_255_0_5, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 0, 1, 1, 1, 9, "i - - 0 '0' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("det",317,G__vtCint_255_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*",918,G__vtCint_255_0_7, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 1, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*",918,G__vtCint_255_0_8, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_255_0_9, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MATRIX::VtSqMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_255_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtSqMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_255_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MATRIX::VtSqMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_255_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MATRIX::VtSqMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_255_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_255_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtSqMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_255_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::VtSqMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_255_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtSqMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_255_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::VtSqMatrix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~VtSqMatrix", 1153, G__vtCint_255_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__vtCint_255_0_22, (int) ('u'), G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 1, 1, 1, 1, 0, "u 'MATRIX::VtSqMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMATRIXcLcLVtSymMatrix(void) {
   /* MATRIX::VtSymMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix));
   G__memfunc_setup("VtSymMatrix",1144,G__vtCint_256_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 0, 1, 1, 1, 0, "h - - 10 - dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtSymMatrix",1144,G__vtCint_256_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 0, 2, 1, 1, 0, 
"h - - 10 - dim d - - 0 - diag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtSymMatrix",1144,G__vtCint_256_0_3, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtSymMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtSymMatrix",1144,G__vtCint_256_0_4, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtSqMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtSymMatrix",1144,G__vtCint_256_0_5, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__vtCint_256_0_6, 103, -1, -1, 0, 1, 1, 1, 0, "g - - 10 - use_momentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtDsinv",718,G__vtCint_256_0_7, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dsinv",548,G__vtCint_256_0_8, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 0, 1, 1, 1, 9, "i - - 0 '0' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("det",317,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("product",769,G__vtCint_256_0_10, 100, -1, -1, 0, 2, 1, 1, 8, 
"u 'MATRIX::VtVector' - 11 - rhs h - - 0 '0' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("product",769,G__vtCint_256_0_11, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("place_at",825,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"u 'MATRIX::VtMatrix' - 11 - rhs h - - 10 - row "
"h - - 10 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("copy",443,G__vtCint_256_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtSymMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__vtCint_256_0_14, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtSymMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator/=",984,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 1, 1, 1, 1, "d - - 10 - rhs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__vtCint_256_0_19, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtSymMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__vtCint_256_0_20, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 1, 1, 1, 1, "u 'MATRIX::VtSymMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__vtCint_256_0_21, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtSymMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__vtCint_256_0_22, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtSqMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__vtCint_256_0_23, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_256_0_24, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtSymMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_256_0_25, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_256_0_26, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtSqMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_256_0_27, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_256_0_28, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtSymMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_256_0_29, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtSqMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_256_0_30, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtMatrix), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_256_0_31, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtVector' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("VtAssert",828,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_256_0_34, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MATRIX::VtSymMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_256_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtSymMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_256_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MATRIX::VtSymMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_256_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MATRIX::VtSymMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_256_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_256_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtSymMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_256_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::VtSymMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_256_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::VtSymMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_256_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::VtSymMatrix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~VtSymMatrix", 1270, G__vtCint_256_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMATRIXcLcLCMatrix(void) {
   /* MATRIX::CMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix));
   G__memfunc_setup("CMatrix",696,G__vtCint_257_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CMatrix",696,G__vtCint_257_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::CMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CMatrix",696,G__vtCint_257_0_3, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtSymMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CMatrix",696,G__vtCint_257_0_4, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtSqMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CMatrix",696,G__vtCint_257_0_5, 105, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix), -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtMatrix' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x",120,G__vtCint_257_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x_y",336,G__vtCint_257_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x_tx",451,G__vtCint_257_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x_ty",452,G__vtCint_257_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x_p",327,G__vtCint_257_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y",121,G__vtCint_257_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y_tx",452,G__vtCint_257_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y_ty",453,G__vtCint_257_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y_p",328,G__vtCint_257_0_14, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__vtCint_257_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx_ty",568,G__vtCint_257_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx_p",443,G__vtCint_257_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__vtCint_257_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty_p",444,G__vtCint_257_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("p",112,G__vtCint_257_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_x",547,G__vtCint_257_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_x_y",763,G__vtCint_257_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - xy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_x_tx",878,G__vtCint_257_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - xtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_x_ty",879,G__vtCint_257_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - xty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_x_p",754,G__vtCint_257_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - xp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_y",548,G__vtCint_257_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_y_tx",879,G__vtCint_257_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - ytx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_y_ty",880,G__vtCint_257_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - yty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_y_p",755,G__vtCint_257_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - yp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_tx",663,G__vtCint_257_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - tx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_tx_ty",995,G__vtCint_257_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - txty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_tx_p",870,G__vtCint_257_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - txp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_ty",664,G__vtCint_257_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - ty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_ty_p",871,G__vtCint_257_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - typ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_p",539,G__vtCint_257_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x_prop",664,G__vtCint_257_0_36, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x_y_prop",880,G__vtCint_257_0_37, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x_tx_prop",995,G__vtCint_257_0_38, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x_ty_prop",996,G__vtCint_257_0_39, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x_p_prop",871,G__vtCint_257_0_40, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y_prop",665,G__vtCint_257_0_41, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y_tx_prop",996,G__vtCint_257_0_42, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y_ty_prop",997,G__vtCint_257_0_43, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y_p_prop",872,G__vtCint_257_0_44, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("propagate",963,G__vtCint_257_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_257_0_46, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MATRIX::CMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_257_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::CMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_257_0_48, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MATRIX::CMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_257_0_49, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MATRIX::CMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_257_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_257_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::CMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_257_0_55, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::CMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_257_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MATRIX::CMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_257_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MATRIX::CMatrix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~CMatrix", 822, G__vtCint_257_0_58, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__vtCint_257_0_59, (int) ('u'), G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix), -1, 1, 1, 1, 1, 0, "u 'MATRIX::CMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEX(void) {
   /* VERTEX */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEX));
   G__memfunc_setup("operator<<",996,G__vtCint_258_0_1, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'VERTEX::VtIni' - 11 - t", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const VERTEX::VtIni&))(&VERTEX::operator<<) ), 0);
   G__memfunc_setup("createRelation",1458,G__vtCint_258_0_2, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'VERTEX::Track' - 1 - t u 'VERTEX::Vertex' - 1 - v", (char*)NULL, (void*) G__func2void( (bool (*)(VERTEX::Track&, VERTEX::Vertex&))(&VERTEX::createRelation) ), 0);
   G__memfunc_setup("operator<<",996,G__vtCint_258_0_3, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - s u 'VERTEX::RelationList' - 11 - a", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const VERTEX::RelationList&))(&VERTEX::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__vtCint_258_0_4, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'VERTEX::Track' - 11 - t", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const VERTEX::Track&))(&VERTEX::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__vtCint_258_0_5, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'VERTEX::Relation' - 11 - r", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const VERTEX::Relation&))(&VERTEX::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__vtCint_258_0_6, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'VERTEX::Kalman' - 11 - k", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const VERTEX::Kalman&))(&VERTEX::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__vtCint_258_0_7, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - s u 'VERTEX::MassC' - 11 - a", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const VERTEX::MassC&))(&VERTEX::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G__vtCint_258_0_8, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - s u 'VERTEX::Vertex' - 11 - a", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const VERTEX::Vertex&))(&VERTEX::operator<<) ), 0);
   G__memfunc_setup("distanceChi2",1169,G__vtCint_258_0_9, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'VERTEX::Track' - 1 - t1 u 'VERTEX::Track' - 1 - t2", (char*)NULL, (void*) G__func2void( (double (*)(VERTEX::Track&, VERTEX::Track&))(&VERTEX::distanceChi2) ), 0);
   G__memfunc_setup("distance",843,G__vtCint_258_0_10, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'VERTEX::Track' - 11 - t u 'VERTEX::Vertex' - 11 - v", (char*)NULL, (void*) G__func2void( (double (*)(const VERTEX::Track&, const VERTEX::Vertex&))(&VERTEX::distance) ), 0);
   G__memfunc_setup("distance",843,G__vtCint_258_0_11, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'VERTEX::Vertex' - 11 - v u 'VERTEX::Track' - 11 - t", (char*)NULL, (void*) G__func2void( (double (*)(const VERTEX::Vertex&, const VERTEX::Track&))(&VERTEX::distance) ), 0);
   G__memfunc_setup("SGNdistance",1075,G__vtCint_258_0_12, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'VERTEX::Track' - 11 - t u 'VERTEX::Vertex' - 11 - v", (char*)NULL, (void*) G__func2void( (double (*)(const VERTEX::Track&, const VERTEX::Vertex&))(&VERTEX::SGNdistance) ), 0);
   G__memfunc_setup("SGNdistance",1075,G__vtCint_258_0_13, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'VERTEX::Vertex' - 11 - v u 'VERTEX::Track' - 11 - t", (char*)NULL, (void*) G__func2void( (double (*)(const VERTEX::Vertex&, const VERTEX::Track&))(&VERTEX::SGNdistance) ), 0);
   G__memfunc_setup("SGNdistance",1075,G__vtCint_258_0_14, 100, -1, -1, 0, 4, 1, 1, 0, 
"u 'VERTEX::Track' - 11 - t d - - 0 - xv "
"d - - 0 - yv d - - 0 - zv", (char*)NULL, (void*) G__func2void( (double (*)(const VERTEX::Track&, double, double, double))(&VERTEX::SGNdistance) ), 0);
   G__memfunc_setup("distanceChi2",1169,G__vtCint_258_0_15, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'VERTEX::Vertex' - 11 - v1 u 'VERTEX::Vertex' - 11 - v2", (char*)NULL, (void*) G__func2void( (double (*)(const VERTEX::Vertex&, const VERTEX::Vertex&))(&VERTEX::distanceChi2) ), 0);
   G__memfunc_setup("distanceChi2",1169,G__vtCint_258_0_16, 100, -1, -1, 0, 4, 1, 1, 0, 
"u 'VERTEX::Vertex' - 11 - v d - - 0 - x "
"d - - 0 - y d - - 0 - z", (char*)NULL, (void*) G__func2void( (double (*)(const VERTEX::Vertex&, double, double, double))(&VERTEX::distanceChi2) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEXcLcLRelation(void) {
   /* VERTEX::Relation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation));
   G__memfunc_setup("Relation",830,G__vtCint_285_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 0, 2, 1, 1, 0, 
"u 'VERTEX::Track' - 1 - ttrack u 'VERTEX::Vertex' - 1 - vvertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__vtCint_285_0_2, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__vtCint_285_0_3, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertex",958,G__vtCint_285_0_4, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKalman",916,G__vtCint_285_0_5, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLKalman), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_285_0_6, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VERTEX::Relation::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_285_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Relation::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_285_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VERTEX::Relation::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_285_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VERTEX::Relation::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__vtCint_285_0_10, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__vtCint_285_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__vtCint_285_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_285_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_285_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Relation::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_285_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::Relation::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_285_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Relation::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_285_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::Relation::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Relation", 830, G__vtCint_285_0_18, (int) ('i'), G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 0, 1, 1, 1, 0, "u 'VERTEX::Relation' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Relation", 956, G__vtCint_285_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEXcLcLRelationIterator(void) {
   /* VERTEX::RelationIterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator));
   G__memfunc_setup("RelationIterator",1672,G__vtCint_286_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RelationIterator",1672,G__vtCint_286_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator), -1, 0, 1, 1, 1, 0, "u 'list<VERTEX::Relation*,allocator<VERTEX::Relation*> >::iterator' 'VERTEX::Relation_it' 11 - it", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__vtCint_286_0_3, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator), G__defined_typename("VERTEX::RelationIterator::self"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__vtCint_286_0_4, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator), G__defined_typename("VERTEX::RelationIterator::self"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_286_0_5, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__vtCint_286_0_6, 85, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__vtCint_286_0_7, 105, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::RelationIterator' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__vtCint_286_0_8, 105, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::RelationIterator' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_286_0_9, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VERTEX::RelationIterator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_286_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::RelationIterator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_286_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VERTEX::RelationIterator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_286_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VERTEX::RelationIterator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__vtCint_286_0_13, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__vtCint_286_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__vtCint_286_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_286_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_286_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::RelationIterator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_286_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::RelationIterator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_286_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::RelationIterator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_286_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::RelationIterator::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RelationIterator", 1672, G__vtCint_286_0_21, (int) ('i'), G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator), -1, 0, 1, 1, 1, 0, "u 'VERTEX::RelationIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RelationIterator", 1798, G__vtCint_286_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__vtCint_286_0_23, (int) ('u'), G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator), -1, 1, 1, 1, 1, 0, "u 'VERTEX::RelationIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEXcLcLConstRelationIterator(void) {
   /* VERTEX::ConstRelationIterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator));
   G__memfunc_setup("ConstRelationIterator",2191,G__vtCint_287_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstRelationIterator",2191,G__vtCint_287_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator), -1, 0, 1, 1, 1, 0, "u 'list<VERTEX::Relation*,allocator<VERTEX::Relation*> >::iterator' 'VERTEX::Relation_cit' 11 - it", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__vtCint_287_0_3, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator), G__defined_typename("VERTEX::ConstRelationIterator::self"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__vtCint_287_0_4, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator), G__defined_typename("VERTEX::ConstRelationIterator::self"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_287_0_5, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__vtCint_287_0_6, 85, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 0, 0, 1, 1, 13, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__vtCint_287_0_7, 105, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::ConstRelationIterator' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__vtCint_287_0_8, 105, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::ConstRelationIterator' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_287_0_9, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VERTEX::ConstRelationIterator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_287_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::ConstRelationIterator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_287_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VERTEX::ConstRelationIterator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_287_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VERTEX::ConstRelationIterator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__vtCint_287_0_13, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__vtCint_287_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__vtCint_287_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_287_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_287_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::ConstRelationIterator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_287_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::ConstRelationIterator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_287_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::ConstRelationIterator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_287_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::ConstRelationIterator::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ConstRelationIterator", 2191, G__vtCint_287_0_21, (int) ('i'), 
G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator), -1, 0, 1, 1, 1, 0, "u 'VERTEX::ConstRelationIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ConstRelationIterator", 2317, G__vtCint_287_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__vtCint_287_0_23, (int) ('u'), G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator), -1, 1, 1, 1, 1, 0, "u 'VERTEX::ConstRelationIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEXcLcLReverseRelationIterator(void) {
   /* VERTEX::ReverseRelationIterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator));
   G__memfunc_setup("ReverseRelationIterator",2404,G__vtCint_288_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReverseRelationIterator",2404,G__vtCint_288_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator), -1, 0, 1, 1, 1, 0, "u 'list<VERTEX::Relation*,allocator<VERTEX::Relation*> >::reverse_iterator' 'VERTEX::Relation_rit' 11 - it", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__vtCint_288_0_3, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator), G__defined_typename("VERTEX::ReverseRelationIterator::self"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__vtCint_288_0_4, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator), G__defined_typename("VERTEX::ReverseRelationIterator::self"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_288_0_5, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__vtCint_288_0_6, 85, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__vtCint_288_0_7, 105, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::ReverseRelationIterator' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__vtCint_288_0_8, 105, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::ReverseRelationIterator' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_288_0_9, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VERTEX::ReverseRelationIterator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_288_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::ReverseRelationIterator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_288_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VERTEX::ReverseRelationIterator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_288_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VERTEX::ReverseRelationIterator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__vtCint_288_0_13, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__vtCint_288_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__vtCint_288_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_288_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_288_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::ReverseRelationIterator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_288_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::ReverseRelationIterator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_288_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::ReverseRelationIterator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_288_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::ReverseRelationIterator::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ReverseRelationIterator", 2404, G__vtCint_288_0_21, (int) ('i'), 
G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator), -1, 0, 1, 1, 1, 0, "u 'VERTEX::ReverseRelationIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ReverseRelationIterator", 2530, G__vtCint_288_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__vtCint_288_0_23, (int) ('u'), G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator), -1, 1, 1, 1, 1, 0, "u 'VERTEX::ReverseRelationIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEXcLcLConstReverseRelationIterator(void) {
   /* VERTEX::ConstReverseRelationIterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator));
   G__memfunc_setup("ConstReverseRelationIterator",2923,G__vtCint_289_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstReverseRelationIterator",2923,G__vtCint_289_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator), -1, 0, 1, 1, 1, 0, "u 'list<VERTEX::Relation*,allocator<VERTEX::Relation*> >::reverse_iterator' 'VERTEX::Relation_rcit' 11 - it", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__vtCint_289_0_3, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator), G__defined_typename("VERTEX::ConstReverseRelationIterator::self"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__vtCint_289_0_4, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator), G__defined_typename("VERTEX::ConstReverseRelationIterator::self"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__vtCint_289_0_5, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__vtCint_289_0_6, 85, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 0, 0, 1, 1, 13, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__vtCint_289_0_7, 105, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::ConstReverseRelationIterator' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__vtCint_289_0_8, 105, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::ConstReverseRelationIterator' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_289_0_9, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VERTEX::ConstReverseRelationIterator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_289_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::ConstReverseRelationIterator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_289_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VERTEX::ConstReverseRelationIterator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_289_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VERTEX::ConstReverseRelationIterator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__vtCint_289_0_13, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__vtCint_289_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__vtCint_289_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_289_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_289_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::ConstReverseRelationIterator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_289_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::ConstReverseRelationIterator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_289_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::ConstReverseRelationIterator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_289_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::ConstReverseRelationIterator::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ConstReverseRelationIterator", 2923, G__vtCint_289_0_21, (int) ('i'), 
G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator), -1, 0, 1, 1, 1, 0, "u 'VERTEX::ConstReverseRelationIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ConstReverseRelationIterator", 3049, G__vtCint_289_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__vtCint_289_0_23, (int) ('u'), G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator), -1, 1, 1, 1, 1, 0, "u 'VERTEX::ConstReverseRelationIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEXcLcLTrack(void) {
   /* VERTEX::Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack));
   G__memfunc_setup("Track",501,G__vtCint_290_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__vtCint_290_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack), -1, 0, 1, 1, 1, 0, "U 'VERTEX::Track' - 50 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__vtCint_290_0_3, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack), -1, 0, 1, 1, 1, 0, "u 'VERTEX::Track' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__vtCint_290_0_4, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack), -1, 0, 2, 1, 1, 0, 
"u 'MATRIX::VtVector' - 11 - v u 'MATRIX::CMatrix' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__vtCint_290_0_5, 121, -1, -1, 0, 7, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z d - - 0 - tx "
"d - - 0 - ty d - - 0 - p "
"u 'MATRIX::CMatrix' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__vtCint_290_0_6, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack), -1, 1, 1, 1, 1, 0, "u 'VERTEX::Track' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x",120,G__vtCint_290_0_7, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y",121,G__vtCint_290_0_8, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x",120,G__vtCint_290_0_9, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y",121,G__vtCint_290_0_10, 102, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("z",122,G__vtCint_290_0_11, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__vtCint_290_0_12, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__vtCint_290_0_13, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("p",112,G__vtCint_290_0_14, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pt",228,G__vtCint_290_0_15, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pz",234,G__vtCint_290_0_16, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chi2",358,G__vtCint_290_0_17, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ndf",312,G__vtCint_290_0_18, 114, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__vtCint_290_0_19, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__vtCint_290_0_20, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eta",314,G__vtCint_290_0_21, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("charge",618,G__vtCint_290_0_22, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("energy",650,G__vtCint_290_0_23, 102, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.' rm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xf",222,G__vtCint_290_0_24, 102, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.' rm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rap",323,G__vtCint_290_0_25, 102, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.' rm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("evec",419,G__vtCint_290_0_26, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tvec",434,G__vtCint_290_0_27, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pvec",430,G__vtCint_290_0_28, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cov_x",543,G__vtCint_290_0_29, 102, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.' dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cov_y",544,G__vtCint_290_0_30, 102, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.' dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cov_tx",659,G__vtCint_290_0_31, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cov_ty",660,G__vtCint_290_0_32, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cov_p",535,G__vtCint_290_0_33, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isValid",716,G__vtCint_290_0_34, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("valid",528,G__vtCint_290_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invalid",743,G__vtCint_290_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("propagate",963,G__vtCint_290_0_37, 103, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - zz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("px",232,G__vtCint_290_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("py",233,G__vtCint_290_0_39, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ex",221,G__vtCint_290_0_40, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ey",222,G__vtCint_290_0_41, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ez",223,G__vtCint_290_0_42, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xerr",449,G__vtCint_290_0_43, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0' dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yerr",450,G__vtCint_290_0_44, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0' dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("txerr",565,G__vtCint_290_0_45, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tyerr",566,G__vtCint_290_0_46, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perr",441,G__vtCint_290_0_47, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("V",86,G__vtCint_290_0_48, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("G",71,G__vtCint_290_0_49, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GM",148,G__vtCint_290_0_50, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLCMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__vtCint_290_0_51, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rm",223,G__vtCint_290_0_52, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rm",223,G__vtCint_290_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rmCC",357,G__vtCint_290_0_54, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rmCC",357,G__vtCint_290_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delete_mom",1051,G__vtCint_290_0_56, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_290_0_57, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VERTEX::Track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_290_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_290_0_59, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VERTEX::Track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_290_0_60, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VERTEX::Track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_290_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_290_0_65, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_290_0_66, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::Track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_290_0_67, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_290_0_68, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::Track::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Track", 627, G__vtCint_290_0_69, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEXcLcLVertex(void) {
   /* VERTEX::Vertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex));
   G__memfunc_setup("Vertex",638,G__vtCint_291_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vertex",638,G__vtCint_291_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex), -1, 0, 1, 1, 1, 0, "u 'VERTEX::Vertex' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vertex",638,G__vtCint_291_0_3, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex), -1, 0, 1, 1, 1, 0, "u 'vector<VERTEX::Track*,allocator<VERTEX::Track*> >' 'VERTEX::Track_v' 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vertex",638,G__vtCint_291_0_4, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex), -1, 0, 2, 1, 1, 0, 
"u 'VERTEX::Track' - 1 - t1 u 'VERTEX::Track' - 1 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vx",238,G__vtCint_291_0_5, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vy",239,G__vtCint_291_0_6, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vz",240,G__vtCint_291_0_7, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chi2",358,G__vtCint_291_0_8, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("prob",435,G__vtCint_291_0_9, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ndf",312,G__vtCint_291_0_10, 114, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ntracks",758,G__vtCint_291_0_11, 114, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtx_cov_x",992,G__vtCint_291_0_12, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtx_cov_y",993,G__vtCint_291_0_13, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vtx_cov_z",994,G__vtCint_291_0_14, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("angle",519,G__vtCint_291_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dist",436,G__vtCint_291_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vxerr",567,G__vtCint_291_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vyerr",568,G__vtCint_291_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vzerr",569,G__vtCint_291_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pmaxfrac",850,G__vtCint_291_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CS",150,G__vtCint_291_0_21, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("covn",438,G__vtCint_291_0_22, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("valid",528,G__vtCint_291_0_23, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_invalid",1170,G__vtCint_291_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__vtCint_291_0_25, 100, -1, -1, 0, 1, 1, 1, 8, "g - - 10 'false' use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("massCC",570,G__vtCint_291_0_26, 100, -1, -1, 0, 1, 1, 1, 8, "g - - 10 'false' use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__vtCint_291_0_27, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__vtCint_291_0_28, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 0 - m1 d - - 0 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__vtCint_291_0_29, 100, -1, -1, 0, 3, 1, 1, 8, 
"d - - 0 - m1 d - - 0 - m2 "
"d - - 0 - m3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__vtCint_291_0_30, 100, -1, -1, 0, 4, 1, 1, 8, 
"d - - 0 - m1 d - - 0 - m2 "
"d - - 0 - m3 d - - 0 - m4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__vtCint_291_0_31, 100, -1, -1, 0, 3, 1, 1, 8, 
"u 'vector<double,allocator<double> >' 'VERTEX::Vector_d' 11 - m02 g - - 0 'false' use "
"g - - 0 'false' CC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findVertex2D",1173,G__vtCint_291_0_32, 103, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findVertex3D",1174,G__vtCint_291_0_33, 103, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findVertexVt",1257,G__vtCint_291_0_34, 103, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtEstimateVertex",1668,G__vtCint_291_0_35, 103, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtEstimateVertexMath",2062,G__vtCint_291_0_36, 103, -1, -1, 0, 3, 1, 1, 1, 
"d - - 1 - x d - - 1 - y "
"d - - 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtEstimateVertexMathTA",2211,G__vtCint_291_0_37, 103, -1, -1, 0, 3, 1, 1, 1, 
"d - - 1 - x d - - 1 - y "
"d - - 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtMass",606,G__vtCint_291_0_38, 103, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__vtCint_291_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'VERTEX::Track' - 1 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rmsDistAngle",1229,G__vtCint_291_0_40, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_mother",1153,G__vtCint_291_0_41, 103, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' use_kalman", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_mother_cov",1576,G__vtCint_291_0_42, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove_last",1185,G__vtCint_291_0_43, 103, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove_worst",1324,G__vtCint_291_0_44, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("track_chi2",986,G__vtCint_291_0_45, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("track_worst",1203,G__vtCint_291_0_46, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("use_momentum",1310,G__vtCint_291_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 10 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("use_kalman",1056,G__vtCint_291_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 10 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("use_kalman",1056,G__vtCint_291_0_49, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance",843,G__vtCint_291_0_50, 100, -1, -1, 0, 3, 1, 1, 8, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance",843,G__vtCint_291_0_51, 100, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::Track' - 1 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance",843,G__vtCint_291_0_52, 100, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::Vertex' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("VtFilter",816,G__vtCint_291_0_54, 103, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtInverseFilter",1548,G__vtCint_291_0_55, 103, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtSmoothX",924,G__vtCint_291_0_56, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtSmoothQ",917,G__vtCint_291_0_57, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtRemoveTrack",1325,G__vtCint_291_0_58, 103, -1, -1, 0, 1, 1, 1, 1, "u 'VERTEX::Relation' - 1 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VtFit",493,G__vtCint_291_0_59, 103, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xv",238,G__vtCint_291_0_60, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xvs",353,G__vtCint_291_0_61, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__vtCint_291_0_62, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chi2n",468,G__vtCint_291_0_63, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chi2l",466,G__vtCint_291_0_64, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__vtCint_291_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "U 'VERTEX::Relation' - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("erase",528,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator), G__defined_typename("VERTEX::RelationList::iterator"), 0, 1, 1, 1, 1, "u 'VERTEX::RelationIterator' 'VERTEX::RelationList::iterator' 11 - pos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("bigcov",634,G__vtCint_291_0_67, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MassConstr",1037,G__vtCint_291_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addMassConstr",1334,G__vtCint_291_0_69, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLMassC), -1, 1, 1, 1, 1, 0, "d - - 0 '0.' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearMassConstr",1556,G__vtCint_291_0_70, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nMassConstr",1147,G__vtCint_291_0_71, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__vtCint_291_0_72, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLVertex), -1, 1, 1, 1, 1, 1, "u 'VERTEX::Vertex' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__vtCint_291_0_73, 103, -1, -1, 0, 1, 1, 1, 9, "u 'VERTEX::Vertex' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__vtCint_291_0_74, 100, -1, -1, 0, 1, 1, 1, 9, "u 'VERTEX::Vertex' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_track",925,G__vtCint_291_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "u 'VERTEX::Track' - 1 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_track",948,G__vtCint_291_0_76, 85, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLTrack), -1, 0, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bigdim",620,(G__InterfaceMethod) NULL, 104, -1, -1, 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invalid",743,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_291_0_79, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VERTEX::Vertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_291_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Vertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_291_0_81, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VERTEX::Vertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_291_0_82, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VERTEX::Vertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_291_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_291_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Vertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_291_0_88, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::Vertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_291_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Vertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_291_0_90, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::Vertex::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Vertex", 764, G__vtCint_291_0_91, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEXcLcLRelationList(void) {
   /* VERTEX::RelationList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList));
   G__memfunc_setup("RelationList",1242,G__vtCint_300_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__vtCint_300_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("push__back",1039,G__vtCint_300_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'VERTEX::Relation' - 0 - rel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__vtCint_300_0_4, 85, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__vtCint_300_0_5, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__vtCint_300_0_6, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator), G__defined_typename("VERTEX::RelationList::iterator"), 0, 1, 1, 1, 1, "u 'VERTEX::RelationIterator' 'VERTEX::RelationList::iterator' 11 - pos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("begin",517,G__vtCint_300_0_7, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator), G__defined_typename("VERTEX::RelationList::iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__vtCint_300_0_8, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationIterator), G__defined_typename("VERTEX::RelationList::iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__vtCint_300_0_9, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator), G__defined_typename("VERTEX::RelationList::const_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__vtCint_300_0_10, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstRelationIterator), G__defined_typename("VERTEX::RelationList::const_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__vtCint_300_0_11, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator), G__defined_typename("VERTEX::RelationList::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__vtCint_300_0_12, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLReverseRelationIterator), G__defined_typename("VERTEX::RelationList::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__vtCint_300_0_13, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator), G__defined_typename("VERTEX::RelationList::const_reverse_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__vtCint_300_0_14, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator), G__defined_typename("VERTEX::RelationList::const_reverse_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__vtCint_300_0_15, 85, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelation), -1, 0, 1, 1, 1, 12, "h - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__vtCint_300_0_16, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unbook",654,G__vtCint_300_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'VERTEX::Relation' - 40 - rel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__vtCint_300_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'VERTEX::Relation' - 40 - rel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__vtCint_300_0_19, 117, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList), -1, 1, 1, 1, 1, 1, "u 'VERTEX::RelationList' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__vtCint_300_0_20, 103, -1, -1, 0, 1, 1, 1, 8, "u 'VERTEX::RelationList' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_300_0_21, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VERTEX::RelationList::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_300_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::RelationList::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_300_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VERTEX::RelationList::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_300_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VERTEX::RelationList::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__vtCint_300_0_25, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__vtCint_300_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__vtCint_300_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_300_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_300_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::RelationList::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_300_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::RelationList::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_300_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::RelationList::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_300_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::RelationList::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RelationList", 1242, G__vtCint_300_0_33, (int) ('i'), G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLRelationList), -1, 0, 1, 1, 1, 0, "u 'VERTEX::RelationList' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RelationList", 1368, G__vtCint_300_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEXcLcLKalman(void) {
   /* VERTEX::Kalman */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLKalman));
   G__memfunc_setup("Kalman",596,G__vtCint_301_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLKalman), -1, 0, 1, 1, 1, 0, "U 'VERTEX::Relation' - 50 - relation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chi2",358,G__vtCint_301_0_2, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chi2s",473,G__vtCint_301_0_3, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__vtCint_301_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__vtCint_301_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("p",112,G__vtCint_301_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("px",232,G__vtCint_301_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("py",233,G__vtCint_301_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pz",234,G__vtCint_301_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ex",221,G__vtCint_301_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ey",222,G__vtCint_301_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ez",223,G__vtCint_301_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("E",69,G__vtCint_301_0_13, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.' rm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("evec",419,G__vtCint_301_0_14, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tvec",434,G__vtCint_301_0_15, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pvec",430,G__vtCint_301_0_16, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("W",87,G__vtCint_301_0_17, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("C",67,G__vtCint_301_0_18, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CINV",304,G__vtCint_301_0_19, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("F",70,G__vtCint_301_0_20, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ES",152,G__vtCint_301_0_21, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSqMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DS",151,G__vtCint_301_0_22, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtSymMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xv",238,G__vtCint_301_0_23, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xnk",337,G__vtCint_301_0_24, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("qvs",346,G__vtCint_301_0_25, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("use_momentum",1310,G__vtCint_301_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 10 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("use_momentum",1310,G__vtCint_301_0_27, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_chi2",785,G__vtCint_301_0_28, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__vtCint_301_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__vtCint_301_0_30, 117, G__get_linked_tagnum(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filter",646,G__vtCint_301_0_31, 103, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - z u 'MATRIX::VtSymMatrix' - 11 - prCINV "
"u 'MATRIX::VtVector' - 11 - prkal_xv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filter_chi2",1099,G__vtCint_301_0_32, 100, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - z d - - 0 - prChi2 "
"u 'MATRIX::VtSymMatrix' - 11 - prCINV u 'MATRIX::VtVector' - 11 - prkal_xv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse_filter",1505,G__vtCint_301_0_33, 103, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - z u 'MATRIX::VtSymMatrix' - 11 - CINVn "
"u 'MATRIX::VtSymMatrix' - 11 - prCINV u 'MATRIX::VtVector' - 11 - kal_xvn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("smooth",666,G__vtCint_301_0_34, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - z u 'MATRIX::VtVector' - 11 - xvs "
"u 'MATRIX::VtSymMatrix' - 11 - Cn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_dp",710,G__vtCint_301_0_35, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 3, 1, 1, 9, 
"d - - 0 - z u 'MATRIX::VtVector' - 11 - xk "
"u 'MATRIX::VtVector' - 11 - qk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_pcAx",894,G__vtCint_301_0_36, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtVector' - 11 - xk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_AGpc",845,G__vtCint_301_0_37, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_qk",718,G__vtCint_301_0_38, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 9, "u 'MATRIX::VtVector' - 11 - xk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_qvs",844,G__vtCint_301_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MATRIX::VtVector' - 11 - xvs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_dchi2",956,G__vtCint_301_0_40, 100, -1, -1, 0, 5, 1, 1, 8, 
"d - - 0 - z u 'MATRIX::VtSymMatrix' - 11 - prCINV "
"u 'MATRIX::VtVector' - 11 - xk u 'MATRIX::VtVector' - 11 - prxk "
"u 'MATRIX::VtVector' - 11 - qk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_pc",709,G__vtCint_301_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("alpc_init",947,G__vtCint_301_0_42, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("alp_init",848,G__vtCint_301_0_43, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_ealpc",1015,G__vtCint_301_0_44, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("alpc",416,G__vtCint_301_0_45, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("alp",317,G__vtCint_301_0_46, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xn",230,G__vtCint_301_0_47, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yn",231,G__vtCint_301_0_48, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zn",232,G__vtCint_301_0_49, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erg",318,G__vtCint_301_0_50, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nalpc",526,G__vtCint_301_0_51, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("qvs_nc",650,G__vtCint_301_0_52, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_301_0_53, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VERTEX::Kalman::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_301_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Kalman::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_301_0_55, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VERTEX::Kalman::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_301_0_56, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VERTEX::Kalman::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__vtCint_301_0_57, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__vtCint_301_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__vtCint_301_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_301_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_301_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Kalman::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_301_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::Kalman::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_301_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::Kalman::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_301_0_64, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::Kalman::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Kalman", 596, G__vtCint_301_0_65, (int) ('i'), G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLKalman), -1, 0, 1, 1, 1, 0, "u 'VERTEX::Kalman' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Kalman", 722, G__vtCint_301_0_66, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVERTEXcLcLMassC(void) {
   /* VERTEX::MassC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLMassC));
   G__memfunc_setup("MassC",471,G__vtCint_302_0_1, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLMassC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MassC",471,G__vtCint_302_0_2, 105, G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLMassC), -1, 0, 1, 1, 1, 0, "d - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__vtCint_302_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'VERTEX::Relation' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__vtCint_302_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'VERTEX::Relation' - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__vtCint_302_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__vtCint_302_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("galp",420,G__vtCint_302_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__vtCint_302_0_8, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_Sl",689,G__vtCint_302_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check_kinematic",1554,G__vtCint_302_0_10, 103, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gam",309,G__vtCint_302_0_11, 117, G__get_linked_tagnum(&G__vtCintLN_MATRIXcLcLVtVector), -1, 0, 1, 1, 1, 9, "u 'VERTEX::Relation' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__vtCint_302_0_12, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VERTEX::MassC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__vtCint_302_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::MassC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__vtCint_302_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VERTEX::MassC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__vtCint_302_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VERTEX::MassC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__vtCint_302_0_16, 85, G__get_linked_tagnum(&G__vtCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__vtCint_302_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__vtCint_302_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__vtCint_302_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__vtCint_302_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::MassC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__vtCint_302_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::MassC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__vtCint_302_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VERTEX::MassC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__vtCint_302_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VERTEX::MassC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MassC", 471, G__vtCint_302_0_24, (int) ('i'), G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLMassC), -1, 0, 1, 1, 1, 0, "u 'VERTEX::MassC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MassC", 597, G__vtCint_302_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__vtCint_302_0_26, (int) ('u'), G__get_linked_tagnum(&G__vtCintLN_VERTEXcLcLMassC), -1, 1, 1, 1, 1, 0, "u 'VERTEX::MassC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncvtCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalvtCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcvtCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__vtCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__vtCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__vtCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__vtCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__vtCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__vtCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__vtCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__vtCintLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__vtCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__vtCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__vtCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__vtCintLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__vtCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__vtCintLN_MATRIX = { "MATRIX" , 110 , -1 };
G__linked_taginfo G__vtCintLN_MATRIXcLcLVtVector = { "MATRIX::VtVector" , 99 , -1 };
G__linked_taginfo G__vtCintLN_MATRIXcLcLVtNegMatrix = { "MATRIX::VtNegMatrix" , 99 , -1 };
G__linked_taginfo G__vtCintLN_MATRIXcLcLVtMatrix = { "MATRIX::VtMatrix" , 99 , -1 };
G__linked_taginfo G__vtCintLN_MATRIXcLcLVtMatrixcLcLVtMatrix_row = { "MATRIX::VtMatrix::VtMatrix_row" , 99 , -1 };
G__linked_taginfo G__vtCintLN_MATRIXcLcLVtMatrixcLcLVtMatrix_row_const = { "MATRIX::VtMatrix::VtMatrix_row_const" , 99 , -1 };
G__linked_taginfo G__vtCintLN_MATRIXcLcLVtSqMatrix = { "MATRIX::VtSqMatrix" , 99 , -1 };
G__linked_taginfo G__vtCintLN_MATRIXcLcLVtSymMatrix = { "MATRIX::VtSymMatrix" , 99 , -1 };
G__linked_taginfo G__vtCintLN_MATRIXcLcLCMatrix = { "MATRIX::CMatrix" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEX = { "VERTEX" , 110 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLVtIni = { "VERTEX::VtIni" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLRelation = { "VERTEX::Relation" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLRelationIterator = { "VERTEX::RelationIterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLConstRelationIterator = { "VERTEX::ConstRelationIterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLReverseRelationIterator = { "VERTEX::ReverseRelationIterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLConstReverseRelationIterator = { "VERTEX::ConstReverseRelationIterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLTrack = { "VERTEX::Track" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLVertex = { "VERTEX::Vertex" , 99 , -1 };
G__linked_taginfo G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR = { "list<VERTEX::Relation*,allocator<VERTEX::Relation*> >" , 99 , -1 };
G__linked_taginfo G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator = { "list<VERTEX::Relation*,allocator<VERTEX::Relation*> >::iterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLreverse_iterator = { "list<VERTEX::Relation*,allocator<VERTEX::Relation*> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLRelationList = { "VERTEX::RelationList" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLKalman = { "VERTEX::Kalman" , 99 , -1 };
G__linked_taginfo G__vtCintLN_VERTEXcLcLMassC = { "VERTEX::MassC" , 99 , -1 };
G__linked_taginfo G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR = { "list<VERTEX::MassC*,allocator<VERTEX::MassC*> >" , 99 , -1 };
G__linked_taginfo G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgRcLcLiterator = { "list<VERTEX::MassC*,allocator<VERTEX::MassC*> >::iterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR = { "vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >" , 99 , -1 };
G__linked_taginfo G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLconst_iterator = { "vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::const_iterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator = { "vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::iterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLRelationmUcOlongcOVERTEXcLcLRelationmUmUcOVERTEXcLcLRelationmUaNgR = { "iterator<random_access_iterator_tag,VERTEX::Relation*,long,VERTEX::Relation**,VERTEX::Relation*&>" , 115 , -1 };
G__linked_taginfo G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<VERTEX::Relation*,allocator<VERTEX::Relation*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR = { "vector<VERTEX::Track*,allocator<VERTEX::Track*> >" , 99 , -1 };
G__linked_taginfo G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iterator = { "vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiterator = { "vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator" , 99 , -1 };
G__linked_taginfo G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR = { "iterator<random_access_iterator_tag,VERTEX::Track*,long,VERTEX::Track**,VERTEX::Track*&>" , 115 , -1 };
G__linked_taginfo G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablevtCint() {
  G__vtCintLN_TClass.tagnum = -1 ;
  G__vtCintLN_TBuffer.tagnum = -1 ;
  G__vtCintLN_TMemberInspector.tagnum = -1 ;
  G__vtCintLN_TObject.tagnum = -1 ;
  G__vtCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__vtCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__vtCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__vtCintLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__vtCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__vtCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__vtCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__vtCintLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__vtCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__vtCintLN_MATRIX.tagnum = -1 ;
  G__vtCintLN_MATRIXcLcLVtVector.tagnum = -1 ;
  G__vtCintLN_MATRIXcLcLVtNegMatrix.tagnum = -1 ;
  G__vtCintLN_MATRIXcLcLVtMatrix.tagnum = -1 ;
  G__vtCintLN_MATRIXcLcLVtMatrixcLcLVtMatrix_row.tagnum = -1 ;
  G__vtCintLN_MATRIXcLcLVtMatrixcLcLVtMatrix_row_const.tagnum = -1 ;
  G__vtCintLN_MATRIXcLcLVtSqMatrix.tagnum = -1 ;
  G__vtCintLN_MATRIXcLcLVtSymMatrix.tagnum = -1 ;
  G__vtCintLN_MATRIXcLcLCMatrix.tagnum = -1 ;
  G__vtCintLN_VERTEX.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLVtIni.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLRelation.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLRelationIterator.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLConstRelationIterator.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLReverseRelationIterator.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLConstReverseRelationIterator.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLTrack.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLVertex.tagnum = -1 ;
  G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR.tagnum = -1 ;
  G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLRelationList.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLKalman.tagnum = -1 ;
  G__vtCintLN_VERTEXcLcLMassC.tagnum = -1 ;
  G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR.tagnum = -1 ;
  G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR.tagnum = -1 ;
  G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLconst_iterator.tagnum = -1 ;
  G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLRelationmUcOlongcOVERTEXcLcLRelationmUmUcOVERTEXcLcLRelationmUaNgR.tagnum = -1 ;
  G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR.tagnum = -1 ;
  G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iterator.tagnum = -1 ;
  G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR.tagnum = -1 ;
  G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablevtCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__vtCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__vtCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__vtCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__vtCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__vtCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_MATRIX),0,-1,0,(char*)NULL,G__setup_memvarMATRIX,G__setup_memfuncMATRIX);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_MATRIXcLcLVtVector),sizeof(MATRIX::VtVector),-1,36352,(char*)NULL,G__setup_memvarMATRIXcLcLVtVector,G__setup_memfuncMATRIXcLcLVtVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_MATRIXcLcLVtNegMatrix),sizeof(MATRIX::VtNegMatrix),-1,34304,(char*)NULL,G__setup_memvarMATRIXcLcLVtNegMatrix,G__setup_memfuncMATRIXcLcLVtNegMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_MATRIXcLcLVtMatrix),sizeof(MATRIX::VtMatrix),-1,36352,(char*)NULL,G__setup_memvarMATRIXcLcLVtMatrix,G__setup_memfuncMATRIXcLcLVtMatrix);
   G__get_linked_tagnum_fwd(&G__vtCintLN_MATRIXcLcLVtMatrixcLcLVtMatrix_row);
   G__get_linked_tagnum_fwd(&G__vtCintLN_MATRIXcLcLVtMatrixcLcLVtMatrix_row_const);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_MATRIXcLcLVtSqMatrix),sizeof(MATRIX::VtSqMatrix),-1,34304,(char*)NULL,G__setup_memvarMATRIXcLcLVtSqMatrix,G__setup_memfuncMATRIXcLcLVtSqMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_MATRIXcLcLVtSymMatrix),sizeof(MATRIX::VtSymMatrix),-1,36352,(char*)NULL,G__setup_memvarMATRIXcLcLVtSymMatrix,G__setup_memfuncMATRIXcLcLVtSymMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_MATRIXcLcLCMatrix),sizeof(MATRIX::CMatrix),-1,33536,(char*)NULL,G__setup_memvarMATRIXcLcLCMatrix,G__setup_memfuncMATRIXcLcLCMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEX),0,-1,0,(char*)NULL,G__setup_memvarVERTEX,G__setup_memfuncVERTEX);
   G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLVtIni);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLRelation),sizeof(VERTEX::Relation),-1,33792,(char*)NULL,G__setup_memvarVERTEXcLcLRelation,G__setup_memfuncVERTEXcLcLRelation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLRelationIterator),sizeof(VERTEX::RelationIterator),-1,33024,(char*)NULL,G__setup_memvarVERTEXcLcLRelationIterator,G__setup_memfuncVERTEXcLcLRelationIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLConstRelationIterator),sizeof(VERTEX::ConstRelationIterator),-1,33024,(char*)NULL,G__setup_memvarVERTEXcLcLConstRelationIterator,G__setup_memfuncVERTEXcLcLConstRelationIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLReverseRelationIterator),sizeof(VERTEX::ReverseRelationIterator),-1,33024,(char*)NULL,G__setup_memvarVERTEXcLcLReverseRelationIterator,G__setup_memfuncVERTEXcLcLReverseRelationIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLConstReverseRelationIterator),sizeof(VERTEX::ConstReverseRelationIterator),-1,33024,(char*)NULL,G__setup_memvarVERTEXcLcLConstReverseRelationIterator,G__setup_memfuncVERTEXcLcLConstReverseRelationIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLTrack),sizeof(VERTEX::Track),-1,65280,(char*)NULL,G__setup_memvarVERTEXcLcLTrack,G__setup_memfuncVERTEXcLcLTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLVertex),sizeof(VERTEX::Vertex),-1,65280,"GS comment if <VersionNumber> >= 1 crash with Windows Vista",G__setup_memvarVERTEXcLcLVertex,G__setup_memfuncVERTEXcLcLVertex);
   G__get_linked_tagnum_fwd(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__vtCintLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLreverse_iterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLRelationList),sizeof(VERTEX::RelationList),-1,3328,(char*)NULL,G__setup_memvarVERTEXcLcLRelationList,G__setup_memfuncVERTEXcLcLRelationList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLKalman),sizeof(VERTEX::Kalman),-1,33792,(char*)NULL,G__setup_memvarVERTEXcLcLKalman,G__setup_memfuncVERTEXcLcLKalman);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__vtCintLN_VERTEXcLcLMassC),sizeof(VERTEX::MassC),-1,34048,(char*)NULL,G__setup_memvarVERTEXcLcLMassC,G__setup_memfuncVERTEXcLcLMassC);
   G__get_linked_tagnum_fwd(&G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLconst_iterator);
   G__get_linked_tagnum_fwd(&G__vtCintLN_vectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLRelationmUcOlongcOVERTEXcLcLRelationmUmUcOVERTEXcLcLRelationmUaNgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iterator);
   G__get_linked_tagnum_fwd(&G__vtCintLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR);
   G__get_linked_tagnum_fwd(&G__vtCintLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR);
}
extern "C" void G__cpp_setupvtCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupvtCint()");
  G__set_cpp_environmentvtCint();
  G__cpp_setup_tagtablevtCint();

  G__cpp_setup_inheritancevtCint();

  G__cpp_setup_typetablevtCint();

  G__cpp_setup_memvarvtCint();

  G__cpp_setup_memfuncvtCint();
  G__cpp_setup_globalvtCint();
  G__cpp_setup_funcvtCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncvtCint();
  return;
}
class G__cpp_setup_initvtCint {
  public:
    G__cpp_setup_initvtCint() { G__add_setup_func("vtCint",(G__incsetup)(&G__cpp_setupvtCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initvtCint() { G__remove_setup_func("vtCint"); }
};
G__cpp_setup_initvtCint G__cpp_setup_initializervtCint;

