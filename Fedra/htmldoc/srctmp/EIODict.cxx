//
// File generated by C:\root_v5.34.26\bin\rootcint.EXE at Fri Sep 04 22:31:27 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME EIODict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "EIODict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void EdbDataPiece_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbDataPiece(void *p = 0);
   static void *newArray_EdbDataPiece(Long_t size, void *p);
   static void delete_EdbDataPiece(void *p);
   static void deleteArray_EdbDataPiece(void *p);
   static void destruct_EdbDataPiece(void *p);
   static void streamer_EdbDataPiece(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbDataPiece*)
   {
      ::EdbDataPiece *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbDataPiece >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbDataPiece", ::EdbDataPiece::Class_Version(), "./EdbDataSet.h", 24,
                  typeid(::EdbDataPiece), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbDataPiece::Dictionary, isa_proxy, 0,
                  sizeof(::EdbDataPiece) );
      instance.SetNew(&new_EdbDataPiece);
      instance.SetNewArray(&newArray_EdbDataPiece);
      instance.SetDelete(&delete_EdbDataPiece);
      instance.SetDeleteArray(&deleteArray_EdbDataPiece);
      instance.SetDestructor(&destruct_EdbDataPiece);
      instance.SetStreamerFunc(&streamer_EdbDataPiece);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbDataPiece*)
   {
      return GenerateInitInstanceLocal((::EdbDataPiece*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbDataPiece*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbDataSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbDataSet(void *p = 0);
   static void *newArray_EdbDataSet(Long_t size, void *p);
   static void delete_EdbDataSet(void *p);
   static void deleteArray_EdbDataSet(void *p);
   static void destruct_EdbDataSet(void *p);
   static void streamer_EdbDataSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbDataSet*)
   {
      ::EdbDataSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbDataSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbDataSet", ::EdbDataSet::Class_Version(), "./EdbDataSet.h", 142,
                  typeid(::EdbDataSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbDataSet::Dictionary, isa_proxy, 0,
                  sizeof(::EdbDataSet) );
      instance.SetNew(&new_EdbDataSet);
      instance.SetNewArray(&newArray_EdbDataSet);
      instance.SetDelete(&delete_EdbDataSet);
      instance.SetDeleteArray(&deleteArray_EdbDataSet);
      instance.SetDestructor(&destruct_EdbDataSet);
      instance.SetStreamerFunc(&streamer_EdbDataSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbDataSet*)
   {
      return GenerateInitInstanceLocal((::EdbDataSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbDataSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbDataProc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbDataProc(void *p = 0);
   static void *newArray_EdbDataProc(Long_t size, void *p);
   static void delete_EdbDataProc(void *p);
   static void deleteArray_EdbDataProc(void *p);
   static void destruct_EdbDataProc(void *p);
   static void streamer_EdbDataProc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbDataProc*)
   {
      ::EdbDataProc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbDataProc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbDataProc", ::EdbDataProc::Class_Version(), "./EdbDataSet.h", 179,
                  typeid(::EdbDataProc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbDataProc::Dictionary, isa_proxy, 0,
                  sizeof(::EdbDataProc) );
      instance.SetNew(&new_EdbDataProc);
      instance.SetNewArray(&newArray_EdbDataProc);
      instance.SetDelete(&delete_EdbDataProc);
      instance.SetDeleteArray(&deleteArray_EdbDataProc);
      instance.SetDestructor(&destruct_EdbDataProc);
      instance.SetStreamerFunc(&streamer_EdbDataProc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbDataProc*)
   {
      return GenerateInitInstanceLocal((::EdbDataProc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbDataProc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbTraceBack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbTraceBack(void *p = 0);
   static void *newArray_EdbTraceBack(Long_t size, void *p);
   static void delete_EdbTraceBack(void *p);
   static void deleteArray_EdbTraceBack(void *p);
   static void destruct_EdbTraceBack(void *p);
   static void streamer_EdbTraceBack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbTraceBack*)
   {
      ::EdbTraceBack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbTraceBack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbTraceBack", ::EdbTraceBack::Class_Version(), "./EdbTraceBack.h", 15,
                  typeid(::EdbTraceBack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbTraceBack::Dictionary, isa_proxy, 0,
                  sizeof(::EdbTraceBack) );
      instance.SetNew(&new_EdbTraceBack);
      instance.SetNewArray(&newArray_EdbTraceBack);
      instance.SetDelete(&delete_EdbTraceBack);
      instance.SetDeleteArray(&deleteArray_EdbTraceBack);
      instance.SetDestructor(&destruct_EdbTraceBack);
      instance.SetStreamerFunc(&streamer_EdbTraceBack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbTraceBack*)
   {
      return GenerateInitInstanceLocal((::EdbTraceBack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbTraceBack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbRunAccess_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbRunAccess(void *p = 0);
   static void *newArray_EdbRunAccess(Long_t size, void *p);
   static void delete_EdbRunAccess(void *p);
   static void deleteArray_EdbRunAccess(void *p);
   static void destruct_EdbRunAccess(void *p);
   static void streamer_EdbRunAccess(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbRunAccess*)
   {
      ::EdbRunAccess *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbRunAccess >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbRunAccess", ::EdbRunAccess::Class_Version(), "./EdbRunAccess.h", 21,
                  typeid(::EdbRunAccess), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbRunAccess::Dictionary, isa_proxy, 0,
                  sizeof(::EdbRunAccess) );
      instance.SetNew(&new_EdbRunAccess);
      instance.SetNewArray(&newArray_EdbRunAccess);
      instance.SetDelete(&delete_EdbRunAccess);
      instance.SetDeleteArray(&deleteArray_EdbRunAccess);
      instance.SetDestructor(&destruct_EdbRunAccess);
      instance.SetStreamerFunc(&streamer_EdbRunAccess);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbRunAccess*)
   {
      return GenerateInitInstanceLocal((::EdbRunAccess*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbRunAccess*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbRunTracking_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbRunTracking(void *p = 0);
   static void *newArray_EdbRunTracking(Long_t size, void *p);
   static void delete_EdbRunTracking(void *p);
   static void deleteArray_EdbRunTracking(void *p);
   static void destruct_EdbRunTracking(void *p);
   static void streamer_EdbRunTracking(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbRunTracking*)
   {
      ::EdbRunTracking *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbRunTracking >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbRunTracking", ::EdbRunTracking::Class_Version(), "./EdbRunTracking.h", 18,
                  typeid(::EdbRunTracking), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbRunTracking::Dictionary, isa_proxy, 0,
                  sizeof(::EdbRunTracking) );
      instance.SetNew(&new_EdbRunTracking);
      instance.SetNewArray(&newArray_EdbRunTracking);
      instance.SetDelete(&delete_EdbRunTracking);
      instance.SetDeleteArray(&deleteArray_EdbRunTracking);
      instance.SetDestructor(&destruct_EdbRunTracking);
      instance.SetStreamerFunc(&streamer_EdbRunTracking);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbRunTracking*)
   {
      return GenerateInitInstanceLocal((::EdbRunTracking*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbRunTracking*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbRunParent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbRunParent(void *p = 0);
   static void *newArray_EdbRunParent(Long_t size, void *p);
   static void delete_EdbRunParent(void *p);
   static void deleteArray_EdbRunParent(void *p);
   static void destruct_EdbRunParent(void *p);
   static void streamer_EdbRunParent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbRunParent*)
   {
      ::EdbRunParent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbRunParent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbRunParent", ::EdbRunParent::Class_Version(), "./EdbRunParent.h", 13,
                  typeid(::EdbRunParent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbRunParent::Dictionary, isa_proxy, 0,
                  sizeof(::EdbRunParent) );
      instance.SetNew(&new_EdbRunParent);
      instance.SetNewArray(&newArray_EdbRunParent);
      instance.SetDelete(&delete_EdbRunParent);
      instance.SetDeleteArray(&deleteArray_EdbRunParent);
      instance.SetDestructor(&destruct_EdbRunParent);
      instance.SetStreamerFunc(&streamer_EdbRunParent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbRunParent*)
   {
      return GenerateInitInstanceLocal((::EdbRunParent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbRunParent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr EdbDataPiece::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbDataPiece::Class_Name()
{
   return "EdbDataPiece";
}

//______________________________________________________________________________
const char *EdbDataPiece::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataPiece*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbDataPiece::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataPiece*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbDataPiece::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataPiece*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbDataPiece::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataPiece*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbDataSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbDataSet::Class_Name()
{
   return "EdbDataSet";
}

//______________________________________________________________________________
const char *EdbDataSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbDataSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbDataSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbDataSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbDataProc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbDataProc::Class_Name()
{
   return "EdbDataProc";
}

//______________________________________________________________________________
const char *EdbDataProc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataProc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbDataProc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataProc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbDataProc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataProc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbDataProc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataProc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbTraceBack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbTraceBack::Class_Name()
{
   return "EdbTraceBack";
}

//______________________________________________________________________________
const char *EdbTraceBack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTraceBack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbTraceBack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTraceBack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbTraceBack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTraceBack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbTraceBack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTraceBack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbRunAccess::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbRunAccess::Class_Name()
{
   return "EdbRunAccess";
}

//______________________________________________________________________________
const char *EdbRunAccess::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunAccess*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbRunAccess::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunAccess*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbRunAccess::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunAccess*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbRunAccess::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunAccess*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbRunTracking::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbRunTracking::Class_Name()
{
   return "EdbRunTracking";
}

//______________________________________________________________________________
const char *EdbRunTracking::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunTracking*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbRunTracking::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunTracking*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbRunTracking::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunTracking*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbRunTracking::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunTracking*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbRunParent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbRunParent::Class_Name()
{
   return "EdbRunParent";
}

//______________________________________________________________________________
const char *EdbRunParent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunParent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbRunParent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunParent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbRunParent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunParent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbRunParent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunParent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void EdbDataPiece::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbDataPiece.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> eAFID;
      R__b >> eCLUST;
      R__b >> ePlate;
      R__b >> ePiece;
      R__b >> eFlag;
      eRunFiles.Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 3; R__i++)
         R__b >> eLayers[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b >> eCond[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b >> eAreas[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b >> eCuts[R__i];
      R__b.ReadStaticArray((float*)eCutCP);
      R__b >> eCutGR;
      R__b >> eOUTPUT;
      eFileNameCP.Streamer(R__b);
      eFileNamePar.Streamer(R__b);
      R__b >> eCouplesInd;
      R__b >> eEraseMask;
      R__b.CheckByteCount(R__s, R__c, EdbDataPiece::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbDataPiece::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << eAFID;
      R__b << eCLUST;
      R__b << ePlate;
      R__b << ePiece;
      R__b << eFlag;
      eRunFiles.Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 3; R__i++)
         R__b << eLayers[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b << eCond[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b << eAreas[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b << eCuts[R__i];
      R__b.WriteArray(eCutCP, 6);
      R__b << eCutGR;
      R__b << eOUTPUT;
      eFileNameCP.Streamer(R__b);
      eFileNamePar.Streamer(R__b);
      R__b << eCouplesInd;
      R__b << eEraseMask;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbDataPiece::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbDataPiece.
      typedef ::EdbDataPiece msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAFID", &eAFID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCLUST", &eCLUST);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePlate", &ePlate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePiece", &ePiece);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFlag", &eFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRunFiles", &eRunFiles);
      R__insp.InspectMember(eRunFiles, "eRunFiles.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eLayers[3]", &eLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCond[3]", &eCond);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eAreas[3]", &eAreas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCuts[3]", &eCuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCutCP[6]", eCutCP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCutGR", &eCutGR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eOUTPUT", &eOUTPUT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eRCuts[3]", &eRCuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFileNameCP", &eFileNameCP);
      R__insp.InspectMember(eFileNameCP, "eFileNameCP.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFileNamePar", &eFileNamePar);
      R__insp.InspectMember(eFileNamePar, "eFileNamePar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCouplesInd", &eCouplesInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eRun", &eRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCouplesTree", &eCouplesTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eEraseMask", &eEraseMask);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbDataPiece(void *p) {
      return  p ? new(p) ::EdbDataPiece : new ::EdbDataPiece;
   }
   static void *newArray_EdbDataPiece(Long_t nElements, void *p) {
      return p ? new(p) ::EdbDataPiece[nElements] : new ::EdbDataPiece[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbDataPiece(void *p) {
      delete ((::EdbDataPiece*)p);
   }
   static void deleteArray_EdbDataPiece(void *p) {
      delete [] ((::EdbDataPiece*)p);
   }
   static void destruct_EdbDataPiece(void *p) {
      typedef ::EdbDataPiece current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbDataPiece(TBuffer &buf, void *obj) {
      ((::EdbDataPiece*)obj)->::EdbDataPiece::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbDataPiece

//______________________________________________________________________________
void EdbDataSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbDataSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      eInputList.Streamer(R__b);
      eAnaDir.Streamer(R__b);
      eParDir.Streamer(R__b);
      eDBFileName.Streamer(R__b);
      R__b >> eDBFile;
      ePieces.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbDataSet::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbDataSet::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      eInputList.Streamer(R__b);
      eAnaDir.Streamer(R__b);
      eParDir.Streamer(R__b);
      eDBFileName.Streamer(R__b);
      R__b << eDBFile;
      ePieces.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbDataSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbDataSet.
      typedef ::EdbDataSet msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eInputList", &eInputList);
      R__insp.InspectMember(eInputList, "eInputList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAnaDir", &eAnaDir);
      R__insp.InspectMember(eAnaDir, "eAnaDir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eParDir", &eParDir);
      R__insp.InspectMember(eParDir, "eParDir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDBFileName", &eDBFileName);
      R__insp.InspectMember(eDBFileName, "eDBFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eDBFile", &eDBFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePieces", &ePieces);
      R__insp.InspectMember(ePieces, "ePieces.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbDataSet(void *p) {
      return  p ? new(p) ::EdbDataSet : new ::EdbDataSet;
   }
   static void *newArray_EdbDataSet(Long_t nElements, void *p) {
      return p ? new(p) ::EdbDataSet[nElements] : new ::EdbDataSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbDataSet(void *p) {
      delete ((::EdbDataSet*)p);
   }
   static void deleteArray_EdbDataSet(void *p) {
      delete [] ((::EdbDataSet*)p);
   }
   static void destruct_EdbDataSet(void *p) {
      typedef ::EdbDataSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbDataSet(TBuffer &buf, void *obj) {
      ((::EdbDataSet*)obj)->::EdbDataSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbDataSet

//______________________________________________________________________________
void EdbDataProc::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbDataProc.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eDataSet;
      R__b >> ePVR;
      R__b >> eNoUpdate;
      R__b.CheckByteCount(R__s, R__c, EdbDataProc::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbDataProc::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eDataSet;
      R__b << ePVR;
      R__b << eNoUpdate;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbDataProc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbDataProc.
      typedef ::EdbDataProc msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eDataSet", &eDataSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePVR", &ePVR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNoUpdate", &eNoUpdate);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbDataProc(void *p) {
      return  p ? new(p) ::EdbDataProc : new ::EdbDataProc;
   }
   static void *newArray_EdbDataProc(Long_t nElements, void *p) {
      return p ? new(p) ::EdbDataProc[nElements] : new ::EdbDataProc[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbDataProc(void *p) {
      delete ((::EdbDataProc*)p);
   }
   static void deleteArray_EdbDataProc(void *p) {
      delete [] ((::EdbDataProc*)p);
   }
   static void destruct_EdbDataProc(void *p) {
      typedef ::EdbDataProc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbDataProc(TBuffer &buf, void *obj) {
      ((::EdbDataProc*)obj)->::EdbDataProc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbDataProc

//______________________________________________________________________________
void EdbTraceBack::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbTraceBack.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbTraceBack::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbTraceBack::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbTraceBack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbTraceBack.
      typedef ::EdbTraceBack msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbTraceBack(void *p) {
      return  p ? new(p) ::EdbTraceBack : new ::EdbTraceBack;
   }
   static void *newArray_EdbTraceBack(Long_t nElements, void *p) {
      return p ? new(p) ::EdbTraceBack[nElements] : new ::EdbTraceBack[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbTraceBack(void *p) {
      delete ((::EdbTraceBack*)p);
   }
   static void deleteArray_EdbTraceBack(void *p) {
      delete [] ((::EdbTraceBack*)p);
   }
   static void destruct_EdbTraceBack(void *p) {
      typedef ::EdbTraceBack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbTraceBack(TBuffer &buf, void *obj) {
      ((::EdbTraceBack*)obj)->::EdbTraceBack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbTraceBack

//______________________________________________________________________________
void EdbRunAccess::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbRunAccess.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eAFID;
      R__b >> eCLUST;
      R__b >> eUseExternalSurface;
      R__b >> eDoViewAnalysis;
      int R__i;
      for (R__i = 0; R__i < 3; R__i++)
         eHViewXY[R__i].Streamer(R__b);
      R__b >> eInvertSides;
      R__b >> eUseDensityAsW;
      R__b >> eDoPixelCorr;
      R__b >> ePixelCorrX;
      R__b >> ePixelCorrY;
      eHeaderCut.Streamer(R__b);
      R__b >> eTracking;
      eRunFileName.Streamer(R__b);
      R__b >> eRun;
      R__b >> eFirstArea;
      R__b >> eLastArea;
      R__b >> eNareas;
      for (R__i = 0; R__i < 3; R__i++)
         R__b >> eLayers[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b >> eCond[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b >> eCuts[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b >> eVP[R__i];
      R__b >> eCutGR;
      R__b >> eXmin;
      R__b >> eXmax;
      R__b >> eYmin;
      R__b >> eYmax;
      R__b.ReadStaticArray((float*)eXstep);
      R__b.ReadStaticArray((float*)eYstep);
      R__b.ReadStaticArray((float*)eViewXmin);
      R__b.ReadStaticArray((float*)eViewXmax);
      R__b.ReadStaticArray((float*)eViewYmin);
      R__b.ReadStaticArray((float*)eViewYmax);
      R__b.CheckByteCount(R__s, R__c, EdbRunAccess::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbRunAccess::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eAFID;
      R__b << eCLUST;
      R__b << eUseExternalSurface;
      R__b << eDoViewAnalysis;
      int R__i;
      for (R__i = 0; R__i < 3; R__i++)
         eHViewXY[R__i].Streamer(R__b);
      R__b << eInvertSides;
      R__b << eUseDensityAsW;
      R__b << eDoPixelCorr;
      R__b << ePixelCorrX;
      R__b << ePixelCorrY;
      eHeaderCut.Streamer(R__b);
      R__b << eTracking;
      eRunFileName.Streamer(R__b);
      R__b << eRun;
      R__b << eFirstArea;
      R__b << eLastArea;
      R__b << eNareas;
      for (R__i = 0; R__i < 3; R__i++)
         R__b << eLayers[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b << eCond[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b << eCuts[R__i];
      for (R__i = 0; R__i < 3; R__i++)
         R__b << eVP[R__i];
      R__b << eCutGR;
      R__b << eXmin;
      R__b << eXmax;
      R__b << eYmin;
      R__b << eYmax;
      R__b.WriteArray(eXstep, 3);
      R__b.WriteArray(eYstep, 3);
      R__b.WriteArray(eViewXmin, 3);
      R__b.WriteArray(eViewXmax, 3);
      R__b.WriteArray(eViewYmin, 3);
      R__b.WriteArray(eViewYmax, 3);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbRunAccess::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbRunAccess.
      typedef ::EdbRunAccess msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAFID", &eAFID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCLUST", &eCLUST);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eUseExternalSurface", &eUseExternalSurface);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoViewAnalysis", &eDoViewAnalysis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHViewXY[3]", eHViewXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eInvertSides", &eInvertSides);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eUseDensityAsW", &eUseDensityAsW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoPixelCorr", &eDoPixelCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePixelCorrX", &ePixelCorrX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePixelCorrY", &ePixelCorrY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHeaderCut", &eHeaderCut);
      R__insp.InspectMember(eHeaderCut, "eHeaderCut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTracking", &eTracking);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRunFileName", &eRunFileName);
      R__insp.InspectMember(eRunFileName, "eRunFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eRun", &eRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFirstArea", &eFirstArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eLastArea", &eLastArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNareas", &eNareas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eLayers[3]", &eLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCond[3]", &eCond);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCuts[3]", &eCuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVP[3]", &eVP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCutGR", &eCutGR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmin", &eXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmax", &eXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmin", &eYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmax", &eYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXstep[3]", eXstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYstep[3]", eYstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eViewXmin[3]", eViewXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eViewXmax[3]", eViewXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eViewYmin[3]", eViewYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eViewYmax[3]", eViewYmax);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbRunAccess(void *p) {
      return  p ? new(p) ::EdbRunAccess : new ::EdbRunAccess;
   }
   static void *newArray_EdbRunAccess(Long_t nElements, void *p) {
      return p ? new(p) ::EdbRunAccess[nElements] : new ::EdbRunAccess[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbRunAccess(void *p) {
      delete ((::EdbRunAccess*)p);
   }
   static void deleteArray_EdbRunAccess(void *p) {
      delete [] ((::EdbRunAccess*)p);
   }
   static void destruct_EdbRunAccess(void *p) {
      typedef ::EdbRunAccess current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbRunAccess(TBuffer &buf, void *obj) {
      ((::EdbRunAccess*)obj)->::EdbRunAccess::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbRunAccess

//______________________________________________________________________________
void EdbRunTracking::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbRunTracking.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbRunAccess::Streamer(R__b);
      eCondMT.Streamer(R__b);
      eCondBT.Streamer(R__b);
      R__b >> eDeltaRview;
      R__b >> eDeltaTheta;
      R__b >> ePreliminaryPulsMinMT;
      R__b >> ePreliminaryChi2MaxMT;
      eS1pre.Streamer(R__b);
      eS2pre.Streamer(R__b);
      R__b >> eDeltaR;
      eSpre.Streamer(R__b);
      R__b >> ePulsMinBT;
      R__b >> ePulsMinDegradMT;
      R__b >> eChi2MaxBT;
      eScnd.Streamer(R__b);
      R__b >> ePulsMinMT;
      R__b >> ePulsMinDegradBT;
      R__b >> eChi2MaxMT;
      eS1cnd.Streamer(R__b);
      eS2cnd.Streamer(R__b);
      ePred.Streamer(R__b);
      eS.Streamer(R__b);
      eS1.Streamer(R__b);
      eS2.Streamer(R__b);
      eNext.Streamer(R__b);
      R__b >> eStatus;
      R__b >> eDegradPos;
      R__b >> eDegradSlope;
      R__b.ReadStaticArray((int*)eIdp);
      R__b.ReadStaticArray((int*)eIdf);
      R__b >> ePredictionScan;
      R__b.CheckByteCount(R__s, R__c, EdbRunTracking::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbRunTracking::IsA(), kTRUE);
      EdbRunAccess::Streamer(R__b);
      eCondMT.Streamer(R__b);
      eCondBT.Streamer(R__b);
      R__b << eDeltaRview;
      R__b << eDeltaTheta;
      R__b << ePreliminaryPulsMinMT;
      R__b << ePreliminaryChi2MaxMT;
      eS1pre.Streamer(R__b);
      eS2pre.Streamer(R__b);
      R__b << eDeltaR;
      eSpre.Streamer(R__b);
      R__b << ePulsMinBT;
      R__b << ePulsMinDegradMT;
      R__b << eChi2MaxBT;
      eScnd.Streamer(R__b);
      R__b << ePulsMinMT;
      R__b << ePulsMinDegradBT;
      R__b << eChi2MaxMT;
      eS1cnd.Streamer(R__b);
      eS2cnd.Streamer(R__b);
      ePred.Streamer(R__b);
      eS.Streamer(R__b);
      eS1.Streamer(R__b);
      eS2.Streamer(R__b);
      eNext.Streamer(R__b);
      R__b << eStatus;
      R__b << eDegradPos;
      R__b << eDegradSlope;
      R__b.WriteArray(eIdp, 4);
      R__b.WriteArray(eIdf, 4);
      R__b << ePredictionScan;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbRunTracking::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbRunTracking.
      typedef ::EdbRunTracking msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCondMT", &eCondMT);
      R__insp.InspectMember(eCondMT, "eCondMT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCondBT", &eCondBT);
      R__insp.InspectMember(eCondBT, "eCondBT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDeltaRview", &eDeltaRview);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDeltaTheta", &eDeltaTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePreliminaryPulsMinMT", &ePreliminaryPulsMinMT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePreliminaryChi2MaxMT", &ePreliminaryChi2MaxMT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS1pre", &eS1pre);
      R__insp.InspectMember(eS1pre, "eS1pre.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS2pre", &eS2pre);
      R__insp.InspectMember(eS2pre, "eS2pre.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDeltaR", &eDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSpre", &eSpre);
      R__insp.InspectMember(eSpre, "eSpre.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePulsMinBT", &ePulsMinBT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePulsMinDegradMT", &ePulsMinDegradMT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2MaxBT", &eChi2MaxBT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eScnd", &eScnd);
      R__insp.InspectMember(eScnd, "eScnd.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePulsMinMT", &ePulsMinMT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePulsMinDegradBT", &ePulsMinDegradBT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eChi2MaxMT", &eChi2MaxMT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS1cnd", &eS1cnd);
      R__insp.InspectMember(eS1cnd, "eS1cnd.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS2cnd", &eS2cnd);
      R__insp.InspectMember(eS2cnd, "eS2cnd.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePred", &ePred);
      R__insp.InspectMember(ePred, "ePred.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS", &eS);
      R__insp.InspectMember(eS, "eS.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS1", &eS1);
      R__insp.InspectMember(eS1, "eS1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eS2", &eS2);
      R__insp.InspectMember(eS2, "eS2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNext", &eNext);
      R__insp.InspectMember(eNext, "eNext.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStatus", &eStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDegradPos", &eDegradPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDegradSlope", &eDegradSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eIdp[4]", eIdp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eIdf[4]", eIdf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePredictionScan", &ePredictionScan);
      EdbRunAccess::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbRunTracking(void *p) {
      return  p ? new(p) ::EdbRunTracking : new ::EdbRunTracking;
   }
   static void *newArray_EdbRunTracking(Long_t nElements, void *p) {
      return p ? new(p) ::EdbRunTracking[nElements] : new ::EdbRunTracking[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbRunTracking(void *p) {
      delete ((::EdbRunTracking*)p);
   }
   static void deleteArray_EdbRunTracking(void *p) {
      delete [] ((::EdbRunTracking*)p);
   }
   static void destruct_EdbRunTracking(void *p) {
      typedef ::EdbRunTracking current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbRunTracking(TBuffer &buf, void *obj) {
      ((::EdbRunTracking*)obj)->::EdbRunTracking::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbRunTracking

//______________________________________________________________________________
void EdbRunParent::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbRunParent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbRunTracking::Streamer(R__b);
      R__b >> eIPmax;
      R__b.CheckByteCount(R__s, R__c, EdbRunParent::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbRunParent::IsA(), kTRUE);
      EdbRunTracking::Streamer(R__b);
      R__b << eIPmax;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbRunParent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbRunParent.
      typedef ::EdbRunParent msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eIPmax", &eIPmax);
      EdbRunTracking::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbRunParent(void *p) {
      return  p ? new(p) ::EdbRunParent : new ::EdbRunParent;
   }
   static void *newArray_EdbRunParent(Long_t nElements, void *p) {
      return p ? new(p) ::EdbRunParent[nElements] : new ::EdbRunParent[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbRunParent(void *p) {
      delete ((::EdbRunParent*)p);
   }
   static void deleteArray_EdbRunParent(void *p) {
      delete [] ((::EdbRunParent*)p);
   }
   static void destruct_EdbRunParent(void *p) {
      typedef ::EdbRunParent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbRunParent(TBuffer &buf, void *obj) {
      ((::EdbRunParent*)obj)->::EdbRunParent::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbRunParent

/********************************************************
* EIODict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableEIODict();

extern "C" void G__set_cpp_environmentEIODict() {
  G__add_ipath(".");
  G__add_ipath("..\\..\\include");
  G__cpp_reset_tagtableEIODict();
}
#include <new>
extern "C" int G__cpp_dllrevEIODict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* EdbDataPiece */
static int G__EIODict_773_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbDataPiece* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbDataPiece[n];
     } else {
       p = new((void*) gvp) EdbDataPiece[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbDataPiece;
     } else {
       p = new((void*) gvp) EdbDataPiece;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbDataPiece* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbDataPiece(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) EdbDataPiece(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbDataPiece*) G__getstructoffset())->Plate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->InitCouplesInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbDataPiece*) G__getstructoffset())->GetLinkedSegEntr((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, *(TArrayI*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((EdbDataPiece*) G__getstructoffset())->SetVolume0((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbDataPiece*) G__getstructoffset())->SetVolume0((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbDataPiece*) G__getstructoffset())->SetVolume0((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->SetVolumeA((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->AddRunFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->CloseRun();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbDataPiece*) G__getstructoffset())->GetRunFile((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbDataPiece*) G__getstructoffset())->MakeName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((EdbDataPiece*) G__getstructoffset())->MakeNameCP((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbDataPiece*) G__getstructoffset())->GetNameCP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->WriteCuts();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->CheckCCD((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->CheckCCD());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->RemoveCCDPeak(*(TMatrix*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->UpdateSegmentCut(*((EdbSegmentCut*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->SetCouplesTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbDataPiece*) G__getstructoffset())->Nruns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbDataPiece*) G__getstructoffset())->Flag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataPiece*) G__getstructoffset())->GetMakeLayer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataPiece*) G__getstructoffset())->GetLayer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataPiece*) G__getstructoffset())->GetMakeCond((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataPiece*) G__getstructoffset())->GetCond((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbDataPiece*) G__getstructoffset())->SetOUTPUT((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataPiece*) G__getstructoffset())->SetOUTPUT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->SetCutGR((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->AddCutCP((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->AddSegmentCut((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->AddSegmentCut((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->NCuts((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataPiece*) G__getstructoffset())->GetCut((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->AddRCut((int) G__int(libp->para[0]), *(TCut*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataPiece*) G__getstructoffset())->GetRCut((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbDataPiece*) G__getstructoffset())->GetCutGR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbDataPiece*) G__getstructoffset())->GetOUTPUT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->AcceptViewHeader((EdbViewHeader*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->MakeNamePar((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->CorrectAngles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->CorrectAngles((TTree*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->CorrectShrinkage((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->UpdateShrPar((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->UpdateAffPar((int) G__int(libp->para[0]), *(EdbAffine2D*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->UpdateAffTPar((int) G__int(libp->para[0]), *(EdbAffine2D*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->UpdateZPar((int) G__int(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->TakePiecePar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->ReadPiecePar((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->MakeLinkListArea((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->MakeLinkListCoord((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->GetAreaData((EdbPVRec*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->TakeRawSegment((EdbView*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(EdbSegP*) libp->para[2].ref, (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->PassCuts((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->PassCutCP((float*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbDataPiece*) G__getstructoffset())->GetRawSegmentPix((EdbSegment*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbDataPiece*) G__getstructoffset())->CalculateSegmentChi2((EdbSegment*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->GetRawData((EdbPVRec*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->GetCPData((EdbPattern*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])
, (EdbPattern*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->GetCPData((EdbPattern*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->GetCPData((EdbPattern*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->GetCPData_new((EdbPattern*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])
, (EdbPattern*) G__int(libp->para[2]), (TIndex2*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->GetCPData_new((EdbPattern*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])
, (EdbPattern*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->GetCPData_new((EdbPattern*) G__int(libp->para[0]), (EdbPattern*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->GetCPData_new((EdbPattern*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->TakeCPSegment(*(EdbSegCouple*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->InitCouplesTree((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbDataPiece*) G__getstructoffset())->InitCouplesTree());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbDataPiece::InitCouplesTree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->CloseCPData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbDataPiece::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataPiece::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbDataPiece::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbDataPiece::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataPiece*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataPiece::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbDataPiece::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataPiece::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_773_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbDataPiece::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbDataPiece G__TEdbDataPiece;
static int G__EIODict_773_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbDataPiece*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbDataPiece*) (soff+(sizeof(EdbDataPiece)*i)))->~G__TEdbDataPiece();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbDataPiece*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbDataPiece*) (soff))->~G__TEdbDataPiece();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbDataSet */
static int G__EIODict_774_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbDataSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbDataSet[n];
     } else {
       p = new((void*) gvp) EdbDataSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbDataSet;
     } else {
       p = new((void*) gvp) EdbDataSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbDataSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbDataSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbDataSet((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbDataSet((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbDataSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataSet*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbDataSet*) G__getstructoffset())->N());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataSet*) G__getstructoffset())->GetPiece((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbDataSet*) G__getstructoffset())->GetAnaDir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbDataSet*) G__getstructoffset())->GetParDir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataSet*) G__getstructoffset())->ReadDataSetDef((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataSet*) G__getstructoffset())->GetRunList((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataSet*) G__getstructoffset())->PrintRunList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataSet*) G__getstructoffset())->WriteRunList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataSet*) G__getstructoffset())->FindPiece((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataSet*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbDataSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbDataSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbDataSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbDataSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_774_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbDataSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbDataSet G__TEdbDataSet;
static int G__EIODict_774_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbDataSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbDataSet*) (soff+(sizeof(EdbDataSet)*i)))->~G__TEdbDataSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbDataSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbDataSet*) (soff))->~G__TEdbDataSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbDataProc */
static int G__EIODict_775_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbDataProc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbDataProc[n];
     } else {
       p = new((void*) gvp) EdbDataProc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbDataProc;
     } else {
       p = new((void*) gvp) EdbDataProc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbDataProc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbDataProc* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbDataProc(
(int) G__int(libp->para[0]), *(TArrayI*) libp->para[1].ref
, *(TArrayF*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) EdbDataProc(
(int) G__int(libp->para[0]), *(TArrayI*) libp->para[1].ref
, *(TArrayF*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbDataProc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbDataProc* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbDataProc((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbDataProc((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbDataProc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->GetDataSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbDataProc*) G__getstructoffset())->PVR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbDataProc*) G__getstructoffset())->GetPVR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataProc*) G__getstructoffset())->SetPVR((EdbPVRec*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->ExtractDataVolume(*(EdbSegP*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->ExtractDataVolume(*(EdbSegP*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->ExtractDataVolume(*(EdbTrackP*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->ExtractDataVolume(*(EdbTrackP*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->ExtractDataVolume(*(EdbTrackP*) libp->para[0].ref, (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->ExtractDataVolume(*(EdbTrackP*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->ExtractDataVolumeF(*(EdbTrackP*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->ExtractDataVolumeF(*(EdbTrackP*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->ExtractDataVolumeF(*(EdbTrackP*) libp->para[0].ref, (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->ExtractDataVolumeF(*(EdbTrackP*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->InitVolume((int) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->InitVolume((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->InitVolume());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->InitVolume((EdbPVRec*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (TIndex2*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->InitVolume((EdbPVRec*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->InitVolume((EdbPVRec*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->InitVolumeTracks((EdbPVRec*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->InitVolumeRaw((EdbPVRec*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->Process());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->CheckCCD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->Link());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->Link(*(EdbDataPiece*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataProc*) G__getstructoffset())->Align((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 105, (long) EdbDataProc::LinkTracksWithFlag(
(EdbPVRec*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (float) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) EdbDataProc::LinkTracksWithFlag((EdbPVRec*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbDataProc*) G__getstructoffset())->LinkTracks((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbDataProc*) G__getstructoffset())->LinkTracks((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataProc*) G__getstructoffset())->LinkTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbDataProc*) G__getstructoffset())->LinkTracksC((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbDataProc*) G__getstructoffset())->LinkTracksC((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataProc*) G__getstructoffset())->LinkTracksC();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbDataProc*) G__getstructoffset())->LinkRawTracks((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataProc*) G__getstructoffset())->LinkRawTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbDataProc*) G__getstructoffset())->AlignLinkTracks((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbDataProc*) G__getstructoffset())->AlignLinkTracks((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataProc*) G__getstructoffset())->AlignLinkTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataProc*) G__getstructoffset())->SetNoUpdate((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbDataProc*) G__getstructoffset())->NoUpdate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->ShrinkCorr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataProc*) G__getstructoffset())->CheckShrinkage((EdbPVRec*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(float*) G__Floatref(&libp->para[2]), *(float*) G__Floatref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataProc*) G__getstructoffset())->CorrectAngles();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataProc*) G__getstructoffset())->AjustZ((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataProc*) G__getstructoffset())->FineAlignment((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataProc*) G__getstructoffset())->FineAlignmentTracks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbDataProc*) G__getstructoffset())->FillCouplesTree((TTree*) G__int(libp->para[0]), (EdbPVRec*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbDataProc*) G__getstructoffset())->FillCouplesTree((TTree*) G__int(libp->para[0]), (EdbPVRec*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataProc*) G__getstructoffset())->CloseCouplesTree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) EdbDataProc::MakeTracksTree((EdbPVRec*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) EdbDataProc::MakeTracksTree((EdbPVRec*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) EdbDataProc::MakeTracksTree());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) EdbDataProc::MakeTracksTree(*(TObjArray*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) EdbDataProc::MakeTracksTree(*(TObjArray*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) EdbDataProc::MakeTracksTree(*(TObjArray*) libp->para[0].ref, (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) EdbDataProc::MakeTracksTree(*(TObjArray*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) EdbDataProc::ReadTracksTree(*(EdbPVRec*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) EdbDataProc::ReadTracksTree(*(EdbPVRec*) libp->para[0].ref, (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) EdbDataProc::ReadTracksTree(*(EdbPVRec*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataProc*) G__getstructoffset())->MakeTracksSegmentsList(*(EdbPVRec*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbDataProc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataProc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbDataProc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbDataProc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataProc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataProc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbDataProc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataProc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_775_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbDataProc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EIODict_775_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbDataProc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbDataProc(*(EdbDataProc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbDataProc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbDataProc G__TEdbDataProc;
static int G__EIODict_775_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbDataProc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbDataProc*) (soff+(sizeof(EdbDataProc)*i)))->~G__TEdbDataProc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbDataProc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbDataProc*) (soff))->~G__TEdbDataProc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EIODict_775_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbDataProc* dest = (EdbDataProc*) G__getstructoffset();
   *dest = *(EdbDataProc*) libp->para[0].ref;
   const EdbDataProc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbTraceBack */
static int G__EIODict_776_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbTraceBack::SetBaseTrackVid(*(EdbSegP*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_776_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbTraceBack::FromBaseTrackVid(*(EdbSegP*) libp->para[0].ref, *(int*) G__Intref(&libp->para[1])
, *(int*) G__Intref(&libp->para[2]), *(int*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_776_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbTraceBack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_776_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTraceBack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_776_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbTraceBack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_776_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbTraceBack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_776_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTraceBack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_776_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTraceBack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_776_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTraceBack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_776_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTraceBack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_776_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTraceBack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__EIODict_776_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTraceBack *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTraceBack[n];
     } else {
       p = new((void*) gvp) EdbTraceBack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTraceBack;
     } else {
       p = new((void*) gvp) EdbTraceBack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbTraceBack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EIODict_776_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbTraceBack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbTraceBack(*(EdbTraceBack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbTraceBack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbTraceBack G__TEdbTraceBack;
static int G__EIODict_776_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbTraceBack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbTraceBack*) (soff+(sizeof(EdbTraceBack)*i)))->~G__TEdbTraceBack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbTraceBack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbTraceBack*) (soff))->~G__TEdbTraceBack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EIODict_776_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTraceBack* dest = (EdbTraceBack*) G__getstructoffset();
   *dest = *(EdbTraceBack*) libp->para[0].ref;
   const EdbTraceBack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbRunAccess */
static int G__EIODict_777_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunAccess* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRunAccess[n];
     } else {
       p = new((void*) gvp) EdbRunAccess[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRunAccess;
     } else {
       p = new((void*) gvp) EdbRunAccess;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunAccess* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbRunAccess((EdbRun*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbRunAccess((EdbRun*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunAccess* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbRunAccess((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbRunAccess((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetRawSegmentN((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetRawSegmentN((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetRawSegment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetRawSegment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetRawSegment(*(EdbView*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetRawSegment(*(EdbView*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->ApplyCorrections(*(EdbView*) libp->para[0].ref, *(EdbSegment*) libp->para[1].ref
, (const int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->SetPixelCorrection((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->ClearCuts();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->InitRun((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->InitRun((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->InitRun());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->InitRunFromRWC((char*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->InitRunFromRWC((char*) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->InitRunFromRWC((char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->AddRWDToRun((char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->AddRWDToRun((char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->PrintStat();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->CheckRunLine();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->Check0Views(*(EdbPattern*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->Check0Views(*(EdbPattern*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->CheckEmptyViews(*(EdbPattern*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbRunAccess*) G__getstructoffset())->CheckMeanSegsPerView(*(EdbPattern*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->CheckViewStep();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->CheckViewStep((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->CheckUpDownOffsets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->CheckViewSize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRunAccess*) G__getstructoffset())->GetRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetMakeLayer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetLayer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->FillVP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRunAccess*) G__getstructoffset())->GetVP((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRunAccess*) G__getstructoffset())->FirstArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRunAccess*) G__getstructoffset())->LastArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetVolumeArea(*(EdbPatternsVolume*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetVolumeData(*(EdbPatternsVolume*) libp->para[0].ref, (int) G__int(libp->para[1])
, *(TArrayI*) libp->para[2].ref, *(int*) G__Intref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetViewsArea(
(int) G__int(libp->para[0]), *(TArrayI*) libp->para[1].ref
, (int) G__int(libp->para[2]), *(float*) G__Floatref(&libp->para[3])
, *(float*) G__Floatref(&libp->para[4]), *(float*) G__Floatref(&libp->para[5])
, *(float*) G__Floatref(&libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetViewsArea((int) G__int(libp->para[0]), *(TArrayI*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetViewsAreaMarg((int) G__int(libp->para[0]), *(TArrayI*) libp->para[1].ref
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetViewsXY((int) G__int(libp->para[0]), *(TArrayI*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetViewsXY((int) G__int(libp->para[0]), *(TArrayI*) libp->para[1].ref
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetEntryXY((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetVolumeXY(*(EdbSegP*) libp->para[0].ref, *(EdbPatternsVolume*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetPatternXYcut(*(EdbSegP*) libp->para[0].ref, (int) G__int(libp->para[1])
, *(EdbPattern*) libp->para[2].ref, (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetPatternXY(*(EdbSegP*) libp->para[0].ref, (int) G__int(libp->para[1])
, *(EdbPattern*) libp->para[2].ref, (float) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetPatternXY(*(EdbSegP*) libp->para[0].ref, (int) G__int(libp->para[1])
, *(EdbPattern*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetPatternData(*(EdbPattern*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), *(TArrayI*) libp->para[3].ref
, *(int*) G__Intref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->GetPatternDataForPrediction((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(EdbPattern*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->AcceptRawSegment((EdbView*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(EdbSegP*) libp->para[2].ref, (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRunAccess*) G__getstructoffset())->ViewSide((EdbView*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbRunAccess*) G__getstructoffset())->SegmentWeight(*(EdbSegment*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->PassCuts((int) G__int(libp->para[0]), *(EdbSegment*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunAccess*) G__getstructoffset())->NCuts((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->SetSegmentAtExternalSurface((EdbSegment*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbRunAccess*) G__getstructoffset())->GetRawSegmentPix((EdbSegment*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbRunAccess*) G__getstructoffset())->CalculateSegmentChi2((EdbSegment*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->AddSegmentCut((int) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->AddSegmentCut((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->AddSegmentCut((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetCut((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunAccess*) G__getstructoffset())->GetCutGR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->SetCond((int) G__int(libp->para[0]), *(EdbScanCond*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetMakeCond((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbRunAccess*) G__getstructoffset())->GetCond((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbRunAccess*) G__getstructoffset())->OverlapX((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbRunAccess*) G__getstructoffset())->OverlapY((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbRunAccess*) G__getstructoffset())->CopyRawDataXY((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->SetCutLeft((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->SetCutRight((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->SetCutTop((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->SetCutBottom((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbRunAccess::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunAccess::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbRunAccess::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbRunAccess::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunAccess*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunAccess::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRunAccess::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunAccess::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_777_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRunAccess::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EIODict_777_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbRunAccess* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbRunAccess(*(EdbRunAccess*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbRunAccess G__TEdbRunAccess;
static int G__EIODict_777_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbRunAccess*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbRunAccess*) (soff+(sizeof(EdbRunAccess)*i)))->~G__TEdbRunAccess();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbRunAccess*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbRunAccess*) (soff))->~G__TEdbRunAccess();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EIODict_777_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunAccess* dest = (EdbRunAccess*) G__getstructoffset();
   *dest = *(EdbRunAccess*) libp->para[0].ref;
   const EdbRunAccess& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbRunTracking */
static int G__EIODict_779_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRunTracking[n];
     } else {
       p = new((void*) gvp) EdbRunTracking[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRunTracking;
     } else {
       p = new((void*) gvp) EdbRunTracking;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbRunTracking((EdbRun*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbRunTracking((EdbRun*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbRunTracking((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbRunTracking((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunTracking*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunTracking*) G__getstructoffset())->SetCondMT(*(EdbScanCond*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunTracking*) G__getstructoffset())->SetCondBT(*(EdbScanCond*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunTracking*) G__getstructoffset())->SetPred(*(EdbSegP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunTracking*) G__getstructoffset())->UpdateFlag((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRunTracking::GetBTHoles((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRunTracking::GetMTHoles((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunTracking*) G__getstructoffset())->ExtrapolateCond(*(EdbScanCond*) libp->para[0].ref, (int) G__int(libp->para[1])
, *(EdbScanCond*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunTracking*) G__getstructoffset())->FindCompliments(*(EdbSegP*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(TObjArray*) libp->para[2].ref, (float) G__double(libp->para[3])
, *(TArrayF*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunTracking*) G__getstructoffset())->FindCandidates(*(EdbSegP*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, *(EdbPattern*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunTracking*) G__getstructoffset())->FindCandidateMT(*(EdbPattern*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunTracking*) G__getstructoffset())->FindBestCandidate(*(EdbPattern*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunTracking*) G__getstructoffset())->FindPrediction(*(EdbSegP*) libp->para[0].ref, *(EdbSegP*) libp->para[1].ref
, *(EdbSegP*) libp->para[2].ref, *(EdbSegP*) libp->para[3].ref
, *(EdbSegP*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunTracking*) G__getstructoffset())->TransformFromPlateRS(*(EdbPlateP*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunTracking*) G__getstructoffset())->FindTrack(*(EdbTrackP*) libp->para[0].ref, *(EdbTrackP*) libp->para[1].ref
, *(EdbPlateP*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunTracking*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbRunTracking::CloseSBtree((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) EdbRunTracking::InitSBtree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) EdbRunTracking::InitSBtree((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) EdbRunTracking::InitSBtree());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbRunTracking*) G__getstructoffset())->UpdateSBtree(*(TTree*) libp->para[0].ref, (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbRunTracking*) G__getstructoffset())->GetSBtreeEntry((int) G__int(libp->para[0]), *(TTree*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbRunTracking::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunTracking::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbRunTracking::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbRunTracking::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunTracking*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunTracking::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRunTracking::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunTracking::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_779_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRunTracking::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EIODict_779_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbRunTracking* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbRunTracking(*(EdbRunTracking*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbRunTracking G__TEdbRunTracking;
static int G__EIODict_779_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbRunTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbRunTracking*) (soff+(sizeof(EdbRunTracking)*i)))->~G__TEdbRunTracking();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbRunTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbRunTracking*) (soff))->~G__TEdbRunTracking();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EIODict_779_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunTracking* dest = (EdbRunTracking*) G__getstructoffset();
   *dest = *(EdbRunTracking*) libp->para[0].ref;
   const EdbRunTracking& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbRunParent */
static int G__EIODict_780_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunParent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRunParent[n];
     } else {
       p = new((void*) gvp) EdbRunParent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRunParent;
     } else {
       p = new((void*) gvp) EdbRunParent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbRunParent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunParent*) G__getstructoffset())->FindParentCandidates(*(EdbSegP*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(EdbPattern*) libp->para[2].ref, *(EdbPattern*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRunParent*) G__getstructoffset())->FindComplimentsIP(*(EdbSegP*) libp->para[0].ref, *(EdbPattern*) libp->para[1].ref
, *(TObjArray*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbRunParent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunParent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbRunParent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbRunParent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunParent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunParent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRunParent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunParent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EIODict_780_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRunParent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EIODict_780_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbRunParent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbRunParent(*(EdbRunParent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EIODictLN_EdbRunParent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbRunParent G__TEdbRunParent;
static int G__EIODict_780_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbRunParent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbRunParent*) (soff+(sizeof(EdbRunParent)*i)))->~G__TEdbRunParent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbRunParent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbRunParent*) (soff))->~G__TEdbRunParent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EIODict_780_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunParent* dest = (EdbRunParent*) G__getstructoffset();
   *dest = *(EdbRunParent*) libp->para[0].ref;
   const EdbRunParent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* EdbDataPiece */

/* EdbDataSet */

/* EdbDataProc */

/* EdbTraceBack */

/* EdbRunAccess */

/* EdbRunTracking */

/* EdbRunParent */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncEIODict {
 public:
  G__Sizep2memfuncEIODict(): p(&G__Sizep2memfuncEIODict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncEIODict::*p)();
};

size_t G__get_sizep2memfuncEIODict()
{
  G__Sizep2memfuncEIODict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceEIODict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece))) {
     EdbDataPiece *G__Lderived;
     G__Lderived=(EdbDataPiece*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece),G__get_linked_tagnum(&G__EIODictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece),G__get_linked_tagnum(&G__EIODictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EIODictLN_EdbDataSet))) {
     EdbDataSet *G__Lderived;
     G__Lderived=(EdbDataSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataSet),G__get_linked_tagnum(&G__EIODictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataSet),G__get_linked_tagnum(&G__EIODictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EIODictLN_EdbDataProc))) {
     EdbDataProc *G__Lderived;
     G__Lderived=(EdbDataProc*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataProc),G__get_linked_tagnum(&G__EIODictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EIODictLN_EdbTraceBack))) {
     EdbTraceBack *G__Lderived;
     G__Lderived=(EdbTraceBack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbTraceBack),G__get_linked_tagnum(&G__EIODictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess))) {
     EdbRunAccess *G__Lderived;
     G__Lderived=(EdbRunAccess*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess),G__get_linked_tagnum(&G__EIODictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking))) {
     EdbRunTracking *G__Lderived;
     G__Lderived=(EdbRunTracking*)0x1000;
     {
       EdbRunAccess *G__Lpbase=(EdbRunAccess*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking),G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking),G__get_linked_tagnum(&G__EIODictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EIODictLN_EdbRunParent))) {
     EdbRunParent *G__Lderived;
     G__Lderived=(EdbRunParent*)0x1000;
     {
       EdbRunTracking *G__Lpbase=(EdbRunTracking*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunParent),G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbRunAccess *G__Lpbase=(EdbRunAccess*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunParent),G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunParent),G__get_linked_tagnum(&G__EIODictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableEIODict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("iterator<iterator_traits<string::iterator>::iterator_category,iterator_traits<string::iterator>::value_type,iterator_traits<string::iterator>::difference_type,iterator_traits<string::iterator>::pointer,iterator_traits<string::iterator>::reference>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long,char*>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<string::const_iterator>::iterator_category,iterator_traits<string::const_iterator>::value_type,iterator_traits<string::const_iterator>::difference_type,iterator_traits<string::const_iterator>::pointer,iterator_traits<string::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EIODictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EIODictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EIODictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EIODictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EIODictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EIODictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EIODictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EIODictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EIODictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EIODictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EIODictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EIODictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__EIODictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__EIODictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EIODictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EIODictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__EIODictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__EIODictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__EIODictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrix",117,G__get_linked_tagnum(&G__EIODictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* EdbDataPiece */
static void G__setup_memvarEdbDataPiece(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece));
   { EdbDataPiece *p; p=(EdbDataPiece*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eAFID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eAFID=",0,"1-use fiducial marks transformations, 0 - do not");
   G__memvar_setup((void*)((long)(&p->eCLUST)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eCLUST=",0,"1-use clusters, 0 - do not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ePlate=",0,"plate id");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ePiece=",0,"piece id in this plate");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFlag=",0,"0-do nothing, 1-do something");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EIODictLN_TObjArray),-1,-1,4,"eRunFiles=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbLayer),-1,-1,4,"eLayers[3]=",0,"base(0),up(1),down(2)  layers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbScanCond),-1,-1,4,"eCond[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TIndexCell),-1,-1,4,"eAreas[3]=",0,"base/up/down  surface areas list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TObjArray),-1,-1,4,"eCuts[3]=",0,"array of cuts");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eCutCP[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eCutGR=",0,"grain cut (chi)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eOUTPUT=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TCut),-1,-1,4,"eRCuts[3]=",0,"! root-style text cuts");
   G__memvar_setup((void*)((long)(&p->eFileNameCP)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_TString),-1,-1,1,"eFileNameCP=",0,"name of the couples data file");
   G__memvar_setup((void*)((long)(&p->eFileNamePar)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_TString),-1,-1,1,"eFileNamePar=",0,"name of the parameters file");
   G__memvar_setup((void*)((long)(&p->eCouplesInd)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EIODictLN_TIndexCell),-1,-1,1,"eCouplesInd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eRun)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbRun),-1,-1,1,"eRun=",0,"!");
   G__memvar_setup((void*)((long)(&p->eCouplesTree)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EIODictLN_TTree),-1,-1,1,"eCouplesTree=",0,"!");
   G__memvar_setup((void*)((long)(&p->eEraseMask)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbMask),-1,-1,1,"eEraseMask=",0,"id's (entries) of segments to be erased when read couples tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbDataSet */
static void G__setup_memvarEdbDataSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataSet));
   { EdbDataSet *p; p=(EdbDataSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EIODictLN_TString),-1,-1,4,"eInputList=",0,"list of input data (runs)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EIODictLN_TString),-1,-1,4,"eAnaDir=",0,"path for analysis data directory");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EIODictLN_TString),-1,-1,4,"eParDir=",0,"path for parameters directory");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EIODictLN_TString),-1,-1,4,"eDBFileName=",0,"root file to keep pieces parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TFile),-1,-1,4,"eDBFile=",0,"the file (database) to save all parameters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EIODictLN_TObjArray),-1,-1,4,"ePieces=",0,"array of runs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbDataProc */
static void G__setup_memvarEdbDataProc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataProc));
   { EdbDataProc *p; p=(EdbDataProc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbDataSet),-1,-1,4,"eDataSet=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbPVRec),-1,-1,4,"ePVR=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"eNoUpdate=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbTraceBack */
static void G__setup_memvarEdbTraceBack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EIODictLN_EdbTraceBack));
   { EdbTraceBack *p; p=(EdbTraceBack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbRunAccess */
static void G__setup_memvarEdbRunAccess(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess));
   { EdbRunAccess *p; p=(EdbRunAccess*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eAFID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eAFID=",0,"if =1 - use affine transformations of the fiducial marks");
   G__memvar_setup((void*)((long)(&p->eCLUST)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eCLUST=",0,"1-use clusters, 0 - do not");
   G__memvar_setup((void*)((long)(&p->eUseExternalSurface)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eUseExternalSurface=",0,"if true - set segment position corrisponding to the very external cluster");
   G__memvar_setup((void*)((long)(&p->eDoViewAnalysis)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eDoViewAnalysis=",0,"fill or not the histograms for optional view analysis");
   G__memvar_setup((void*)((long)(&p->eHViewXY)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbH2),-1,-1,1,"eHViewXY[3]=",0,"XY segments distribution in a view local coords");
   G__memvar_setup((void*)((long)(&p->eInvertSides)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eInvertSides=",0,"0 -do nothing, 1-invert sides");
   G__memvar_setup((void*)((long)(&p->eUseDensityAsW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"eUseDensityAsW=",0,"in case of LASSO tracking possible to use eSigmaY as eW");
   G__memvar_setup((void*)((long)(&p->eDoPixelCorr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eDoPixelCorr=",0,"apply or not pix/mic correction  when read data (default is 0)");
   G__memvar_setup((void*)((long)(&p->ePixelCorrX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePixelCorrX=",0,"pixel/micron correction factor to be applied for data");
   G__memvar_setup((void*)((long)(&p->ePixelCorrY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePixelCorrY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eHeaderCut)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_TCut),-1,-1,1,"eHeaderCut=",0,"header cut to be applied in run initialization");
   G__memvar_setup((void*)((long)(&p->eTracking)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eTracking=",0,"to test tracking alorithm: -1-ignored(def),0/1 - trackings to accept");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EIODictLN_TString),-1,-1,4,"eRunFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbRun),-1,-1,4,"eRun=",0,"pointer to the run to be accessed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFirstArea=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eLastArea=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNareas=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbLayer),-1,-1,4,"eLayers[3]=",0,"base(0),up(1),down(2)  layers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbScanCond),-1,-1,4,"eCond[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TObjArray),-1,-1,4,"eCuts[3]=",0,"arrays of cuts to be applied to segments");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbPattern),-1,-1,4,"eVP[3]=",0,"base/up/down side patterns (0,1,2) with ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eCutGR=",0,"grain cut (chi)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eXmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eXmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eYmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eYmax=",0,"run limits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eXstep[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eYstep[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eViewXmin[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eViewXmax[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eViewYmin[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eViewYmax[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbRunTracking */
static void G__setup_memvarEdbRunTracking(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking));
   { EdbRunTracking *p; p=(EdbRunTracking*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eCondMT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbScanCond),-1,-1,1,"eCondMT=",0,"conditions for microtracks");
   G__memvar_setup((void*)((long)(&p->eCondBT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbScanCond),-1,-1,1,"eCondBT=",0,"conditions for basetracks");
   G__memvar_setup((void*)((long)(&p->eDeltaRview)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDeltaRview=",0,"(400)");
   G__memvar_setup((void*)((long)(&p->eDeltaTheta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDeltaTheta=",0,"(0.15) slope acceptance");
   G__memvar_setup((void*)((long)(&p->ePreliminaryPulsMinMT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePreliminaryPulsMinMT=",0,"(6)   \\_ preliminary cuts to microtracks candidates for");
   G__memvar_setup((void*)((long)(&p->ePreliminaryChi2MaxMT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePreliminaryChi2MaxMT=",0,"(1.6) /  microtracks and basetracks selection");
   G__memvar_setup((void*)((long)(&p->eS1pre)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbPattern),-1,-1,1,"eS1pre=",0,"the result of the preliminary selection of microtracks");
   G__memvar_setup((void*)((long)(&p->eS2pre)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbPattern),-1,-1,1,"eS2pre=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDeltaR)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDeltaR=",0,"(20) ");
   G__memvar_setup((void*)((long)(&p->eSpre)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbPattern),-1,-1,1,"eSpre=",0,"preliminary selected basetracks");
   G__memvar_setup((void*)((long)(&p->ePulsMinBT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePulsMinBT=",0,"(18)");
   G__memvar_setup((void*)((long)(&p->ePulsMinDegradMT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePulsMinDegradMT=",0,"(0)");
   G__memvar_setup((void*)((long)(&p->eChi2MaxBT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eChi2MaxBT=",0,"(1.5) maximum chi2 accepted between prediction and basetrack candidates");
   G__memvar_setup((void*)((long)(&p->eScnd)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbPattern),-1,-1,1,"eScnd=",0,"basetracks candidates passed all cuts");
   G__memvar_setup((void*)((long)(&p->ePulsMinMT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePulsMinMT=",0,"(10) mimimal number of grains accepted to select microtracks");
   G__memvar_setup((void*)((long)(&p->ePulsMinDegradBT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ePulsMinDegradBT=",0,"(0)");
   G__memvar_setup((void*)((long)(&p->eChi2MaxMT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eChi2MaxMT=",0,"(1.6) maximum chi2 accepted between prediction and microtrack candidates");
   G__memvar_setup((void*)((long)(&p->eS1cnd)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbPattern),-1,-1,1,"eS1cnd=",0,"microtrack candidates passed all cuts");
   G__memvar_setup((void*)((long)(&p->eS2cnd)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbPattern),-1,-1,1,"eS2cnd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePred)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbSegP),-1,-1,1,"ePred=",0,"prediction");
   G__memvar_setup((void*)((long)(&p->eS)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbSegP),-1,-1,1,"eS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eS1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbSegP),-1,-1,1,"eS1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eS2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbSegP),-1,-1,1,"eS2=",0,"found segments");
   G__memvar_setup((void*)((long)(&p->eNext)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EIODictLN_EdbSegP),-1,-1,1,"eNext=",0,"next prediction");
   G__memvar_setup((void*)((long)(&p->eStatus)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eStatus=",0,"-1-nothing, 0-bt, 1-mt1, 2-mt2");
   G__memvar_setup((void*)((long)(&p->eDegradPos)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDegradPos=",0,"SigmaX  = SigmaX(0)  + degradPos   * mth");
   G__memvar_setup((void*)((long)(&p->eDegradSlope)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDegradSlope=",0,"SigmaTX = SigmaTX(0) + degradSlope * bth");
   G__memvar_setup((void*)((long)(&p->eIdp)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eIdp[4]=",0,"to read from sbt ");
   G__memvar_setup((void*)((long)(&p->eIdf)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eIdf[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ePredictionScan)-(long)(p)),103,0,0,-1,-1,-1,1,"ePredictionScan=",0,"if true use GetPatternDataForPrediction( spred.ID(), side, pat ); in FindCandidates (default is false)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbRunParent */
static void G__setup_memvarEdbRunParent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunParent));
   { EdbRunParent *p; p=(EdbRunParent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eIPmax=",0,"max ip for parent slection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EIODictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarEIODict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEdbDataPiece(void) {
   /* EdbDataPiece */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece));
   G__memfunc_setup("EdbDataPiece",1131,G__EIODict_773_0_1, 105, G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbDataPiece",1131,G__EIODict_773_0_2, 105, G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece), -1, 0, 4, 1, 1, 0, 
"i - - 0 - plate i - - 0 - piece "
"C - - 0 - file i - - 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EIODict_773_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Plate",502,G__EIODict_773_0_4, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCouplesInd",1418,G__EIODict_773_0_5, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLinkedSegEntr",1583,G__EIODict_773_0_6, 105, -1, -1, 0, 5, 1, 1, 8, 
"i - - 0 - side i - - 0 - aid "
"i - - 0 - vid i - - 0 - sid "
"u 'TArrayI' - 1 - entr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVolume0",980,G__EIODict_773_0_7, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - - 0 - x0 f - - 0 - y0 "
"f - - 0 - z0 f - - 0 '0' tx "
"f - - 0 '0' ty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVolumeA",997,G__EIODict_773_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - dx f - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRunFile",958,G__EIODict_773_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseRun",811,G__EIODict_773_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunFile",981,G__EIODict_773_0_11, 67, -1, -1, 0, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeName",767,G__EIODict_773_0_12, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeNameCP",914,G__EIODict_773_0_13, 67, -1, -1, 0, 1, 1, 1, 1, "C - - 10 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNameCP",820,G__EIODict_773_0_14, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EIODict_773_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteCuts",938,G__EIODict_773_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckCCD",680,G__EIODict_773_0_17, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '2000' maxentr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveCCDPeak",1209,G__EIODict_773_0_18, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixT<float>' 'TMatrix' 1 - matr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateSegmentCut",1634,G__EIODict_773_0_19, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegmentCut' - 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCouplesTree",1431,G__EIODict_773_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nruns",534,G__EIODict_773_0_21, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Flag",378,G__EIODict_773_0_22, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMakeLayer",1179,G__EIODict_773_0_23, 85, G__get_linked_tagnum(&G__EIODictLN_EdbLayer), -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayer",797,G__EIODict_773_0_24, 85, G__get_linked_tagnum(&G__EIODictLN_EdbLayer), -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMakeCond",1058,G__EIODict_773_0_25, 85, G__get_linked_tagnum(&G__EIODictLN_EdbScanCond), -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCond",676,G__EIODict_773_0_26, 85, G__get_linked_tagnum(&G__EIODictLN_EdbScanCond), -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOUTPUT",797,G__EIODict_773_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCutGR",753,G__EIODict_773_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - chi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCutCP",712,G__EIODict_773_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegmentCut",1288,G__EIODict_773_0_30, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - layer i - - 0 - xi "
"F - - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegmentCut",1288,G__EIODict_773_0_31, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - layer i - - 0 - xi "
"F - - 0 - min F - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NCuts",493,G__EIODict_773_0_32, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCut",588,G__EIODict_773_0_33, 85, G__get_linked_tagnum(&G__EIODictLN_EdbSegmentCut), -1, 0, 2, 1, 1, 0, 
"i - - 0 - layer i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRCut",647,G__EIODict_773_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - layer u 'TCut' - 1 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRCut",670,G__EIODict_773_0_35, 85, G__get_linked_tagnum(&G__EIODictLN_TCut), -1, 0, 1, 1, 1, 0, "i - - 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCutGR",741,G__EIODict_773_0_36, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOUTPUT",785,G__EIODict_773_0_37, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AcceptViewHeader",1588,G__EIODict_773_0_38, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbViewHeader' - 10 - head", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeNamePar",1058,G__EIODict_773_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectAngles",1324,G__EIODict_773_0_40, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectAngles",1324,G__EIODict_773_0_41, 105, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectShrinkage",1646,G__EIODict_773_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - layer f - - 0 - shr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateShrPar",1203,G__EIODict_773_0_43, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateAffPar",1171,G__EIODict_773_0_44, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - layer u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateAffTPar",1255,G__EIODict_773_0_45, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - layer u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateZPar",992,G__EIODict_773_0_46, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - layer f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TakePiecePar",1166,G__EIODict_773_0_47, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPiecePar",1157,G__EIODict_773_0_48, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeLinkListArea",1569,G__EIODict_773_0_49, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - irun", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeLinkListCoord",1695,G__EIODict_773_0_50, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - irun", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAreaData",1043,G__EIODict_773_0_51, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbPVRec' - 0 - ali i - - 40 - area "
"i - - 40 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TakeRawSegment",1410,G__EIODict_773_0_52, 105, -1, -1, 0, 4, 1, 1, 0, 
"U 'EdbView' - 0 - view i - - 0 - id "
"u 'EdbSegP' - 1 - segP i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PassCuts",822,G__EIODict_773_0_53, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - id F - - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PassCutCP",854,G__EIODict_773_0_54, 105, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawSegmentPix",1614,G__EIODict_773_0_55, 102, -1, -1, 0, 1, 1, 1, 0, "U 'EdbSegment' - 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateSegmentChi2",1959,G__EIODict_773_0_56, 102, -1, -1, 0, 4, 1, 1, 0, 
"U 'EdbSegment' - 0 - seg f - - 0 - sx "
"f - - 0 - sy f - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawData",964,G__EIODict_773_0_57, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPVRec' - 0 - ali", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCPData",813,G__EIODict_773_0_58, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbPattern' - 0 - pat U 'EdbPattern' - 0 '0' p1 "
"U 'EdbPattern' - 0 '0' p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCPData_new",1238,G__EIODict_773_0_59, 105, -1, -1, 0, 4, 1, 1, 0, 
"U 'EdbPattern' - 0 - pat U 'EdbPattern' - 0 '0' p1 "
"U 'EdbPattern' - 0 '0' p2 U 'TIndex2' - 0 '0' trseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TakeCPSegment",1259,G__EIODict_773_0_60, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegCouple' - 1 - cp u 'EdbSegP' - 1 - segP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCouplesTree",1535,G__EIODict_773_0_61, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"READ\"' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCouplesTree",1535,G__EIODict_773_0_62, 85, G__get_linked_tagnum(&G__EIODictLN_TTree), -1, 0, 2, 3, 1, 0, 
"C - - 10 - file C - - 10 - mode", (char*)NULL, (void*) G__func2void( (TTree* (*)(const char*, const char*))(&EdbDataPiece::InitCouplesTree) ), 0);
   G__memfunc_setup("CloseCPData",1027,G__EIODict_773_0_63, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EIODict_773_0_64, 85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbDataPiece::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EIODict_773_0_65, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataPiece::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EIODict_773_0_66, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbDataPiece::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EIODict_773_0_67, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbDataPiece::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EIODict_773_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EIODict_773_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataPiece::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EIODict_773_0_73, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbDataPiece::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EIODict_773_0_74, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataPiece::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EIODict_773_0_75, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbDataPiece::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbDataPiece", 1257, G__EIODict_773_0_76, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbDataSet(void) {
   /* EdbDataSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataSet));
   G__memfunc_setup("EdbDataSet",945,G__EIODict_774_0_1, 105, G__get_linked_tagnum(&G__EIODictLN_EdbDataSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbDataSet",945,G__EIODict_774_0_2, 105, G__get_linked_tagnum(&G__EIODictLN_EdbDataSet), -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EIODict_774_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N",78,G__EIODict_774_0_4, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPiece",774,G__EIODict_774_0_5, 85, G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece), -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAnaDir",847,G__EIODict_774_0_6, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParDir",866,G__EIODict_774_0_7, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDataSetDef",1329,G__EIODict_774_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunList",1009,G__EIODict_774_0_9, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintRunList",1246,G__EIODict_774_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteRunList",1244,G__EIODict_774_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPiece",871,G__EIODict_774_0_12, 85, G__get_linked_tagnum(&G__EIODictLN_EdbDataPiece), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EIODict_774_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EIODict_774_0_14, 85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbDataSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EIODict_774_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EIODict_774_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbDataSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EIODict_774_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbDataSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EIODict_774_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EIODict_774_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EIODict_774_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbDataSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EIODict_774_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EIODict_774_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbDataSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbDataSet", 1071, G__EIODict_774_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbDataProc(void) {
   /* EdbDataProc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EIODictLN_EdbDataProc));
   G__memfunc_setup("EdbDataProc",1049,G__EIODict_775_0_1, 105, G__get_linked_tagnum(&G__EIODictLN_EdbDataProc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbDataProc",1049,G__EIODict_775_0_2, 105, G__get_linked_tagnum(&G__EIODictLN_EdbDataProc), -1, 0, 3, 1, 1, 0, 
"i - - 0 - npl u 'TArrayI' - 1 - ids "
"u 'TArrayF' - 1 - zs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbDataProc",1049,G__EIODict_775_0_3, 105, G__get_linked_tagnum(&G__EIODictLN_EdbDataProc), -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataSet",966,G__EIODict_775_0_4, 85, G__get_linked_tagnum(&G__EIODictLN_EdbDataSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PVR",248,G__EIODict_775_0_5, 85, G__get_linked_tagnum(&G__EIODictLN_EdbPVRec), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPVR",536,G__EIODict_775_0_6, 85, G__get_linked_tagnum(&G__EIODictLN_EdbPVRec), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPVR",548,G__EIODict_775_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPVRec' - 0 - pvr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractDataVolume",1741,G__EIODict_775_0_8, 85, G__get_linked_tagnum(&G__EIODictLN_EdbPVRec), -1, 0, 5, 1, 1, 0, 
"u 'EdbSegP' - 1 - v i - - 0 - plmin "
"i - - 0 - plmax F - - 0 - accept "
"i - - 0 '0' datatype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractDataVolume",1741,G__EIODict_775_0_9, 85, G__get_linked_tagnum(&G__EIODictLN_EdbPVRec), -1, 0, 4, 1, 1, 0, 
"u 'EdbTrackP' - 1 - tr f - - 0 '20' binx "
"f - - 0 '10' bint i - - 0 '0' datatype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractDataVolumeF",1811,G__EIODict_775_0_10, 85, G__get_linked_tagnum(&G__EIODictLN_EdbPVRec), -1, 0, 4, 1, 1, 0, 
"u 'EdbTrackP' - 1 - tr f - - 0 '20' binx "
"f - - 0 '10' bint i - - 0 '0' datatype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitVolume",1036,G__EIODict_775_0_11, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 '0' datatype C - - 10 '\"1\"' rcut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitVolume",1036,G__EIODict_775_0_12, 105, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbPVRec' - 0 - ali i - - 0 '0' datatype "
"U 'TIndex2' - 0 '0' trseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitVolumeTracks",1652,G__EIODict_775_0_13, 105, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbPVRec' - 0 - ali C - - 10 - rcut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitVolumeRaw",1334,G__EIODict_775_0_14, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPVRec' - 0 - ali", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Process",735,G__EIODict_775_0_15, 105, -1, -1, 0, 0, 1, 1, 0, "", "to be removed", (void*) NULL, 0);
   G__memfunc_setup("CheckCCD",680,G__EIODict_775_0_16, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Link",398,G__EIODict_775_0_17, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Link",398,G__EIODict_775_0_18, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbDataPiece' - 1 - piece", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Align",491,G__EIODict_775_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - alignFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkTracksWithFlag",1804,G__EIODict_775_0_20, 105, -1, -1, 0, 7, 3, 1, 0, 
"U 'EdbPVRec' - 0 - ali f - - 0 - p "
"f - - 0 - probmin i - - 0 - nsegmin "
"i - - 0 - maxgap i - - 0 - flag "
"f - - 0 '0.1396' mass", (char*)NULL, (void*) G__func2void( (int (*)(EdbPVRec*, float, float, int, int, int, float))(&EdbDataProc::LinkTracksWithFlag) ), 0);
   G__memfunc_setup("LinkTracks",1014,G__EIODict_775_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 '0' alg f - - 0 '-1.' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkTracksC",1081,G__EIODict_775_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 '0' alg f - - 0 '-1.' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LinkRawTracks",1312,G__EIODict_775_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' alg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignLinkTracks",1505,G__EIODict_775_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 '0' alg i - - 0 '0' alignFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNoUpdate",1100,G__EIODict_775_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NoUpdate",800,G__EIODict_775_0_26, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShrinkCorr",1029,G__EIODict_775_0_27, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckShrinkage",1402,G__EIODict_775_0_28, 105, -1, -1, 0, 4, 1, 1, 0, 
"U 'EdbPVRec' - 0 - ali i - - 0 - couple "
"f - - 1 - shr1 f - - 1 - shr2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectAngles",1324,G__EIODict_775_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AjustZ",609,G__EIODict_775_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - doZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineAlignment",1313,G__EIODict_775_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - doFine", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FineAlignmentTracks",1929,G__EIODict_775_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCouplesTree",1522,G__EIODict_775_0_33, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'EdbPVRec' - 0 - al "
"i - - 0 '0' fillraw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseCouplesTree",1633,G__EIODict_775_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTracksTree",1398,G__EIODict_775_0_35, 105, -1, -1, 0, 2, 3, 1, 0, 
"U 'EdbPVRec' - 0 '0' ali C - - 10 '\"linked_tracks.root\"' file", (char*)NULL, (void*) G__func2void( (int (*)(EdbPVRec*, const char*))(&EdbDataProc::MakeTracksTree) ), 0);
   G__memfunc_setup("MakeTracksTree",1398,G__EIODict_775_0_36, 105, -1, -1, 0, 4, 3, 1, 0, 
"u 'TObjArray' - 1 - tracks f - - 0 '0' xv "
"f - - 0 '0' yv C - - 10 '\"linked_tracks.root\"' file", (char*)NULL, (void*) G__func2void( (int (*)(TObjArray&, float, float, const char*))(&EdbDataProc::MakeTracksTree) ), 0);
   G__memfunc_setup("ReadTracksTree",1396,G__EIODict_775_0_37, 105, -1, -1, 0, 3, 3, 1, 0, 
"u 'EdbPVRec' - 1 - ali C - - 10 '\"linked_tracks.root\"' fname "
"C - - 10 '\"t.eFlag>-1&&nseg>2&&t.eProb>.01\"' rcut", (char*)NULL, (void*) G__func2void( (int (*)(EdbPVRec&, const char*, const char*))(&EdbDataProc::ReadTracksTree) ), 0);
   G__memfunc_setup("MakeTracksSegmentsList",2248,G__EIODict_775_0_38, 85, G__get_linked_tagnum(&G__EIODictLN_TIndex2), -1, 0, 1, 1, 1, 0, "u 'EdbPVRec' - 1 - ali", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EIODict_775_0_39, 85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbDataProc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EIODict_775_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataProc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EIODict_775_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbDataProc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EIODict_775_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbDataProc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EIODict_775_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EIODict_775_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataProc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EIODict_775_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbDataProc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EIODict_775_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataProc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EIODict_775_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbDataProc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbDataProc", 1049, G__EIODict_775_0_51, (int) ('i'), G__get_linked_tagnum(&G__EIODictLN_EdbDataProc), -1, 0, 1, 1, 1, 0, "u 'EdbDataProc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbDataProc", 1175, G__EIODict_775_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EIODict_775_0_53, (int) ('u'), G__get_linked_tagnum(&G__EIODictLN_EdbDataProc), -1, 1, 1, 1, 1, 0, "u 'EdbDataProc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbTraceBack(void) {
   /* EdbTraceBack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EIODictLN_EdbTraceBack));
   G__memfunc_setup("SetBaseTrackVid",1471,G__EIODict_776_0_1, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'EdbSegP' - 1 - s i - - 0 - plate "
"i - - 0 - piece i - - 0 - entry", (char*)NULL, (void*) G__func2void( (void (*)(EdbSegP&, int, int, int))(&EdbTraceBack::SetBaseTrackVid) ), 0);
   G__memfunc_setup("FromBaseTrackVid",1575,G__EIODict_776_0_2, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'EdbSegP' - 1 - s i - - 1 - plate "
"i - - 1 - piece i - - 1 - entry", (char*)NULL, (void*) G__func2void( (void (*)(EdbSegP&, int&, int&, int&))(&EdbTraceBack::FromBaseTrackVid) ), 0);
   G__memfunc_setup("Class",502,G__EIODict_776_0_3, 85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbTraceBack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EIODict_776_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTraceBack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EIODict_776_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbTraceBack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EIODict_776_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbTraceBack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EIODict_776_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EIODict_776_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTraceBack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EIODict_776_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTraceBack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EIODict_776_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTraceBack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EIODict_776_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTraceBack::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("EdbTraceBack", 1131, G__EIODict_776_0_15, (int) ('i'), G__get_linked_tagnum(&G__EIODictLN_EdbTraceBack), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("EdbTraceBack", 1131, G__EIODict_776_0_16, (int) ('i'), G__get_linked_tagnum(&G__EIODictLN_EdbTraceBack), -1, 0, 1, 1, 1, 0, "u 'EdbTraceBack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbTraceBack", 1257, G__EIODict_776_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EIODict_776_0_18, (int) ('u'), G__get_linked_tagnum(&G__EIODictLN_EdbTraceBack), -1, 1, 1, 1, 1, 0, "u 'EdbTraceBack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbRunAccess(void) {
   /* EdbRunAccess */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess));
   G__memfunc_setup("EdbRunAccess",1170,G__EIODict_777_0_1, 105, G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbRunAccess",1170,G__EIODict_777_0_2, 105, G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess), -1, 0, 1, 1, 1, 0, "U 'EdbRun' - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbRunAccess",1170,G__EIODict_777_0_3, 105, G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess), -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawSegmentN",1387,G__EIODict_777_0_4, 85, G__get_linked_tagnum(&G__EIODictLN_EdbSegment), -1, 0, 3, 1, 1, 0, 
"i - - 0 - vid i - - 0 - sid "
"i - - 0 '0' rs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawSegment",1309,G__EIODict_777_0_5, 85, G__get_linked_tagnum(&G__EIODictLN_EdbSegment), -1, 0, 3, 1, 1, 0, 
"i - - 0 - vid i - - 0 - sid "
"i - - 0 '0' rs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawSegment",1309,G__EIODict_777_0_6, 85, G__get_linked_tagnum(&G__EIODictLN_EdbSegment), -1, 0, 3, 1, 1, 0, 
"u 'EdbView' - 1 - v i - - 0 - sid "
"i - - 0 '0' rs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyCorrections",1681,G__EIODict_777_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbView' - 11 - view u 'EdbSegment' - 1 - s "
"i - - 10 - rs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EIODict_777_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPixelCorrection",1862,G__EIODict_777_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearCuts",902,G__EIODict_777_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitRun",713,G__EIODict_777_0_11, 103, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' runfile g - - 0 'false' do_update", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitRunFromRWC",1353,G__EIODict_777_0_12, 103, -1, -1, 0, 3, 1, 1, 0, 
"C - - 0 - rwcname g - - 0 'true' bAddRWD "
"C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRWDToRun",1006,G__EIODict_777_0_13, 103, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - rwdname C - - 10 '\"\"' options", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EIODict_777_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintStat",937,G__EIODict_777_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckRunLine",1179,G__EIODict_777_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Check0Views",1052,G__EIODict_777_0_17, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat i - - 0 '1' thres", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckEmptyViews",1531,G__EIODict_777_0_18, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPattern' - 1 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckMeanSegsPerView",1971,G__EIODict_777_0_19, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPattern' - 1 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckViewStep",1301,G__EIODict_777_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckViewStep",1301,G__EIODict_777_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ud", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckUpDownOffsets",1813,G__EIODict_777_0_22, 85, G__get_linked_tagnum(&G__EIODictLN_TH2F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckViewSize",1300,G__EIODict_777_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRun",597,G__EIODict_777_0_24, 85, G__get_linked_tagnum(&G__EIODictLN_EdbRun), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMakeLayer",1179,G__EIODict_777_0_25, 85, G__get_linked_tagnum(&G__EIODictLN_EdbLayer), -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayer",797,G__EIODict_777_0_26, 85, G__get_linked_tagnum(&G__EIODictLN_EdbLayer), -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillVP",557,G__EIODict_777_0_27, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVP",454,G__EIODict_777_0_28, 85, G__get_linked_tagnum(&G__EIODictLN_EdbPattern), -1, 0, 1, 1, 1, 8, "i - - 0 - ud", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FirstArea",897,G__EIODict_777_0_29, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LastArea",781,G__EIODict_777_0_30, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolumeArea",1297,G__EIODict_777_0_31, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbPatternsVolume' - 1 - vol i - - 0 - area", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolumeData",1298,G__EIODict_777_0_32, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbPatternsVolume' - 1 - vol i - - 0 - nviews "
"u 'TArrayI' - 1 - srt i - - 1 - nrej", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetViewsArea",1191,G__EIODict_777_0_33, 105, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 - ud u 'TArrayI' - 1 - entr "
"i - - 0 - area f - - 1 - xmin "
"f - - 1 - xmax f - - 1 - ymin "
"f - - 1 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetViewsArea",1191,G__EIODict_777_0_34, 105, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - ud u 'TArrayI' - 1 - entr "
"f - - 0 - xmin f - - 0 - xmax "
"f - - 0 - ymin f - - 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetViewsAreaMarg",1582,G__EIODict_777_0_35, 105, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - ud u 'TArrayI' - 1 - entr "
"i - - 0 - area f - - 0 - xmarg "
"f - - 0 - ymarg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetViewsXY",991,G__EIODict_777_0_36, 105, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - ud u 'TArrayI' - 1 - entr "
"f - - 0 - x f - - 0 - y "
"f - - 0 '200.' r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryXY",995,G__EIODict_777_0_37, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - ud f - - 0 - x "
"f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolumeXY",1097,G__EIODict_777_0_38, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s u 'EdbPatternsVolume' - 1 - vol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternXYcut",1531,G__EIODict_777_0_39, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbSegP' - 1 - s i - - 0 - side "
"u 'EdbPattern' - 1 - pat f - - 0 - dr "
"f - - 0 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternXY",1199,G__EIODict_777_0_40, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbSegP' - 1 - s i - - 0 - side "
"u 'EdbPattern' - 1 - pat f - - 0 '200' rmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternData",1400,G__EIODict_777_0_41, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbPattern' - 1 - pat i - - 0 - side "
"i - - 0 - nviews u 'TArrayI' - 1 - srt "
"i - - 1 - nrej", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPatternDataForPrediction",2736,G__EIODict_777_0_42, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - id i - - 0 - side "
"u 'EdbPattern' - 1 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AcceptRawSegment",1613,G__EIODict_777_0_43, 103, -1, -1, 0, 4, 1, 1, 0, 
"U 'EdbView' - 0 - view i - - 0 - ud "
"u 'EdbSegP' - 1 - segP i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ViewSide",800,G__EIODict_777_0_44, 105, -1, -1, 0, 1, 1, 1, 8, "U 'EdbView' - 10 - view", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SegmentWeight",1339,G__EIODict_777_0_45, 102, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegment' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PassCuts",822,G__EIODict_777_0_46, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ud u 'EdbSegment' - 1 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NCuts",493,G__EIODict_777_0_47, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ud", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegmentAtExternalSurface",2752,G__EIODict_777_0_48, 103, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbSegment' - 0 - seg i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawSegmentPix",1614,G__EIODict_777_0_49, 102, -1, -1, 0, 1, 1, 1, 0, "U 'EdbSegment' - 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateSegmentChi2",1959,G__EIODict_777_0_50, 102, -1, -1, 0, 4, 1, 1, 0, 
"U 'EdbSegment' - 0 - seg f - - 0 - sx "
"f - - 0 - sy f - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegmentCut",1288,G__EIODict_777_0_51, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - xi C - - 10 - cutline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegmentCut",1288,G__EIODict_777_0_52, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - ud i - - 0 - xi "
"F - - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegmentCut",1288,G__EIODict_777_0_53, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - ud i - - 0 - xi "
"F - - 0 - min F - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCut",588,G__EIODict_777_0_54, 85, G__get_linked_tagnum(&G__EIODictLN_EdbSegmentCut), -1, 0, 2, 1, 1, 0, 
"i - - 0 - ud i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCutGR",741,G__EIODict_777_0_55, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCond",688,G__EIODict_777_0_56, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ud u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMakeCond",1058,G__EIODict_777_0_57, 85, G__get_linked_tagnum(&G__EIODictLN_EdbScanCond), -1, 0, 1, 1, 1, 0, "i - - 0 - ud", "TODO?", (void*) NULL, 0);
   G__memfunc_setup("GetCond",676,G__EIODict_777_0_58, 85, G__get_linked_tagnum(&G__EIODictLN_EdbScanCond), -1, 0, 1, 1, 1, 0, "i - - 0 - ud", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OverlapX",817,G__EIODict_777_0_59, 102, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ud", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OverlapY",818,G__EIODict_777_0_60, 102, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ud", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyRawDataXY",1264,G__EIODict_777_0_61, 103, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - x0 f - - 0 - y0 "
"f - - 0 - dR C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCutLeft",995,G__EIODict_777_0_62, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ud f - - 0 - wmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCutRight",1110,G__EIODict_777_0_63, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ud f - - 0 - wmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCutTop",907,G__EIODict_777_0_64, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ud f - - 0 - wmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCutBottom",1229,G__EIODict_777_0_65, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ud f - - 0 - wmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EIODict_777_0_66, 85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbRunAccess::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EIODict_777_0_67, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunAccess::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EIODict_777_0_68, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbRunAccess::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EIODict_777_0_69, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbRunAccess::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EIODict_777_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EIODict_777_0_74, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunAccess::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EIODict_777_0_75, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbRunAccess::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EIODict_777_0_76, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunAccess::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EIODict_777_0_77, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbRunAccess::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbRunAccess", 1170, G__EIODict_777_0_78, (int) ('i'), G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess), -1, 0, 1, 1, 1, 0, "u 'EdbRunAccess' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbRunAccess", 1296, G__EIODict_777_0_79, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EIODict_777_0_80, (int) ('u'), G__get_linked_tagnum(&G__EIODictLN_EdbRunAccess), -1, 1, 1, 1, 1, 0, "u 'EdbRunAccess' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbRunTracking(void) {
   /* EdbRunTracking */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking));
   G__memfunc_setup("EdbRunTracking",1395,G__EIODict_779_0_1, 105, G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbRunTracking",1395,G__EIODict_779_0_2, 105, G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking), -1, 0, 1, 1, 1, 0, "U 'EdbRun' - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbRunTracking",1395,G__EIODict_779_0_3, 105, G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking), -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EIODict_779_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCondMT",849,G__EIODict_779_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCondBT",838,G__EIODict_779_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPred",695,G__EIODict_779_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegP' - 11 - pred", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateFlag",989,G__EIODict_779_0_8, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - flag i - - 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBTHoles",945,G__EIODict_779_0_9, 105, -1, -1, 0, 1, 3, 1, 0, "i - - 0 - flag", (char*)NULL, (void*) G__func2void( (int (*)(int))(&EdbRunTracking::GetBTHoles) ), 0);
   G__memfunc_setup("GetMTHoles",956,G__EIODict_779_0_10, 105, -1, -1, 0, 1, 3, 1, 0, "i - - 0 - flag", (char*)NULL, (void*) G__func2void( (int (*)(int))(&EdbRunTracking::GetMTHoles) ), 0);
   G__memfunc_setup("ExtrapolateCond",1549,G__EIODict_779_0_11, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbScanCond' - 1 - inputcond i - - 0 - flag "
"u 'EdbScanCond' - 1 - outputcond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCompliments",1548,G__EIODict_779_0_12, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbSegP' - 1 - s u 'EdbPattern' - 1 - pat "
"u 'TObjArray' - 1 - found f - - 0 - chi2max "
"u 'TArrayF' - 1 - chiarr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCandidates",1393,G__EIODict_779_0_13, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbSegP' - 1 - spred u 'EdbPattern' - 1 - fndbt "
"u 'EdbPattern' - 1 - fnds1 u 'EdbPattern' - 1 - fnds2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCandidateMT",1439,G__EIODict_779_0_14, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbPattern' - 1 - fnds1 u 'EdbPattern' - 1 - fnds2 "
"u 'EdbSegP' - 1 - fnd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBestCandidate",1676,G__EIODict_779_0_15, 105, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbPattern' - 1 - fndbt u 'EdbSegP' - 1 - fnd "
"u 'EdbPattern' - 1 - cnd f - - 0 - wmin "
"f - - 0 - wmindegrad f - - 0 - chi2max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPrediction",1426,G__EIODict_779_0_16, 105, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbSegP' - 1 - spred u 'EdbSegP' - 1 - fndbt "
"u 'EdbSegP' - 1 - fnds1 u 'EdbSegP' - 1 - fnds2 "
"u 'EdbSegP' - 1 - snewpred", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformFromPlateRS",2027,G__EIODict_779_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPlateP' - 1 - plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTrack",886,G__EIODict_779_0_18, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbTrackP' - 1 - pred u 'EdbTrackP' - 1 - found "
"u 'EdbPlateP' - 1 - plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EIODict_779_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseSBtree",1083,G__EIODict_779_0_20, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) G__func2void( (void (*)(TTree*))(&EdbRunTracking::CloseSBtree) ), 0);
   G__memfunc_setup("InitSBtree",985,G__EIODict_779_0_21, 85, G__get_linked_tagnum(&G__EIODictLN_TTree), -1, 0, 2, 3, 1, 0, 
"C - - 10 '\"sbt.root\"' file_name C - - 10 '\"RECREATE\"' mode", (char*)NULL, (void*) G__func2void( (TTree* (*)(const char*, const char*))(&EdbRunTracking::InitSBtree) ), 0);
   G__memfunc_setup("UpdateSBtree",1192,G__EIODict_779_0_22, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'TTree' - 1 - tsbt I - - 0 - idp "
"I - - 0 - idf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSBtreeEntry",1399,G__EIODict_779_0_23, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - entry u 'TTree' - 1 - tsbt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EIODict_779_0_24, 85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbRunTracking::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EIODict_779_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunTracking::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EIODict_779_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbRunTracking::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EIODict_779_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbRunTracking::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EIODict_779_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EIODict_779_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunTracking::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EIODict_779_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbRunTracking::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EIODict_779_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunTracking::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EIODict_779_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbRunTracking::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbRunTracking", 1395, G__EIODict_779_0_36, (int) ('i'), G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking), -1, 0, 1, 1, 1, 0, "u 'EdbRunTracking' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbRunTracking", 1521, G__EIODict_779_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EIODict_779_0_38, (int) ('u'), G__get_linked_tagnum(&G__EIODictLN_EdbRunTracking), -1, 1, 1, 1, 1, 0, "u 'EdbRunTracking' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbRunParent(void) {
   /* EdbRunParent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EIODictLN_EdbRunParent));
   G__memfunc_setup("EdbRunParent",1194,G__EIODict_780_0_1, 105, G__get_linked_tagnum(&G__EIODictLN_EdbRunParent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindParentCandidates",2011,G__EIODict_780_0_2, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbSegP' - 1 - s u 'EdbPattern' - 1 - fndbt "
"u 'EdbPattern' - 1 - fnds1 u 'EdbPattern' - 1 - fnds2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindComplimentsIP",1701,G__EIODict_780_0_3, 105, -1, -1, 0, 3, 1, 1, 0, 
"u 'EdbSegP' - 1 - s u 'EdbPattern' - 1 - pat "
"u 'TObjArray' - 1 - found", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EIODict_780_0_4, 85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbRunParent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EIODict_780_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunParent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EIODict_780_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbRunParent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EIODict_780_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbRunParent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EIODictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EIODict_780_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EIODict_780_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunParent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EIODict_780_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbRunParent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EIODict_780_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunParent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EIODict_780_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbRunParent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbRunParent", 1194, G__EIODict_780_0_16, (int) ('i'), G__get_linked_tagnum(&G__EIODictLN_EdbRunParent), -1, 0, 1, 1, 1, 0, "u 'EdbRunParent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbRunParent", 1320, G__EIODict_780_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EIODict_780_0_18, (int) ('u'), G__get_linked_tagnum(&G__EIODictLN_EdbRunParent), -1, 1, 1, 1, 1, 0, "u 'EdbRunParent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncEIODict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalEIODict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcEIODict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__EIODictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__EIODictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR = { "iterator<random_access_iterator_tag,char,long,char*,char&>" , 115 , -1 };
G__linked_taginfo G__EIODictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__EIODictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__EIODictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__EIODictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__EIODictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__EIODictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__EIODictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TCut = { "TCut" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbMask = { "EdbMask" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbAffine2D = { "EdbAffine2D" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__EIODictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbSegment = { "EdbSegment" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbViewHeader = { "EdbViewHeader" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbView = { "EdbView" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbRun = { "EdbRun" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbSegP = { "EdbSegP" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TIndexCell = { "TIndexCell" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbTrackP = { "EdbTrackP" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbPattern = { "EdbPattern" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbPatternsVolume = { "EdbPatternsVolume" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbH2 = { "EdbH2" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbLayer = { "EdbLayer" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbScanCond = { "EdbScanCond" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbSegCouple = { "EdbSegCouple" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TIndex2 = { "TIndex2" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbPVRec = { "EdbPVRec" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbSegmentCut = { "EdbSegmentCut" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbDataPiece = { "EdbDataPiece" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbDataSet = { "EdbDataSet" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbDataProc = { "EdbDataProc" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbTraceBack = { "EdbTraceBack" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbRunAccess = { "EdbRunAccess" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbPlateP = { "EdbPlateP" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbRunTracking = { "EdbRunTracking" , 99 , -1 };
G__linked_taginfo G__EIODictLN_EdbRunParent = { "EdbRunParent" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableEIODict() {
  G__EIODictLN_TClass.tagnum = -1 ;
  G__EIODictLN_TBuffer.tagnum = -1 ;
  G__EIODictLN_TMemberInspector.tagnum = -1 ;
  G__EIODictLN_TObject.tagnum = -1 ;
  G__EIODictLN_TNamed.tagnum = -1 ;
  G__EIODictLN_TString.tagnum = -1 ;
  G__EIODictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR.tagnum = -1 ;
  G__EIODictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__EIODictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EIODictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__EIODictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EIODictLN_TObjArray.tagnum = -1 ;
  G__EIODictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__EIODictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EIODictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__EIODictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EIODictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__EIODictLN_TFile.tagnum = -1 ;
  G__EIODictLN_TCut.tagnum = -1 ;
  G__EIODictLN_EdbMask.tagnum = -1 ;
  G__EIODictLN_EdbAffine2D.tagnum = -1 ;
  G__EIODictLN_TTree.tagnum = -1 ;
  G__EIODictLN_TArrayI.tagnum = -1 ;
  G__EIODictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__EIODictLN_TArrayF.tagnum = -1 ;
  G__EIODictLN_TH2F.tagnum = -1 ;
  G__EIODictLN_EdbSegment.tagnum = -1 ;
  G__EIODictLN_EdbViewHeader.tagnum = -1 ;
  G__EIODictLN_EdbView.tagnum = -1 ;
  G__EIODictLN_EdbRun.tagnum = -1 ;
  G__EIODictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__EIODictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__EIODictLN_EdbSegP.tagnum = -1 ;
  G__EIODictLN_TIndexCell.tagnum = -1 ;
  G__EIODictLN_EdbTrackP.tagnum = -1 ;
  G__EIODictLN_EdbPattern.tagnum = -1 ;
  G__EIODictLN_EdbPatternsVolume.tagnum = -1 ;
  G__EIODictLN_EdbH2.tagnum = -1 ;
  G__EIODictLN_EdbLayer.tagnum = -1 ;
  G__EIODictLN_EdbScanCond.tagnum = -1 ;
  G__EIODictLN_EdbSegCouple.tagnum = -1 ;
  G__EIODictLN_TIndex2.tagnum = -1 ;
  G__EIODictLN_EdbPVRec.tagnum = -1 ;
  G__EIODictLN_EdbSegmentCut.tagnum = -1 ;
  G__EIODictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__EIODictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__EIODictLN_EdbDataPiece.tagnum = -1 ;
  G__EIODictLN_EdbDataSet.tagnum = -1 ;
  G__EIODictLN_EdbDataProc.tagnum = -1 ;
  G__EIODictLN_EdbTraceBack.tagnum = -1 ;
  G__EIODictLN_EdbRunAccess.tagnum = -1 ;
  G__EIODictLN_EdbPlateP.tagnum = -1 ;
  G__EIODictLN_EdbRunTracking.tagnum = -1 ;
  G__EIODictLN_EdbRunParent.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableEIODict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__EIODictLN_TClass);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TObject);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TString);
   G__get_linked_tagnum_fwd(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__EIODictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TFile);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TCut);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbMask);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbAffine2D);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TTree);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__EIODictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbSegment);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbViewHeader);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbView);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbRun);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbSegP);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TIndexCell);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbTrackP);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbPattern);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbPatternsVolume);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbH2);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbLayer);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbScanCond);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbSegCouple);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TIndex2);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbPVRec);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbSegmentCut);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EIODictLN_TMatrixTSparseDiaglEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EIODictLN_EdbDataPiece),sizeof(EdbDataPiece),-1,62720,"Edb raw data unit (scanned plate) associated with run file",G__setup_memvarEdbDataPiece,G__setup_memfuncEdbDataPiece);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EIODictLN_EdbDataSet),sizeof(EdbDataSet),-1,62720,"OPERA emulsion data set",G__setup_memvarEdbDataSet,G__setup_memfuncEdbDataSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EIODictLN_EdbDataProc),sizeof(EdbDataProc),-1,62720,"emulsion data processing",G__setup_memvarEdbDataProc,G__setup_memfuncEdbDataProc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EIODictLN_EdbTraceBack),sizeof(EdbTraceBack),-1,28672,"define the counters logic here",G__setup_memvarEdbTraceBack,G__setup_memfuncEdbTraceBack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EIODictLN_EdbRunAccess),sizeof(EdbRunAccess),-1,62720,"helper class for access to the run data",G__setup_memvarEdbRunAccess,G__setup_memfuncEdbRunAccess);
   G__get_linked_tagnum_fwd(&G__EIODictLN_EdbPlateP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EIODictLN_EdbRunTracking),sizeof(EdbRunTracking),-1,62720,"helper class for access to the run data",G__setup_memvarEdbRunTracking,G__setup_memfuncEdbRunTracking);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EIODictLN_EdbRunParent),sizeof(EdbRunParent),-1,62720,"to look for parent bt/mt in raw data",G__setup_memvarEdbRunParent,G__setup_memfuncEdbRunParent);
}
extern "C" void G__cpp_setupEIODict(void) {
  G__check_setup_version(30051515,"G__cpp_setupEIODict()");
  G__set_cpp_environmentEIODict();
  G__cpp_setup_tagtableEIODict();

  G__cpp_setup_inheritanceEIODict();

  G__cpp_setup_typetableEIODict();

  G__cpp_setup_memvarEIODict();

  G__cpp_setup_memfuncEIODict();
  G__cpp_setup_globalEIODict();
  G__cpp_setup_funcEIODict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncEIODict();
  return;
}
class G__cpp_setup_initEIODict {
  public:
    G__cpp_setup_initEIODict() { G__add_setup_func("EIODict",(G__incsetup)(&G__cpp_setupEIODict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initEIODict() { G__remove_setup_func("EIODict"); }
};
G__cpp_setup_initEIODict G__cpp_setup_initializerEIODict;

