//
// File generated by C:\root_v5.34.26\bin\rootcint.EXE at Fri Sep 04 22:30:57 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME EdbDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "EdbDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void EdbAffine2D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbAffine2D(void *p = 0);
   static void *newArray_EdbAffine2D(Long_t size, void *p);
   static void delete_EdbAffine2D(void *p);
   static void deleteArray_EdbAffine2D(void *p);
   static void destruct_EdbAffine2D(void *p);
   static void streamer_EdbAffine2D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbAffine2D*)
   {
      ::EdbAffine2D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbAffine2D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbAffine2D", ::EdbAffine2D::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbAffine.h", 17,
                  typeid(::EdbAffine2D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbAffine2D::Dictionary, isa_proxy, 1,
                  sizeof(::EdbAffine2D) );
      instance.SetNew(&new_EdbAffine2D);
      instance.SetNewArray(&newArray_EdbAffine2D);
      instance.SetDelete(&delete_EdbAffine2D);
      instance.SetDeleteArray(&deleteArray_EdbAffine2D);
      instance.SetDestructor(&destruct_EdbAffine2D);
      instance.SetStreamerFunc(&streamer_EdbAffine2D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbAffine2D*)
   {
      return GenerateInitInstanceLocal((::EdbAffine2D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbAffine2D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbAffine3D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbAffine3D(void *p = 0);
   static void *newArray_EdbAffine3D(Long_t size, void *p);
   static void delete_EdbAffine3D(void *p);
   static void deleteArray_EdbAffine3D(void *p);
   static void destruct_EdbAffine3D(void *p);
   static void streamer_EdbAffine3D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbAffine3D*)
   {
      ::EdbAffine3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbAffine3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbAffine3D", ::EdbAffine3D::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbAffine.h", 86,
                  typeid(::EdbAffine3D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbAffine3D::Dictionary, isa_proxy, 1,
                  sizeof(::EdbAffine3D) );
      instance.SetNew(&new_EdbAffine3D);
      instance.SetNewArray(&newArray_EdbAffine3D);
      instance.SetDelete(&delete_EdbAffine3D);
      instance.SetDeleteArray(&deleteArray_EdbAffine3D);
      instance.SetDestructor(&destruct_EdbAffine3D);
      instance.SetStreamerFunc(&streamer_EdbAffine3D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbAffine3D*)
   {
      return GenerateInitInstanceLocal((::EdbAffine3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbAffine3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPoint_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbPoint(void *p);
   static void deleteArray_EdbPoint(void *p);
   static void destruct_EdbPoint(void *p);
   static void streamer_EdbPoint(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPoint*)
   {
      ::EdbPoint *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPoint >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPoint", ::EdbPoint::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbVirtual.h", 28,
                  typeid(::EdbPoint), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPoint::Dictionary, isa_proxy, 1,
                  sizeof(::EdbPoint) );
      instance.SetDelete(&delete_EdbPoint);
      instance.SetDeleteArray(&deleteArray_EdbPoint);
      instance.SetDestructor(&destruct_EdbPoint);
      instance.SetStreamerFunc(&streamer_EdbPoint);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPoint*)
   {
      return GenerateInitInstanceLocal((::EdbPoint*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPoint*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPoint2D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbPoint2D(void *p);
   static void deleteArray_EdbPoint2D(void *p);
   static void destruct_EdbPoint2D(void *p);
   static void streamer_EdbPoint2D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPoint2D*)
   {
      ::EdbPoint2D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPoint2D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPoint2D", ::EdbPoint2D::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbVirtual.h", 76,
                  typeid(::EdbPoint2D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPoint2D::Dictionary, isa_proxy, 1,
                  sizeof(::EdbPoint2D) );
      instance.SetDelete(&delete_EdbPoint2D);
      instance.SetDeleteArray(&deleteArray_EdbPoint2D);
      instance.SetDestructor(&destruct_EdbPoint2D);
      instance.SetStreamerFunc(&streamer_EdbPoint2D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPoint2D*)
   {
      return GenerateInitInstanceLocal((::EdbPoint2D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPoint2D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPoint3D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbPoint3D(void *p);
   static void deleteArray_EdbPoint3D(void *p);
   static void destruct_EdbPoint3D(void *p);
   static void streamer_EdbPoint3D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPoint3D*)
   {
      ::EdbPoint3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPoint3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPoint3D", ::EdbPoint3D::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbVirtual.h", 101,
                  typeid(::EdbPoint3D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPoint3D::Dictionary, isa_proxy, 1,
                  sizeof(::EdbPoint3D) );
      instance.SetDelete(&delete_EdbPoint3D);
      instance.SetDeleteArray(&deleteArray_EdbPoint3D);
      instance.SetDestructor(&destruct_EdbPoint3D);
      instance.SetStreamerFunc(&streamer_EdbPoint3D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPoint3D*)
   {
      return GenerateInitInstanceLocal((::EdbPoint3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPoint3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbAngle2D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbAngle2D(void *p);
   static void deleteArray_EdbAngle2D(void *p);
   static void destruct_EdbAngle2D(void *p);
   static void streamer_EdbAngle2D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbAngle2D*)
   {
      ::EdbAngle2D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbAngle2D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbAngle2D", ::EdbAngle2D::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbVirtual.h", 53,
                  typeid(::EdbAngle2D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbAngle2D::Dictionary, isa_proxy, 1,
                  sizeof(::EdbAngle2D) );
      instance.SetDelete(&delete_EdbAngle2D);
      instance.SetDeleteArray(&deleteArray_EdbAngle2D);
      instance.SetDestructor(&destruct_EdbAngle2D);
      instance.SetStreamerFunc(&streamer_EdbAngle2D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbAngle2D*)
   {
      return GenerateInitInstanceLocal((::EdbAngle2D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbAngle2D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbTrack2D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbTrack2D(void *p);
   static void deleteArray_EdbTrack2D(void *p);
   static void destruct_EdbTrack2D(void *p);
   static void streamer_EdbTrack2D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbTrack2D*)
   {
      ::EdbTrack2D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbTrack2D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbTrack2D", ::EdbTrack2D::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbVirtual.h", 123,
                  typeid(::EdbTrack2D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbTrack2D::Dictionary, isa_proxy, 1,
                  sizeof(::EdbTrack2D) );
      instance.SetDelete(&delete_EdbTrack2D);
      instance.SetDeleteArray(&deleteArray_EdbTrack2D);
      instance.SetDestructor(&destruct_EdbTrack2D);
      instance.SetStreamerFunc(&streamer_EdbTrack2D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbTrack2D*)
   {
      return GenerateInitInstanceLocal((::EdbTrack2D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbTrack2D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPointsBox2D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbPointsBox2D(void *p);
   static void deleteArray_EdbPointsBox2D(void *p);
   static void destruct_EdbPointsBox2D(void *p);
   static void streamer_EdbPointsBox2D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPointsBox2D*)
   {
      ::EdbPointsBox2D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPointsBox2D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPointsBox2D", ::EdbPointsBox2D::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbVirtual.h", 142,
                  typeid(::EdbPointsBox2D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPointsBox2D::Dictionary, isa_proxy, 1,
                  sizeof(::EdbPointsBox2D) );
      instance.SetDelete(&delete_EdbPointsBox2D);
      instance.SetDeleteArray(&deleteArray_EdbPointsBox2D);
      instance.SetDestructor(&destruct_EdbPointsBox2D);
      instance.SetStreamerFunc(&streamer_EdbPointsBox2D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPointsBox2D*)
   {
      return GenerateInitInstanceLocal((::EdbPointsBox2D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPointsBox2D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPointsBox3D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbPointsBox3D(void *p);
   static void deleteArray_EdbPointsBox3D(void *p);
   static void destruct_EdbPointsBox3D(void *p);
   static void streamer_EdbPointsBox3D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPointsBox3D*)
   {
      ::EdbPointsBox3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPointsBox3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPointsBox3D", ::EdbPointsBox3D::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbVirtual.h", 205,
                  typeid(::EdbPointsBox3D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPointsBox3D::Dictionary, isa_proxy, 1,
                  sizeof(::EdbPointsBox3D) );
      instance.SetDelete(&delete_EdbPointsBox3D);
      instance.SetDeleteArray(&deleteArray_EdbPointsBox3D);
      instance.SetDestructor(&destruct_EdbPointsBox3D);
      instance.SetStreamerFunc(&streamer_EdbPointsBox3D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPointsBox3D*)
   {
      return GenerateInitInstanceLocal((::EdbPointsBox3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPointsBox3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbCluster(void *p = 0);
   static void *newArray_EdbCluster(Long_t size, void *p);
   static void delete_EdbCluster(void *p);
   static void deleteArray_EdbCluster(void *p);
   static void destruct_EdbCluster(void *p);
   static void streamer_EdbCluster(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbCluster*)
   {
      ::EdbCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbCluster", ::EdbCluster::Class_Version(), "./EdbCluster.h", 19,
                  typeid(::EdbCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbCluster::Dictionary, isa_proxy, 1,
                  sizeof(::EdbCluster) );
      instance.SetNew(&new_EdbCluster);
      instance.SetNewArray(&newArray_EdbCluster);
      instance.SetDelete(&delete_EdbCluster);
      instance.SetDeleteArray(&deleteArray_EdbCluster);
      instance.SetDestructor(&destruct_EdbCluster);
      instance.SetStreamerFunc(&streamer_EdbCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbCluster*)
   {
      return GenerateInitInstanceLocal((::EdbCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbClustersBox_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_EdbClustersBox(void *p);
   static void deleteArray_EdbClustersBox(void *p);
   static void destruct_EdbClustersBox(void *p);
   static void streamer_EdbClustersBox(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbClustersBox*)
   {
      ::EdbClustersBox *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbClustersBox >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbClustersBox", ::EdbClustersBox::Class_Version(), "./EdbCluster.h", 118,
                  typeid(::EdbClustersBox), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbClustersBox::Dictionary, isa_proxy, 1,
                  sizeof(::EdbClustersBox) );
      instance.SetDelete(&delete_EdbClustersBox);
      instance.SetDeleteArray(&deleteArray_EdbClustersBox);
      instance.SetDestructor(&destruct_EdbClustersBox);
      instance.SetStreamerFunc(&streamer_EdbClustersBox);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbClustersBox*)
   {
      return GenerateInitInstanceLocal((::EdbClustersBox*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbClustersBox*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbSeg3D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbSeg3D(void *p = 0);
   static void *newArray_EdbSeg3D(Long_t size, void *p);
   static void delete_EdbSeg3D(void *p);
   static void deleteArray_EdbSeg3D(void *p);
   static void destruct_EdbSeg3D(void *p);
   static void streamer_EdbSeg3D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbSeg3D*)
   {
      ::EdbSeg3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbSeg3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbSeg3D", ::EdbSeg3D::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbSegment.h", 19,
                  typeid(::EdbSeg3D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbSeg3D::Dictionary, isa_proxy, 1,
                  sizeof(::EdbSeg3D) );
      instance.SetNew(&new_EdbSeg3D);
      instance.SetNewArray(&newArray_EdbSeg3D);
      instance.SetDelete(&delete_EdbSeg3D);
      instance.SetDeleteArray(&deleteArray_EdbSeg3D);
      instance.SetDestructor(&destruct_EdbSeg3D);
      instance.SetStreamerFunc(&streamer_EdbSeg3D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbSeg3D*)
   {
      return GenerateInitInstanceLocal((::EdbSeg3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbSeg3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbSegment_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbSegment(void *p = 0);
   static void *newArray_EdbSegment(Long_t size, void *p);
   static void delete_EdbSegment(void *p);
   static void deleteArray_EdbSegment(void *p);
   static void destruct_EdbSegment(void *p);
   static void streamer_EdbSegment(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbSegment*)
   {
      ::EdbSegment *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbSegment >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbSegment", ::EdbSegment::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbSegment.h", 61,
                  typeid(::EdbSegment), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbSegment::Dictionary, isa_proxy, 1,
                  sizeof(::EdbSegment) );
      instance.SetNew(&new_EdbSegment);
      instance.SetNewArray(&newArray_EdbSegment);
      instance.SetDelete(&delete_EdbSegment);
      instance.SetDeleteArray(&deleteArray_EdbSegment);
      instance.SetDestructor(&destruct_EdbSegment);
      instance.SetStreamerFunc(&streamer_EdbSegment);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbSegment*)
   {
      return GenerateInitInstanceLocal((::EdbSegment*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbSegment*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbTrack(void *p = 0);
   static void *newArray_EdbTrack(Long_t size, void *p);
   static void delete_EdbTrack(void *p);
   static void deleteArray_EdbTrack(void *p);
   static void destruct_EdbTrack(void *p);
   static void streamer_EdbTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbTrack*)
   {
      ::EdbTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbTrack", ::EdbTrack::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbSegment.h", 125,
                  typeid(::EdbTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbTrack::Dictionary, isa_proxy, 1,
                  sizeof(::EdbTrack) );
      instance.SetNew(&new_EdbTrack);
      instance.SetNewArray(&newArray_EdbTrack);
      instance.SetDelete(&delete_EdbTrack);
      instance.SetDeleteArray(&deleteArray_EdbTrack);
      instance.SetDestructor(&destruct_EdbTrack);
      instance.SetStreamerFunc(&streamer_EdbTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbTrack*)
   {
      return GenerateInitInstanceLocal((::EdbTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbFrame_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbFrame(void *p = 0);
   static void *newArray_EdbFrame(Long_t size, void *p);
   static void delete_EdbFrame(void *p);
   static void deleteArray_EdbFrame(void *p);
   static void destruct_EdbFrame(void *p);
   static void streamer_EdbFrame(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbFrame*)
   {
      ::EdbFrame *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbFrame >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbFrame", ::EdbFrame::Class_Version(), "./EdbFrame.h", 20,
                  typeid(::EdbFrame), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbFrame::Dictionary, isa_proxy, 1,
                  sizeof(::EdbFrame) );
      instance.SetNew(&new_EdbFrame);
      instance.SetNewArray(&newArray_EdbFrame);
      instance.SetDelete(&delete_EdbFrame);
      instance.SetDeleteArray(&deleteArray_EdbFrame);
      instance.SetDestructor(&destruct_EdbFrame);
      instance.SetStreamerFunc(&streamer_EdbFrame);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbFrame*)
   {
      return GenerateInitInstanceLocal((::EdbFrame*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbFrame*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbViewHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbViewHeader(void *p = 0);
   static void *newArray_EdbViewHeader(Long_t size, void *p);
   static void delete_EdbViewHeader(void *p);
   static void deleteArray_EdbViewHeader(void *p);
   static void destruct_EdbViewHeader(void *p);
   static void streamer_EdbViewHeader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbViewHeader*)
   {
      ::EdbViewHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbViewHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbViewHeader", ::EdbViewHeader::Class_Version(), "./EdbView.h", 26,
                  typeid(::EdbViewHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbViewHeader::Dictionary, isa_proxy, 1,
                  sizeof(::EdbViewHeader) );
      instance.SetNew(&new_EdbViewHeader);
      instance.SetNewArray(&newArray_EdbViewHeader);
      instance.SetDelete(&delete_EdbViewHeader);
      instance.SetDeleteArray(&deleteArray_EdbViewHeader);
      instance.SetDestructor(&destruct_EdbViewHeader);
      instance.SetStreamerFunc(&streamer_EdbViewHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbViewHeader*)
   {
      return GenerateInitInstanceLocal((::EdbViewHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbViewHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbView_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbView(void *p = 0);
   static void *newArray_EdbView(Long_t size, void *p);
   static void delete_EdbView(void *p);
   static void deleteArray_EdbView(void *p);
   static void destruct_EdbView(void *p);
   static void streamer_EdbView(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbView*)
   {
      ::EdbView *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbView >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbView", ::EdbView::Class_Version(), "./EdbView.h", 131,
                  typeid(::EdbView), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbView::Dictionary, isa_proxy, 1,
                  sizeof(::EdbView) );
      instance.SetNew(&new_EdbView);
      instance.SetNewArray(&newArray_EdbView);
      instance.SetDelete(&delete_EdbView);
      instance.SetDeleteArray(&deleteArray_EdbView);
      instance.SetDestructor(&destruct_EdbView);
      instance.SetStreamerFunc(&streamer_EdbView);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbView*)
   {
      return GenerateInitInstanceLocal((::EdbView*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbView*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbCCD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbCCD(void *p = 0);
   static void *newArray_EdbCCD(Long_t size, void *p);
   static void delete_EdbCCD(void *p);
   static void deleteArray_EdbCCD(void *p);
   static void destruct_EdbCCD(void *p);
   static void streamer_EdbCCD(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbCCD*)
   {
      ::EdbCCD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbCCD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbCCD", ::EdbCCD::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbStage.h", 21,
                  typeid(::EdbCCD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbCCD::Dictionary, isa_proxy, 1,
                  sizeof(::EdbCCD) );
      instance.SetNew(&new_EdbCCD);
      instance.SetNewArray(&newArray_EdbCCD);
      instance.SetDelete(&delete_EdbCCD);
      instance.SetDeleteArray(&deleteArray_EdbCCD);
      instance.SetDestructor(&destruct_EdbCCD);
      instance.SetStreamerFunc(&streamer_EdbCCD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbCCD*)
   {
      return GenerateInitInstanceLocal((::EdbCCD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbCCD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbObjective_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbObjective(void *p = 0);
   static void *newArray_EdbObjective(Long_t size, void *p);
   static void delete_EdbObjective(void *p);
   static void deleteArray_EdbObjective(void *p);
   static void destruct_EdbObjective(void *p);
   static void streamer_EdbObjective(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbObjective*)
   {
      ::EdbObjective *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbObjective >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbObjective", ::EdbObjective::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbStage.h", 50,
                  typeid(::EdbObjective), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbObjective::Dictionary, isa_proxy, 1,
                  sizeof(::EdbObjective) );
      instance.SetNew(&new_EdbObjective);
      instance.SetNewArray(&newArray_EdbObjective);
      instance.SetDelete(&delete_EdbObjective);
      instance.SetDeleteArray(&deleteArray_EdbObjective);
      instance.SetDestructor(&destruct_EdbObjective);
      instance.SetStreamerFunc(&streamer_EdbObjective);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbObjective*)
   {
      return GenerateInitInstanceLocal((::EdbObjective*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbObjective*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbStage_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbStage(void *p = 0);
   static void *newArray_EdbStage(Long_t size, void *p);
   static void delete_EdbStage(void *p);
   static void deleteArray_EdbStage(void *p);
   static void destruct_EdbStage(void *p);
   static void streamer_EdbStage(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbStage*)
   {
      ::EdbStage *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbStage >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbStage", ::EdbStage::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbStage.h", 85,
                  typeid(::EdbStage), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbStage::Dictionary, isa_proxy, 1,
                  sizeof(::EdbStage) );
      instance.SetNew(&new_EdbStage);
      instance.SetNewArray(&newArray_EdbStage);
      instance.SetDelete(&delete_EdbStage);
      instance.SetDeleteArray(&deleteArray_EdbStage);
      instance.SetDestructor(&destruct_EdbStage);
      instance.SetStreamerFunc(&streamer_EdbStage);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbStage*)
   {
      return GenerateInitInstanceLocal((::EdbStage*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbStage*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbMark_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbMark(void *p = 0);
   static void *newArray_EdbMark(Long_t size, void *p);
   static void delete_EdbMark(void *p);
   static void deleteArray_EdbMark(void *p);
   static void destruct_EdbMark(void *p);
   static void streamer_EdbMark(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbMark*)
   {
      ::EdbMark *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbMark >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbMark", ::EdbMark::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbFiducial.h", 21,
                  typeid(::EdbMark), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbMark::Dictionary, isa_proxy, 1,
                  sizeof(::EdbMark) );
      instance.SetNew(&new_EdbMark);
      instance.SetNewArray(&newArray_EdbMark);
      instance.SetDelete(&delete_EdbMark);
      instance.SetDeleteArray(&deleteArray_EdbMark);
      instance.SetDestructor(&destruct_EdbMark);
      instance.SetStreamerFunc(&streamer_EdbMark);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbMark*)
   {
      return GenerateInitInstanceLocal((::EdbMark*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbMark*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbMarksBox_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbMarksBox(void *p = 0);
   static void *newArray_EdbMarksBox(Long_t size, void *p);
   static void delete_EdbMarksBox(void *p);
   static void deleteArray_EdbMarksBox(void *p);
   static void destruct_EdbMarksBox(void *p);
   static void streamer_EdbMarksBox(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbMarksBox*)
   {
      ::EdbMarksBox *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbMarksBox >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbMarksBox", ::EdbMarksBox::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbFiducial.h", 55,
                  typeid(::EdbMarksBox), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbMarksBox::Dictionary, isa_proxy, 1,
                  sizeof(::EdbMarksBox) );
      instance.SetNew(&new_EdbMarksBox);
      instance.SetNewArray(&newArray_EdbMarksBox);
      instance.SetDelete(&delete_EdbMarksBox);
      instance.SetDeleteArray(&deleteArray_EdbMarksBox);
      instance.SetDestructor(&destruct_EdbMarksBox);
      instance.SetStreamerFunc(&streamer_EdbMarksBox);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbMarksBox*)
   {
      return GenerateInitInstanceLocal((::EdbMarksBox*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbMarksBox*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbMarksSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbMarksSet(void *p = 0);
   static void *newArray_EdbMarksSet(Long_t size, void *p);
   static void delete_EdbMarksSet(void *p);
   static void deleteArray_EdbMarksSet(void *p);
   static void destruct_EdbMarksSet(void *p);
   static void streamer_EdbMarksSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbMarksSet*)
   {
      ::EdbMarksSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbMarksSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbMarksSet", ::EdbMarksSet::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbFiducial.h", 88,
                  typeid(::EdbMarksSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbMarksSet::Dictionary, isa_proxy, 1,
                  sizeof(::EdbMarksSet) );
      instance.SetNew(&new_EdbMarksSet);
      instance.SetNewArray(&newArray_EdbMarksSet);
      instance.SetDelete(&delete_EdbMarksSet);
      instance.SetDeleteArray(&deleteArray_EdbMarksSet);
      instance.SetDestructor(&destruct_EdbMarksSet);
      instance.SetStreamerFunc(&streamer_EdbMarksSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbMarksSet*)
   {
      return GenerateInitInstanceLocal((::EdbMarksSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbMarksSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbArea_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbArea(void *p = 0);
   static void *newArray_EdbArea(Long_t size, void *p);
   static void delete_EdbArea(void *p);
   static void deleteArray_EdbArea(void *p);
   static void destruct_EdbArea(void *p);
   static void streamer_EdbArea(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbArea*)
   {
      ::EdbArea *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbArea >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbArea", ::EdbArea::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbFiducial.h", 134,
                  typeid(::EdbArea), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbArea::Dictionary, isa_proxy, 1,
                  sizeof(::EdbArea) );
      instance.SetNew(&new_EdbArea);
      instance.SetNewArray(&newArray_EdbArea);
      instance.SetDelete(&delete_EdbArea);
      instance.SetDeleteArray(&deleteArray_EdbArea);
      instance.SetDestructor(&destruct_EdbArea);
      instance.SetStreamerFunc(&streamer_EdbArea);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbArea*)
   {
      return GenerateInitInstanceLocal((::EdbArea*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbArea*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPlate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPlate(void *p = 0);
   static void *newArray_EdbPlate(Long_t size, void *p);
   static void delete_EdbPlate(void *p);
   static void deleteArray_EdbPlate(void *p);
   static void destruct_EdbPlate(void *p);
   static void streamer_EdbPlate(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPlate*)
   {
      ::EdbPlate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPlate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPlate", ::EdbPlate::Class_Version(), "./EdbRunHeader.h", 25,
                  typeid(::EdbPlate), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPlate::Dictionary, isa_proxy, 1,
                  sizeof(::EdbPlate) );
      instance.SetNew(&new_EdbPlate);
      instance.SetNewArray(&newArray_EdbPlate);
      instance.SetDelete(&delete_EdbPlate);
      instance.SetDeleteArray(&deleteArray_EdbPlate);
      instance.SetDestructor(&destruct_EdbPlate);
      instance.SetStreamerFunc(&streamer_EdbPlate);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPlate*)
   {
      return GenerateInitInstanceLocal((::EdbPlate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPlate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbCamera_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbCamera(void *p = 0);
   static void *newArray_EdbCamera(Long_t size, void *p);
   static void delete_EdbCamera(void *p);
   static void deleteArray_EdbCamera(void *p);
   static void destruct_EdbCamera(void *p);
   static void streamer_EdbCamera(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbCamera*)
   {
      ::EdbCamera *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbCamera >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbCamera", ::EdbCamera::Class_Version(), "./EdbRunHeader.h", 69,
                  typeid(::EdbCamera), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbCamera::Dictionary, isa_proxy, 1,
                  sizeof(::EdbCamera) );
      instance.SetNew(&new_EdbCamera);
      instance.SetNewArray(&newArray_EdbCamera);
      instance.SetDelete(&delete_EdbCamera);
      instance.SetDeleteArray(&deleteArray_EdbCamera);
      instance.SetDestructor(&destruct_EdbCamera);
      instance.SetStreamerFunc(&streamer_EdbCamera);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbCamera*)
   {
      return GenerateInitInstanceLocal((::EdbCamera*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbCamera*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbRunHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbRunHeader(void *p = 0);
   static void *newArray_EdbRunHeader(Long_t size, void *p);
   static void delete_EdbRunHeader(void *p);
   static void deleteArray_EdbRunHeader(void *p);
   static void destruct_EdbRunHeader(void *p);
   static void streamer_EdbRunHeader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbRunHeader*)
   {
      ::EdbRunHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbRunHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbRunHeader", ::EdbRunHeader::Class_Version(), "./EdbRunHeader.h", 94,
                  typeid(::EdbRunHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbRunHeader::Dictionary, isa_proxy, 1,
                  sizeof(::EdbRunHeader) );
      instance.SetNew(&new_EdbRunHeader);
      instance.SetNewArray(&newArray_EdbRunHeader);
      instance.SetDelete(&delete_EdbRunHeader);
      instance.SetDeleteArray(&deleteArray_EdbRunHeader);
      instance.SetDestructor(&destruct_EdbRunHeader);
      instance.SetStreamerFunc(&streamer_EdbRunHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbRunHeader*)
   {
      return GenerateInitInstanceLocal((::EdbRunHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbRunHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPredictionDC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPredictionDC(void *p = 0);
   static void *newArray_EdbPredictionDC(Long_t size, void *p);
   static void delete_EdbPredictionDC(void *p);
   static void deleteArray_EdbPredictionDC(void *p);
   static void destruct_EdbPredictionDC(void *p);
   static void streamer_EdbPredictionDC(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPredictionDC*)
   {
      ::EdbPredictionDC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPredictionDC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPredictionDC", ::EdbPredictionDC::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbPrediction.h", 21,
                  typeid(::EdbPredictionDC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPredictionDC::Dictionary, isa_proxy, 1,
                  sizeof(::EdbPredictionDC) );
      instance.SetNew(&new_EdbPredictionDC);
      instance.SetNewArray(&newArray_EdbPredictionDC);
      instance.SetDelete(&delete_EdbPredictionDC);
      instance.SetDeleteArray(&deleteArray_EdbPredictionDC);
      instance.SetDestructor(&destruct_EdbPredictionDC);
      instance.SetStreamerFunc(&streamer_EdbPredictionDC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPredictionDC*)
   {
      return GenerateInitInstanceLocal((::EdbPredictionDC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPredictionDC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbPredictionsBox_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPredictionsBox(void *p = 0);
   static void *newArray_EdbPredictionsBox(Long_t size, void *p);
   static void delete_EdbPredictionsBox(void *p);
   static void deleteArray_EdbPredictionsBox(void *p);
   static void destruct_EdbPredictionsBox(void *p);
   static void streamer_EdbPredictionsBox(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPredictionsBox*)
   {
      ::EdbPredictionsBox *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPredictionsBox >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPredictionsBox", ::EdbPredictionsBox::Class_Version(), "d:/documents/prg/fedrasvn/src/libedb/EdbPrediction.h", 71,
                  typeid(::EdbPredictionsBox), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPredictionsBox::Dictionary, isa_proxy, 1,
                  sizeof(::EdbPredictionsBox) );
      instance.SetNew(&new_EdbPredictionsBox);
      instance.SetNewArray(&newArray_EdbPredictionsBox);
      instance.SetDelete(&delete_EdbPredictionsBox);
      instance.SetDeleteArray(&deleteArray_EdbPredictionsBox);
      instance.SetDestructor(&destruct_EdbPredictionsBox);
      instance.SetStreamerFunc(&streamer_EdbPredictionsBox);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPredictionsBox*)
   {
      return GenerateInitInstanceLocal((::EdbPredictionsBox*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPredictionsBox*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbRun_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbRun(void *p = 0);
   static void *newArray_EdbRun(Long_t size, void *p);
   static void delete_EdbRun(void *p);
   static void deleteArray_EdbRun(void *p);
   static void destruct_EdbRun(void *p);
   static void streamer_EdbRun(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbRun*)
   {
      ::EdbRun *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbRun >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbRun", ::EdbRun::Class_Version(), "./EdbRun.h", 74,
                  typeid(::EdbRun), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbRun::Dictionary, isa_proxy, 1,
                  sizeof(::EdbRun) );
      instance.SetNew(&new_EdbRun);
      instance.SetNewArray(&newArray_EdbRun);
      instance.SetDelete(&delete_EdbRun);
      instance.SetDeleteArray(&deleteArray_EdbRun);
      instance.SetDestructor(&destruct_EdbRun);
      instance.SetStreamerFunc(&streamer_EdbRun);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbRun*)
   {
      return GenerateInitInstanceLocal((::EdbRun*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbRun*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbImage_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbImage(void *p = 0);
   static void *newArray_EdbImage(Long_t size, void *p);
   static void delete_EdbImage(void *p);
   static void deleteArray_EdbImage(void *p);
   static void destruct_EdbImage(void *p);
   static void streamer_EdbImage(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbImage*)
   {
      ::EdbImage *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbImage >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbImage", ::EdbImage::Class_Version(), "./EdbImage.h", 23,
                  typeid(::EdbImage), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbImage::Dictionary, isa_proxy, 1,
                  sizeof(::EdbImage) );
      instance.SetNew(&new_EdbImage);
      instance.SetNewArray(&newArray_EdbImage);
      instance.SetDelete(&delete_EdbImage);
      instance.SetDeleteArray(&deleteArray_EdbImage);
      instance.SetDestructor(&destruct_EdbImage);
      instance.SetStreamerFunc(&streamer_EdbImage);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbImage*)
   {
      return GenerateInitInstanceLocal((::EdbImage*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbImage*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr EdbAffine2D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbAffine2D::Class_Name()
{
   return "EdbAffine2D";
}

//______________________________________________________________________________
const char *EdbAffine2D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAffine2D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbAffine2D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAffine2D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbAffine2D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAffine2D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbAffine2D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAffine2D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbAffine3D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbAffine3D::Class_Name()
{
   return "EdbAffine3D";
}

//______________________________________________________________________________
const char *EdbAffine3D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAffine3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbAffine3D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAffine3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbAffine3D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAffine3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbAffine3D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAffine3D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPoint::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPoint::Class_Name()
{
   return "EdbPoint";
}

//______________________________________________________________________________
const char *EdbPoint::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPoint::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPoint::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPoint::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPoint2D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPoint2D::Class_Name()
{
   return "EdbPoint2D";
}

//______________________________________________________________________________
const char *EdbPoint2D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint2D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPoint2D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint2D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPoint2D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint2D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPoint2D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint2D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPoint3D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPoint3D::Class_Name()
{
   return "EdbPoint3D";
}

//______________________________________________________________________________
const char *EdbPoint3D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPoint3D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPoint3D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPoint3D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPoint3D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbAngle2D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbAngle2D::Class_Name()
{
   return "EdbAngle2D";
}

//______________________________________________________________________________
const char *EdbAngle2D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAngle2D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbAngle2D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAngle2D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbAngle2D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAngle2D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbAngle2D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbAngle2D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbTrack2D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbTrack2D::Class_Name()
{
   return "EdbTrack2D";
}

//______________________________________________________________________________
const char *EdbTrack2D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrack2D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbTrack2D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrack2D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbTrack2D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrack2D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbTrack2D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrack2D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPointsBox2D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPointsBox2D::Class_Name()
{
   return "EdbPointsBox2D";
}

//______________________________________________________________________________
const char *EdbPointsBox2D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPointsBox2D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPointsBox2D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPointsBox2D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPointsBox2D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPointsBox2D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPointsBox2D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPointsBox2D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPointsBox3D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPointsBox3D::Class_Name()
{
   return "EdbPointsBox3D";
}

//______________________________________________________________________________
const char *EdbPointsBox3D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPointsBox3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPointsBox3D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPointsBox3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPointsBox3D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPointsBox3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPointsBox3D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPointsBox3D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbCluster::Class_Name()
{
   return "EdbCluster";
}

//______________________________________________________________________________
const char *EdbCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbClustersBox::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbClustersBox::Class_Name()
{
   return "EdbClustersBox";
}

//______________________________________________________________________________
const char *EdbClustersBox::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClustersBox*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbClustersBox::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClustersBox*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbClustersBox::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClustersBox*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbClustersBox::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClustersBox*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbSeg3D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbSeg3D::Class_Name()
{
   return "EdbSeg3D";
}

//______________________________________________________________________________
const char *EdbSeg3D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSeg3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbSeg3D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSeg3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbSeg3D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSeg3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbSeg3D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSeg3D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbSegment::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbSegment::Class_Name()
{
   return "EdbSegment";
}

//______________________________________________________________________________
const char *EdbSegment::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegment*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbSegment::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegment*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbSegment::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegment*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbSegment::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbSegment*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbTrack::Class_Name()
{
   return "EdbTrack";
}

//______________________________________________________________________________
const char *EdbTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbFrame::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbFrame::Class_Name()
{
   return "EdbFrame";
}

//______________________________________________________________________________
const char *EdbFrame::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbFrame*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbFrame::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbFrame*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbFrame::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbFrame*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbFrame::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbFrame*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbViewHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbViewHeader::Class_Name()
{
   return "EdbViewHeader";
}

//______________________________________________________________________________
const char *EdbViewHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbViewHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbViewHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbViewHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbView::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbView::Class_Name()
{
   return "EdbView";
}

//______________________________________________________________________________
const char *EdbView::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbView*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbView::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbView*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbView::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbView*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbView::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbView*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbCCD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbCCD::Class_Name()
{
   return "EdbCCD";
}

//______________________________________________________________________________
const char *EdbCCD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCCD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbCCD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCCD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbCCD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCCD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbCCD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCCD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbObjective::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbObjective::Class_Name()
{
   return "EdbObjective";
}

//______________________________________________________________________________
const char *EdbObjective::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbObjective*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbObjective::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbObjective*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbObjective::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbObjective*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbObjective::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbObjective*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbStage::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbStage::Class_Name()
{
   return "EdbStage";
}

//______________________________________________________________________________
const char *EdbStage::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbStage*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbStage::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbStage*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbStage::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbStage*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbStage::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbStage*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbMark::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbMark::Class_Name()
{
   return "EdbMark";
}

//______________________________________________________________________________
const char *EdbMark::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMark*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbMark::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMark*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbMark::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMark*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbMark::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMark*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbMarksBox::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbMarksBox::Class_Name()
{
   return "EdbMarksBox";
}

//______________________________________________________________________________
const char *EdbMarksBox::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMarksBox*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbMarksBox::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMarksBox*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbMarksBox::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMarksBox*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbMarksBox::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMarksBox*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbMarksSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbMarksSet::Class_Name()
{
   return "EdbMarksSet";
}

//______________________________________________________________________________
const char *EdbMarksSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMarksSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbMarksSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMarksSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbMarksSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMarksSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbMarksSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbMarksSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbArea::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbArea::Class_Name()
{
   return "EdbArea";
}

//______________________________________________________________________________
const char *EdbArea::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbArea*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbArea::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbArea*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbArea::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbArea*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbArea::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbArea*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPlate::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPlate::Class_Name()
{
   return "EdbPlate";
}

//______________________________________________________________________________
const char *EdbPlate::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPlate::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPlate::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPlate::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPlate*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbCamera::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbCamera::Class_Name()
{
   return "EdbCamera";
}

//______________________________________________________________________________
const char *EdbCamera::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCamera*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbCamera::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCamera*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbCamera::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCamera*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbCamera::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbCamera*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbRunHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbRunHeader::Class_Name()
{
   return "EdbRunHeader";
}

//______________________________________________________________________________
const char *EdbRunHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbRunHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbRunHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbRunHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRunHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPredictionDC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPredictionDC::Class_Name()
{
   return "EdbPredictionDC";
}

//______________________________________________________________________________
const char *EdbPredictionDC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPredictionDC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPredictionDC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPredictionDC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPredictionDC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPredictionDC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPredictionDC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPredictionDC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbPredictionsBox::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPredictionsBox::Class_Name()
{
   return "EdbPredictionsBox";
}

//______________________________________________________________________________
const char *EdbPredictionsBox::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPredictionsBox*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPredictionsBox::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPredictionsBox*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPredictionsBox::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPredictionsBox*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPredictionsBox::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPredictionsBox*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbRun::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbRun::Class_Name()
{
   return "EdbRun";
}

//______________________________________________________________________________
const char *EdbRun::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRun*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbRun::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRun*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbRun::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRun*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbRun::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbRun*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbImage::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbImage::Class_Name()
{
   return "EdbImage";
}

//______________________________________________________________________________
const char *EdbImage::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbImage*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbImage::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbImage*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbImage::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbImage*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbImage::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbImage*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void EdbRun::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbRun.
      typedef ::EdbRun msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHeader", &eHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eView", &eView);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eTree", &eTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFile", &eFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePath", &ePath);
      R__insp.InspectMember(ePath, "ePath.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePredictions", &ePredictions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eViewMerge", &eViewMerge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eViewAlign", &eViewAlign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFrameAlign", &eFrameAlign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePinViews", &ePinViews);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVM", (void*)&eVM);
      R__insp.InspectMember("AlignmentParView", (void*)&eVM, "eVM.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVA", (void*)&eVA);
      R__insp.InspectMember("AlignmentParView", (void*)&eVA, "eVA.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFA", (void*)&eFA);
      R__insp.InspectMember("AlignmentParFrame", (void*)&eFA, "eFA.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePVH", &ePVH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eMarks", &eMarks);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbRun(void *p) {
      return  p ? new(p) ::EdbRun : new ::EdbRun;
   }
   static void *newArray_EdbRun(Long_t nElements, void *p) {
      return p ? new(p) ::EdbRun[nElements] : new ::EdbRun[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbRun(void *p) {
      delete ((::EdbRun*)p);
   }
   static void deleteArray_EdbRun(void *p) {
      delete [] ((::EdbRun*)p);
   }
   static void destruct_EdbRun(void *p) {
      typedef ::EdbRun current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbRun(TBuffer &buf, void *obj) {
      ((::EdbRun*)obj)->::EdbRun::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbRun

//______________________________________________________________________________
void EdbRunHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbRunHeader.
      typedef ::EdbRunHeader msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRunID", &eRunID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFlag[10]", eFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStartTime", &eStartTime);
      R__insp.InspectMember(eStartTime, "eStartTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFinishTime", &eFinishTime);
      R__insp.InspectMember(eFinishTime, "eFinishTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSystemStartTime", &eSystemStartTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCPU", &eCPU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eComment", &eComment);
      R__insp.InspectMember(eComment, "eComment.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eArea", &eArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePlate", &ePlate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eStage", &eStage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmin", &eXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmax", &eXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmin", &eYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmax", &eYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNareas", &eNareas);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbRunHeader(void *p) {
      return  p ? new(p) ::EdbRunHeader : new ::EdbRunHeader;
   }
   static void *newArray_EdbRunHeader(Long_t nElements, void *p) {
      return p ? new(p) ::EdbRunHeader[nElements] : new ::EdbRunHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbRunHeader(void *p) {
      delete ((::EdbRunHeader*)p);
   }
   static void deleteArray_EdbRunHeader(void *p) {
      delete [] ((::EdbRunHeader*)p);
   }
   static void destruct_EdbRunHeader(void *p) {
      typedef ::EdbRunHeader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbRunHeader(TBuffer &buf, void *obj) {
      ((::EdbRunHeader*)obj)->::EdbRunHeader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbRunHeader

//______________________________________________________________________________
void EdbCamera::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbCamera.
      typedef ::EdbCamera msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eWidth", &eWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eHeight", &eHeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRows", &eRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eColumns", &eColumns);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbCamera(void *p) {
      return  p ? new(p) ::EdbCamera : new ::EdbCamera;
   }
   static void *newArray_EdbCamera(Long_t nElements, void *p) {
      return p ? new(p) ::EdbCamera[nElements] : new ::EdbCamera[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbCamera(void *p) {
      delete ((::EdbCamera*)p);
   }
   static void deleteArray_EdbCamera(void *p) {
      delete [] ((::EdbCamera*)p);
   }
   static void destruct_EdbCamera(void *p) {
      typedef ::EdbCamera current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbCamera(TBuffer &buf, void *obj) {
      ((::EdbCamera*)obj)->::EdbCamera::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbCamera

//______________________________________________________________________________
void EdbPlate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPlate.
      typedef ::EdbPlate msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID", &eID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eUp", &eUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBase", &eBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDown", &eDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eShrinkageU", &eShrinkageU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eShrinkageD", &eShrinkageD);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPlate(void *p) {
      return  p ? new(p) ::EdbPlate : new ::EdbPlate;
   }
   static void *newArray_EdbPlate(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPlate[nElements] : new ::EdbPlate[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPlate(void *p) {
      delete ((::EdbPlate*)p);
   }
   static void deleteArray_EdbPlate(void *p) {
      delete [] ((::EdbPlate*)p);
   }
   static void destruct_EdbPlate(void *p) {
      typedef ::EdbPlate current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPlate(TBuffer &buf, void *obj) {
      ((::EdbPlate*)obj)->::EdbPlate::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPlate

//______________________________________________________________________________
void EdbView::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbView.
      typedef ::EdbView msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHeader", &eHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eClusters", &eClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eSegments", &eSegments);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eTracks", &eTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFrames", &eFrames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eLastSystemTime", &eLastSystemTime);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbView(void *p) {
      return  p ? new(p) ::EdbView : new ::EdbView;
   }
   static void *newArray_EdbView(Long_t nElements, void *p) {
      return p ? new(p) ::EdbView[nElements] : new ::EdbView[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbView(void *p) {
      delete ((::EdbView*)p);
   }
   static void deleteArray_EdbView(void *p) {
      delete [] ((::EdbView*)p);
   }
   static void destruct_EdbView(void *p) {
      typedef ::EdbView current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbView(TBuffer &buf, void *obj) {
      ((::EdbView*)obj)->::EdbView::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbView

//______________________________________________________________________________
void EdbViewHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbViewHeader.
      typedef ::EdbViewHeader msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eViewID", &eViewID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAreaID", &eAreaID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXview", &eXview);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYview", &eYview);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ1", &eZ1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ2", &eZ2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ3", &eZ3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ4", &eZ4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNframesTop", &eNframesTop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNframesBot", &eNframesBot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTime", &eTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNclusters", &eNclusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNsegments", &eNsegments);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAff", &eAff);
      R__insp.InspectMember(eAff, "eAff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eZlevels", &eZlevels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCol", &eCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRow", &eRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStatus", &eStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eEvent", &eEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTrack", &eTrack);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbViewHeader(void *p) {
      return  p ? new(p) ::EdbViewHeader : new ::EdbViewHeader;
   }
   static void *newArray_EdbViewHeader(Long_t nElements, void *p) {
      return p ? new(p) ::EdbViewHeader[nElements] : new ::EdbViewHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbViewHeader(void *p) {
      delete ((::EdbViewHeader*)p);
   }
   static void deleteArray_EdbViewHeader(void *p) {
      delete [] ((::EdbViewHeader*)p);
   }
   static void destruct_EdbViewHeader(void *p) {
      typedef ::EdbViewHeader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbViewHeader(TBuffer &buf, void *obj) {
      ((::EdbViewHeader*)obj)->::EdbViewHeader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbViewHeader

//______________________________________________________________________________
void EdbCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbCluster.
      typedef ::EdbCluster msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX", &eX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY", &eY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ", &eZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eArea", &eArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVolume", &eVolume);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFrame", &eFrame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSide", &eSide);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSegment", &eSegment);
      TObject::ShowMembers(R__insp);
      EdbPoint3D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbCluster(void *p) {
      return  p ? new(p) ::EdbCluster : new ::EdbCluster;
   }
   static void *newArray_EdbCluster(Long_t nElements, void *p) {
      return p ? new(p) ::EdbCluster[nElements] : new ::EdbCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbCluster(void *p) {
      delete ((::EdbCluster*)p);
   }
   static void deleteArray_EdbCluster(void *p) {
      delete [] ((::EdbCluster*)p);
   }
   static void destruct_EdbCluster(void *p) {
      typedef ::EdbCluster current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbCluster(TBuffer &buf, void *obj) {
      ((::EdbCluster*)obj)->::EdbCluster::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbCluster

//______________________________________________________________________________
void EdbClustersBox::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbClustersBox.
      typedef ::EdbClustersBox msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eClusters", &eClusters);
      TObject::ShowMembers(R__insp);
      EdbPointsBox3D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbClustersBox(void *p) {
      delete ((::EdbClustersBox*)p);
   }
   static void deleteArray_EdbClustersBox(void *p) {
      delete [] ((::EdbClustersBox*)p);
   }
   static void destruct_EdbClustersBox(void *p) {
      typedef ::EdbClustersBox current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbClustersBox(TBuffer &buf, void *obj) {
      ((::EdbClustersBox*)obj)->::EdbClustersBox::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbClustersBox

//______________________________________________________________________________
void EdbSeg3D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbSeg3D.
      typedef ::EdbSeg3D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX0", &eX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY0", &eY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ0", &eZ0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTx", &eTx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTy", &eTy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDz", &eDz);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbSeg3D(void *p) {
      return  p ? new(p) ::EdbSeg3D : new ::EdbSeg3D;
   }
   static void *newArray_EdbSeg3D(Long_t nElements, void *p) {
      return p ? new(p) ::EdbSeg3D[nElements] : new ::EdbSeg3D[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbSeg3D(void *p) {
      delete ((::EdbSeg3D*)p);
   }
   static void deleteArray_EdbSeg3D(void *p) {
      delete [] ((::EdbSeg3D*)p);
   }
   static void destruct_EdbSeg3D(void *p) {
      typedef ::EdbSeg3D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbSeg3D(TBuffer &buf, void *obj) {
      ((::EdbSeg3D*)obj)->::EdbSeg3D::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbSeg3D

//______________________________________________________________________________
void EdbSegment::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbSegment.
      typedef ::EdbSegment msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSide", &eSide);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePuls", &ePuls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID", &eID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaX", &eSigmaX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaY", &eSigmaY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eElements", &eElements);
      EdbSeg3D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbSegment(void *p) {
      return  p ? new(p) ::EdbSegment : new ::EdbSegment;
   }
   static void *newArray_EdbSegment(Long_t nElements, void *p) {
      return p ? new(p) ::EdbSegment[nElements] : new ::EdbSegment[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbSegment(void *p) {
      delete ((::EdbSegment*)p);
   }
   static void deleteArray_EdbSegment(void *p) {
      delete [] ((::EdbSegment*)p);
   }
   static void destruct_EdbSegment(void *p) {
      typedef ::EdbSegment current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbSegment(TBuffer &buf, void *obj) {
      ((::EdbSegment*)obj)->::EdbSegment::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbSegment

//______________________________________________________________________________
void EdbTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbTrack.
      typedef ::EdbTrack msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID", &eID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eElements", &eElements);
      EdbSeg3D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbTrack(void *p) {
      return  p ? new(p) ::EdbTrack : new ::EdbTrack;
   }
   static void *newArray_EdbTrack(Long_t nElements, void *p) {
      return p ? new(p) ::EdbTrack[nElements] : new ::EdbTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbTrack(void *p) {
      delete ((::EdbTrack*)p);
   }
   static void deleteArray_EdbTrack(void *p) {
      delete [] ((::EdbTrack*)p);
   }
   static void destruct_EdbTrack(void *p) {
      typedef ::EdbTrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbTrack(TBuffer &buf, void *obj) {
      ((::EdbTrack*)obj)->::EdbTrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbTrack

//______________________________________________________________________________
void EdbPredictionDC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPredictionDC.
      typedef ::EdbPredictionDC msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eIDp", &eIDp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eEvent", &eEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFlag", &eFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTy", &eTy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTz", &eTz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYp", &eYp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZp", &eZp);
      TObject::ShowMembers(R__insp);
      EdbTrack2D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPredictionDC(void *p) {
      return  p ? new(p) ::EdbPredictionDC : new ::EdbPredictionDC;
   }
   static void *newArray_EdbPredictionDC(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPredictionDC[nElements] : new ::EdbPredictionDC[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPredictionDC(void *p) {
      delete ((::EdbPredictionDC*)p);
   }
   static void deleteArray_EdbPredictionDC(void *p) {
      delete [] ((::EdbPredictionDC*)p);
   }
   static void destruct_EdbPredictionDC(void *p) {
      typedef ::EdbPredictionDC current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPredictionDC(TBuffer &buf, void *obj) {
      ((::EdbPredictionDC*)obj)->::EdbPredictionDC::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPredictionDC

//______________________________________________________________________________
void EdbPredictionsBox::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPredictionsBox.
      typedef ::EdbPredictionsBox msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePredictions", &ePredictions);
      TObject::ShowMembers(R__insp);
      EdbPointsBox2D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPredictionsBox(void *p) {
      return  p ? new(p) ::EdbPredictionsBox : new ::EdbPredictionsBox;
   }
   static void *newArray_EdbPredictionsBox(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPredictionsBox[nElements] : new ::EdbPredictionsBox[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPredictionsBox(void *p) {
      delete ((::EdbPredictionsBox*)p);
   }
   static void deleteArray_EdbPredictionsBox(void *p) {
      delete [] ((::EdbPredictionsBox*)p);
   }
   static void destruct_EdbPredictionsBox(void *p) {
      typedef ::EdbPredictionsBox current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPredictionsBox(TBuffer &buf, void *obj) {
      ((::EdbPredictionsBox*)obj)->::EdbPredictionsBox::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPredictionsBox

//______________________________________________________________________________
void EdbImage::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbImage.
      typedef ::EdbImage msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eColumns", &eColumns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRows", &eRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eColors", &eColors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eBuffer", &eBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBytes", &eBytes);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbImage(void *p) {
      return  p ? new(p) ::EdbImage : new ::EdbImage;
   }
   static void *newArray_EdbImage(Long_t nElements, void *p) {
      return p ? new(p) ::EdbImage[nElements] : new ::EdbImage[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbImage(void *p) {
      delete ((::EdbImage*)p);
   }
   static void deleteArray_EdbImage(void *p) {
      delete [] ((::EdbImage*)p);
   }
   static void destruct_EdbImage(void *p) {
      typedef ::EdbImage current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbImage(TBuffer &buf, void *obj) {
      ((::EdbImage*)obj)->::EdbImage::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbImage

//______________________________________________________________________________
void EdbFrame::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbFrame.
      typedef ::EdbFrame msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFrameID", &eFrameID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZframe", &eZframe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNcl", &eNcl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNpix", &eNpix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eImage", &eImage);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbFrame(void *p) {
      return  p ? new(p) ::EdbFrame : new ::EdbFrame;
   }
   static void *newArray_EdbFrame(Long_t nElements, void *p) {
      return p ? new(p) ::EdbFrame[nElements] : new ::EdbFrame[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbFrame(void *p) {
      delete ((::EdbFrame*)p);
   }
   static void deleteArray_EdbFrame(void *p) {
      delete [] ((::EdbFrame*)p);
   }
   static void destruct_EdbFrame(void *p) {
      typedef ::EdbFrame current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbFrame(TBuffer &buf, void *obj) {
      ((::EdbFrame*)obj)->::EdbFrame::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbFrame

//______________________________________________________________________________
void EdbCCD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbCCD.
      typedef ::EdbCCD msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNx", &eNx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNy", &eNy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePixX", &ePixX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePixY", &ePixY);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbCCD(void *p) {
      return  p ? new(p) ::EdbCCD : new ::EdbCCD;
   }
   static void *newArray_EdbCCD(Long_t nElements, void *p) {
      return p ? new(p) ::EdbCCD[nElements] : new ::EdbCCD[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbCCD(void *p) {
      delete ((::EdbCCD*)p);
   }
   static void deleteArray_EdbCCD(void *p) {
      delete [] ((::EdbCCD*)p);
   }
   static void destruct_EdbCCD(void *p) {
      typedef ::EdbCCD current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbCCD(TBuffer &buf, void *obj) {
      ((::EdbCCD*)obj)->::EdbCCD::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbCCD

//______________________________________________________________________________
void EdbObjective::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbObjective.
      typedef ::EdbObjective msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMagnification", &eMagnification);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCCD2Stage", &eCCD2Stage);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbObjective(void *p) {
      return  p ? new(p) ::EdbObjective : new ::EdbObjective;
   }
   static void *newArray_EdbObjective(Long_t nElements, void *p) {
      return p ? new(p) ::EdbObjective[nElements] : new ::EdbObjective[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbObjective(void *p) {
      delete ((::EdbObjective*)p);
   }
   static void deleteArray_EdbObjective(void *p) {
      delete [] ((::EdbObjective*)p);
   }
   static void destruct_EdbObjective(void *p) {
      typedef ::EdbObjective current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbObjective(TBuffer &buf, void *obj) {
      ((::EdbObjective*)obj)->::EdbObjective::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbObjective

//______________________________________________________________________________
void EdbStage::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbStage.
      typedef ::EdbStage msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCCD", &eCCD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eObjective", &eObjective);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eEncoders2Stage", &eEncoders2Stage);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbStage(void *p) {
      return  p ? new(p) ::EdbStage : new ::EdbStage;
   }
   static void *newArray_EdbStage(Long_t nElements, void *p) {
      return p ? new(p) ::EdbStage[nElements] : new ::EdbStage[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbStage(void *p) {
      delete ((::EdbStage*)p);
   }
   static void deleteArray_EdbStage(void *p) {
      delete [] ((::EdbStage*)p);
   }
   static void destruct_EdbStage(void *p) {
      typedef ::EdbStage current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbStage(TBuffer &buf, void *obj) {
      ((::EdbStage*)obj)->::EdbStage::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbStage

//______________________________________________________________________________
void EdbAffine2D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbAffine2D.
      typedef ::EdbAffine2D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA11", &eA11);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA12", &eA12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA21", &eA21);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA22", &eA22);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eB1", &eB1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eB2", &eB2);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbAffine2D(void *p) {
      return  p ? new(p) ::EdbAffine2D : new ::EdbAffine2D;
   }
   static void *newArray_EdbAffine2D(Long_t nElements, void *p) {
      return p ? new(p) ::EdbAffine2D[nElements] : new ::EdbAffine2D[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbAffine2D(void *p) {
      delete ((::EdbAffine2D*)p);
   }
   static void deleteArray_EdbAffine2D(void *p) {
      delete [] ((::EdbAffine2D*)p);
   }
   static void destruct_EdbAffine2D(void *p) {
      typedef ::EdbAffine2D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbAffine2D(TBuffer &buf, void *obj) {
      ((::EdbAffine2D*)obj)->::EdbAffine2D::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbAffine2D

//______________________________________________________________________________
void EdbAffine3D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbAffine3D.
      typedef ::EdbAffine3D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA11", &eA11);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA12", &eA12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA13", &eA13);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA21", &eA21);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA22", &eA22);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA23", &eA23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA31", &eA31);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA32", &eA32);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eA33", &eA33);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eB1", &eB1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eB2", &eB2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eB3", &eB3);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbAffine3D(void *p) {
      return  p ? new(p) ::EdbAffine3D : new ::EdbAffine3D;
   }
   static void *newArray_EdbAffine3D(Long_t nElements, void *p) {
      return p ? new(p) ::EdbAffine3D[nElements] : new ::EdbAffine3D[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbAffine3D(void *p) {
      delete ((::EdbAffine3D*)p);
   }
   static void deleteArray_EdbAffine3D(void *p) {
      delete [] ((::EdbAffine3D*)p);
   }
   static void destruct_EdbAffine3D(void *p) {
      typedef ::EdbAffine3D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbAffine3D(TBuffer &buf, void *obj) {
      ((::EdbAffine3D*)obj)->::EdbAffine3D::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbAffine3D

//______________________________________________________________________________
void EdbMark::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbMark.
      typedef ::EdbMark msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eID", &eID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX", &eX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY", &eY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFlag", &eFlag);
      TObject::ShowMembers(R__insp);
      EdbPoint2D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbMark(void *p) {
      return  p ? new(p) ::EdbMark : new ::EdbMark;
   }
   static void *newArray_EdbMark(Long_t nElements, void *p) {
      return p ? new(p) ::EdbMark[nElements] : new ::EdbMark[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbMark(void *p) {
      delete ((::EdbMark*)p);
   }
   static void deleteArray_EdbMark(void *p) {
      delete [] ((::EdbMark*)p);
   }
   static void destruct_EdbMark(void *p) {
      typedef ::EdbMark current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbMark(TBuffer &buf, void *obj) {
      ((::EdbMark*)obj)->::EdbMark::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbMark

//______________________________________________________________________________
void EdbMarksBox::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbMarksBox.
      typedef ::EdbMarksBox msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eMarks", &eMarks);
      TObject::ShowMembers(R__insp);
      EdbPointsBox2D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbMarksBox(void *p) {
      return  p ? new(p) ::EdbMarksBox : new ::EdbMarksBox;
   }
   static void *newArray_EdbMarksBox(Long_t nElements, void *p) {
      return p ? new(p) ::EdbMarksBox[nElements] : new ::EdbMarksBox[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbMarksBox(void *p) {
      delete ((::EdbMarksBox*)p);
   }
   static void deleteArray_EdbMarksBox(void *p) {
      delete [] ((::EdbMarksBox*)p);
   }
   static void destruct_EdbMarksBox(void *p) {
      typedef ::EdbMarksBox current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbMarksBox(TBuffer &buf, void *obj) {
      ((::EdbMarksBox*)obj)->::EdbMarksBox::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbMarksBox

//______________________________________________________________________________
void EdbMarksSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbMarksSet.
      typedef ::EdbMarksSet msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eAbsolute", &eAbsolute);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eStage", &eStage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmin", &eXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmax", &eXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmin", &eYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmax", &eYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBrick", &eBrick);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbMarksSet(void *p) {
      return  p ? new(p) ::EdbMarksSet : new ::EdbMarksSet;
   }
   static void *newArray_EdbMarksSet(Long_t nElements, void *p) {
      return p ? new(p) ::EdbMarksSet[nElements] : new ::EdbMarksSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbMarksSet(void *p) {
      delete ((::EdbMarksSet*)p);
   }
   static void deleteArray_EdbMarksSet(void *p) {
      delete [] ((::EdbMarksSet*)p);
   }
   static void destruct_EdbMarksSet(void *p) {
      typedef ::EdbMarksSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbMarksSet(TBuffer &buf, void *obj) {
      ((::EdbMarksSet*)obj)->::EdbMarksSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbMarksSet

//______________________________________________________________________________
void EdbArea::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbArea.
      typedef ::EdbArea msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eN", &eN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStepX", &eStepX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStepY", &eStepY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFramesTop", &eFramesTop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFramesBot", &eFramesBot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePath", &ePath);
      EdbMarksBox::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbArea(void *p) {
      return  p ? new(p) ::EdbArea : new ::EdbArea;
   }
   static void *newArray_EdbArea(Long_t nElements, void *p) {
      return p ? new(p) ::EdbArea[nElements] : new ::EdbArea[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbArea(void *p) {
      delete ((::EdbArea*)p);
   }
   static void deleteArray_EdbArea(void *p) {
      delete [] ((::EdbArea*)p);
   }
   static void destruct_EdbArea(void *p) {
      typedef ::EdbArea current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbArea(TBuffer &buf, void *obj) {
      ((::EdbArea*)obj)->::EdbArea::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbArea

//______________________________________________________________________________
void EdbPoint::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPoint.
      typedef ::EdbPoint msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbPoint(void *p) {
      delete ((::EdbPoint*)p);
   }
   static void deleteArray_EdbPoint(void *p) {
      delete [] ((::EdbPoint*)p);
   }
   static void destruct_EdbPoint(void *p) {
      typedef ::EdbPoint current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPoint(TBuffer &buf, void *obj) {
      ((::EdbPoint*)obj)->::EdbPoint::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPoint

//______________________________________________________________________________
void EdbPoint2D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPoint2D.
      typedef ::EdbPoint2D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      EdbPoint::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbPoint2D(void *p) {
      delete ((::EdbPoint2D*)p);
   }
   static void deleteArray_EdbPoint2D(void *p) {
      delete [] ((::EdbPoint2D*)p);
   }
   static void destruct_EdbPoint2D(void *p) {
      typedef ::EdbPoint2D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPoint2D(TBuffer &buf, void *obj) {
      ((::EdbPoint2D*)obj)->::EdbPoint2D::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPoint2D

//______________________________________________________________________________
void EdbPointsBox2D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPointsBox2D.
      typedef ::EdbPointsBox2D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eKeep", &eKeep);
      EdbPoint3D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbPointsBox2D(void *p) {
      delete ((::EdbPointsBox2D*)p);
   }
   static void deleteArray_EdbPointsBox2D(void *p) {
      delete [] ((::EdbPointsBox2D*)p);
   }
   static void destruct_EdbPointsBox2D(void *p) {
      typedef ::EdbPointsBox2D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPointsBox2D(TBuffer &buf, void *obj) {
      ((::EdbPointsBox2D*)obj)->::EdbPointsBox2D::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPointsBox2D

//______________________________________________________________________________
void EdbPointsBox3D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPointsBox3D.
      typedef ::EdbPointsBox3D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      EdbPointsBox2D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbPointsBox3D(void *p) {
      delete ((::EdbPointsBox3D*)p);
   }
   static void deleteArray_EdbPointsBox3D(void *p) {
      delete [] ((::EdbPointsBox3D*)p);
   }
   static void destruct_EdbPointsBox3D(void *p) {
      typedef ::EdbPointsBox3D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPointsBox3D(TBuffer &buf, void *obj) {
      ((::EdbPointsBox3D*)obj)->::EdbPointsBox3D::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPointsBox3D

//______________________________________________________________________________
void EdbPoint3D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPoint3D.
      typedef ::EdbPoint3D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      EdbPoint2D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbPoint3D(void *p) {
      delete ((::EdbPoint3D*)p);
   }
   static void deleteArray_EdbPoint3D(void *p) {
      delete [] ((::EdbPoint3D*)p);
   }
   static void destruct_EdbPoint3D(void *p) {
      typedef ::EdbPoint3D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPoint3D(TBuffer &buf, void *obj) {
      ((::EdbPoint3D*)obj)->::EdbPoint3D::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPoint3D

//______________________________________________________________________________
void EdbAngle2D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbAngle2D.
      typedef ::EdbAngle2D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbAngle2D(void *p) {
      delete ((::EdbAngle2D*)p);
   }
   static void deleteArray_EdbAngle2D(void *p) {
      delete [] ((::EdbAngle2D*)p);
   }
   static void destruct_EdbAngle2D(void *p) {
      typedef ::EdbAngle2D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbAngle2D(TBuffer &buf, void *obj) {
      ((::EdbAngle2D*)obj)->::EdbAngle2D::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbAngle2D

//______________________________________________________________________________
void EdbTrack2D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbTrack2D.
      typedef ::EdbTrack2D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      EdbPoint2D::ShowMembers(R__insp);
      EdbAngle2D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_EdbTrack2D(void *p) {
      delete ((::EdbTrack2D*)p);
   }
   static void deleteArray_EdbTrack2D(void *p) {
      delete [] ((::EdbTrack2D*)p);
   }
   static void destruct_EdbTrack2D(void *p) {
      typedef ::EdbTrack2D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbTrack2D(TBuffer &buf, void *obj) {
      ((::EdbTrack2D*)obj)->::EdbTrack2D::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbTrack2D

/********************************************************
* EdbDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableEdbDict();

extern "C" void G__set_cpp_environmentEdbDict() {
  G__add_ipath(".");
  G__add_ipath("..\\..\\include");
  G__cpp_reset_tagtableEdbDict();
}
#include <new>
extern "C" int G__cpp_dllrevEdbDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* EdbAffine2D */
static int G__EdbDict_578_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbAffine2D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbAffine2D[n];
     } else {
       p = new((void*) gvp) EdbAffine2D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbAffine2D;
     } else {
       p = new((void*) gvp) EdbAffine2D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbAffine2D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbAffine2D((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbAffine2D((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbAffine2D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbAffine2D(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
   } else {
     p = new((void*) gvp) EdbAffine2D(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->Set(*(EdbAffine2D*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbAffine2D*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbAffine2D*) G__getstructoffset())->Set();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->Set((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine2D*) G__getstructoffset())->A11());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine2D*) G__getstructoffset())->A12());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine2D*) G__getstructoffset())->A21());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine2D*) G__getstructoffset())->A22());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine2D*) G__getstructoffset())->B1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine2D*) G__getstructoffset())->B2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->Transform((EdbAffine2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->Transform(*(EdbAffine2D*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->Invert();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->SetAxisX((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->SetAxisY((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->ZoomX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->ZoomY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->Zoom((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->ShiftX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->ShiftY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->Rotate((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAffine2D*) G__getstructoffset())->Calculate((EdbPointsBox2D*) G__int(libp->para[0]), (EdbPointsBox2D*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) ((EdbAffine2D*) G__getstructoffset())->Calculate((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((EdbAffine2D*) G__getstructoffset())->Calculate((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAffine2D*) G__getstructoffset())->CalculateFull((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbAffine2D*) G__getstructoffset())->CalculateTurn((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const EdbAffine2D*) G__getstructoffset())->Phi((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbAffine2D*) G__getstructoffset())->AsString());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine2D*) G__getstructoffset())->Xtrans((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine2D*) G__getstructoffset())->Ytrans((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbAffine2D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAffine2D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbAffine2D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbAffine2D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine2D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAffine2D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAffine2D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAffine2D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_578_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAffine2D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_578_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbAffine2D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbAffine2D(*(EdbAffine2D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbAffine2D G__TEdbAffine2D;
static int G__EdbDict_578_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbAffine2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbAffine2D*) (soff+(sizeof(EdbAffine2D)*i)))->~G__TEdbAffine2D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbAffine2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbAffine2D*) (soff))->~G__TEdbAffine2D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_578_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbAffine2D* dest = (EdbAffine2D*) G__getstructoffset();
   *dest = *(EdbAffine2D*) libp->para[0].ref;
   const EdbAffine2D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbAffine3D */
static int G__EdbDict_579_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbAffine3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbAffine3D[n];
     } else {
       p = new((void*) gvp) EdbAffine3D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbAffine3D;
     } else {
       p = new((void*) gvp) EdbAffine3D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->Set(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (float) G__double(libp->para[8]), (float) G__double(libp->para[9])
, (float) G__double(libp->para[10]), (float) G__double(libp->para[11]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->A11());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->A12());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->A13());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->A21());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->A22());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->A23());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->A31());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->A32());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->A33());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->B1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->B2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAffine3D*) G__getstructoffset())->B3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->SetAxisX((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->SetAxisY((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->SetAxisZ((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->SetSlantXZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->SetSlantYZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->ZoomX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->ZoomY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->ZoomZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->Zoom((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->ShiftX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->ShiftY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->ShiftZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbAffine3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAffine3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbAffine3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbAffine3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAffine3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAffine3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAffine3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAffine3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_579_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAffine3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_579_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbAffine3D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbAffine3D(*(EdbAffine3D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbAffine3D G__TEdbAffine3D;
static int G__EdbDict_579_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbAffine3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbAffine3D*) (soff+(sizeof(EdbAffine3D)*i)))->~G__TEdbAffine3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbAffine3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbAffine3D*) (soff))->~G__TEdbAffine3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_579_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbAffine3D* dest = (EdbAffine3D*) G__getstructoffset();
   *dest = *(EdbAffine3D*) libp->para[0].ref;
   const EdbAffine3D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPoint */
static int G__EdbDict_580_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPoint*) G__getstructoffset())->X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPoint*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPoint*) G__getstructoffset())->Z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint*) G__getstructoffset())->SetX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint*) G__getstructoffset())->SetY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint*) G__getstructoffset())->SetZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint*) G__getstructoffset())->Transform((EdbAffine2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint*) G__getstructoffset())->Transform((EdbAffine3D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint*) G__getstructoffset())->Substruct((EdbPoint*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbPoint*) G__getstructoffset())->Test();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPoint::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPoint::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPoint::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPoint::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPoint*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPoint::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPoint::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPoint::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_580_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPoint::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPoint G__TEdbPoint;
static int G__EdbDict_580_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPoint*) (soff+(sizeof(EdbPoint)*i)))->~G__TEdbPoint();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPoint*) (soff))->~G__TEdbPoint();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_580_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPoint* dest = (EdbPoint*) G__getstructoffset();
   *dest = *(EdbPoint*) libp->para[0].ref;
   const EdbPoint& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPoint2D */
static int G__EdbDict_581_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const EdbPoint2D*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const EdbPoint2D*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_581_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbPoint2D*) G__getstructoffset())->TestPoint2D();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_581_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPoint2D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_581_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPoint2D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_581_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPoint2D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_581_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPoint2D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_581_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint2D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_581_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPoint2D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_581_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPoint2D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_581_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPoint2D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_581_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPoint2D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPoint2D G__TEdbPoint2D;
static int G__EdbDict_581_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPoint2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPoint2D*) (soff+(sizeof(EdbPoint2D)*i)))->~G__TEdbPoint2D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPoint2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPoint2D*) (soff))->~G__TEdbPoint2D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_581_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPoint2D* dest = (EdbPoint2D*) G__getstructoffset();
   *dest = *(EdbPoint2D*) libp->para[0].ref;
   const EdbPoint2D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPoint3D */
static int G__EdbDict_582_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbPoint3D*) G__getstructoffset())->TestPoint3D();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_582_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPoint3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_582_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPoint3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_582_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPoint3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_582_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPoint3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_582_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPoint3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_582_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPoint3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_582_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPoint3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_582_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPoint3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_582_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPoint3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPoint3D G__TEdbPoint3D;
static int G__EdbDict_582_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPoint3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPoint3D*) (soff+(sizeof(EdbPoint3D)*i)))->~G__TEdbPoint3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPoint3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPoint3D*) (soff))->~G__TEdbPoint3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_582_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPoint3D* dest = (EdbPoint3D*) G__getstructoffset();
   *dest = *(EdbPoint3D*) libp->para[0].ref;
   const EdbPoint3D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbAngle2D */
static int G__EdbDict_583_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAngle2D*) G__getstructoffset())->TX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbAngle2D*) G__getstructoffset())->TY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAngle2D*) G__getstructoffset())->SetTX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAngle2D*) G__getstructoffset())->SetTY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAngle2D*) G__getstructoffset())->Transform((EdbAffine2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAngle2D*) G__getstructoffset())->Substruct((EdbAngle2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbAngle2D*) G__getstructoffset())->Test();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const EdbAngle2D*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const EdbAngle2D*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbAngle2D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAngle2D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbAngle2D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbAngle2D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbAngle2D*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAngle2D*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAngle2D*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbAngle2D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAngle2D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAngle2D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbAngle2D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_583_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbAngle2D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbAngle2D G__TEdbAngle2D;
static int G__EdbDict_583_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbAngle2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbAngle2D*) (soff+(sizeof(EdbAngle2D)*i)))->~G__TEdbAngle2D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbAngle2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbAngle2D*) (soff))->~G__TEdbAngle2D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_583_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbAngle2D* dest = (EdbAngle2D*) G__getstructoffset();
   *dest = *(EdbAngle2D*) libp->para[0].ref;
   const EdbAngle2D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbTrack2D */
static int G__EdbDict_584_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrack2D*) G__getstructoffset())->Substruct((EdbTrack2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_584_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbTrack2D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_584_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrack2D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_584_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbTrack2D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_584_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbTrack2D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_584_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrack2D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_584_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrack2D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_584_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrack2D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_584_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrack2D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_584_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrack2D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbTrack2D G__TEdbTrack2D;
static int G__EdbDict_584_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbTrack2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbTrack2D*) (soff+(sizeof(EdbTrack2D)*i)))->~G__TEdbTrack2D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbTrack2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbTrack2D*) (soff))->~G__TEdbTrack2D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_584_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrack2D* dest = (EdbTrack2D*) G__getstructoffset();
   *dest = *(EdbTrack2D*) libp->para[0].ref;
   const EdbTrack2D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPointsBox2D */
static int G__EdbDict_585_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPointsBox2D*) G__getstructoffset())->N());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPointsBox2D*) G__getstructoffset())->At((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->Substruct((EdbPointsBox2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->Retransform();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPointsBox2D*) G__getstructoffset())->GetKeep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->GetKeep(*(EdbAffine2D*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->SetKeep((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPointsBox2D*) G__getstructoffset())->Xmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPointsBox2D*) G__getstructoffset())->Xmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPointsBox2D*) G__getstructoffset())->Ymin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPointsBox2D*) G__getstructoffset())->Ymax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPointsBox2D*) G__getstructoffset())->DeltaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPointsBox2D*) G__getstructoffset())->DeltaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->ShiftX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->ShiftY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->ScaleX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->ScaleY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->Rotate((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->SmearXY((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPointsBox2D*) G__getstructoffset())->Xhist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPointsBox2D*) G__getstructoffset())->Yhist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbPointsBox2D*) G__getstructoffset())->XYhist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbPointsBox2D*) G__getstructoffset())->DrawPoints((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbPointsBox2D*) G__getstructoffset())->DrawPoints((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbPointsBox2D*) G__getstructoffset())->DrawPoints((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbPointsBox2D*) G__getstructoffset())->DrawPoints();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPointsBox2D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPointsBox2D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPointsBox2D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPointsBox2D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox2D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPointsBox2D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPointsBox2D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPointsBox2D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_585_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPointsBox2D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPointsBox2D G__TEdbPointsBox2D;
static int G__EdbDict_585_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPointsBox2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPointsBox2D*) (soff+(sizeof(EdbPointsBox2D)*i)))->~G__TEdbPointsBox2D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPointsBox2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPointsBox2D*) (soff))->~G__TEdbPointsBox2D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_585_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPointsBox2D* dest = (EdbPointsBox2D*) G__getstructoffset();
   *dest = *(EdbPointsBox2D*) libp->para[0].ref;
   const EdbPointsBox2D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPointsBox3D */
static int G__EdbDict_586_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPointsBox3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_586_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPointsBox3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_586_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPointsBox3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_586_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPointsBox3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_586_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPointsBox3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_586_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPointsBox3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_586_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPointsBox3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_586_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPointsBox3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_586_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPointsBox3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPointsBox3D G__TEdbPointsBox3D;
static int G__EdbDict_586_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPointsBox3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPointsBox3D*) (soff+(sizeof(EdbPointsBox3D)*i)))->~G__TEdbPointsBox3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPointsBox3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPointsBox3D*) (soff))->~G__TEdbPointsBox3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_586_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPointsBox3D* dest = (EdbPointsBox3D*) G__getstructoffset();
   *dest = *(EdbPointsBox3D*) libp->para[0].ref;
   const EdbPointsBox3D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbCluster */
static int G__EdbDict_587_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCluster[n];
     } else {
       p = new((void*) gvp) EdbCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCluster;
     } else {
       p = new((void*) gvp) EdbCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCluster(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) EdbCluster(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCluster(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) EdbCluster(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCluster*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((EdbCluster*) G__getstructoffset())->Set(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((EdbCluster*) G__getstructoffset())->Set(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCluster*) G__getstructoffset())->SetArea((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCluster*) G__getstructoffset())->SetVolume((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCluster*) G__getstructoffset())->SetFrame((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCluster*) G__getstructoffset())->SetSide((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCluster*) G__getstructoffset())->SetSegment((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbCluster*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbCluster*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbCluster*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbCluster*) G__getstructoffset())->GetArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbCluster*) G__getstructoffset())->GetVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbCluster*) G__getstructoffset())->GetFrame());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbCluster*) G__getstructoffset())->GetSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbCluster*) G__getstructoffset())->GetSegment());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCluster*) G__getstructoffset())->AddPixelSum((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (unsigned char) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCluster*) G__getstructoffset())->Normalize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const EdbCluster*) G__getstructoffset())->Draw((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const EdbCluster*) G__getstructoffset())->Draw();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbCluster*) G__getstructoffset())->TT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_587_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_587_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbCluster(*(EdbCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbCluster G__TEdbCluster;
static int G__EdbDict_587_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbCluster*) (soff+(sizeof(EdbCluster)*i)))->~G__TEdbCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbCluster*) (soff))->~G__TEdbCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_587_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCluster* dest = (EdbCluster*) G__getstructoffset();
   *dest = *(EdbCluster*) libp->para[0].ref;
   const EdbCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbClustersBox */
static int G__EdbDict_588_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustersBox*) G__getstructoffset())->AddCluster((EdbCluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustersBox*) G__getstructoffset())->AddCluster(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbClustersBox*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbClustersBox*) G__getstructoffset())->GetCluster((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbClustersBox*) G__getstructoffset())->GetClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbClustersBox*) G__getstructoffset())->At((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbClustersBox::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbClustersBox::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbClustersBox::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbClustersBox::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClustersBox*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbClustersBox::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbClustersBox::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbClustersBox::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_588_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbClustersBox::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbClustersBox G__TEdbClustersBox;
static int G__EdbDict_588_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbClustersBox*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbClustersBox*) (soff+(sizeof(EdbClustersBox)*i)))->~G__TEdbClustersBox();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbClustersBox*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbClustersBox*) (soff))->~G__TEdbClustersBox();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_588_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbClustersBox* dest = (EdbClustersBox*) G__getstructoffset();
   *dest = *(EdbClustersBox*) libp->para[0].ref;
   const EdbClustersBox& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbSeg3D */
static int G__EdbDict_595_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSeg3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSeg3D[n];
     } else {
       p = new((void*) gvp) EdbSeg3D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSeg3D;
     } else {
       p = new((void*) gvp) EdbSeg3D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSeg3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSeg3D(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) EdbSeg3D(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSeg3D(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) EdbSeg3D(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSeg3D*) G__getstructoffset())->GetX0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSeg3D*) G__getstructoffset())->GetY0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSeg3D*) G__getstructoffset())->GetZ0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSeg3D*) G__getstructoffset())->GetTx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSeg3D*) G__getstructoffset())->GetTy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSeg3D*) G__getstructoffset())->GetDz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSeg3D*) G__getstructoffset())->SetX0((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSeg3D*) G__getstructoffset())->SetY0((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSeg3D*) G__getstructoffset())->SetZ0((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSeg3D*) G__getstructoffset())->SetTx((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSeg3D*) G__getstructoffset())->SetTy((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSeg3D*) G__getstructoffset())->SetDz((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((EdbSeg3D*) G__getstructoffset())->Set((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbSeg3D*) G__getstructoffset())->Set((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSeg3D*) G__getstructoffset())->Transform((EdbAffine2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbSeg3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSeg3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbSeg3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbSeg3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSeg3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSeg3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSeg3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSeg3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_595_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSeg3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_595_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbSeg3D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbSeg3D(*(EdbSeg3D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbSeg3D G__TEdbSeg3D;
static int G__EdbDict_595_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbSeg3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbSeg3D*) (soff+(sizeof(EdbSeg3D)*i)))->~G__TEdbSeg3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbSeg3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbSeg3D*) (soff))->~G__TEdbSeg3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_595_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSeg3D* dest = (EdbSeg3D*) G__getstructoffset();
   *dest = *(EdbSeg3D*) libp->para[0].ref;
   const EdbSeg3D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbSegment */
static int G__EdbDict_596_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegment* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegment[n];
     } else {
       p = new((void*) gvp) EdbSegment[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegment;
     } else {
       p = new((void*) gvp) EdbSegment;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbSegment));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegment* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) EdbSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) EdbSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) EdbSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) EdbSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) EdbSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbSegment));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      ((EdbSegment*) G__getstructoffset())->Set(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((EdbSegment*) G__getstructoffset())->Set(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((EdbSegment*) G__getstructoffset())->Set(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((EdbSegment*) G__getstructoffset())->Set((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbSegment*) G__getstructoffset())->Set((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegment*) G__getstructoffset())->Copy(*(EdbSegment*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegment*) G__getstructoffset())->SetSigma((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegment*) G__getstructoffset())->GetSigmaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbSegment*) G__getstructoffset())->GetSigmaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegment*) G__getstructoffset())->GetSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegment*) G__getstructoffset())->GetPuls());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegment*) G__getstructoffset())->GetVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegment*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegment*) G__getstructoffset())->SetSide((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegment*) G__getstructoffset())->SetPuls((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegment*) G__getstructoffset())->SetID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegment*) G__getstructoffset())->SetIDE((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegment*) G__getstructoffset())->SetIDE();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegment*) G__getstructoffset())->UnSetIDE();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbSegment*) G__getstructoffset())->GetNelements());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbSegment*) G__getstructoffset())->GetElements());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegment*) G__getstructoffset())->AddElement((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbSegment::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegment::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbSegment::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbSegment::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbSegment*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegment::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegment::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbSegment::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_596_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbSegment::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_596_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbSegment* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbSegment(*(EdbSegment*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbSegment));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbSegment G__TEdbSegment;
static int G__EdbDict_596_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbSegment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbSegment*) (soff+(sizeof(EdbSegment)*i)))->~G__TEdbSegment();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbSegment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbSegment*) (soff))->~G__TEdbSegment();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_596_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbSegment* dest = (EdbSegment*) G__getstructoffset();
   *dest = *(EdbSegment*) libp->para[0].ref;
   const EdbSegment& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbTrack */
static int G__EdbDict_597_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrack[n];
     } else {
       p = new((void*) gvp) EdbTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrack;
     } else {
       p = new((void*) gvp) EdbTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrack(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) EdbTrack(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrack(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) EdbTrack(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbTrack(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) EdbTrack(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((EdbTrack*) G__getstructoffset())->Set(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((EdbTrack*) G__getstructoffset())->Set((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrack*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbTrack*) G__getstructoffset())->GetNelements());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbTrack*) G__getstructoffset())->GetElements());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrack*) G__getstructoffset())->AddElement((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_597_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_597_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbTrack(*(EdbTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbTrack G__TEdbTrack;
static int G__EdbDict_597_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbTrack*) (soff+(sizeof(EdbTrack)*i)))->~G__TEdbTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbTrack*) (soff))->~G__TEdbTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_597_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbTrack* dest = (EdbTrack*) G__getstructoffset();
   *dest = *(EdbTrack*) libp->para[0].ref;
   const EdbTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbFrame */
static int G__EdbDict_598_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbFrame[n];
     } else {
       p = new((void*) gvp) EdbFrame[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbFrame;
     } else {
       p = new((void*) gvp) EdbFrame;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbFrame(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbFrame(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbFrame(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbFrame(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbFrame((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbFrame((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbFrame((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbFrame((int) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbFrame(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (char*) G__int(libp->para[3])
, (float) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) EdbFrame(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (char*) G__int(libp->para[3])
, (float) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbFrame(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbFrame(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (char*) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbFrame*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbFrame*) G__getstructoffset())->SetID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbFrame*) G__getstructoffset())->SetZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbFrame*) G__getstructoffset())->SetImage((EdbImage*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbFrame*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbFrame*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbFrame*) G__getstructoffset())->GetNcl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbFrame*) G__getstructoffset())->GetNpix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbFrame*) G__getstructoffset())->GetImage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbFrame*) G__getstructoffset())->GetBuffer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const EdbFrame*) G__getstructoffset())->Pixel((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const EdbFrame*) G__getstructoffset())->GetHist2((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const EdbFrame*) G__getstructoffset())->GetHist2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbFrame*) G__getstructoffset())->GetHist1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbFrame::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbFrame::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbFrame::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbFrame::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbFrame*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbFrame::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbFrame::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbFrame::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_598_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbFrame::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_598_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbFrame* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbFrame(*(EdbFrame*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbFrame G__TEdbFrame;
static int G__EdbDict_598_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbFrame*) (soff+(sizeof(EdbFrame)*i)))->~G__TEdbFrame();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbFrame*) (soff))->~G__TEdbFrame();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_598_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbFrame* dest = (EdbFrame*) G__getstructoffset();
   *dest = *(EdbFrame*) libp->para[0].ref;
   const EdbFrame& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbViewHeader */
static int G__EdbDict_599_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewHeader[n];
     } else {
       p = new((void*) gvp) EdbViewHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewHeader;
     } else {
       p = new((void*) gvp) EdbViewHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->Copy((EdbViewHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetAffine((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbViewHeader*) G__getstructoffset())->GetAffine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetZlevels((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbViewHeader*) G__getstructoffset())->GetZlevels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewHeader*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetTime((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetNclusters((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetNsegments((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetNclusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetNsegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetViewID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetAreaID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbViewHeader*) G__getstructoffset())->GetXview());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbViewHeader*) G__getstructoffset())->GetYview());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetViewID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetAreaID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetCoordXY((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetCoordZ((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetNframes((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetColRow((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetStatus((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetTrack((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->SetEvent((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbViewHeader*) G__getstructoffset())->GetZ1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbViewHeader*) G__getstructoffset())->GetZ2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbViewHeader*) G__getstructoffset())->GetZ3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbViewHeader*) G__getstructoffset())->GetZ4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbViewHeader*) G__getstructoffset())->GetZ0top());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbViewHeader*) G__getstructoffset())->GetZ0bot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbViewHeader*) G__getstructoffset())->GetDZtop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbViewHeader*) G__getstructoffset())->GetDZbot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetNframesTop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetNframesBot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetCol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewHeader*) G__getstructoffset())->GetEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbViewHeader*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbViewHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbViewHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbViewHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_599_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_599_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbViewHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbViewHeader(*(EdbViewHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbViewHeader G__TEdbViewHeader;
static int G__EdbDict_599_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbViewHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbViewHeader*) (soff+(sizeof(EdbViewHeader)*i)))->~G__TEdbViewHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbViewHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbViewHeader*) (soff))->~G__TEdbViewHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_599_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewHeader* dest = (EdbViewHeader*) G__getstructoffset();
   *dest = *(EdbViewHeader*) libp->para[0].ref;
   const EdbViewHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbView */
static int G__EdbDict_600_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbView* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbView[n];
     } else {
       p = new((void*) gvp) EdbView[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbView;
     } else {
       p = new((void*) gvp) EdbView;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbView));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->Scale((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->Shift((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->Transform((EdbAffine2D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->GenerateClustersFog((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbView*) G__getstructoffset())->GenerateClustersSegment((EdbSegment*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbView*) G__getstructoffset())->GenerateClustersSegment((EdbSegment*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbView*) G__getstructoffset())->GenerateClustersSegment((EdbSegment*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbView*) G__getstructoffset())->GenerateClustersTrack((EdbTrack*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbView*) G__getstructoffset())->GenerateClustersTrack((EdbTrack*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbView*) G__getstructoffset())->GenerateClustersTrack((EdbTrack*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const EdbView*) G__getstructoffset())->PrintClusters((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const EdbView*) G__getstructoffset())->PrintClusters();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetFrames());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((EdbView*) G__getstructoffset())->GetHeaderAddr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((EdbView*) G__getstructoffset())->GetClustersAddr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((EdbView*) G__getstructoffset())->GetSegmentsAddr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((EdbView*) G__getstructoffset())->GetTracksAddr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((EdbView*) G__getstructoffset())->GetFramesAddr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbView*) G__getstructoffset())->AttachSegmentsToTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbView*) G__getstructoffset())->AttachClustersToSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbView*) G__getstructoffset())->AttachClustersToSegmentsFast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbView*) G__getstructoffset())->AttachClustersToSegmentsSlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetSegmentsClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->SetAreaID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->SetNframes((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->SetCoordXY((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->SetCoordZ((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbView*) G__getstructoffset())->GetViewID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbView*) G__getstructoffset())->GetAreaID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->GetXview());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->GetYview());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->GetZ1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->GetZ2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->GetZ3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->GetZ4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->GetZ0top());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->GetZ0bot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->GetDZtop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->GetDZbot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbView*) G__getstructoffset())->GetNframes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbView*) G__getstructoffset())->GetNframesTop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbView*) G__getstructoffset())->GetNframesBot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbView*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const EdbView*) G__getstructoffset())->GetLastSystemTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->SetLastSystemTime((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetClustersFrame((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbView*) G__getstructoffset())->Nclusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbView*) G__getstructoffset())->Nsegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbView*) G__getstructoffset())->Ntracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetCluster((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetSegment((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->GetFrame((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->ZFrameMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->ZFrameMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbView*) G__getstructoffset())->AddCluster((EdbCluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letint(result7, 85, (long) ((EdbView*) G__getstructoffset())->AddCluster(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) ((EdbView*) G__getstructoffset())->AddCluster(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letint(result7, 85, (long) ((EdbView*) G__getstructoffset())->AddSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) ((EdbView*) G__getstructoffset())->AddSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) ((EdbView*) G__getstructoffset())->AddSegment(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((EdbView*) G__getstructoffset())->AddSegment((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((EdbView*) G__getstructoffset())->AddSegment((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbView*) G__getstructoffset())->AddSegment(*(EdbSegment*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->AddSegment((EdbSegment*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->AddTrack((EdbTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbView*) G__getstructoffset())->AddFrame((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbView*) G__getstructoffset())->AddFrame((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbView*) G__getstructoffset())->AddFrame((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->AddFrame((EdbFrame*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbView*) G__getstructoffset())->GenerateFrames((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbView*) G__getstructoffset())->GenerateFrames();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->DeleteClustersFog();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->DrawClustersFog((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->DrawClustersFog());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->DrawClustersSegments((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const EdbView*) G__getstructoffset())->DrawClustersSegments());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbView*) G__getstructoffset())->ReadView((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->Xmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->Ymin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->Zmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbView*) G__getstructoffset())->Zmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbView::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbView::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbView::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbView::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbView*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbView::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbView::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbView::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_600_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbView::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_600_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbView* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbView(*(EdbView*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbView));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbView G__TEdbView;
static int G__EdbDict_600_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbView*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbView*) (soff+(sizeof(EdbView)*i)))->~G__TEdbView();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbView*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbView*) (soff))->~G__TEdbView();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_600_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbView* dest = (EdbView*) G__getstructoffset();
   *dest = *(EdbView*) libp->para[0].ref;
   const EdbView& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbCCD */
static int G__EdbDict_604_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCCD* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCCD(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbCCD(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCCD(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbCCD(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCCD((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbCCD((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCCD((float) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbCCD((float) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbCCD[n];
       } else {
         p = new((void*) gvp) EdbCCD[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbCCD;
       } else {
         p = new((void*) gvp) EdbCCD;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbCCD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbCCD*) G__getstructoffset())->Set((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbCCD*) G__getstructoffset())->Set((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbCCD*) G__getstructoffset())->Set((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbCCD*) G__getstructoffset())->Set((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbCCD*) G__getstructoffset())->Set();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbCCD*) G__getstructoffset())->GetNx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbCCD*) G__getstructoffset())->GetNy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbCCD*) G__getstructoffset())->GetPixX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbCCD*) G__getstructoffset())->GetPixY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbCCD*) G__getstructoffset())->ReadParameters((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbCCD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCCD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbCCD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbCCD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCCD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCCD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCCD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCCD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_604_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCCD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_604_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbCCD* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbCCD(*(EdbCCD*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbCCD));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbCCD G__TEdbCCD;
static int G__EdbDict_604_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbCCD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbCCD*) (soff+(sizeof(EdbCCD)*i)))->~G__TEdbCCD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbCCD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbCCD*) (soff))->~G__TEdbCCD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_604_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCCD* dest = (EdbCCD*) G__getstructoffset();
   *dest = *(EdbCCD*) libp->para[0].ref;
   const EdbCCD& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbObjective */
static int G__EdbDict_605_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbObjective* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbObjective((float) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbObjective((float) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbObjective[n];
       } else {
         p = new((void*) gvp) EdbObjective[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbObjective;
       } else {
         p = new((void*) gvp) EdbObjective;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbObjective));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbObjective*) G__getstructoffset())->Set(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbObjective*) G__getstructoffset())->SetMagnification((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbObjective*) G__getstructoffset())->SetCCD2Stage((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbObjective*) G__getstructoffset())->GetMagnification());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbObjective*) G__getstructoffset())->GetCCD2Stage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbObjective*) G__getstructoffset())->PixelX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbObjective*) G__getstructoffset())->PixelY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbObjective*) G__getstructoffset())->ReadParameters((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbObjective::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbObjective::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbObjective::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbObjective::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbObjective*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbObjective::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbObjective::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbObjective::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_605_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbObjective::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_605_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbObjective* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbObjective(*(EdbObjective*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbObjective));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbObjective G__TEdbObjective;
static int G__EdbDict_605_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbObjective*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbObjective*) (soff+(sizeof(EdbObjective)*i)))->~G__TEdbObjective();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbObjective*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbObjective*) (soff))->~G__TEdbObjective();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_605_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbObjective* dest = (EdbObjective*) G__getstructoffset();
   *dest = *(EdbObjective*) libp->para[0].ref;
   const EdbObjective& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbStage */
static int G__EdbDict_606_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbStage* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbStage[n];
     } else {
       p = new((void*) gvp) EdbStage[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbStage;
     } else {
       p = new((void*) gvp) EdbStage;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbStage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbStage*) G__getstructoffset())->CCD2Stage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbStage*) G__getstructoffset())->Encoders2Stage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbStage*) G__getstructoffset())->PixelX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbStage*) G__getstructoffset())->PixelY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbStage*) G__getstructoffset())->GetCCD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbStage*) G__getstructoffset())->GetObjective());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbStage*) G__getstructoffset())->GetEncoders2Stage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbStage::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbStage::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbStage::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbStage::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbStage*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbStage::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbStage::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbStage::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_606_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbStage::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_606_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbStage* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbStage(*(EdbStage*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbStage));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbStage G__TEdbStage;
static int G__EdbDict_606_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbStage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbStage*) (soff+(sizeof(EdbStage)*i)))->~G__TEdbStage();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbStage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbStage*) (soff))->~G__TEdbStage();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_606_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbStage* dest = (EdbStage*) G__getstructoffset();
   *dest = *(EdbStage*) libp->para[0].ref;
   const EdbStage& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbMark */
static int G__EdbDict_607_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMark* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbMark[n];
     } else {
       p = new((void*) gvp) EdbMark[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbMark;
     } else {
       p = new((void*) gvp) EdbMark;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbMark));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMark* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbMark(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbMark(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbMark(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbMark(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbMark));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbMark*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbMark*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbMark*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMark*) G__getstructoffset())->Set((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMark*) G__getstructoffset())->SetFlag((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbMark*) G__getstructoffset())->Flag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbMark::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMark::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbMark::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbMark::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMark*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMark::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbMark::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMark::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_607_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbMark::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_607_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbMark* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbMark(*(EdbMark*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbMark));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbMark G__TEdbMark;
static int G__EdbDict_607_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbMark*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbMark*) (soff+(sizeof(EdbMark)*i)))->~G__TEdbMark();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbMark*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbMark*) (soff))->~G__TEdbMark();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_607_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMark* dest = (EdbMark*) G__getstructoffset();
   *dest = *(EdbMark*) libp->para[0].ref;
   const EdbMark& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbMarksBox */
static int G__EdbDict_608_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMarksBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbMarksBox[n];
     } else {
       p = new((void*) gvp) EdbMarksBox[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbMarksBox;
     } else {
       p = new((void*) gvp) EdbMarksBox;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMarksBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbMarksBox(*(EdbMarksBox*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbMarksBox(*(EdbMarksBox*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMarksBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbMarksBox((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbMarksBox((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbMarksBox*) G__getstructoffset())->AddMark((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbMarksBox*) G__getstructoffset())->AddMark((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbMarksBox*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbMarksBox*) G__getstructoffset())->GetMark((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbMarksBox*) G__getstructoffset())->GetMarks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbMarksBox*) G__getstructoffset())->Draw((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbMarksBox*) G__getstructoffset())->Draw((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbMarksBox*) G__getstructoffset())->Draw((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbMarksBox*) G__getstructoffset())->Draw((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbMarksBox*) G__getstructoffset())->Draw();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbMarksBox::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMarksBox::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbMarksBox::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbMarksBox::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMarksBox*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMarksBox::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbMarksBox::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMarksBox::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_608_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbMarksBox::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbMarksBox G__TEdbMarksBox;
static int G__EdbDict_608_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbMarksBox*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbMarksBox*) (soff+(sizeof(EdbMarksBox)*i)))->~G__TEdbMarksBox();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbMarksBox*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbMarksBox*) (soff))->~G__TEdbMarksBox();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_608_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMarksBox* dest = (EdbMarksBox*) G__getstructoffset();
   *dest = *(EdbMarksBox*) libp->para[0].ref;
   const EdbMarksBox& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbMarksSet */
static int G__EdbDict_609_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMarksSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbMarksSet[n];
     } else {
       p = new((void*) gvp) EdbMarksSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbMarksSet;
     } else {
       p = new((void*) gvp) EdbMarksSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMarksSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbMarksSet(*(EdbMarksSet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbMarksSet(*(EdbMarksSet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbMarksSet*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbMarksSet*) G__getstructoffset())->GetNa());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbMarksSet*) G__getstructoffset())->GetNs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbMarksSet*) G__getstructoffset())->GetAbsolute());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbMarksSet*) G__getstructoffset())->GetStage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbMarksSet*) G__getstructoffset())->Abs2Stage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbMarksSet*) G__getstructoffset())->Stage2Abs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->ReadDA((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->ReadDB((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->ReadDollar((char*) G__int(libp->para[0]), (EdbMarksBox*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->ChangeMapStringSpacer(*(TString*) libp->para[0].ref, (char) G__int(libp->para[1])
, (char) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->ReadMap((char*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (char) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->ReadMap((char*) G__int(libp->para[0]), (char) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->ReadMap((char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->WriteMap((char*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (char) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->WriteMap((char*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (char) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->WriteMap((char*) G__int(libp->para[0]), (char) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->WriteMap((char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->ReadMap2((char*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (char) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->ReadMap2((char*) G__int(libp->para[0]), (char) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->ReadMap2((char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->WriteMap2((char*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (char) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->WriteMap2((char*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (char) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->WriteMap2((char*) G__int(libp->para[0]), (char) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbMarksSet*) G__getstructoffset())->WriteMap2((char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const EdbMarksSet*) G__getstructoffset())->DrawA((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const EdbMarksSet*) G__getstructoffset())->DrawA();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const EdbMarksSet*) G__getstructoffset())->DrawS((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const EdbMarksSet*) G__getstructoffset())->DrawS();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbMarksSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMarksSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbMarksSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbMarksSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbMarksSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMarksSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbMarksSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbMarksSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_609_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbMarksSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbMarksSet G__TEdbMarksSet;
static int G__EdbDict_609_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbMarksSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbMarksSet*) (soff+(sizeof(EdbMarksSet)*i)))->~G__TEdbMarksSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbMarksSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbMarksSet*) (soff))->~G__TEdbMarksSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_609_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbMarksSet* dest = (EdbMarksSet*) G__getstructoffset();
   *dest = *(EdbMarksSet*) libp->para[0].ref;
   const EdbMarksSet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbArea */
static int G__EdbDict_610_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbArea* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbArea(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) EdbArea(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbArea(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) EdbArea(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbArea(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbArea(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbArea(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbArea(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbArea((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbArea((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbArea((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbArea((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbArea[n];
       } else {
         p = new((void*) gvp) EdbArea[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbArea;
       } else {
         p = new((void*) gvp) EdbArea;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbArea));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((EdbArea*) G__getstructoffset())->Set(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((EdbArea*) G__getstructoffset())->Set(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((EdbArea*) G__getstructoffset())->Set((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbArea*) G__getstructoffset())->Set((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbArea*) G__getstructoffset())->MakeSpiralPath((int) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbArea*) G__getstructoffset())->MakeSerpentina((int) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbArea*) G__getstructoffset())->SetCentre((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbArea*) G__getstructoffset())->Scale((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbArea*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbArea*) G__getstructoffset())->GetStepX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbArea*) G__getstructoffset())->GetStepY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbArea*) G__getstructoffset())->GetNframesTop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbArea*) G__getstructoffset())->GetNframesBot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbArea*) G__getstructoffset())->GetPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbArea*) G__getstructoffset())->Nviews());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbArea*) G__getstructoffset())->Xview((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbArea*) G__getstructoffset())->Yview((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbArea*) G__getstructoffset())->ReadParameters((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const EdbArea*) G__getstructoffset())->Print((Option_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const EdbArea*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbArea::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbArea::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbArea::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbArea::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbArea*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbArea::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbArea::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbArea::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_610_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbArea::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_610_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbArea* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbArea(*(EdbArea*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbArea));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbArea G__TEdbArea;
static int G__EdbDict_610_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbArea*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbArea*) (soff+(sizeof(EdbArea)*i)))->~G__TEdbArea();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbArea*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbArea*) (soff))->~G__TEdbArea();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_610_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbArea* dest = (EdbArea*) G__getstructoffset();
   *dest = *(EdbArea*) libp->para[0].ref;
   const EdbArea& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPlate */
static int G__EdbDict_611_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPlate* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlate(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) EdbPlate(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlate(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) EdbPlate(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlate(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbPlate(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlate(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbPlate(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlate((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbPlate((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPlate((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbPlate((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbPlate[n];
       } else {
         p = new((void*) gvp) EdbPlate[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbPlate;
       } else {
         p = new((void*) gvp) EdbPlate;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbPlate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbPlate*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlate*) G__getstructoffset())->Set((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPlate*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPlate*) G__getstructoffset())->GetBase());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPlate*) G__getstructoffset())->GetUp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPlate*) G__getstructoffset())->GetDown());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPlate*) G__getstructoffset())->GetShrinkageU());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPlate*) G__getstructoffset())->GetShrinkageD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPlate*) G__getstructoffset())->GetEmulsion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlate*) G__getstructoffset())->SetEmulsion((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlate*) G__getstructoffset())->SetID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlate*) G__getstructoffset())->SetBase((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlate*) G__getstructoffset())->SetUp((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlate*) G__getstructoffset())->SetDown((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlate*) G__getstructoffset())->SetSrinkageU((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlate*) G__getstructoffset())->SetSrinkageD((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPlate*) G__getstructoffset())->ReadParameters((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPlate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPlate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPlate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPlate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPlate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPlate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_611_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPlate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_611_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbPlate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbPlate(*(EdbPlate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbPlate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPlate G__TEdbPlate;
static int G__EdbDict_611_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPlate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPlate*) (soff+(sizeof(EdbPlate)*i)))->~G__TEdbPlate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPlate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPlate*) (soff))->~G__TEdbPlate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_611_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPlate* dest = (EdbPlate*) G__getstructoffset();
   *dest = *(EdbPlate*) libp->para[0].ref;
   const EdbPlate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbCamera */
static int G__EdbDict_612_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCamera* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCamera(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbCamera(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCamera(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbCamera(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCamera((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbCamera((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbCamera((float) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbCamera((float) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbCamera[n];
       } else {
         p = new((void*) gvp) EdbCamera[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbCamera;
       } else {
         p = new((void*) gvp) EdbCamera;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbCamera));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbCamera*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbCamera*) G__getstructoffset())->SetCamera((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbCamera*) G__getstructoffset())->SetCamera((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbCamera*) G__getstructoffset())->SetCamera((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbCamera*) G__getstructoffset())->SetCamera((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbCamera*) G__getstructoffset())->SetCamera();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbCamera*) G__getstructoffset())->GetWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbCamera*) G__getstructoffset())->GetHeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbCamera*) G__getstructoffset())->GetRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbCamera*) G__getstructoffset())->GetColumns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbCamera::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCamera::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbCamera::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbCamera::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbCamera*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCamera::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCamera::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbCamera::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_612_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbCamera::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_612_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbCamera* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbCamera(*(EdbCamera*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbCamera));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbCamera G__TEdbCamera;
static int G__EdbDict_612_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbCamera*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbCamera*) (soff+(sizeof(EdbCamera)*i)))->~G__TEdbCamera();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbCamera*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbCamera*) (soff))->~G__TEdbCamera();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_612_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbCamera* dest = (EdbCamera*) G__getstructoffset();
   *dest = *(EdbCamera*) libp->para[0].ref;
   const EdbCamera& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbRunHeader */
static int G__EdbDict_613_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRunHeader((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbRunHeader((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbRunHeader[n];
       } else {
         p = new((void*) gvp) EdbRunHeader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new EdbRunHeader;
       } else {
         p = new((void*) gvp) EdbRunHeader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunHeader*) G__getstructoffset())->SetRunID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunHeader*) G__getstructoffset())->SetFlag((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunHeader*) G__getstructoffset())->SetLimits((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunHeader*) G__getstructoffset())->SetNareas((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunHeader*) G__getstructoffset())->SetComment((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunHeader*) G__getstructoffset())->SetCPU((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRunHeader*) G__getstructoffset())->GetFlag((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRunHeader*) G__getstructoffset())->GetArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRunHeader*) G__getstructoffset())->GetStage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRunHeader*) G__getstructoffset())->GetPlate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRunHeader*) G__getstructoffset())->GetRunID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const EdbRunHeader*) G__getstructoffset())->GetComment();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbRunHeader*) G__getstructoffset())->GetStartTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbRunHeader*) G__getstructoffset())->GetFinishTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const EdbRunHeader*) G__getstructoffset())->GetSystemStartTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const EdbRunHeader*) G__getstructoffset())->GetCPU());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRunHeader*) G__getstructoffset())->GetNareas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->GetXmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->GetXmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->GetYmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->GetYmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->EmulsionUp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->EmulsionBase());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->EmulsionDown());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->ShrinkageUp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->ShrinkageDown());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRunHeader*) G__getstructoffset())->NpixelsX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRunHeader*) G__getstructoffset())->NpixelsY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->PixelX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->PixelY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->CameraWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbRunHeader*) G__getstructoffset())->CameraHeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRunHeader*) G__getstructoffset())->CCD2Stage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((EdbRunHeader*) G__getstructoffset())->SetCCD((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (char*) G__int(libp->para[4]), (char*) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbRunHeader*) G__getstructoffset())->SetCCD((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (char*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbRunHeader*) G__getstructoffset())->SetCCD((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbRunHeader*) G__getstructoffset())->SetCCD((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbRunHeader*) G__getstructoffset())->SetCCD((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbRunHeader*) G__getstructoffset())->SetCCD((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbRunHeader*) G__getstructoffset())->SetCCD();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      ((EdbRunHeader*) G__getstructoffset())->SetObjective(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (char*) G__int(libp->para[7])
, (char*) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((EdbRunHeader*) G__getstructoffset())->SetObjective(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (char*) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((EdbRunHeader*) G__getstructoffset())->SetObjective(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((EdbRunHeader*) G__getstructoffset())->SetPlate(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (char*) G__int(libp->para[6]), (char*) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((EdbRunHeader*) G__getstructoffset())->SetPlate(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (char*) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((EdbRunHeader*) G__getstructoffset())->SetPlate((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunHeader*) G__getstructoffset())->SetArea((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunHeader*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbRunHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbRunHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbRunHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRunHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRunHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRunHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_613_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRunHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_613_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbRunHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbRunHeader(*(EdbRunHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbRunHeader G__TEdbRunHeader;
static int G__EdbDict_613_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbRunHeader*) (soff+(sizeof(EdbRunHeader)*i)))->~G__TEdbRunHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbRunHeader*) (soff))->~G__TEdbRunHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_613_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRunHeader* dest = (EdbRunHeader*) G__getstructoffset();
   *dest = *(EdbRunHeader*) libp->para[0].ref;
   const EdbRunHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPredictionDC */
static int G__EdbDict_644_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPredictionDC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPredictionDC[n];
     } else {
       p = new((void*) gvp) EdbPredictionDC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPredictionDC;
     } else {
       p = new((void*) gvp) EdbPredictionDC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPredictionDC* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbPredictionDC(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) EdbPredictionDC(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPredictionDC*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPredictionDC*) G__getstructoffset())->GetEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPredictionDC*) G__getstructoffset())->GetFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPredictionDC*) G__getstructoffset())->GetTy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPredictionDC*) G__getstructoffset())->GetTz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPredictionDC*) G__getstructoffset())->GetYp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const EdbPredictionDC*) G__getstructoffset())->GetZp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbPredictionDC*) G__getstructoffset())->WriteDC((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPredictionDC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPredictionDC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPredictionDC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPredictionDC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPredictionDC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPredictionDC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPredictionDC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPredictionDC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_644_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPredictionDC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_644_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbPredictionDC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbPredictionDC(*(EdbPredictionDC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPredictionDC G__TEdbPredictionDC;
static int G__EdbDict_644_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPredictionDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPredictionDC*) (soff+(sizeof(EdbPredictionDC)*i)))->~G__TEdbPredictionDC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPredictionDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPredictionDC*) (soff))->~G__TEdbPredictionDC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_644_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPredictionDC* dest = (EdbPredictionDC*) G__getstructoffset();
   *dest = *(EdbPredictionDC*) libp->para[0].ref;
   const EdbPredictionDC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbPredictionsBox */
static int G__EdbDict_645_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPredictionsBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPredictionsBox[n];
     } else {
       p = new((void*) gvp) EdbPredictionsBox[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPredictionsBox;
     } else {
       p = new((void*) gvp) EdbPredictionsBox;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPredictionsBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbPredictionsBox(*(EdbPredictionsBox*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbPredictionsBox(*(EdbPredictionsBox*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPredictionsBox* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbPredictionsBox((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) EdbPredictionsBox((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPredictionsBox*) G__getstructoffset())->AddPrediction(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbPredictionsBox*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPredictionsBox*) G__getstructoffset())->GetPrediction((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPredictionsBox*) G__getstructoffset())->GetPredictions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const EdbPredictionsBox*) G__getstructoffset())->WriteDC((char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const EdbPredictionsBox*) G__getstructoffset())->WriteDC();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const EdbPredictionsBox*) G__getstructoffset())->WriteDC1((char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const EdbPredictionsBox*) G__getstructoffset())->WriteDC1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const EdbPredictionsBox*) G__getstructoffset())->MakeNtuple((char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const EdbPredictionsBox*) G__getstructoffset())->MakeNtuple());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPredictionsBox*) G__getstructoffset())->ReadDC((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPredictionsBox*) G__getstructoffset())->ReadDC0((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPredictionsBox*) G__getstructoffset())->Generate((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPredictionsBox::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPredictionsBox::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPredictionsBox::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPredictionsBox::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPredictionsBox*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPredictionsBox::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPredictionsBox::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPredictionsBox::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_645_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPredictionsBox::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPredictionsBox G__TEdbPredictionsBox;
static int G__EdbDict_645_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPredictionsBox*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPredictionsBox*) (soff+(sizeof(EdbPredictionsBox)*i)))->~G__TEdbPredictionsBox();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPredictionsBox*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPredictionsBox*) (soff))->~G__TEdbPredictionsBox();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_645_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPredictionsBox* dest = (EdbPredictionsBox*) G__getstructoffset();
   *dest = *(EdbPredictionsBox*) libp->para[0].ref;
   const EdbPredictionsBox& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbRun */
static int G__EdbDict_648_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRun[n];
     } else {
       p = new((void*) gvp) EdbRun[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRun;
     } else {
       p = new((void*) gvp) EdbRun;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRun(
(int) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbRun(
(int) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRun((int) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbRun((int) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRun((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbRun((int) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRun((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbRun((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbRun((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbRun((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbRun(*(EdbRun*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) EdbRun(*(EdbRun*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetView());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->SetView((EdbView*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->SetView();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbRun*) G__getstructoffset())->GetPrediction((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRun*) G__getstructoffset())->Npredictions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetPredictions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetMarks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->SetMarks((EdbMarksSet*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->TransformDC();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->GeneratePredictions((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbRun*) G__getstructoffset())->SelectOpenMode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbRun*) G__getstructoffset())->SelectOpenMode((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRun*) G__getstructoffset())->GetRunID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetStartTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetFinishTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->SetRunID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->SetComment((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->SetTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRun*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->AddView();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->AddView((EdbView*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->Create((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->Open((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->OpenUpdate((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbRun*) G__getstructoffset())->GetFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbRun*) G__getstructoffset())->GetEntryNumberWithIndex((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) ((EdbRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((EdbRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((EdbRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((EdbRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetEntryHeader((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetEntryClusters((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetEntrySegments((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetEntryTracks((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbRun*) G__getstructoffset())->GetEntryFrames((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbRun*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbRun*) G__getstructoffset())->PrintLog((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const EdbRun*) G__getstructoffset())->PrintBranchesStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->Save();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->SaveViews();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRun*) G__getstructoffset())->AddAsciiFile((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbRun*) G__getstructoffset())->ExtractAsciiFile((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->AddViewMerge(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->AddViewAlign(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->AddFrameAlign(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Int_t) G__int(libp->para[17]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->AddPinViewHeader(*(EdbViewHeader*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbRun::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRun::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbRun::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbRun::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbRun*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRun::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRun::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbRun::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_648_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbRun::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_648_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbRun* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbRun(*(EdbRun*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbRun));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbRun G__TEdbRun;
static int G__EdbDict_648_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbRun*) (soff+(sizeof(EdbRun)*i)))->~G__TEdbRun();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbRun*) (soff))->~G__TEdbRun();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_648_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbRun* dest = (EdbRun*) G__getstructoffset();
   *dest = *(EdbRun*) libp->para[0].ref;
   const EdbRun& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbImage */
static int G__EdbDict_649_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbImage[n];
     } else {
       p = new((void*) gvp) EdbImage[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbImage;
     } else {
       p = new((void*) gvp) EdbImage;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbImage((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) EdbImage((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbImage((char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) EdbImage((char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbImage(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) EdbImage(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbImage(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) EdbImage(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbImage*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbImage*) G__getstructoffset())->AdoptImage((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbImage*) G__getstructoffset())->AdoptImage((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbImage*) G__getstructoffset())->SetColors((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const EdbImage*) G__getstructoffset())->GetBuffer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbImage*) G__getstructoffset())->FillBufferDouble(*(TArrayD*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbImage*) G__getstructoffset())->Pixel((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbImage*) G__getstructoffset())->Pixel((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const EdbImage*) G__getstructoffset())->GetHist2((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const EdbImage*) G__getstructoffset())->GetHist2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbImage*) G__getstructoffset())->GetHist1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbImage*) G__getstructoffset())->Width());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbImage*) G__getstructoffset())->Height());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbImage*) G__getstructoffset())->LoadPGM((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbImage*) G__getstructoffset())->LoadRAW((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbImage*) G__getstructoffset())->LoadBMP((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbImage*) G__getstructoffset())->DumpPGM((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbImage::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbImage::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbImage::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbImage::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbImage*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbImage::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbImage::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbImage::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict_649_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbImage::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EdbDict_649_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbImage* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbImage(*(EdbImage*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EdbDictLN_EdbImage));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbImage G__TEdbImage;
static int G__EdbDict_649_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbImage*) (soff+(sizeof(EdbImage)*i)))->~G__TEdbImage();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbImage*) (soff))->~G__TEdbImage();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EdbDict_649_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbImage* dest = (EdbImage*) G__getstructoffset();
   *dest = *(EdbImage*) libp->para[0].ref;
   const EdbImage& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__EdbDict__0_940(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Log0((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), *((va_list*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EdbDict__0_941(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   G__va_arg_buf G__va_arg_bufobj;
   G__va_arg_put(&G__va_arg_bufobj, libp, 3);
      G__letint(result7, 103, (long) Log((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), G__va_arg_bufobj));
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* EdbAffine2D */

/* EdbAffine3D */

/* EdbPoint */

/* EdbPoint2D */

/* EdbPoint3D */

/* EdbAngle2D */

/* EdbTrack2D */

/* EdbPointsBox2D */

/* EdbPointsBox3D */

/* EdbCluster */

/* EdbClustersBox */

/* EdbSeg3D */

/* EdbSegment */

/* EdbTrack */

/* EdbFrame */

/* EdbViewHeader */

/* EdbView */

/* EdbCCD */

/* EdbObjective */

/* EdbStage */

/* EdbMark */

/* EdbMarksBox */

/* EdbMarksSet */

/* EdbArea */

/* EdbPlate */

/* EdbCamera */

/* EdbRunHeader */

/* EdbPredictionDC */

/* EdbPredictionsBox */

/* EdbRun */

/* EdbImage */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncEdbDict {
 public:
  G__Sizep2memfuncEdbDict(): p(&G__Sizep2memfuncEdbDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncEdbDict::*p)();
};

size_t G__get_sizep2memfuncEdbDict()
{
  G__Sizep2memfuncEdbDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceEdbDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D))) {
     EdbAffine2D *G__Lderived;
     G__Lderived=(EdbAffine2D*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D))) {
     EdbAffine3D *G__Lderived;
     G__Lderived=(EdbAffine3D*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D))) {
     EdbPoint2D *G__Lderived;
     G__Lderived=(EdbPoint2D*)0x1000;
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D))) {
     EdbPoint3D *G__Lderived;
     G__Lderived=(EdbPoint3D*)0x1000;
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack2D))) {
     EdbTrack2D *G__Lderived;
     G__Lderived=(EdbTrack2D*)0x1000;
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack2D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack2D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbAngle2D *G__Lpbase=(EdbAngle2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack2D),G__get_linked_tagnum(&G__EdbDictLN_EdbAngle2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D))) {
     EdbPointsBox2D *G__Lderived;
     G__Lderived=(EdbPointsBox2D*)0x1000;
     {
       EdbPoint3D *G__Lpbase=(EdbPoint3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox3D))) {
     EdbPointsBox3D *G__Lderived;
     G__Lderived=(EdbPointsBox3D*)0x1000;
     {
       EdbPointsBox2D *G__Lpbase=(EdbPointsBox2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox3D),G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint3D *G__Lpbase=(EdbPoint3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox3D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox3D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox3D),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbCluster))) {
     EdbCluster *G__Lderived;
     G__Lderived=(EdbCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCluster),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint3D *G__Lpbase=(EdbPoint3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCluster),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCluster),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCluster),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbClustersBox))) {
     EdbClustersBox *G__Lderived;
     G__Lderived=(EdbClustersBox*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbClustersBox),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPointsBox3D *G__Lpbase=(EdbPointsBox3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbClustersBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPointsBox2D *G__Lpbase=(EdbPointsBox2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbClustersBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint3D *G__Lpbase=(EdbPoint3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbClustersBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbClustersBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbClustersBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D))) {
     EdbSeg3D *G__Lderived;
     G__Lderived=(EdbSeg3D*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbSegment))) {
     EdbSegment *G__Lderived;
     G__Lderived=(EdbSegment*)0x1000;
     {
       EdbSeg3D *G__Lpbase=(EdbSeg3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbSegment),G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbSegment),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack))) {
     EdbTrack *G__Lderived;
     G__Lderived=(EdbTrack*)0x1000;
     {
       EdbSeg3D *G__Lpbase=(EdbSeg3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack),G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbFrame))) {
     EdbFrame *G__Lderived;
     G__Lderived=(EdbFrame*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbFrame),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader))) {
     EdbViewHeader *G__Lderived;
     G__Lderived=(EdbViewHeader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbView))) {
     EdbView *G__Lderived;
     G__Lderived=(EdbView*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbView),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbCCD))) {
     EdbCCD *G__Lderived;
     G__Lderived=(EdbCCD*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCCD),G__get_linked_tagnum(&G__EdbDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCCD),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbObjective))) {
     EdbObjective *G__Lderived;
     G__Lderived=(EdbObjective*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbObjective),G__get_linked_tagnum(&G__EdbDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbObjective),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbStage))) {
     EdbStage *G__Lderived;
     G__Lderived=(EdbStage*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbStage),G__get_linked_tagnum(&G__EdbDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbStage),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbMark))) {
     EdbMark *G__Lderived;
     G__Lderived=(EdbMark*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMark),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMark),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMark),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox))) {
     EdbMarksBox *G__Lderived;
     G__Lderived=(EdbMarksBox*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPointsBox2D *G__Lpbase=(EdbPointsBox2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint3D *G__Lpbase=(EdbPoint3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet))) {
     EdbMarksSet *G__Lderived;
     G__Lderived=(EdbMarksSet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbArea))) {
     EdbArea *G__Lderived;
     G__Lderived=(EdbArea*)0x1000;
     {
       EdbMarksBox *G__Lpbase=(EdbMarksBox*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbArea),G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbArea),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPointsBox2D *G__Lpbase=(EdbPointsBox2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbArea),G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint3D *G__Lpbase=(EdbPoint3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbArea),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbArea),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbArea),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbPlate))) {
     EdbPlate *G__Lderived;
     G__Lderived=(EdbPlate*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPlate),G__get_linked_tagnum(&G__EdbDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPlate),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbCamera))) {
     EdbCamera *G__Lderived;
     G__Lderived=(EdbCamera*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCamera),G__get_linked_tagnum(&G__EdbDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCamera),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader))) {
     EdbRunHeader *G__Lderived;
     G__Lderived=(EdbRunHeader*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader),G__get_linked_tagnum(&G__EdbDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC))) {
     EdbPredictionDC *G__Lderived;
     G__Lderived=(EdbPredictionDC*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbTrack2D *G__Lpbase=(EdbTrack2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC),G__get_linked_tagnum(&G__EdbDictLN_EdbTrack2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbAngle2D *G__Lpbase=(EdbAngle2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC),G__get_linked_tagnum(&G__EdbDictLN_EdbAngle2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox))) {
     EdbPredictionsBox *G__Lderived;
     G__Lderived=(EdbPredictionsBox*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPointsBox2D *G__Lpbase=(EdbPointsBox2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       EdbPoint3D *G__Lpbase=(EdbPoint3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint2D *G__Lpbase=(EdbPoint2D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       EdbPoint *G__Lpbase=(EdbPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox),G__get_linked_tagnum(&G__EdbDictLN_EdbPoint),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbRun))) {
     EdbRun *G__Lderived;
     G__Lderived=(EdbRun*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbRun),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EdbDictLN_EdbImage))) {
     EdbImage *G__Lderived;
     G__Lderived=(EdbImage*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbImage),G__get_linked_tagnum(&G__EdbDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableEdbDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("iterator<iterator_traits<string::iterator>::iterator_category,iterator_traits<string::iterator>::value_type,iterator_traits<string::iterator>::difference_type,iterator_traits<string::iterator>::pointer,iterator_traits<string::iterator>::reference>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long,char*>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<string::const_iterator>::iterator_category,iterator_traits<string::const_iterator>::value_type,iterator_traits<string::const_iterator>::difference_type,iterator_traits<string::const_iterator>::pointer,iterator_traits<string::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EdbDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EdbDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EdbDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EdbDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EdbDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EdbDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EdbDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EdbDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EdbDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EdbDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EdbDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EdbDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__EdbDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__EdbDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EdbDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EdbDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__EdbDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* EdbAffine2D */
static void G__setup_memvarEdbAffine2D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D));
   { EdbAffine2D *p; p=(EdbAffine2D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA11=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA12=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA21=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA22=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eB1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eB2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbAffine3D */
static void G__setup_memvarEdbAffine3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D));
   { EdbAffine3D *p; p=(EdbAffine3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA11=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA12=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA13=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA21=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA22=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA23=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA31=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA32=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eA33=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eB1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eB2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eB3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPoint */
static void G__setup_memvarEdbPoint(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint));
   { EdbPoint *p; p=(EdbPoint*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPoint2D */
static void G__setup_memvarEdbPoint2D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D));
   { EdbPoint2D *p; p=(EdbPoint2D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPoint3D */
static void G__setup_memvarEdbPoint3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D));
   { EdbPoint3D *p; p=(EdbPoint3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbAngle2D */
static void G__setup_memvarEdbAngle2D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbAngle2D));
   { EdbAngle2D *p; p=(EdbAngle2D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbTrack2D */
static void G__setup_memvarEdbTrack2D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack2D));
   { EdbTrack2D *p; p=(EdbTrack2D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPointsBox2D */
static void G__setup_memvarEdbPointsBox2D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D));
   { EdbPointsBox2D *p; p=(EdbPointsBox2D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D),-1,-1,4,"eKeep=",0,"affine transformation to keep all operations ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPointsBox3D */
static void G__setup_memvarEdbPointsBox3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox3D));
   { EdbPointsBox3D *p; p=(EdbPointsBox3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbCluster */
static void G__setup_memvarEdbCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCluster));
   { EdbCluster *p; p=(EdbCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eX=",0,"cluster coordinates in pixels(?)");
   G__memvar_setup((void*)((long)(&p->eY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eArea)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eArea=",0,"Cluster area: number of pixels");
   G__memvar_setup((void*)((long)(&p->eVolume)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eVolume=",0,"Cluster volume - in case of greyscale pixels");
   G__memvar_setup((void*)((long)(&p->eFrame)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eFrame=",0,"frame index");
   G__memvar_setup((void*)((long)(&p->eSide)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eSide=",0,"emulsion side index");
   G__memvar_setup((void*)((long)(&p->eSegment)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eSegment=",0,"segment id to be attached (-1 if no segment)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbClustersBox */
static void G__setup_memvarEdbClustersBox(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbClustersBox));
   { EdbClustersBox *p; p=(EdbClustersBox*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClonesArray),-1,-1,4,"eClusters=",0,"collection of clusters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbSeg3D */
static void G__setup_memvarEdbSeg3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D));
   { EdbSeg3D *p; p=(EdbSeg3D*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eX0=",0,"|_coordinates of the segment's initial point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eY0=",0,"| in the SAME FOR ALL SEGMENTS stage coordinate system");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZ0=",0,"|");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eTx=",0,"tanX: deltaX/deltaZ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eTy=",0,"tanY: deltaY/deltaZ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDz=",0,"length of the segment along Z with sign");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbSegment */
static void G__setup_memvarEdbSegment(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbSegment));
   { EdbSegment *p; p=(EdbSegment*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eSide=",0,"side of the segment location (0-up, 1-down)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ePuls=",0,"puls height (number of grains)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID=",0,"segment identifier");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaX=",0,"dispersion parameter of grains around track line");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaY=",0,"dispersion parameter of grains around track line");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TObjArray),-1,-1,4,"eElements=",0,"! array of clusters (transient!)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbTrack */
static void G__setup_memvarEdbTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack));
   { EdbTrack *p; p=(EdbTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID=",0,"Track identifier");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TObjArray),-1,-1,4,"eElements=",0,"! array of segments (transient!)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbFrame */
static void G__setup_memvarEdbFrame(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbFrame));
   { EdbFrame *p; p=(EdbFrame*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFrameID=",0,"frame identifier");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZframe=",0,"Z-coordinate of the frame");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNcl=",0,"total number of clusters found in the frame");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNpix=",0,"total number of nonzero pixels found in the frame");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbImage),-1,-1,4,"eImage=",0,"CCD image");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbViewHeader */
static void G__setup_memvarEdbViewHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader));
   { EdbViewHeader *p; p=(EdbViewHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eViewID=",0,"View ID in the Area");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eAreaID=",0,"Area ID in Run (fragment id)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eXview=",0,"stage coord, top left corner");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eYview=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZ1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZ2=",0,"emulsion surfaces in absolute stage coordinates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZ3=",0,"measured once per view");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZ4=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNframesTop=",0,"top    | number of frames in the view (0,1,2...16...)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNframesBot=",0,"bottom | ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eTime=",0,"System time since last view saving in msec");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNclusters=",0,"number of clusters saved in the view");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNsegments=",0,"number of segments saved in the view");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D),-1,-1,4,"eAff=",0,"affine transformation for the view ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TArrayF),-1,-1,4,"eZlevels=",0,"! z of each taken view (frame) (obsolete!)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eCol=",0,"the position of the view in the scanned area, measured in views, ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eRow=",0,"starting from the reference angle (typically up-left)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eStatus=",0,"View scanning status");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eEvent=",0,"optional: the part of the tree may be associated with event. Setted via run->header->Flag(8)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eTrack=",0,"optional: some view group may be associated with track. Setted via run->header->Flag(9)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbView */
static void G__setup_memvarEdbView(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbView));
   { EdbView *p; p=(EdbView*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader),-1,-1,4,"eHeader=",0,"View header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClonesArray),-1,-1,4,"eClusters=",0,"array of Clusters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClonesArray),-1,-1,4,"eSegments=",0,"array of Segments");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClonesArray),-1,-1,4,"eTracks=",0,"array of Tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClonesArray),-1,-1,4,"eFrames=",0,"array of Frames (images)");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"eLastSystemTime=",0,"system time when view was saved");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbCCD */
static void G__setup_memvarEdbCCD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCCD));
   { EdbCCD *p; p=(EdbCCD*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNx=",0,"number of pixels along X (number of columns)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNy=",0,"number of pixels along Y (number of rows)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ePixX=",0,"physical pixel size in microns along X");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ePixY=",0,"physical pixel size in microns along Y");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbObjective */
static void G__setup_memvarEdbObjective(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbObjective));
   { EdbObjective *p; p=(EdbObjective*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eMagnification=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D),-1,-1,4,"eCCD2Stage=",0,"from CCD pixels to stage microns");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbStage */
static void G__setup_memvarEdbStage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbStage));
   { EdbStage *p; p=(EdbStage*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbCCD),-1,-1,4,"eCCD=",0,"CDD matrix physical parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbObjective),-1,-1,4,"eObjective=",0,"Objective parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D),-1,-1,4,"eEncoders2Stage=",0,"XYZ encoders to Stage affine transformation parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbMark */
static void G__setup_memvarEdbMark(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMark));
   { EdbMark *p; p=(EdbMark*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID=",0,"fiducial mark id");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eY=",0,"coordinates");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFlag=",0,"reserved for information top/bottom/lateral/damaged/etc");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbMarksBox */
static void G__setup_memvarEdbMarksBox(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox));
   { EdbMarksBox *p; p=(EdbMarksBox*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClonesArray),-1,-1,4,"eMarks=",0,"collection of fiducial marks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbMarksSet */
static void G__setup_memvarEdbMarksSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet));
   { EdbMarksSet *p; p=(EdbMarksSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox),-1,-1,4,"eAbsolute=",0,"fiducial marks in absolute coord ($b)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox),-1,-1,4,"eStage=",0,"fiducial marks in stage    coord ($a)");
   G__memvar_setup((void*)((long)(&p->eXmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eXmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBrick)-(long)(p)),108,0,0,-1,G__defined_typename("Long_t"),-1,1,"eBrick=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbArea */
static void G__setup_memvarEdbArea(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbArea));
   { EdbArea *p; p=(EdbArea*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eN=",0,"number of views in the area");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eStepX=",0,"distance between zones");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eStepY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFramesTop=",0,"number of frames to scan");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFramesBot=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ePath=",0,"path to be used (0-nopath, 1-spiral, 2-serpentine, ...)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPlate */
static void G__setup_memvarEdbPlate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPlate));
   { EdbPlate *p; p=(EdbPlate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eID=",0,"plate ID");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eUp=",0,"Up side   | nominal emulsion thickness before shrinkage (on the beam)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eBase=",0,"base thickness");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDown=",0,"Down side |  (normally should be the same)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eShrinkageU=",0,"srinkage of the Up side (measured in the test run)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eShrinkageD=",0,"srinkage of the Down side (measured in the test run)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbCamera */
static void G__setup_memvarEdbCamera(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCamera));
   { EdbCamera *p; p=(EdbCamera*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eWidth=",0,"dimension of the image along rows");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eHeight=",0,"dimension of the image along columns");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eRows=",0,"number of rows in the matrix");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eColumns=",0,"number of columns in the matrix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbRunHeader */
static void G__setup_memvarEdbRunHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader));
   { EdbRunHeader *p; p=(EdbRunHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eRunID=",0,"Run identifier");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFlag[10]=",0,"customize run flags:");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdbDictLN_TDatime),-1,-1,4,"eStartTime=",0,"Date and Time of run starting");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdbDictLN_TDatime),-1,-1,4,"eFinishTime=",0,"Date and Time of run finishing");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"eSystemStartTime=",0,"System time of run start in msec");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"eCPU=",0,"CPU time of run production");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdbDictLN_TString),-1,-1,4,"eComment=",0,"Comment to define this scanning session");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbArea),-1,-1,4,"eArea=",0,"definition of scanning area (views path)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbPlate),-1,-1,4,"ePlate=",0,"Emulsion plate specification");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbStage),-1,-1,4,"eStage=",0,"stage specification");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eXmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eXmax=",0,"Run scanning limits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eYmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eYmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNareas=",0,"total number of areas (fragments) in the run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPredictionDC */
static void G__setup_memvarEdbPredictionDC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC));
   { EdbPredictionDC *p; p=(EdbPredictionDC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eIDp=",0,"prediction id");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eEvent=",0,"event id");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFlag=",0,"prediction flag");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eTy=",0,"tanX: deltaX/deltaZ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eTz=",0,"tanY: deltaY/deltaZ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eYp=",0,"|_coordinates of the prediction in");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZp=",0,"|  absolute coord system");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbPredictionsBox */
static void G__setup_memvarEdbPredictionsBox(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox));
   { EdbPredictionsBox *p; p=(EdbPredictionsBox*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClonesArray),-1,-1,4,"ePredictions=",0,"collection of predictions");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbRun */
static void G__setup_memvarEdbRun(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbRun));
   { EdbRun *p; p=(EdbRun*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader),-1,-1,4,"eHeader=",0,"run header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbView),-1,-1,4,"eView=",0,"view using for import and export data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TTree),-1,-1,4,"eTree=",0,"tree with View objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TFile),-1,-1,4,"eFile=",0,"file associated with the Run");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdbDictLN_TString),-1,-1,4,"ePath=",0,"runs directory path");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox),-1,-1,4,"ePredictions=",0,"predictions to scan ($c)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TTree),-1,-1,4,"eViewMerge=",0,"view merging alignment");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TTree),-1,-1,4,"eViewAlign=",0,"view neighbours  alignment");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TTree),-1,-1,4,"eFrameAlign=",0,"frames alignment");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TTree),-1,-1,4,"ePinViews=",0,"pinned views");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdbDictLN_AlignmentParView),-1,-1,4,"eVM=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdbDictLN_AlignmentParView),-1,-1,4,"eVA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EdbDictLN_AlignmentParFrame),-1,-1,4,"eFA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader),-1,-1,4,"ePVH=",0,"to add pinned view header");
   G__memvar_setup((void*)((long)(&p->eMarks)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet),-1,-1,1,"eMarks=",0,"fiducial marks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbImage */
static void G__setup_memvarEdbImage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbImage));
   { EdbImage *p; p=(EdbImage*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eColumns=",0,"number of columns of the matrix (1 row length)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eRows=",0,"number of rows of the matrix");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eColors=",0,"maximal height of pixel (normally 256)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TArrayC),-1,-1,4,"eBuffer=",0,"body of the image buffer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eBytes=",0,"number of significative bytes in the buffer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarEdbDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEdbAffine2D(void) {
   /* EdbAffine2D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D));
   G__memfunc_setup("EdbAffine2D",970,G__EdbDict_578_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbAffine2D",970,G__EdbDict_578_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbAffine2D",970,G__EdbDict_578_0_3, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 6, 1, 1, 0, 
"f - - 0 - a11 f - - 0 - a12 "
"f - - 0 - a21 f - - 0 - a22 "
"f - - 0 - b1 f - - 0 - b2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_578_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbAffine2D' - 1 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_578_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_578_0_6, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - a11 f - - 0 - a12 "
"f - - 0 - a21 f - - 0 - a22 "
"f - - 0 - b1 f - - 0 - b2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A11",163,G__EdbDict_578_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A12",164,G__EdbDict_578_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A21",164,G__EdbDict_578_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A22",165,G__EdbDict_578_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("B1",115,G__EdbDict_578_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("B2",116,G__EdbDict_578_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Transform",956,G__EdbDict_578_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Transform",956,G__EdbDict_578_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbAffine2D' - 11 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__EdbDict_578_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Invert",632,G__EdbDict_578_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAxisX",793,G__EdbDict_578_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - a f - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAxisY",794,G__EdbDict_578_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - a f - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZoomX",509,G__EdbDict_578_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZoomY",510,G__EdbDict_578_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zoom",421,G__EdbDict_578_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShiftX",598,G__EdbDict_578_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShiftY",599,G__EdbDict_578_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Rotate",623,G__EdbDict_578_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__EdbDict_578_0_25, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'EdbPointsBox2D' - 0 - b1 U 'EdbPointsBox2D' - 0 - b2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__EdbDict_578_0_26, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"i - - 0 - n F - - 0 - x0 "
"F - - 0 - y0 F - - 0 - x1 "
"F - - 0 - y1 i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateFull",1313,G__EdbDict_578_0_27, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - - 0 - n F - - 0 - x0 "
"F - - 0 - y0 F - - 0 - x1 "
"F - - 0 - y1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateTurn",1335,G__EdbDict_578_0_28, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - - 0 - n F - - 0 - x0 "
"F - - 0 - y0 F - - 0 - x1 "
"F - - 0 - y1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Phi",289,G__EdbDict_578_0_29, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,G__EdbDict_578_0_30, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xtrans",640,G__EdbDict_578_0_31, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ytrans",641,G__EdbDict_578_0_32, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_578_0_34, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbAffine2D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_578_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAffine2D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_578_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbAffine2D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_578_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbAffine2D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_578_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_578_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAffine2D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_578_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbAffine2D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_578_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAffine2D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_578_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbAffine2D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbAffine2D", 970, G__EdbDict_578_0_46, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 1, 1, 1, 0, "u 'EdbAffine2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbAffine2D", 1096, G__EdbDict_578_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_578_0_48, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 1, 1, 1, 1, 0, "u 'EdbAffine2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbAffine3D(void) {
   /* EdbAffine3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D));
   G__memfunc_setup("EdbAffine3D",971,G__EdbDict_579_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_579_0_2, 121, -1, -1, 0, 12, 1, 1, 0, 
"f - - 0 - a11 f - - 0 - a12 "
"f - - 0 - a13 f - - 0 - a21 "
"f - - 0 - a22 f - - 0 - a23 "
"f - - 0 - a31 f - - 0 - a32 "
"f - - 0 - a33 f - - 0 - b1 "
"f - - 0 - b2 f - - 0 - b3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__EdbDict_579_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A11",163,G__EdbDict_579_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A12",164,G__EdbDict_579_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A13",165,G__EdbDict_579_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A21",164,G__EdbDict_579_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A22",165,G__EdbDict_579_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A23",166,G__EdbDict_579_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A31",165,G__EdbDict_579_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A32",166,G__EdbDict_579_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A33",167,G__EdbDict_579_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("B1",115,G__EdbDict_579_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("B2",116,G__EdbDict_579_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("B3",117,G__EdbDict_579_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAxisX",793,G__EdbDict_579_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - a f - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAxisY",794,G__EdbDict_579_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - a f - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAxisZ",795,G__EdbDict_579_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - a f - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSlantXZ",992,G__EdbDict_579_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSlantYZ",993,G__EdbDict_579_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZoomX",509,G__EdbDict_579_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZoomY",510,G__EdbDict_579_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZoomZ",511,G__EdbDict_579_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zoom",421,G__EdbDict_579_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShiftX",598,G__EdbDict_579_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - d", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShiftY",599,G__EdbDict_579_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - d", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShiftZ",600,G__EdbDict_579_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - d", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_579_0_29, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbAffine3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_579_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAffine3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_579_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbAffine3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_579_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbAffine3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_579_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_579_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAffine3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_579_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbAffine3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_579_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAffine3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_579_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbAffine3D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbAffine3D", 971, G__EdbDict_579_0_41, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D), -1, 0, 1, 1, 1, 0, "u 'EdbAffine3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbAffine3D", 1097, G__EdbDict_579_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_579_0_43, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D), -1, 1, 1, 1, 1, 0, "u 'EdbAffine3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPoint(void) {
   /* EdbPoint */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint));
   G__memfunc_setup("X",88,G__EdbDict_580_0_1, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Y",89,G__EdbDict_580_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Z",90,G__EdbDict_580_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetX",388,G__EdbDict_580_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetY",389,G__EdbDict_580_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - y", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetZ",390,G__EdbDict_580_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Transform",956,G__EdbDict_580_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Transform",956,G__EdbDict_580_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine3D' - 10 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Substruct",975,G__EdbDict_580_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPoint' - 0 - p", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Test",416,G__EdbDict_580_0_10, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_580_0_11, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPoint::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_580_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPoint::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_580_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPoint::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_580_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPoint::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__EdbDict_580_0_15, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__EdbDict_580_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__EdbDict_580_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_580_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_580_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPoint::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_580_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPoint::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_580_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPoint::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_580_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPoint::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPoint", 915, G__EdbDict_580_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_580_0_24, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbPoint), -1, 1, 1, 1, 1, 0, "u 'EdbPoint' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPoint2D(void) {
   /* EdbPoint2D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D));
   G__memfunc_setup("X",88,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Z",90,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetX",388,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetY",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - y", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetZ",390,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Transform",956,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Substruct",975,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPoint' - 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__EdbDict_581_0_9, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Test",416,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestPoint2D",1056,G__EdbDict_581_0_11, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_581_0_12, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPoint2D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_581_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPoint2D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_581_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPoint2D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_581_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPoint2D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_581_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_581_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPoint2D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_581_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPoint2D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_581_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPoint2D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_581_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPoint2D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPoint2D", 1033, G__EdbDict_581_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_581_0_25, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbPoint2D), -1, 1, 1, 1, 1, 0, "u 'EdbPoint2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPoint3D(void) {
   /* EdbPoint3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D));
   G__memfunc_setup("Z",90,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetZ",390,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Transform",956,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine3D' - 10 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Substruct",975,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPoint' - 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Test",416,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestPoint3D",1057,G__EdbDict_582_0_7, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_582_0_8, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPoint3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_582_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPoint3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_582_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPoint3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_582_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPoint3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_582_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_582_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPoint3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_582_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPoint3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_582_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPoint3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_582_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPoint3D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPoint3D", 1034, G__EdbDict_582_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_582_0_21, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbPoint3D), -1, 1, 1, 1, 1, 0, "u 'EdbPoint3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbAngle2D(void) {
   /* EdbAngle2D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbAngle2D));
   G__memfunc_setup("TX",172,G__EdbDict_583_0_1, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "tangens = deltaX/deltaZ", (void*) NULL, 3);
   G__memfunc_setup("TY",173,G__EdbDict_583_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetTX",472,G__EdbDict_583_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetTY",473,G__EdbDict_583_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - y", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Transform",956,G__EdbDict_583_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Substruct",975,G__EdbDict_583_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAngle2D' - 10 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Test",416,G__EdbDict_583_0_7, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__EdbDict_583_0_8, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_583_0_9, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbAngle2D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_583_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAngle2D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_583_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbAngle2D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_583_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbAngle2D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__EdbDict_583_0_13, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__EdbDict_583_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__EdbDict_583_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_583_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_583_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAngle2D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_583_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbAngle2D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_583_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbAngle2D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_583_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbAngle2D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbAngle2D", 998, G__EdbDict_583_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_583_0_22, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbAngle2D), -1, 1, 1, 1, 1, 0, "u 'EdbAngle2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbTrack2D(void) {
   /* EdbTrack2D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack2D));
   G__memfunc_setup("Transform",956,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Substruct",975,G__EdbDict_584_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbTrack2D' - 0 - t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Test",416,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_584_0_5, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbTrack2D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_584_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrack2D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_584_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbTrack2D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_584_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbTrack2D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_584_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_584_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrack2D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_584_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTrack2D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_584_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrack2D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_584_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTrack2D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbTrack2D", 1012, G__EdbDict_584_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_584_0_18, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbTrack2D), -1, 1, 1, 1, 1, 0, "u 'EdbTrack2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPointsBox2D(void) {
   /* EdbPointsBox2D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D));
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("N",78,G__EdbDict_585_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("At",181,G__EdbDict_585_0_5, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbPoint), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("X",88,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Z",90,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetX",388,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetY",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZ",390,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Transform",956,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Substruct",975,G__EdbDict_585_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPointsBox2D' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Retransform",1171,G__EdbDict_585_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetKeep",677,G__EdbDict_585_0_15, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetKeep",677,G__EdbDict_585_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbAffine2D' - 1 - aff", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetKeep",689,G__EdbDict_585_0_17, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - a11 f - - 0 - a12 "
"f - - 0 - a21 f - - 0 - a22 "
"f - - 0 - b1 f - - 0 - b2", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Xmin",412,G__EdbDict_585_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Xmax",414,G__EdbDict_585_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Ymin",413,G__EdbDict_585_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Ymax",415,G__EdbDict_585_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeltaX",578,G__EdbDict_585_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeltaY",579,G__EdbDict_585_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShiftX",598,G__EdbDict_585_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - offset", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShiftY",599,G__EdbDict_585_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - offset", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScaleX",576,G__EdbDict_585_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - scaleFactor", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScaleY",577,G__EdbDict_585_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - scaleFactor", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Rotate",623,G__EdbDict_585_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - angle", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SmearXY",681,G__EdbDict_585_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - sigmax f - - 0 - sigmay", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Xhist",528,G__EdbDict_585_0_30, 85, G__get_linked_tagnum(&G__EdbDictLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Yhist",529,G__EdbDict_585_0_31, 85, G__get_linked_tagnum(&G__EdbDictLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("XYhist",617,G__EdbDict_585_0_32, 85, G__get_linked_tagnum(&G__EdbDictLN_TH2F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPoints",1035,G__EdbDict_585_0_33, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 '23' style i - - 0 '4' col "
"f - - 0 '1.' size", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_585_0_34, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPointsBox2D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_585_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPointsBox2D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_585_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPointsBox2D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_585_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPointsBox2D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_585_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_585_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPointsBox2D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_585_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPointsBox2D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_585_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPointsBox2D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_585_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPointsBox2D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPointsBox2D", 1445, G__EdbDict_585_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_585_0_47, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox2D), -1, 1, 1, 1, 1, 0, "u 'EdbPointsBox2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPointsBox3D(void) {
   /* EdbPointsBox3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox3D));
   G__memfunc_setup("Class",502,G__EdbDict_586_0_2, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPointsBox3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_586_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPointsBox3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_586_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPointsBox3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_586_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPointsBox3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_586_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_586_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPointsBox3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_586_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPointsBox3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_586_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPointsBox3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_586_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPointsBox3D::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPointsBox3D", 1446, G__EdbDict_586_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_586_0_15, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbPointsBox3D), -1, 1, 1, 1, 1, 0, "u 'EdbPointsBox3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbCluster(void) {
   /* EdbCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCluster));
   G__memfunc_setup("EdbCluster",1005,G__EdbDict_587_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbCluster",1005,G__EdbDict_587_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbCluster), -1, 0, 8, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - a "
"f - - 0 - v i - - 0 - f "
"i - - 0 - s i - - 0 '-1' seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Set0",348,G__EdbDict_587_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_587_0_5, 121, -1, -1, 0, 8, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - a "
"f - - 0 - v i - - 0 - f "
"i - - 0 - s i - - 0 '-1' seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetArea",677,G__EdbDict_587_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVolume",932,G__EdbDict_587_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFrame",791,G__EdbDict_587_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSide",689,G__EdbDict_587_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegment",1023,G__EdbDict_587_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__EdbDict_587_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__EdbDict_587_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__EdbDict_587_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArea",665,G__EdbDict_587_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolume",920,G__EdbDict_587_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFrame",779,G__EdbDict_587_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSide",677,G__EdbDict_587_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegment",1011,G__EdbDict_587_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPixelSum",1088,G__EdbDict_587_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - x i - - 0 - y "
"b - - 0 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Normalize",945,G__EdbDict_587_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Z",90,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetX",388,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetY",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZ",390,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,G__EdbDict_587_0_27, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TT",168,G__EdbDict_587_0_28, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEqual",692,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_587_0_32, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_587_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_587_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_587_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_587_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_587_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_587_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_587_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_587_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbCluster", 1005, G__EdbDict_587_0_44, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbCluster), -1, 0, 1, 1, 1, 0, "u 'EdbCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbCluster", 1131, G__EdbDict_587_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_587_0_46, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbCluster), -1, 1, 1, 1, 1, 0, "u 'EdbCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbClustersBox(void) {
   /* EdbClustersBox */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbClustersBox));
   G__memfunc_setup("AddCluster",1003,G__EdbDict_588_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbCluster' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__EdbDict_588_0_4, 121, -1, -1, 0, 8, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - a "
"f - - 0 - v i - - 0 - f "
"i - - 0 - s i - - 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN",366,G__EdbDict_588_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCluster",1026,G__EdbDict_588_0_6, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbCluster), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusters",1141,G__EdbDict_588_0_7, 85, G__get_linked_tagnum(&G__EdbDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N",78,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("At",181,G__EdbDict_588_0_9, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbPoint), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_588_0_10, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbClustersBox::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_588_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbClustersBox::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_588_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbClustersBox::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_588_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbClustersBox::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_588_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_588_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbClustersBox::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_588_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbClustersBox::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_588_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbClustersBox::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_588_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbClustersBox::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbClustersBox", 1543, G__EdbDict_588_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_588_0_23, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbClustersBox), -1, 1, 1, 1, 1, 0, "u 'EdbClustersBox' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbSeg3D(void) {
   /* EdbSeg3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D));
   G__memfunc_setup("EdbSeg3D",673,G__EdbDict_595_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbSeg3D",673,G__EdbDict_595_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D), -1, 0, 6, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - tx "
"f - - 0 - ty f - - 0 '0' dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX0",424,G__EdbDict_595_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetY0",425,G__EdbDict_595_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ0",426,G__EdbDict_595_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTx",492,G__EdbDict_595_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTy",493,G__EdbDict_595_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDz",478,G__EdbDict_595_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetX0",436,G__EdbDict_595_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetY0",437,G__EdbDict_595_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZ0",438,G__EdbDict_595_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTx",504,G__EdbDict_595_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - tx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTy",505,G__EdbDict_595_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - ty", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDz",490,G__EdbDict_595_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - dz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Set",300,G__EdbDict_595_0_15, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - tx "
"f - - 0 - ty f - - 0 '0' dz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Transform",956,G__EdbDict_595_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - aff", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_595_0_17, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbSeg3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_595_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSeg3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_595_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbSeg3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_595_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbSeg3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_595_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_595_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSeg3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_595_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSeg3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_595_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSeg3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_595_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSeg3D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbSeg3D", 673, G__EdbDict_595_0_29, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D), -1, 0, 1, 1, 1, 0, "u 'EdbSeg3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbSeg3D", 799, G__EdbDict_595_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_595_0_31, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbSeg3D), -1, 1, 1, 1, 1, 0, "u 'EdbSeg3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbSegment(void) {
   /* EdbSegment */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbSegment));
   G__memfunc_setup("EdbSegment",990,G__EdbDict_596_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbSegment), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbSegment",990,G__EdbDict_596_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbSegment), -1, 0, 9, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - tx "
"f - - 0 - ty f - - 0 '0' dz "
"i - - 0 '0' side i - - 0 '0' puls "
"i - - 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_596_0_3, 121, -1, -1, 0, 9, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - tx "
"f - - 0 - ty f - - 0 '0' dz "
"i - - 0 '0' side i - - 0 '0' puls "
"i - - 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__EdbDict_596_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegment' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma",797,G__EdbDict_596_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - sx f - - 0 - sy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaX",873,G__EdbDict_596_0_6, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaY",874,G__EdbDict_596_0_7, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSide",677,G__EdbDict_596_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPuls",708,G__EdbDict_596_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolume",920,G__EdbDict_596_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__EdbDict_596_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSide",689,G__EdbDict_596_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPuls",720,G__EdbDict_596_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - puls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__EdbDict_596_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIDE",510,G__EdbDict_596_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIDE",510,G__EdbDict_596_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnSetIDE",705,G__EdbDict_596_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNelements",1227,G__EdbDict_596_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElements",1117,G__EdbDict_596_0_19, 85, G__get_linked_tagnum(&G__EdbDictLN_TObjArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddElement",979,G__EdbDict_596_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - element", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_596_0_22, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbSegment::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_596_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegment::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_596_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbSegment::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_596_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbSegment::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_596_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_596_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegment::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_596_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegment::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_596_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbSegment::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_596_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbSegment::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbSegment", 990, G__EdbDict_596_0_34, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbSegment), -1, 0, 1, 1, 1, 0, "u 'EdbSegment' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbSegment", 1116, G__EdbDict_596_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_596_0_36, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbSegment), -1, 1, 1, 1, 1, 0, "u 'EdbSegment' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbTrack(void) {
   /* EdbTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbTrack));
   G__memfunc_setup("EdbTrack",768,G__EdbDict_597_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbTrack",768,G__EdbDict_597_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbTrack), -1, 0, 7, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - tx "
"f - - 0 - ty f - - 0 '0' dz "
"i - - 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_597_0_3, 121, -1, -1, 0, 7, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - tx "
"f - - 0 - ty f - - 0 - dz "
"i - - 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__EdbDict_597_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNelements",1227,G__EdbDict_597_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElements",1117,G__EdbDict_597_0_6, 85, G__get_linked_tagnum(&G__EdbDictLN_TObjArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddElement",979,G__EdbDict_597_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - element", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_597_0_9, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_597_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_597_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_597_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_597_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_597_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_597_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_597_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_597_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbTrack", 768, G__EdbDict_597_0_21, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbTrack), -1, 0, 1, 1, 1, 0, "u 'EdbTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbTrack", 894, G__EdbDict_597_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_597_0_23, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbTrack), -1, 1, 1, 1, 1, 0, "u 'EdbTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbFrame(void) {
   /* EdbFrame */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbFrame));
   G__memfunc_setup("EdbFrame",758,G__EdbDict_598_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbFrame), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbFrame",758,G__EdbDict_598_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbFrame), -1, 0, 4, 1, 1, 0, 
"i - - 0 - frame f - - 0 '0' z "
"i - - 0 '0' ncl i - - 0 '0' npix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbFrame",758,G__EdbDict_598_0_3, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbFrame), -1, 0, 5, 1, 1, 0, 
"i - - 0 - frame i - - 0 - columns "
"i - - 0 - rows C - - 0 - image "
"f - - 0 '0' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdbDict_598_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__EdbDict_598_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__EdbDict_598_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImage",783,G__EdbDict_598_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbImage' - 0 - image", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__EdbDict_598_0_8, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__EdbDict_598_0_9, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNcl",573,G__EdbDict_598_0_10, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNpix",703,G__EdbDict_598_0_11, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImage",771,G__EdbDict_598_0_12, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbImage), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBuffer",890,G__EdbDict_598_0_14, 67, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pixel",514,G__EdbDict_598_0_15, 99, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - r i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist2",746,G__EdbDict_598_0_16, 85, G__get_linked_tagnum(&G__EdbDictLN_TH2F), -1, 0, 1, 1, 1, 8, "i - - 0 '0' flip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist1",745,G__EdbDict_598_0_17, 85, G__get_linked_tagnum(&G__EdbDictLN_TH1F), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_598_0_18, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbFrame::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_598_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbFrame::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_598_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbFrame::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_598_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbFrame::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_598_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_598_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbFrame::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_598_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbFrame::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_598_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbFrame::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_598_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbFrame::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbFrame", 758, G__EdbDict_598_0_30, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbFrame), -1, 0, 1, 1, 1, 0, "u 'EdbFrame' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbFrame", 884, G__EdbDict_598_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_598_0_32, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbFrame), -1, 1, 1, 1, 1, 0, "u 'EdbFrame' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbViewHeader(void) {
   /* EdbViewHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader));
   G__memfunc_setup("EdbViewHeader",1263,G__EdbDict_599_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdbDict_599_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__EdbDict_599_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbViewHeader' - 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAffine",885,G__EdbDict_599_0_4, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - a11 f - - 0 - a12 "
"f - - 0 - a21 f - - 0 - a22 "
"f - - 0 - b1 f - - 0 - b2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAffine",873,G__EdbDict_599_0_5, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZlevels",1041,G__EdbDict_599_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 10 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZlevels",1029,G__EdbDict_599_0_7, 85, G__get_linked_tagnum(&G__EdbDictLN_TArrayF), -1, 0, 0, 1, 1, 8, "", "eZlevels;}", (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__EdbDict_599_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__EdbDict_599_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNclusters",1263,G__EdbDict_599_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nclu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNsegments",1248,G__EdbDict_599_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nseg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNclusters",1251,G__EdbDict_599_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNsegments",1236,G__EdbDict_599_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetViewID",840,G__EdbDict_599_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAreaID",806,G__EdbDict_599_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXview",819,G__EdbDict_599_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYview",820,G__EdbDict_599_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetViewID",852,G__EdbDict_599_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAreaID",818,G__EdbDict_599_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCoordXY",980,G__EdbDict_599_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCoordZ",893,G__EdbDict_599_0_21, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - z1 f - - 0 - z2 "
"f - - 0 - z3 f - - 0 - z4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNframes",1016,G__EdbDict_599_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - top i - - 0 - bot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColRow",898,G__EdbDict_599_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - col i - - 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatus",944,G__EdbDict_599_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrack",801,G__EdbDict_599_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvent",814,G__EdbDict_599_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ1",427,G__EdbDict_599_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ2",428,G__EdbDict_599_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ3",429,G__EdbDict_599_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ4",430,G__EdbDict_599_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ0top",765,G__EdbDict_599_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ0bot",751,G__EdbDict_599_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDZtop",785,G__EdbDict_599_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDZbot",771,G__EdbDict_599_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNframesTop",1311,G__EdbDict_599_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNframesBot",1297,G__EdbDict_599_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCol",574,G__EdbDict_599_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRow",600,G__EdbDict_599_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__EdbDict_599_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__EdbDict_599_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvent",802,G__EdbDict_599_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdbDict_599_0_42, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_599_0_43, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbViewHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_599_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_599_0_45, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbViewHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_599_0_46, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbViewHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_599_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_599_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_599_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_599_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_599_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbViewHeader", 1263, G__EdbDict_599_0_55, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader), -1, 0, 1, 1, 1, 0, "u 'EdbViewHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbViewHeader", 1389, G__EdbDict_599_0_56, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_599_0_57, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader), -1, 1, 1, 1, 1, 0, "u 'EdbViewHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbView(void) {
   /* EdbView */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbView));
   G__memfunc_setup("EdbView",678,G__EdbDict_600_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbView), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__EdbDict_600_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Scale",488,G__EdbDict_600_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - zscale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Shift",510,G__EdbDict_600_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - zshift", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Transform",956,G__EdbDict_600_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbAffine2D' - 10 - aff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateClustersFog",1948,G__EdbDict_600_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - density", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateClustersSegment",2387,G__EdbDict_600_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbSegment' - 0 - segment i - - 0 '25' n0 "
"f - - 0 '.1' sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateClustersTrack",2165,G__EdbDict_600_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbTrack' - 0 - track i - - 0 '25' n0 "
"f - - 0 '.1' sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintClusters",1378,G__EdbDict_600_0_10, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeader",873,G__EdbDict_600_0_11, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusters",1141,G__EdbDict_600_0_12, 85, G__get_linked_tagnum(&G__EdbDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegments",1126,G__EdbDict_600_0_13, 85, G__get_linked_tagnum(&G__EdbDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTracks",904,G__EdbDict_600_0_14, 85, G__get_linked_tagnum(&G__EdbDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFrames",894,G__EdbDict_600_0_15, 85, G__get_linked_tagnum(&G__EdbDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeaderAddr",1252,G__EdbDict_600_0_16, 89, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClustersAddr",1520,G__EdbDict_600_0_17, 89, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentsAddr",1505,G__EdbDict_600_0_18, 89, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTracksAddr",1283,G__EdbDict_600_0_19, 89, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFramesAddr",1273,G__EdbDict_600_0_20, 89, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AttachSegmentsToTracks",2246,G__EdbDict_600_0_21, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AttachClustersToSegments",2483,G__EdbDict_600_0_22, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AttachClustersToSegmentsFast",2881,G__EdbDict_600_0_23, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AttachClustersToSegmentsSlow",2904,G__EdbDict_600_0_24, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegmentsClusters",1979,G__EdbDict_600_0_25, 85, G__get_linked_tagnum(&G__EdbDictLN_TObjArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAreaID",818,G__EdbDict_600_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNframes",1016,G__EdbDict_600_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - top i - - 0 - bot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCoordXY",980,G__EdbDict_600_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCoordZ",893,G__EdbDict_600_0_29, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - z1 f - - 0 - z2 "
"f - - 0 - z3 f - - 0 - z4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetViewID",840,G__EdbDict_600_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAreaID",806,G__EdbDict_600_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXview",819,G__EdbDict_600_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYview",820,G__EdbDict_600_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ1",427,G__EdbDict_600_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ2",428,G__EdbDict_600_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ3",429,G__EdbDict_600_0_36, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ4",430,G__EdbDict_600_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ0top",765,G__EdbDict_600_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ0bot",751,G__EdbDict_600_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDZtop",785,G__EdbDict_600_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDZbot",771,G__EdbDict_600_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNframes",1004,G__EdbDict_600_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNframesTop",1311,G__EdbDict_600_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNframesBot",1297,G__EdbDict_600_0_44, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__EdbDict_600_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastSystemTime",1736,G__EdbDict_600_0_46, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLastSystemTime",1748,G__EdbDict_600_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClustersFrame",1632,G__EdbDict_600_0_48, 85, G__get_linked_tagnum(&G__EdbDictLN_TList), -1, 0, 1, 1, 1, 8, "i - - 0 - frame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nclusters",963,G__EdbDict_600_0_49, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nsegments",948,G__EdbDict_600_0_50, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ntracks",726,G__EdbDict_600_0_51, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCluster",1026,G__EdbDict_600_0_52, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbCluster), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegment",1011,G__EdbDict_600_0_53, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbSegment), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__EdbDict_600_0_54, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbTrack), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFrame",779,G__EdbDict_600_0_55, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbFrame), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZFrameMin",873,G__EdbDict_600_0_56, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZFrameMax",875,G__EdbDict_600_0_57, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__EdbDict_600_0_58, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbCluster), -1, 0, 1, 1, 1, 0, "U 'EdbCluster' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__EdbDict_600_0_59, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbCluster), -1, 0, 8, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - a "
"f - - 0 - v i - - 0 - f "
"i - - 0 - s i - - 0 '-1' seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__EdbDict_600_0_60, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbSegment), -1, 0, 9, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - tx "
"f - - 0 - ty f - - 0 '0' dz "
"i - - 0 '0' side i - - 0 '0' puls "
"i - - 0 '-1' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__EdbDict_600_0_61, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbSegment), -1, 0, 1, 1, 1, 0, "u 'EdbSegment' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__EdbDict_600_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbSegment' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__EdbDict_600_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbTrack' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFrame",756,G__EdbDict_600_0_64, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - id f - - 0 - z "
"i - - 0 '0' ncl i - - 0 '0' npix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFrame",756,G__EdbDict_600_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbFrame' - 0 - frame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateFrames",1417,G__EdbDict_600_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '32' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteClustersFog",1732,G__EdbDict_600_0_67, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawClustersFog",1535,G__EdbDict_600_0_68, 85, G__get_linked_tagnum(&G__EdbDictLN_TPolyMarker3D), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawClustersSegments",2089,G__EdbDict_600_0_69, 85, G__get_linked_tagnum(&G__EdbDictLN_TPolyMarker3D), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadView",791,G__EdbDict_600_0_71, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 0 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xmin",412,G__EdbDict_600_0_72, 102, -1, -1, 0, 0, 1, 1, 8, "", "View coordinates are in pixels", (void*) NULL, 0);
   G__memfunc_setup("Ymin",413,G__EdbDict_600_0_73, 102, -1, -1, 0, 0, 1, 1, 8, "", "starting from 0", (void*) NULL, 0);
   G__memfunc_setup("Zmin",414,G__EdbDict_600_0_74, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zmax",416,G__EdbDict_600_0_75, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_600_0_76, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbView::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_600_0_77, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbView::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_600_0_78, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbView::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_600_0_79, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbView::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_600_0_83, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_600_0_84, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbView::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_600_0_85, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbView::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_600_0_86, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbView::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_600_0_87, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbView::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbView", 678, G__EdbDict_600_0_88, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbView), -1, 0, 1, 1, 1, 0, "u 'EdbView' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbView", 804, G__EdbDict_600_0_89, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_600_0_90, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbView), -1, 1, 1, 1, 1, 0, "u 'EdbView' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbCCD(void) {
   /* EdbCCD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCCD));
   G__memfunc_setup("EdbCCD",469,G__EdbDict_604_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbCCD), -1, 0, 4, 1, 1, 0, 
"f - - 0 '0' px f - - 0 '0' py "
"i - - 0 '0' nx i - - 0 '0' ny", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_604_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 '0' nx i - - 0 '0' ny "
"f - - 0 '0' px f - - 0 '0' py", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNx",486,G__EdbDict_604_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNy",487,G__EdbDict_604_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixX",681,G__EdbDict_604_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixY",682,G__EdbDict_604_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadParameters",1424,G__EdbDict_604_0_7, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_604_0_9, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbCCD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_604_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCCD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_604_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbCCD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_604_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbCCD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_604_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_604_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCCD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_604_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCCD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_604_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCCD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_604_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCCD::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbCCD", 469, G__EdbDict_604_0_21, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbCCD), -1, 0, 1, 1, 1, 0, "u 'EdbCCD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbCCD", 595, G__EdbDict_604_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_604_0_23, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbCCD), -1, 1, 1, 1, 1, 0, "u 'EdbCCD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbObjective(void) {
   /* EdbObjective */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbObjective));
   G__memfunc_setup("EdbObjective",1190,G__EdbDict_605_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbObjective), -1, 0, 1, 1, 1, 0, "f - - 0 '0' mag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_605_0_2, 121, -1, -1, 0, 7, 1, 1, 0, 
"f - - 0 - mag f - - 0 - a "
"f - - 0 - b f - - 0 - c "
"f - - 0 - d f - - 0 - p "
"f - - 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMagnification",1637,G__EdbDict_605_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - mag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCCD2Stage",1052,G__EdbDict_605_0_4, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - a f - - 0 - b "
"f - - 0 - c f - - 0 - d "
"f - - 0 - p f - - 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMagnification",1625,G__EdbDict_605_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCCD2Stage",1040,G__EdbDict_605_0_6, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PixelX",602,G__EdbDict_605_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PixelY",603,G__EdbDict_605_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadParameters",1424,G__EdbDict_605_0_9, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_605_0_11, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbObjective::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_605_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbObjective::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_605_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbObjective::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_605_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbObjective::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_605_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_605_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbObjective::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_605_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbObjective::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_605_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbObjective::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_605_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbObjective::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbObjective", 1190, G__EdbDict_605_0_23, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbObjective), -1, 0, 1, 1, 1, 0, "u 'EdbObjective' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbObjective", 1316, G__EdbDict_605_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_605_0_25, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbObjective), -1, 1, 1, 1, 1, 0, "u 'EdbObjective' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbStage(void) {
   /* EdbStage */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbStage));
   G__memfunc_setup("EdbStage",767,G__EdbDict_606_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbStage), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CCD2Stage",752,G__EdbDict_606_0_2, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 0, 1, 1, 8, "", "create new object with copied affine parameters", (void*) NULL, 0);
   G__memfunc_setup("Encoders2Stage",1369,G__EdbDict_606_0_3, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D), -1, 0, 0, 1, 1, 8, "", "create new object with copied affine parameters", (void*) NULL, 0);
   G__memfunc_setup("PixelX",602,G__EdbDict_606_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PixelY",603,G__EdbDict_606_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCCD",490,G__EdbDict_606_0_6, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbCCD), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjective",1211,G__EdbDict_606_0_7, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbObjective), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEncoders2Stage",1657,G__EdbDict_606_0_8, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine3D), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_606_0_10, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbStage::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_606_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbStage::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_606_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbStage::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_606_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbStage::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_606_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_606_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbStage::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_606_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbStage::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_606_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbStage::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_606_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbStage::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbStage", 767, G__EdbDict_606_0_22, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbStage), -1, 0, 1, 1, 1, 0, "u 'EdbStage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbStage", 893, G__EdbDict_606_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_606_0_24, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbStage), -1, 1, 1, 1, 1, 0, "u 'EdbStage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbMark(void) {
   /* EdbMark */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMark));
   G__memfunc_setup("EdbMark",662,G__EdbDict_607_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbMark), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbMark",662,G__EdbDict_607_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbMark), -1, 0, 4, 1, 1, 0, 
"i - - 0 - id f - - 0 - x "
"f - - 0 - y i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__EdbDict_607_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__EdbDict_607_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__EdbDict_607_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_607_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - id f - - 0 - x "
"f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlag",678,G__EdbDict_607_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Flag",378,G__EdbDict_607_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetX",388,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetY",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_607_0_14, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbMark::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_607_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMark::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_607_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbMark::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_607_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbMark::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_607_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_607_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMark::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_607_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbMark::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_607_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMark::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_607_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbMark::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbMark", 662, G__EdbDict_607_0_26, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbMark), -1, 0, 1, 1, 1, 0, "u 'EdbMark' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbMark", 788, G__EdbDict_607_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_607_0_28, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbMark), -1, 1, 1, 1, 1, 0, "u 'EdbMark' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbMarksBox(void) {
   /* EdbMarksBox */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox));
   G__memfunc_setup("EdbMarksBox",1074,G__EdbDict_608_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbMarksBox",1074,G__EdbDict_608_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox), -1, 0, 1, 1, 1, 0, "u 'EdbMarksBox' - 11 - mb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbMarksBox",1074,G__EdbDict_608_0_3, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMark",660,G__EdbDict_608_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - id f - - 0 - x "
"f - - 0 - y i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN",366,G__EdbDict_608_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMark",683,G__EdbDict_608_0_6, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbMark), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMarks",798,G__EdbDict_608_0_7, 85, G__get_linked_tagnum(&G__EdbDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N",78,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("At",181,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_EdbPoint), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,G__EdbDict_608_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 '23' style i - - 0 '4' col "
"f - - 0 '1.' size f - - 0 '.03' tsiz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_608_0_12, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbMarksBox::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_608_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMarksBox::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_608_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbMarksBox::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_608_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbMarksBox::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_608_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_608_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMarksBox::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_608_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbMarksBox::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_608_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMarksBox::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_608_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbMarksBox::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbMarksBox", 1200, G__EdbDict_608_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_608_0_25, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox), -1, 1, 1, 1, 1, 0, "u 'EdbMarksBox' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbMarksSet(void) {
   /* EdbMarksSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet));
   G__memfunc_setup("EdbMarksSet",1077,G__EdbDict_609_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbMarksSet",1077,G__EdbDict_609_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet), -1, 0, 1, 1, 1, 0, "u 'EdbMarksSet' - 11 - ms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN",366,G__EdbDict_609_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNa",463,G__EdbDict_609_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNs",481,G__EdbDict_609_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsolute",1119,G__EdbDict_609_0_6, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStage",788,G__EdbDict_609_0_7, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbMarksBox), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Abs2Stage",828,G__EdbDict_609_0_8, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stage2Abs",828,G__EdbDict_609_0_9, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDA",513,G__EdbDict_609_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDB",514,G__EdbDict_609_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDollar",986,G__EdbDict_609_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 0 - file U 'EdbMarksBox' - 0 - mbox", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeMapStringSpacer",2105,G__EdbDict_609_0_13, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TString' - 1 - str c - - 0 - oldspacer "
"c - - 0 - newspacer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadMap",666,G__EdbDict_609_0_14, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 0 - file c - - 0 ''_'' spacer "
"c - - 0 ''S'' shape", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteMap",809,G__EdbDict_609_0_15, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"C - - 0 - file c - - 0 ''_'' spacer "
"c - - 0 ''S'' shape i - - 0 '1' plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadMap2",716,G__EdbDict_609_0_16, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 0 - file c - - 0 ''_'' spacer "
"c - - 0 ''S'' shape", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteMap2",859,G__EdbDict_609_0_17, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"C - - 0 - file c - - 0 ''_'' spacer "
"c - - 0 ''S'' shape i - - 0 '1' plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawA",463,G__EdbDict_609_0_18, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawS",481,G__EdbDict_609_0_19, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EdbDict_609_0_21, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbMarksSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_609_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMarksSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_609_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbMarksSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_609_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbMarksSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_609_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_609_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMarksSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_609_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbMarksSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_609_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbMarksSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_609_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbMarksSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbMarksSet", 1203, G__EdbDict_609_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_609_0_34, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet), -1, 1, 1, 1, 1, 0, "u 'EdbMarksSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbArea(void) {
   /* EdbArea */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbArea));
   G__memfunc_setup("EdbArea",644,G__EdbDict_610_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbArea), -1, 0, 6, 1, 1, 0, 
"i - - 0 '1' n f - - 0 '1' stepx "
"f - - 0 '1' stepy i - - 0 '0' ft "
"i - - 0 '0' fb i - - 0 '0' path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_610_0_2, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - - 0 - n f - - 0 - stepx "
"f - - 0 - stepy i - - 0 - ft "
"i - - 0 - fb i - - 0 '1' path "
"i - - 0 '0' nx i - - 0 '0' ny", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeSpiralPath",1398,G__EdbDict_610_0_3, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n I - - 0 - x "
"I - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeSerpentina",1431,G__EdbDict_610_0_4, 105, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - n I - - 0 - x "
"I - - 0 - y i - - 0 - nx "
"i - - 0 - ny", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCentre",909,G__EdbDict_610_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Scale",488,G__EdbDict_610_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - dx f - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN",366,G__EdbDict_610_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStepX",788,G__EdbDict_610_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStepY",789,G__EdbDict_610_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNframesTop",1311,G__EdbDict_610_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNframesBot",1297,G__EdbDict_610_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPath",685,G__EdbDict_610_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nviews",636,G__EdbDict_610_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Xview",531,G__EdbDict_610_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - - 0 - iv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Yview",532,G__EdbDict_610_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - - 0 - iv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadParameters",1424,G__EdbDict_610_0_16, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdbDict_610_0_17, 121, -1, -1, 0, 1, 1, 1, 8, "c - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_610_0_18, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbArea::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_610_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbArea::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_610_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbArea::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_610_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbArea::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_610_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_610_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbArea::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_610_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbArea::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_610_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbArea::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_610_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbArea::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbArea", 644, G__EdbDict_610_0_30, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbArea), -1, 0, 1, 1, 1, 0, "u 'EdbArea' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbArea", 770, G__EdbDict_610_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_610_0_32, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbArea), -1, 1, 1, 1, 1, 0, "u 'EdbArea' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPlate(void) {
   /* EdbPlate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPlate));
   G__memfunc_setup("EdbPlate",769,G__EdbDict_611_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbPlate), -1, 0, 6, 1, 1, 0, 
"i - - 0 '0' id f - - 0 '0' u "
"f - - 0 '0' b f - - 0 '0' d "
"f - - 0 '0' su f - - 0 '0' sd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdbDict_611_0_2, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EdbDict_611_0_3, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - id f - - 0 - u "
"f - - 0 - b f - - 0 - d "
"f - - 0 - su f - - 0 - sd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__EdbDict_611_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBase",667,G__EdbDict_611_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUp",485,G__EdbDict_611_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDown",696,G__EdbDict_611_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShrinkageU",1297,G__EdbDict_611_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShrinkageD",1280,G__EdbDict_611_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEmulsion",1132,G__EdbDict_611_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEmulsion",1144,G__EdbDict_611_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - thickness", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetID",441,G__EdbDict_611_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBase",679,G__EdbDict_611_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - base", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUp",497,G__EdbDict_611_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDown",708,G__EdbDict_611_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - down", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSrinkageU",1205,G__EdbDict_611_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - su", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSrinkageD",1188,G__EdbDict_611_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - sd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadParameters",1424,G__EdbDict_611_0_18, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_611_0_19, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPlate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_611_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_611_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPlate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_611_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPlate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_611_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_611_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_611_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPlate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_611_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPlate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_611_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPlate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbPlate", 769, G__EdbDict_611_0_31, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbPlate), -1, 0, 1, 1, 1, 0, "u 'EdbPlate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbPlate", 895, G__EdbDict_611_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_611_0_33, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbPlate), -1, 1, 1, 1, 1, 0, "u 'EdbPlate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbCamera(void) {
   /* EdbCamera */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbCamera));
   G__memfunc_setup("EdbCamera",852,G__EdbDict_612_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbCamera), -1, 0, 4, 1, 1, 0, 
"f - - 0 '0' w f - - 0 '0' h "
"i - - 0 '0' r i - - 0 '0' c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdbDict_612_0_2, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCamera",885,G__EdbDict_612_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 '0' w f - - 0 '0' h "
"i - - 0 '0' r i - - 0 '0' c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWidth",800,G__EdbDict_612_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeight",889,G__EdbDict_612_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRows",715,G__EdbDict_612_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColumns",1025,G__EdbDict_612_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_612_0_8, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbCamera::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_612_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCamera::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_612_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbCamera::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_612_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbCamera::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_612_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_612_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCamera::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_612_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCamera::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_612_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbCamera::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_612_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbCamera::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbCamera", 852, G__EdbDict_612_0_20, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbCamera), -1, 0, 1, 1, 1, 0, "u 'EdbCamera' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbCamera", 978, G__EdbDict_612_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_612_0_22, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbCamera), -1, 1, 1, 1, 1, 0, "u 'EdbCamera' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbRunHeader(void) {
   /* EdbRunHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader));
   G__memfunc_setup("EdbRunHeader",1161,G__EdbDict_613_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader), -1, 0, 1, 1, 1, 0, "i - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunID",750,G__EdbDict_613_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlag",678,G__EdbDict_613_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i i - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLimits",926,G__EdbDict_613_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - xmin f - - 0 - xmax "
"f - - 0 - ymin f - - 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNareas",902,G__EdbDict_613_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetComment",1023,G__EdbDict_613_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - com", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCPU",532,G__EdbDict_613_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cpu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlag",666,G__EdbDict_613_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArea",665,G__EdbDict_613_0_9, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbArea), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStage",788,G__EdbDict_613_0_10, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbStage), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlate",790,G__EdbDict_613_0_11, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbPlate), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunID",738,G__EdbDict_613_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComment",1011,G__EdbDict_613_0_13, 117, G__get_linked_tagnum(&G__EdbDictLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartTime",1213,G__EdbDict_613_0_14, 85, G__get_linked_tagnum(&G__EdbDictLN_TDatime), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFinishTime",1296,G__EdbDict_613_0_15, 85, G__get_linked_tagnum(&G__EdbDictLN_TDatime), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSystemStartTime",1858,G__EdbDict_613_0_16, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCPU",520,G__EdbDict_613_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNareas",890,G__EdbDict_613_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmin",700,G__EdbDict_613_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmax",702,G__EdbDict_613_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmin",701,G__EdbDict_613_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmax",703,G__EdbDict_613_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EmulsionUp",1041,G__EdbDict_613_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EmulsionBase",1223,G__EdbDict_613_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EmulsionDown",1252,G__EdbDict_613_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShrinkageUp",1121,G__EdbDict_613_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShrinkageDown",1332,G__EdbDict_613_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NpixelsX",827,G__EdbDict_613_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NpixelsY",828,G__EdbDict_613_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PixelX",602,G__EdbDict_613_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PixelY",603,G__EdbDict_613_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CameraWidth",1097,G__EdbDict_613_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CameraHeight",1186,G__EdbDict_613_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CCD2Stage",752,G__EdbDict_613_0_34, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbAffine2D), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCCD",502,G__EdbDict_613_0_35, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 '0' nx i - - 0 '0' ny "
"f - - 0 '0' px f - - 0 '0' py "
"C - - 0 '\"\"' name C - - 0 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetObjective",1223,G__EdbDict_613_0_36, 121, -1, -1, 0, 9, 1, 1, 0, 
"f - - 0 - mag f - - 0 - a "
"f - - 0 - b f - - 0 - c "
"f - - 0 - d f - - 0 - p "
"f - - 0 - q C - - 0 '\"\"' name "
"C - - 0 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlate",802,G__EdbDict_613_0_37, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - - 0 - id f - - 0 - up "
"f - - 0 - base f - - 0 - down "
"f - - 0 - shru f - - 0 - shrd "
"C - - 0 '\"\"' name C - - 0 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetArea",677,G__EdbDict_613_0_38, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - N f - - 0 - stepx "
"f - - 0 - stepy i - - 0 - ft "
"i - - 0 - fb i - - 0 - path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdbDict_613_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_613_0_40, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbRunHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_613_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_613_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbRunHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_613_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbRunHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_613_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_613_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_613_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbRunHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_613_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRunHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_613_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbRunHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbRunHeader", 1161, G__EdbDict_613_0_52, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader), -1, 0, 1, 1, 1, 0, "u 'EdbRunHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbRunHeader", 1287, G__EdbDict_613_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_613_0_54, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader), -1, 1, 1, 1, 1, 0, "u 'EdbRunHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPredictionDC(void) {
   /* EdbPredictionDC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC));
   G__memfunc_setup("EdbPredictionDC",1443,G__EdbDict_644_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbPredictionDC",1443,G__EdbDict_644_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC), -1, 0, 7, 1, 1, 0, 
"i - - 0 - id i - - 0 - event "
"i - - 0 - flag f - - 0 - ty "
"f - - 0 - tz f - - 0 - y "
"f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetID",429,G__EdbDict_644_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEvent",802,G__EdbDict_644_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFlag",666,G__EdbDict_644_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTy",493,G__EdbDict_644_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTz",494,G__EdbDict_644_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetYp",489,G__EdbDict_644_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZp",490,G__EdbDict_644_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("X",88,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Y",89,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetX",388,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetY",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TX",172,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TY",173,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTX",472,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - tx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTY",473,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - ty", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteDC",658,G__EdbDict_644_0_19, 121, -1, -1, 0, 1, 1, 1, 8, "E - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_644_0_20, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPredictionDC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_644_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPredictionDC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_644_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPredictionDC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_644_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPredictionDC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_644_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_644_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPredictionDC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_644_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPredictionDC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_644_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPredictionDC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_644_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPredictionDC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbPredictionDC", 1443, G__EdbDict_644_0_32, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC), -1, 0, 1, 1, 1, 0, "u 'EdbPredictionDC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbPredictionDC", 1569, G__EdbDict_644_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_644_0_34, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC), -1, 1, 1, 1, 1, 0, "u 'EdbPredictionDC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbPredictionsBox(void) {
   /* EdbPredictionsBox */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox));
   G__memfunc_setup("EdbPredictionsBox",1720,G__EdbDict_645_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbPredictionsBox",1720,G__EdbDict_645_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox), -1, 0, 1, 1, 1, 0, "u 'EdbPredictionsBox' - 11 - pb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbPredictionsBox",1720,G__EdbDict_645_0_3, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPrediction",1306,G__EdbDict_645_0_4, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 - id i - - 0 - event "
"i - - 0 - flag f - - 0 - ty "
"f - - 0 - tz f - - 0 - y "
"f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN",366,G__EdbDict_645_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrediction",1329,G__EdbDict_645_0_6, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredictions",1444,G__EdbDict_645_0_7, 85, G__get_linked_tagnum(&G__EdbDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N",78,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("At",181,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_EdbPoint), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteDC",658,G__EdbDict_645_0_11, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 0 '\"predictions.dc\"' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteDC1",707,G__EdbDict_645_0_12, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 0 '\"predictions.dc\"' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeNtuple",1014,G__EdbDict_645_0_13, 85, G__get_linked_tagnum(&G__EdbDictLN_TNtuple), -1, 0, 1, 1, 1, 8, "C - - 0 '\"predictions\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDC",515,G__EdbDict_645_0_14, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDC0",563,G__EdbDict_645_0_15, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Generate",811,G__EdbDict_645_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_645_0_17, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPredictionsBox::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_645_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPredictionsBox::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_645_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPredictionsBox::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_645_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPredictionsBox::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_645_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_645_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPredictionsBox::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_645_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPredictionsBox::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_645_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPredictionsBox::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_645_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPredictionsBox::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbPredictionsBox", 1846, G__EdbDict_645_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_645_0_30, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox), -1, 1, 1, 1, 1, 0, "u 'EdbPredictionsBox' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbRun(void) {
   /* EdbRun */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbRun));
   G__memfunc_setup("EdbRun",576,G__EdbDict_648_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbRun), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbRun",576,G__EdbDict_648_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbRun), -1, 0, 3, 1, 1, 0, 
"i - - 0 - id C - - 10 '\"READ\"' status "
"C - - 10 '\".\"' path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbRun",576,G__EdbDict_648_0_3, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbRun), -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 '\"READ\"' status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbRun",576,G__EdbDict_648_0_4, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbRun), -1, 0, 2, 1, 1, 0, 
"u 'EdbRun' - 1 - run C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetView",699,G__EdbDict_648_0_5, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbView), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetView",711,G__EdbDict_648_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbView' - 0 - view", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetView",711,G__EdbDict_648_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,G__EdbDict_648_0_8, 85, G__get_linked_tagnum(&G__EdbDictLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrediction",1329,G__EdbDict_648_0_9, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionDC), -1, 0, 1, 1, 1, 0, "i - - 0 - ip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Npredictions",1266,G__EdbDict_648_0_10, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredictions",1444,G__EdbDict_648_0_11, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbPredictionsBox), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMarks",798,G__EdbDict_648_0_12, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbMarksSet), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMarks",810,G__EdbDict_648_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbMarksSet' - 0 - marks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformDC",1091,G__EdbDict_648_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", "transform predictions according to fid marks", (void*) NULL, 0);
   G__memfunc_setup("GeneratePredictions",1967,G__EdbDict_648_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectOpenMode",1399,G__EdbDict_648_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 '\"READ\"' status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunID",738,G__EdbDict_648_0_17, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartTime",1213,G__EdbDict_648_0_18, 85, G__get_linked_tagnum(&G__EdbDictLN_TDatime), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFinishTime",1296,G__EdbDict_648_0_19, 85, G__get_linked_tagnum(&G__EdbDictLN_TDatime), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunID",750,G__EdbDict_648_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetComment",1023,G__EdbDict_648_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - com", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTitle",814,G__EdbDict_648_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - tit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntries",1018,G__EdbDict_648_0_23, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeader",873,G__EdbDict_648_0_24, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbRunHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddView",676,G__EdbDict_648_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddView",676,G__EdbDict_648_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbView' - 0 - view", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Create",596,G__EdbDict_648_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__EdbDict_648_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenUpdate",1013,G__EdbDict_648_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__EdbDict_648_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFile",672,G__EdbDict_648_0_31, 85, G__get_linked_tagnum(&G__EdbDictLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryNumberWithIndex",2351,G__EdbDict_648_0_32, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - event i - - 0 - view", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,G__EdbDict_648_0_33, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbView), -1, 0, 6, 1, 1, 0, 
"i - - 0 - entry i - - 0 '1' ih "
"i - - 0 '0' icl i - - 0 '1' iseg "
"i - - 0 '0' itr i - - 0 '0' ifr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryHeader",1403,G__EdbDict_648_0_34, 85, G__get_linked_tagnum(&G__EdbDictLN_EdbViewHeader), -1, 0, 1, 1, 1, 8, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryClusters",1671,G__EdbDict_648_0_35, 85, G__get_linked_tagnum(&G__EdbDictLN_TClonesArray), -1, 0, 1, 1, 1, 8, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntrySegments",1656,G__EdbDict_648_0_36, 85, G__get_linked_tagnum(&G__EdbDictLN_TClonesArray), -1, 0, 1, 1, 1, 8, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryTracks",1434,G__EdbDict_648_0_37, 85, G__get_linked_tagnum(&G__EdbDictLN_TClonesArray), -1, 0, 1, 1, 1, 8, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryFrames",1424,G__EdbDict_648_0_38, 85, G__get_linked_tagnum(&G__EdbDictLN_TObjArray), -1, 0, 1, 1, 1, 8, "i - - 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EdbDict_648_0_39, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintLog",815,G__EdbDict_648_0_40, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintBranchesStatus",1975,G__EdbDict_648_0_41, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__EdbDict_648_0_42, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Save",399,G__EdbDict_648_0_43, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveViews",925,G__EdbDict_648_0_44, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddAsciiFile",1138,G__EdbDict_648_0_45, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 - objname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractAsciiFile",1604,G__EdbDict_648_0_46, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 - objname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddViewMerge",1172,G__EdbDict_648_0_47, 121, -1, -1, 0, 16, 1, 1, 0, 
"i - 'Int_t' 0 - view1 i - 'Int_t' 0 - view2 "
"i - 'Int_t' 0 - area1 i - 'Int_t' 0 - area2 "
"i - 'Int_t' 0 - side1 i - 'Int_t' 0 - side2 "
"f - 'Float_t' 0 - dx f - 'Float_t' 0 - dy "
"f - 'Float_t' 0 - dz i - 'Int_t' 0 - n1tot "
"i - 'Int_t' 0 - n2tot i - 'Int_t' 0 - n1 "
"i - 'Int_t' 0 - n2 i - 'Int_t' 0 - nsg "
"i - 'Int_t' 0 - nbg i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddViewAlign",1167,G__EdbDict_648_0_48, 121, -1, -1, 0, 16, 1, 1, 0, 
"i - 'Int_t' 0 - view1 i - 'Int_t' 0 - view2 "
"i - 'Int_t' 0 - area1 i - 'Int_t' 0 - area2 "
"i - 'Int_t' 0 - side1 i - 'Int_t' 0 - side2 "
"f - 'Float_t' 0 - dx f - 'Float_t' 0 - dy "
"f - 'Float_t' 0 - dz i - 'Int_t' 0 - n1tot "
"i - 'Int_t' 0 - n2tot i - 'Int_t' 0 - n1 "
"i - 'Int_t' 0 - n2 i - 'Int_t' 0 - nsg "
"i - 'Int_t' 0 - nbg i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFrameAlign",1247,G__EdbDict_648_0_49, 121, -1, -1, 0, 18, 1, 1, 0, 
"i - 'Int_t' 0 - frame1 i - 'Int_t' 0 - frame2 "
"i - 'Int_t' 0 - view i - 'Int_t' 0 - area "
"i - 'Int_t' 0 - side f - 'Float_t' 0 - dxglobal "
"f - 'Float_t' 0 - dyglobal f - 'Float_t' 0 - dx "
"f - 'Float_t' 0 - dy f - 'Float_t' 0 - z1 "
"f - 'Float_t' 0 - z2 i - 'Int_t' 0 - n1tot "
"i - 'Int_t' 0 - n2tot i - 'Int_t' 0 - n1 "
"i - 'Int_t' 0 - n2 i - 'Int_t' 0 - nsg "
"i - 'Int_t' 0 - nbg i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPinViewHeader",1556,G__EdbDict_648_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbViewHeader' - 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_648_0_51, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbRun::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_648_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRun::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_648_0_53, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbRun::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_648_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbRun::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_648_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_648_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRun::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_648_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbRun::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_648_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbRun::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_648_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbRun::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbRun", 576, G__EdbDict_648_0_63, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbRun), -1, 0, 1, 1, 1, 0, "u 'EdbRun' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbRun", 702, G__EdbDict_648_0_64, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_648_0_65, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbRun), -1, 1, 1, 1, 1, 0, "u 'EdbRun' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbImage(void) {
   /* EdbImage */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EdbDictLN_EdbImage));
   G__memfunc_setup("EdbImage",750,G__EdbDict_649_0_1, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbImage), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbImage",750,G__EdbDict_649_0_2, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbImage), -1, 0, 2, 1, 1, 0, 
"C - - 0 - file C - - 0 '\"PGM\"' format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbImage",750,G__EdbDict_649_0_3, 105, G__get_linked_tagnum(&G__EdbDictLN_EdbImage), -1, 0, 4, 1, 1, 0, 
"i - - 0 - columns i - - 0 - rows "
"C - - 0 - image i - - 0 '256' col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__EdbDict_649_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AdoptImage",987,G__EdbDict_649_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - columns i - - 0 - rows "
"C - - 0 - image i - - 0 '256' col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColors",926,G__EdbDict_649_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBuffer",890,G__EdbDict_649_0_8, 67, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillBufferDouble",1596,G__EdbDict_649_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'TArrayD' - 1 - image", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pixel",514,G__EdbDict_649_0_10, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - c i - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pixel",514,G__EdbDict_649_0_11, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - ipix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist2",746,G__EdbDict_649_0_12, 85, G__get_linked_tagnum(&G__EdbDictLN_TH2F), -1, 0, 1, 1, 1, 8, "i - - 0 '0' flip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist1",745,G__EdbDict_649_0_13, 85, G__get_linked_tagnum(&G__EdbDictLN_TH1F), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Width",512,G__EdbDict_649_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Height",601,G__EdbDict_649_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadPGM",612,G__EdbDict_649_0_16, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadRAW",618,G__EdbDict_649_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadBMP",607,G__EdbDict_649_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpPGM",634,G__EdbDict_649_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EdbDict_649_0_20, 85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbImage::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EdbDict_649_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbImage::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EdbDict_649_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbImage::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EdbDict_649_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbImage::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EdbDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EdbDict_649_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EdbDict_649_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbImage::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EdbDict_649_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbImage::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EdbDict_649_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbImage::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EdbDict_649_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbImage::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbImage", 750, G__EdbDict_649_0_32, (int) ('i'), G__get_linked_tagnum(&G__EdbDictLN_EdbImage), -1, 0, 1, 1, 1, 0, "u 'EdbImage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbImage", 876, G__EdbDict_649_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EdbDict_649_0_34, (int) ('u'), G__get_linked_tagnum(&G__EdbDictLN_EdbImage), -1, 1, 1, 1, 1, 0, "u 'EdbImage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncEdbDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)(&gEDBDEBUGLEVEL),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gEDBDEBUGLEVEL=",0,(char*)NULL);
   G__memvar_setup((void*)(&gEDBLOGFILE),69,0,0,-1,-1,-1,1,"gEDBLOGFILE=",0,(char*)NULL);
   G__memvar_setup((void*)(&gDIFF),85,0,0,G__get_linked_tagnum(&G__EdbDictLN_TNtuple),-1,-1,1,"gDIFF=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalEdbDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
   G__memfunc_setup("Log0", 338, G__EdbDict__0_940, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - level C - - 10 - location "
"C - - 10 - msgfmt u 'va_list' - 0 - va", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("Log", 290, G__EdbDict__0_941, 103, -1, -1, 0, 3, 8, 1, 0, 
"i - 'Int_t' 0 - level C - - 10 - location "
"C - - 10 - msgfmt", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcEdbDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__EdbDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR = { "iterator<random_access_iterator_tag,char,long,char*,char&>" , 115 , -1 };
G__linked_taginfo G__EdbDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__EdbDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_va_list = { "va_list" , 115 , -1 };
G__linked_taginfo G__EdbDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__EdbDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__EdbDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TNtuple = { "TNtuple" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbAffine2D = { "EdbAffine2D" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbAffine3D = { "EdbAffine3D" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbPoint = { "EdbPoint" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbPoint2D = { "EdbPoint2D" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbPoint3D = { "EdbPoint3D" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbAngle2D = { "EdbAngle2D" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbTrack2D = { "EdbTrack2D" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbPointsBox2D = { "EdbPointsBox2D" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbPointsBox3D = { "EdbPointsBox3D" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbCluster = { "EdbCluster" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbClustersBox = { "EdbClustersBox" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TPolyMarker3D = { "TPolyMarker3D" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbSeg3D = { "EdbSeg3D" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbSegment = { "EdbSegment" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbTrack = { "EdbTrack" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbFrame = { "EdbFrame" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbViewHeader = { "EdbViewHeader" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbView = { "EdbView" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbCCD = { "EdbCCD" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbObjective = { "EdbObjective" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbStage = { "EdbStage" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbMark = { "EdbMark" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbMarksBox = { "EdbMarksBox" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbMarksSet = { "EdbMarksSet" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbArea = { "EdbArea" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbPlate = { "EdbPlate" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbCamera = { "EdbCamera" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbRunHeader = { "EdbRunHeader" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_TArrayC = { "TArrayC" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbPredictionDC = { "EdbPredictionDC" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbPredictionsBox = { "EdbPredictionsBox" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_AlignmentParView = { "AlignmentParView" , 115 , -1 };
G__linked_taginfo G__EdbDictLN_AlignmentParFrame = { "AlignmentParFrame" , 115 , -1 };
G__linked_taginfo G__EdbDictLN_EdbRun = { "EdbRun" , 99 , -1 };
G__linked_taginfo G__EdbDictLN_EdbImage = { "EdbImage" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableEdbDict() {
  G__EdbDictLN_TClass.tagnum = -1 ;
  G__EdbDictLN_TBuffer.tagnum = -1 ;
  G__EdbDictLN_TMemberInspector.tagnum = -1 ;
  G__EdbDictLN_TObject.tagnum = -1 ;
  G__EdbDictLN_TNamed.tagnum = -1 ;
  G__EdbDictLN_TString.tagnum = -1 ;
  G__EdbDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR.tagnum = -1 ;
  G__EdbDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__EdbDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EdbDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__EdbDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EdbDictLN_va_list.tagnum = -1 ;
  G__EdbDictLN_TList.tagnum = -1 ;
  G__EdbDictLN_TObjArray.tagnum = -1 ;
  G__EdbDictLN_TClonesArray.tagnum = -1 ;
  G__EdbDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__EdbDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EdbDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__EdbDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EdbDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__EdbDictLN_TTree.tagnum = -1 ;
  G__EdbDictLN_TFile.tagnum = -1 ;
  G__EdbDictLN_TArrayD.tagnum = -1 ;
  G__EdbDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__EdbDictLN_TNtuple.tagnum = -1 ;
  G__EdbDictLN_TH1F.tagnum = -1 ;
  G__EdbDictLN_TH2F.tagnum = -1 ;
  G__EdbDictLN_EdbAffine2D.tagnum = -1 ;
  G__EdbDictLN_EdbAffine3D.tagnum = -1 ;
  G__EdbDictLN_EdbPoint.tagnum = -1 ;
  G__EdbDictLN_EdbPoint2D.tagnum = -1 ;
  G__EdbDictLN_EdbPoint3D.tagnum = -1 ;
  G__EdbDictLN_EdbAngle2D.tagnum = -1 ;
  G__EdbDictLN_EdbTrack2D.tagnum = -1 ;
  G__EdbDictLN_EdbPointsBox2D.tagnum = -1 ;
  G__EdbDictLN_EdbPointsBox3D.tagnum = -1 ;
  G__EdbDictLN_EdbCluster.tagnum = -1 ;
  G__EdbDictLN_EdbClustersBox.tagnum = -1 ;
  G__EdbDictLN_TPolyMarker3D.tagnum = -1 ;
  G__EdbDictLN_TArrayF.tagnum = -1 ;
  G__EdbDictLN_EdbSeg3D.tagnum = -1 ;
  G__EdbDictLN_EdbSegment.tagnum = -1 ;
  G__EdbDictLN_EdbTrack.tagnum = -1 ;
  G__EdbDictLN_EdbFrame.tagnum = -1 ;
  G__EdbDictLN_EdbViewHeader.tagnum = -1 ;
  G__EdbDictLN_EdbView.tagnum = -1 ;
  G__EdbDictLN_TDatime.tagnum = -1 ;
  G__EdbDictLN_EdbCCD.tagnum = -1 ;
  G__EdbDictLN_EdbObjective.tagnum = -1 ;
  G__EdbDictLN_EdbStage.tagnum = -1 ;
  G__EdbDictLN_EdbMark.tagnum = -1 ;
  G__EdbDictLN_EdbMarksBox.tagnum = -1 ;
  G__EdbDictLN_EdbMarksSet.tagnum = -1 ;
  G__EdbDictLN_EdbArea.tagnum = -1 ;
  G__EdbDictLN_EdbPlate.tagnum = -1 ;
  G__EdbDictLN_EdbCamera.tagnum = -1 ;
  G__EdbDictLN_EdbRunHeader.tagnum = -1 ;
  G__EdbDictLN_TArrayC.tagnum = -1 ;
  G__EdbDictLN_EdbPredictionDC.tagnum = -1 ;
  G__EdbDictLN_EdbPredictionsBox.tagnum = -1 ;
  G__EdbDictLN_AlignmentParView.tagnum = -1 ;
  G__EdbDictLN_AlignmentParFrame.tagnum = -1 ;
  G__EdbDictLN_EdbRun.tagnum = -1 ;
  G__EdbDictLN_EdbImage.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableEdbDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TString);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_va_list);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TList);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TNtuple);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TH2F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbAffine2D),sizeof(EdbAffine2D),-1,128256,"2D affine parameters  ",G__setup_memvarEdbAffine2D,G__setup_memfuncEdbAffine2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbAffine3D),sizeof(EdbAffine3D),-1,95488,"3D affine parameters",G__setup_memvarEdbAffine3D,G__setup_memfuncEdbAffine3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbPoint),sizeof(EdbPoint),-1,66567,"virtual point",G__setup_memvarEdbPoint,G__setup_memfuncEdbPoint);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbPoint2D),sizeof(EdbPoint2D),-1,66564,"virtual 2D point",G__setup_memvarEdbPoint2D,G__setup_memfuncEdbPoint2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbPoint3D),sizeof(EdbPoint3D),-1,66566,"virtual 3D point",G__setup_memvarEdbPoint3D,G__setup_memfuncEdbPoint3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbAngle2D),sizeof(EdbAngle2D),-1,66564,"virtual angle",G__setup_memvarEdbAngle2D,G__setup_memfuncEdbAngle2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbTrack2D),sizeof(EdbTrack2D),-1,66568,"virtual track",G__setup_memvarEdbTrack2D,G__setup_memfuncEdbTrack2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbPointsBox2D),sizeof(EdbPointsBox2D),-1,67330,"collection of  2D points",G__setup_memvarEdbPointsBox2D,G__setup_memfuncEdbPointsBox2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbPointsBox3D),sizeof(EdbPointsBox3D),-1,66818,"collection of  3D points",G__setup_memvarEdbPointsBox3D,G__setup_memfuncEdbPointsBox3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbCluster),sizeof(EdbCluster),-1,128256,"single cluster",G__setup_memvarEdbCluster,G__setup_memfuncEdbCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbClustersBox),sizeof(EdbClustersBox),-1,128257,"collection of clusters",G__setup_memvarEdbClustersBox,G__setup_memfuncEdbClustersBox);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TPolyMarker3D);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TArrayF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbSeg3D),sizeof(EdbSeg3D),-1,128256,"base class with geometrical data for segments",G__setup_memvarEdbSeg3D,G__setup_memfuncEdbSeg3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbSegment),sizeof(EdbSegment),-1,128256,"segment of the track",G__setup_memvarEdbSegment,G__setup_memfuncEdbSegment);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbTrack),sizeof(EdbTrack),-1,128256,"Track linked from segments",G__setup_memvarEdbTrack,G__setup_memfuncEdbTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbFrame),sizeof(EdbFrame),-1,128256,"Scanning Frame: image+positin information",G__setup_memvarEdbFrame,G__setup_memfuncEdbFrame);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbViewHeader),sizeof(EdbViewHeader),-1,95488,"view identification",G__setup_memvarEdbViewHeader,G__setup_memfuncEdbViewHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbView),sizeof(EdbView),-1,95488,"Base scanning data object: entry into Run tree",G__setup_memvarEdbView,G__setup_memfuncEdbView);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TDatime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbCCD),sizeof(EdbCCD),-1,128256,"CCD camera specification",G__setup_memvarEdbCCD,G__setup_memfuncEdbCCD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbObjective),sizeof(EdbObjective),-1,128256,"objective affine parameters",G__setup_memvarEdbObjective,G__setup_memfuncEdbObjective);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbStage),sizeof(EdbStage),-1,128256,"stage parameters",G__setup_memvarEdbStage,G__setup_memfuncEdbStage);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbMark),sizeof(EdbMark),-1,128256,"fiducial mark",G__setup_memvarEdbMark,G__setup_memfuncEdbMark);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbMarksBox),sizeof(EdbMarksBox),-1,128768,"collection of fiducial marks",G__setup_memvarEdbMarksBox,G__setup_memfuncEdbMarksBox);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbMarksSet),sizeof(EdbMarksSet),-1,96000,"$b and $a",G__setup_memvarEdbMarksSet,G__setup_memfuncEdbMarksSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbArea),sizeof(EdbArea),-1,128256,"Area structure definition",G__setup_memvarEdbArea,G__setup_memfuncEdbArea);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbPlate),sizeof(EdbPlate),-1,128256,"emulsion plate specification",G__setup_memvarEdbPlate,G__setup_memfuncEdbPlate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbCamera),sizeof(EdbCamera),-1,128256,"CCD camera specification (obsolete)",G__setup_memvarEdbCamera,G__setup_memfuncEdbCamera);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbRunHeader),sizeof(EdbRunHeader),-1,128256,"Run specific information",G__setup_memvarEdbRunHeader,G__setup_memfuncEdbRunHeader);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_TArrayC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbPredictionDC),sizeof(EdbPredictionDC),-1,128256,"one prediction (track) a-la $c",G__setup_memvarEdbPredictionDC,G__setup_memfuncEdbPredictionDC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbPredictionsBox),sizeof(EdbPredictionsBox),-1,128768,"Predictions a-la $c",G__setup_memvarEdbPredictionsBox,G__setup_memfuncEdbPredictionsBox);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_AlignmentParView);
   G__get_linked_tagnum_fwd(&G__EdbDictLN_AlignmentParFrame);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbRun),sizeof(EdbRun),-1,128256,"main run class contained all objects",G__setup_memvarEdbRun,G__setup_memfuncEdbRun);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EdbDictLN_EdbImage),sizeof(EdbImage),-1,128256,"CCD Image in bytemap format",G__setup_memvarEdbImage,G__setup_memfuncEdbImage);
}
extern "C" void G__cpp_setupEdbDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupEdbDict()");
  G__set_cpp_environmentEdbDict();
  G__cpp_setup_tagtableEdbDict();

  G__cpp_setup_inheritanceEdbDict();

  G__cpp_setup_typetableEdbDict();

  G__cpp_setup_memvarEdbDict();

  G__cpp_setup_memfuncEdbDict();
  G__cpp_setup_globalEdbDict();
  G__cpp_setup_funcEdbDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncEdbDict();
  return;
}
class G__cpp_setup_initEdbDict {
  public:
    G__cpp_setup_initEdbDict() { G__add_setup_func("EdbDict",(G__incsetup)(&G__cpp_setupEdbDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initEdbDict() { G__remove_setup_func("EdbDict"); }
};
G__cpp_setup_initEdbDict G__cpp_setup_initializerEdbDict;

