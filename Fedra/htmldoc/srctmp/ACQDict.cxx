//
// File generated by C:\root_v5.34.26\bin\rootcint.EXE at Fri Sep 04 22:31:54 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME ACQDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ACQDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void AcqAxis_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AcqAxis(void *p = 0);
   static void *newArray_AcqAxis(Long_t size, void *p);
   static void delete_AcqAxis(void *p);
   static void deleteArray_AcqAxis(void *p);
   static void destruct_AcqAxis(void *p);
   static void streamer_AcqAxis(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AcqAxis*)
   {
      ::AcqAxis *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AcqAxis >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AcqAxis", ::AcqAxis::Class_Version(), "./AcqStage1.h", 51,
                  typeid(::AcqAxis), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AcqAxis::Dictionary, isa_proxy, 0,
                  sizeof(::AcqAxis) );
      instance.SetNew(&new_AcqAxis);
      instance.SetNewArray(&newArray_AcqAxis);
      instance.SetDelete(&delete_AcqAxis);
      instance.SetDeleteArray(&deleteArray_AcqAxis);
      instance.SetDestructor(&destruct_AcqAxis);
      instance.SetStreamerFunc(&streamer_AcqAxis);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AcqAxis*)
   {
      return GenerateInitInstanceLocal((::AcqAxis*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AcqAxis*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AcqLight_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AcqLight(void *p = 0);
   static void *newArray_AcqLight(Long_t size, void *p);
   static void delete_AcqLight(void *p);
   static void deleteArray_AcqLight(void *p);
   static void destruct_AcqLight(void *p);
   static void streamer_AcqLight(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AcqLight*)
   {
      ::AcqLight *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AcqLight >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AcqLight", ::AcqLight::Class_Version(), "./AcqStage1.h", 107,
                  typeid(::AcqLight), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AcqLight::Dictionary, isa_proxy, 0,
                  sizeof(::AcqLight) );
      instance.SetNew(&new_AcqLight);
      instance.SetNewArray(&newArray_AcqLight);
      instance.SetDelete(&delete_AcqLight);
      instance.SetDeleteArray(&deleteArray_AcqLight);
      instance.SetDestructor(&destruct_AcqLight);
      instance.SetStreamerFunc(&streamer_AcqLight);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AcqLight*)
   {
      return GenerateInitInstanceLocal((::AcqLight*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AcqLight*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AcqStage1_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AcqStage1(void *p = 0);
   static void *newArray_AcqStage1(Long_t size, void *p);
   static void delete_AcqStage1(void *p);
   static void deleteArray_AcqStage1(void *p);
   static void destruct_AcqStage1(void *p);
   static void streamer_AcqStage1(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AcqStage1*)
   {
      ::AcqStage1 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AcqStage1 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AcqStage1", ::AcqStage1::Class_Version(), "./AcqStage1.h", 134,
                  typeid(::AcqStage1), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AcqStage1::Dictionary, isa_proxy, 0,
                  sizeof(::AcqStage1) );
      instance.SetNew(&new_AcqStage1);
      instance.SetNewArray(&newArray_AcqStage1);
      instance.SetDelete(&delete_AcqStage1);
      instance.SetDeleteArray(&deleteArray_AcqStage1);
      instance.SetDestructor(&destruct_AcqStage1);
      instance.SetStreamerFunc(&streamer_AcqStage1);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AcqStage1*)
   {
      return GenerateInitInstanceLocal((::AcqStage1*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AcqStage1*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AcqOdyssey_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AcqOdyssey(void *p = 0);
   static void *newArray_AcqOdyssey(Long_t size, void *p);
   static void delete_AcqOdyssey(void *p);
   static void deleteArray_AcqOdyssey(void *p);
   static void destruct_AcqOdyssey(void *p);
   static void streamer_AcqOdyssey(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AcqOdyssey*)
   {
      ::AcqOdyssey *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AcqOdyssey >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AcqOdyssey", ::AcqOdyssey::Class_Version(), "./AcqOdyssey.h", 49,
                  typeid(::AcqOdyssey), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AcqOdyssey::Dictionary, isa_proxy, 0,
                  sizeof(::AcqOdyssey) );
      instance.SetNew(&new_AcqOdyssey);
      instance.SetNewArray(&newArray_AcqOdyssey);
      instance.SetDelete(&delete_AcqOdyssey);
      instance.SetDeleteArray(&deleteArray_AcqOdyssey);
      instance.SetDestructor(&destruct_AcqOdyssey);
      instance.SetStreamerFunc(&streamer_AcqOdyssey);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AcqOdyssey*)
   {
      return GenerateInitInstanceLocal((::AcqOdyssey*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AcqOdyssey*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AcqMarksScanner_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AcqMarksScanner(void *p = 0);
   static void *newArray_AcqMarksScanner(Long_t size, void *p);
   static void delete_AcqMarksScanner(void *p);
   static void deleteArray_AcqMarksScanner(void *p);
   static void destruct_AcqMarksScanner(void *p);
   static void streamer_AcqMarksScanner(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AcqMarksScanner*)
   {
      ::AcqMarksScanner *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AcqMarksScanner >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AcqMarksScanner", ::AcqMarksScanner::Class_Version(), "./AcqMarksScanner.h", 22,
                  typeid(::AcqMarksScanner), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AcqMarksScanner::Dictionary, isa_proxy, 0,
                  sizeof(::AcqMarksScanner) );
      instance.SetNew(&new_AcqMarksScanner);
      instance.SetNewArray(&newArray_AcqMarksScanner);
      instance.SetDelete(&delete_AcqMarksScanner);
      instance.SetDeleteArray(&deleteArray_AcqMarksScanner);
      instance.SetDestructor(&destruct_AcqMarksScanner);
      instance.SetStreamerFunc(&streamer_AcqMarksScanner);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AcqMarksScanner*)
   {
      return GenerateInitInstanceLocal((::AcqMarksScanner*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AcqMarksScanner*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AcqTrackScanner_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AcqTrackScanner(void *p = 0);
   static void *newArray_AcqTrackScanner(Long_t size, void *p);
   static void delete_AcqTrackScanner(void *p);
   static void deleteArray_AcqTrackScanner(void *p);
   static void destruct_AcqTrackScanner(void *p);
   static void streamer_AcqTrackScanner(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AcqTrackScanner*)
   {
      ::AcqTrackScanner *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AcqTrackScanner >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AcqTrackScanner", ::AcqTrackScanner::Class_Version(), "./AcqTrackScanner.h", 18,
                  typeid(::AcqTrackScanner), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AcqTrackScanner::Dictionary, isa_proxy, 0,
                  sizeof(::AcqTrackScanner) );
      instance.SetNew(&new_AcqTrackScanner);
      instance.SetNewArray(&newArray_AcqTrackScanner);
      instance.SetDelete(&delete_AcqTrackScanner);
      instance.SetDeleteArray(&deleteArray_AcqTrackScanner);
      instance.SetDestructor(&destruct_AcqTrackScanner);
      instance.SetStreamerFunc(&streamer_AcqTrackScanner);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AcqTrackScanner*)
   {
      return GenerateInitInstanceLocal((::AcqTrackScanner*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AcqTrackScanner*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AcqTrackReconstructor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AcqTrackReconstructor(void *p = 0);
   static void *newArray_AcqTrackReconstructor(Long_t size, void *p);
   static void delete_AcqTrackReconstructor(void *p);
   static void deleteArray_AcqTrackReconstructor(void *p);
   static void destruct_AcqTrackReconstructor(void *p);
   static void streamer_AcqTrackReconstructor(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AcqTrackReconstructor*)
   {
      ::AcqTrackReconstructor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AcqTrackReconstructor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AcqTrackReconstructor", ::AcqTrackReconstructor::Class_Version(), "./AcqTrackReconstructor.h", 15,
                  typeid(::AcqTrackReconstructor), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AcqTrackReconstructor::Dictionary, isa_proxy, 0,
                  sizeof(::AcqTrackReconstructor) );
      instance.SetNew(&new_AcqTrackReconstructor);
      instance.SetNewArray(&newArray_AcqTrackReconstructor);
      instance.SetDelete(&delete_AcqTrackReconstructor);
      instance.SetDeleteArray(&deleteArray_AcqTrackReconstructor);
      instance.SetDestructor(&destruct_AcqTrackReconstructor);
      instance.SetStreamerFunc(&streamer_AcqTrackReconstructor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AcqTrackReconstructor*)
   {
      return GenerateInitInstanceLocal((::AcqTrackReconstructor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AcqTrackReconstructor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AcqCOM_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AcqCOM(void *p = 0);
   static void *newArray_AcqCOM(Long_t size, void *p);
   static void delete_AcqCOM(void *p);
   static void deleteArray_AcqCOM(void *p);
   static void destruct_AcqCOM(void *p);
   static void streamer_AcqCOM(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AcqCOM*)
   {
      ::AcqCOM *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AcqCOM >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AcqCOM", ::AcqCOM::Class_Version(), "d:/documents/prg/fedrasvn/src/libacq/AcqCOM.h", 14,
                  typeid(::AcqCOM), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AcqCOM::Dictionary, isa_proxy, 0,
                  sizeof(::AcqCOM) );
      instance.SetNew(&new_AcqCOM);
      instance.SetNewArray(&newArray_AcqCOM);
      instance.SetDelete(&delete_AcqCOM);
      instance.SetDeleteArray(&deleteArray_AcqCOM);
      instance.SetDestructor(&destruct_AcqCOM);
      instance.SetStreamerFunc(&streamer_AcqCOM);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AcqCOM*)
   {
      return GenerateInitInstanceLocal((::AcqCOM*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AcqCOM*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AcqSerialPlateChanger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AcqSerialPlateChanger(void *p = 0);
   static void *newArray_AcqSerialPlateChanger(Long_t size, void *p);
   static void delete_AcqSerialPlateChanger(void *p);
   static void deleteArray_AcqSerialPlateChanger(void *p);
   static void destruct_AcqSerialPlateChanger(void *p);
   static void streamer_AcqSerialPlateChanger(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AcqSerialPlateChanger*)
   {
      ::AcqSerialPlateChanger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AcqSerialPlateChanger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AcqSerialPlateChanger", ::AcqSerialPlateChanger::Class_Version(), "./AcqSerialPlateChanger.h", 59,
                  typeid(::AcqSerialPlateChanger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AcqSerialPlateChanger::Dictionary, isa_proxy, 0,
                  sizeof(::AcqSerialPlateChanger) );
      instance.SetNew(&new_AcqSerialPlateChanger);
      instance.SetNewArray(&newArray_AcqSerialPlateChanger);
      instance.SetDelete(&delete_AcqSerialPlateChanger);
      instance.SetDeleteArray(&deleteArray_AcqSerialPlateChanger);
      instance.SetDestructor(&destruct_AcqSerialPlateChanger);
      instance.SetStreamerFunc(&streamer_AcqSerialPlateChanger);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AcqSerialPlateChanger*)
   {
      return GenerateInitInstanceLocal((::AcqSerialPlateChanger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AcqSerialPlateChanger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr AcqAxis::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AcqAxis::Class_Name()
{
   return "AcqAxis";
}

//______________________________________________________________________________
const char *AcqAxis::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqAxis*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AcqAxis::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqAxis*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AcqAxis::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqAxis*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AcqAxis::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqAxis*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AcqLight::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AcqLight::Class_Name()
{
   return "AcqLight";
}

//______________________________________________________________________________
const char *AcqLight::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqLight*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AcqLight::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqLight*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AcqLight::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqLight*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AcqLight::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqLight*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AcqStage1::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AcqStage1::Class_Name()
{
   return "AcqStage1";
}

//______________________________________________________________________________
const char *AcqStage1::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqStage1*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AcqStage1::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqStage1*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AcqStage1::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqStage1*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AcqStage1::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqStage1*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AcqOdyssey::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AcqOdyssey::Class_Name()
{
   return "AcqOdyssey";
}

//______________________________________________________________________________
const char *AcqOdyssey::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqOdyssey*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AcqOdyssey::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqOdyssey*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AcqOdyssey::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqOdyssey*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AcqOdyssey::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqOdyssey*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AcqMarksScanner::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AcqMarksScanner::Class_Name()
{
   return "AcqMarksScanner";
}

//______________________________________________________________________________
const char *AcqMarksScanner::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqMarksScanner*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AcqMarksScanner::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqMarksScanner*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AcqMarksScanner::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqMarksScanner*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AcqMarksScanner::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqMarksScanner*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AcqTrackScanner::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AcqTrackScanner::Class_Name()
{
   return "AcqTrackScanner";
}

//______________________________________________________________________________
const char *AcqTrackScanner::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqTrackScanner*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AcqTrackScanner::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqTrackScanner*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AcqTrackScanner::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqTrackScanner*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AcqTrackScanner::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqTrackScanner*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AcqTrackReconstructor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AcqTrackReconstructor::Class_Name()
{
   return "AcqTrackReconstructor";
}

//______________________________________________________________________________
const char *AcqTrackReconstructor::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqTrackReconstructor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AcqTrackReconstructor::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqTrackReconstructor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AcqTrackReconstructor::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqTrackReconstructor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AcqTrackReconstructor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqTrackReconstructor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AcqCOM::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AcqCOM::Class_Name()
{
   return "AcqCOM";
}

//______________________________________________________________________________
const char *AcqCOM::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqCOM*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AcqCOM::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqCOM*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AcqCOM::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqCOM*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AcqCOM::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqCOM*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AcqSerialPlateChanger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AcqSerialPlateChanger::Class_Name()
{
   return "AcqSerialPlateChanger";
}

//______________________________________________________________________________
const char *AcqSerialPlateChanger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqSerialPlateChanger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AcqSerialPlateChanger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AcqSerialPlateChanger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AcqSerialPlateChanger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqSerialPlateChanger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AcqSerialPlateChanger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AcqSerialPlateChanger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void AcqStage1::Streamer(TBuffer &R__b)
{
   // Stream an object of class AcqStage1.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> BoardId;
      R__b >> ZHomingXPos;
      R__b >> ZHomingYPos;
      R__b >> EmTopLayer;
      R__b >> EmBotLayer;
      R__b >> EmBase;
      R__b >> NominalEmLayer;
      R__b >> NominalEmBase;
      R__b >> X;
      R__b >> Y;
      R__b >> Z;
      R__b >> L;
      R__b >> eAffine;
      R__b >> AbsCoords;
      R__b.CheckByteCount(R__s, R__c, AcqStage1::IsA());
   } else {
      R__c = R__b.WriteVersion(AcqStage1::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << BoardId;
      R__b << ZHomingXPos;
      R__b << ZHomingYPos;
      R__b << EmTopLayer;
      R__b << EmBotLayer;
      R__b << EmBase;
      R__b << NominalEmLayer;
      R__b << NominalEmBase;
      R__b << X;
      R__b << Y;
      R__b << Z;
      R__b << L;
      R__b << eAffine;
      R__b << AbsCoords;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AcqStage1::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AcqStage1.
      typedef ::AcqStage1 msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BoardId", &BoardId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZHomingXPos", &ZHomingXPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZHomingYPos", &ZHomingYPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EmTopLayer", &EmTopLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EmBotLayer", &EmBotLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EmBase", &EmBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NominalEmLayer", &NominalEmLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NominalEmBase", &NominalEmBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*X", &X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Y", &Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Z", &Z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*L", &L);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eAffine", &eAffine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AbsCoords", &AbsCoords);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AcqStage1(void *p) {
      return  p ? new(p) ::AcqStage1 : new ::AcqStage1;
   }
   static void *newArray_AcqStage1(Long_t nElements, void *p) {
      return p ? new(p) ::AcqStage1[nElements] : new ::AcqStage1[nElements];
   }
   // Wrapper around operator delete
   static void delete_AcqStage1(void *p) {
      delete ((::AcqStage1*)p);
   }
   static void deleteArray_AcqStage1(void *p) {
      delete [] ((::AcqStage1*)p);
   }
   static void destruct_AcqStage1(void *p) {
      typedef ::AcqStage1 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AcqStage1(TBuffer &buf, void *obj) {
      ((::AcqStage1*)obj)->::AcqStage1::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AcqStage1

//______________________________________________________________________________
void AcqAxis::Streamer(TBuffer &R__b)
{
   // Stream an object of class AcqAxis.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> Axis;
      R__b >> BoardId;
      R__b >> StepsRev;
      R__b >> LinesRev;
      R__b >> EncoderToMicrons;
      R__b >> MicronsToSteps;
      R__b >> Accel;
      R__b >> MaxSpeed;
      R__b >> LimPol;
      R__b >> HomePol;
      R__b >> CtlModeIsCWCCW;
      R__b >> TurnOffLightTime;
      R__b >> Invert;
      R__b >> HomingSpeed;
      R__b >> Reference;
      R__b >> NominalReference;
      R__b.CheckByteCount(R__s, R__c, AcqAxis::IsA());
   } else {
      R__c = R__b.WriteVersion(AcqAxis::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << Axis;
      R__b << BoardId;
      R__b << StepsRev;
      R__b << LinesRev;
      R__b << EncoderToMicrons;
      R__b << MicronsToSteps;
      R__b << Accel;
      R__b << MaxSpeed;
      R__b << LimPol;
      R__b << HomePol;
      R__b << CtlModeIsCWCCW;
      R__b << TurnOffLightTime;
      R__b << Invert;
      R__b << HomingSpeed;
      R__b << Reference;
      R__b << NominalReference;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AcqAxis::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AcqAxis.
      typedef ::AcqAxis msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Axis", &Axis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BoardId", &BoardId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StepsRev", &StepsRev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LinesRev", &LinesRev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EncoderToMicrons", &EncoderToMicrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MicronsToSteps", &MicronsToSteps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Accel", &Accel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaxSpeed", &MaxSpeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LimPol", &LimPol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HomePol", &HomePol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CtlModeIsCWCCW", &CtlModeIsCWCCW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TurnOffLightTime", &TurnOffLightTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Invert", &Invert);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HomingSpeed", &HomingSpeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Reference", &Reference);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NominalReference", &NominalReference);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AcqAxis(void *p) {
      return  p ? new(p) ::AcqAxis : new ::AcqAxis;
   }
   static void *newArray_AcqAxis(Long_t nElements, void *p) {
      return p ? new(p) ::AcqAxis[nElements] : new ::AcqAxis[nElements];
   }
   // Wrapper around operator delete
   static void delete_AcqAxis(void *p) {
      delete ((::AcqAxis*)p);
   }
   static void deleteArray_AcqAxis(void *p) {
      delete [] ((::AcqAxis*)p);
   }
   static void destruct_AcqAxis(void *p) {
      typedef ::AcqAxis current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AcqAxis(TBuffer &buf, void *obj) {
      ((::AcqAxis*)obj)->::AcqAxis::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AcqAxis

//______________________________________________________________________________
void AcqLight::Streamer(TBuffer &R__b)
{
   // Stream an object of class AcqLight.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> BoardId;
      R__b >> TurnOffLightTime;
      R__b >> LightLevel;
      R__b >> IsON;
      R__b.CheckByteCount(R__s, R__c, AcqLight::IsA());
   } else {
      R__c = R__b.WriteVersion(AcqLight::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << BoardId;
      R__b << TurnOffLightTime;
      R__b << LightLevel;
      R__b << IsON;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AcqLight::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AcqLight.
      typedef ::AcqLight msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BoardId", &BoardId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TurnOffLightTime", &TurnOffLightTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LightLevel", &LightLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsON", &IsON);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AcqLight(void *p) {
      return  p ? new(p) ::AcqLight : new ::AcqLight;
   }
   static void *newArray_AcqLight(Long_t nElements, void *p) {
      return p ? new(p) ::AcqLight[nElements] : new ::AcqLight[nElements];
   }
   // Wrapper around operator delete
   static void delete_AcqLight(void *p) {
      delete ((::AcqLight*)p);
   }
   static void deleteArray_AcqLight(void *p) {
      delete [] ((::AcqLight*)p);
   }
   static void destruct_AcqLight(void *p) {
      typedef ::AcqLight current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AcqLight(TBuffer &buf, void *obj) {
      ((::AcqLight*)obj)->::AcqLight::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AcqLight

//______________________________________________________________________________
void AcqOdyssey::Streamer(TBuffer &R__b)
{
   // Stream an object of class AcqOdyssey.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> MilApplication;
      R__b >> MilSystem;
      R__b >> MilDigitizer;
      R__b >> MilDisplay;
      R__b >> MilOverlayImage;
      R__b >> TransparentColor;
      R__b.ReadStaticArray((long*)MilImage);
      R__b >> MilImageN;
      R__b >> MilBGImage;
      R__b >> MilGCImage;
      R__b >> MilConvImage;
      R__b >> MilConvImage2;
      R__b >> MilConvImage32;
      R__b >> MilImageDisp;
      R__b >> MilGCKernel;
      R__b >> MilProjResX;
      R__b >> MilProjResY;
      R__b >> System;
      R__b >> Device;
      R__b >> Camera;
      R__b >> Digitizer;
      R__b >> Control;
      R__b >> BufferN;
      R__b >> Overlay;
      R__b >> ConvImage;
      R__b >> ConvImage2;
      R__b >> ConvImage32;
      R__b >> Kernel;
      R__b >> BGImage;
      R__b >> GCImage;
      R__b.ReadStaticArray((long*)Buffer);
      R__b.ReadStaticArray((long*)HostBuffer);
      R__b >> HostBufferPitch;
      R__b >> HostBufferLines;
      R__b.ReadStaticArray((long*)ShiftBuffer);
      R__b >> ShiftList;
      R__b >> Thread;
      R__b >> GrabThread;
      R__b >> SeqThread;
      R__b >> ControlBuf;
      R__b >> GrabOSB;
      R__b >> CopyOSB;
      R__b >> CopyOSB1;
      R__b >> bNorm;
      R__b >> SizeX;
      R__b >> SizeY;
      R__b >> BGImageValid;
      R__b >> GCImageValid;
      R__b >> SubtractBG;
      R__b >> ApplyFIRF;
      R__b >> ApplyGainCorr;
      R__b >> Threshold;
      R__b.ReadStaticArray((float*)ZBuffer);
      eEdbClusters->Streamer(R__b);
      R__b >> eEdbView;
      R__b >> PixelToMicronX;
      R__b >> PixelToMicronY;
      R__b >> OpticalShrinkage;
      R__b >> MaxNbGrab;
      R__b.CheckByteCount(R__s, R__c, AcqOdyssey::IsA());
   } else {
      R__c = R__b.WriteVersion(AcqOdyssey::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << MilApplication;
      R__b << MilSystem;
      R__b << MilDigitizer;
      R__b << MilDisplay;
      R__b << MilOverlayImage;
      R__b << TransparentColor;
      R__b.WriteArray(MilImage, 50);
      R__b << MilImageN;
      R__b << MilBGImage;
      R__b << MilGCImage;
      R__b << MilConvImage;
      R__b << MilConvImage2;
      R__b << MilConvImage32;
      R__b << MilImageDisp;
      R__b << MilGCKernel;
      R__b << MilProjResX;
      R__b << MilProjResY;
      R__b << System;
      R__b << Device;
      R__b << Camera;
      R__b << Digitizer;
      R__b << Control;
      R__b << BufferN;
      R__b << Overlay;
      R__b << ConvImage;
      R__b << ConvImage2;
      R__b << ConvImage32;
      R__b << Kernel;
      R__b << BGImage;
      R__b << GCImage;
      R__b.WriteArray(Buffer, 50);
      R__b.WriteArray(HostBuffer, 50);
      R__b << HostBufferPitch;
      R__b << HostBufferLines;
      R__b.WriteArray(ShiftBuffer, 50);
      R__b << ShiftList;
      R__b << Thread;
      R__b << GrabThread;
      R__b << SeqThread;
      R__b << ControlBuf;
      R__b << GrabOSB;
      R__b << CopyOSB;
      R__b << CopyOSB1;
      R__b << bNorm;
      R__b << SizeX;
      R__b << SizeY;
      R__b << BGImageValid;
      R__b << GCImageValid;
      R__b << SubtractBG;
      R__b << ApplyFIRF;
      R__b << ApplyGainCorr;
      R__b << Threshold;
      R__b.WriteArray(ZBuffer, 50);
      eEdbClusters->Streamer(R__b);
      R__b << eEdbView;
      R__b << PixelToMicronX;
      R__b << PixelToMicronY;
      R__b << OpticalShrinkage;
      R__b << MaxNbGrab;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AcqOdyssey::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AcqOdyssey.
      typedef ::AcqOdyssey msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilApplication", &MilApplication);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilSystem", &MilSystem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilDigitizer", &MilDigitizer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilDisplay", &MilDisplay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilOverlayImage", &MilOverlayImage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TransparentColor", &TransparentColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilImage[50]", MilImage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilImageN", &MilImageN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilBGImage", &MilBGImage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilGCImage", &MilGCImage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilConvImage", &MilConvImage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilConvImage2", &MilConvImage2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilConvImage32", &MilConvImage32);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilImageDisp", &MilImageDisp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilGCKernel", &MilGCKernel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilProjResX", &MilProjResX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MilProjResY", &MilProjResY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "System", &System);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Device", &Device);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Camera", &Camera);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Digitizer", &Digitizer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Control", &Control);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BufferN", &BufferN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Overlay", &Overlay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ConvImage", &ConvImage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ConvImage2", &ConvImage2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ConvImage32", &ConvImage32);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Kernel", &Kernel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BGImage", &BGImage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GCImage", &GCImage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Buffer[50]", Buffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HostBuffer[50]", HostBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HostBufferPitch", &HostBufferPitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HostBufferLines", &HostBufferLines);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ShiftBuffer[50]", ShiftBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ShiftList", &ShiftList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Thread", &Thread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GrabThread", &GrabThread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SeqThread", &SeqThread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ControlBuf", &ControlBuf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GrabOSB", &GrabOSB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CopyOSB", &CopyOSB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CopyOSB1", &CopyOSB1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bNorm", &bNorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SizeX", &SizeX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SizeY", &SizeY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BGImageValid", &BGImageValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GCImageValid", &GCImageValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SubtractBG", &SubtractBG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ApplyFIRF", &ApplyFIRF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ApplyGainCorr", &ApplyGainCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Threshold", &Threshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZBuffer[50]", ZBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eEdbClusters", &eEdbClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eEdbView", &eEdbView);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PixelToMicronX", &PixelToMicronX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PixelToMicronY", &PixelToMicronY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "OpticalShrinkage", &OpticalShrinkage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaxNbGrab", &MaxNbGrab);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AcqOdyssey(void *p) {
      return  p ? new(p) ::AcqOdyssey : new ::AcqOdyssey;
   }
   static void *newArray_AcqOdyssey(Long_t nElements, void *p) {
      return p ? new(p) ::AcqOdyssey[nElements] : new ::AcqOdyssey[nElements];
   }
   // Wrapper around operator delete
   static void delete_AcqOdyssey(void *p) {
      delete ((::AcqOdyssey*)p);
   }
   static void deleteArray_AcqOdyssey(void *p) {
      delete [] ((::AcqOdyssey*)p);
   }
   static void destruct_AcqOdyssey(void *p) {
      typedef ::AcqOdyssey current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AcqOdyssey(TBuffer &buf, void *obj) {
      ((::AcqOdyssey*)obj)->::AcqOdyssey::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AcqOdyssey

//______________________________________________________________________________
void AcqMarksScanner::Streamer(TBuffer &R__b)
{
   // Stream an object of class AcqMarksScanner.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eArea;
      R__b >> eMarksSet;
      R__b >> eFoundMarksSet;
      R__b >> eAffine2D;
      R__b >> ST;
      R__b >> FG;
      R__b >> Side;
      R__b >> IsValid;
      R__b >> FPS;
      R__b >> Layers;
      R__b >> Threshold;
      R__b >> MarkDiameter;
      R__b >> MarkDiameterTolerance;
      R__b >> ViewsToScan;
      R__b >> StepX;
      R__b >> StepY;
      R__b >> XYScanSpeed;
      R__b.CheckByteCount(R__s, R__c, AcqMarksScanner::IsA());
   } else {
      R__c = R__b.WriteVersion(AcqMarksScanner::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eArea;
      R__b << eMarksSet;
      R__b << eFoundMarksSet;
      R__b << eAffine2D;
      R__b << ST;
      R__b << FG;
      R__b << Side;
      R__b << IsValid;
      R__b << FPS;
      R__b << Layers;
      R__b << Threshold;
      R__b << MarkDiameter;
      R__b << MarkDiameterTolerance;
      R__b << ViewsToScan;
      R__b << StepX;
      R__b << StepY;
      R__b << XYScanSpeed;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AcqMarksScanner::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AcqMarksScanner.
      typedef ::AcqMarksScanner msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eArea", &eArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eMarksSet", &eMarksSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFoundMarksSet", &eFoundMarksSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eAffine2D", &eAffine2D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ST", &ST);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*FG", &FG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Side", &Side);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsValid", &IsValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FPS", &FPS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Layers", &Layers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Threshold", &Threshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MarkDiameter", &MarkDiameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MarkDiameterTolerance", &MarkDiameterTolerance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ViewsToScan", &ViewsToScan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StepX", &StepX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StepY", &StepY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XYScanSpeed", &XYScanSpeed);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AcqMarksScanner(void *p) {
      return  p ? new(p) ::AcqMarksScanner : new ::AcqMarksScanner;
   }
   static void *newArray_AcqMarksScanner(Long_t nElements, void *p) {
      return p ? new(p) ::AcqMarksScanner[nElements] : new ::AcqMarksScanner[nElements];
   }
   // Wrapper around operator delete
   static void delete_AcqMarksScanner(void *p) {
      delete ((::AcqMarksScanner*)p);
   }
   static void deleteArray_AcqMarksScanner(void *p) {
      delete [] ((::AcqMarksScanner*)p);
   }
   static void destruct_AcqMarksScanner(void *p) {
      typedef ::AcqMarksScanner current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AcqMarksScanner(TBuffer &buf, void *obj) {
      ((::AcqMarksScanner*)obj)->::AcqMarksScanner::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AcqMarksScanner

//______________________________________________________________________________
void AcqTrackScanner::Streamer(TBuffer &R__b)
{
   // Stream an object of class AcqTrackScanner.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> Layers;
      R__b >> FPS;
      R__b >> XYViewToViewSpeed;
      R__b >> ZBackStrokeSpeed;
      R__b >> ViewStepX;
      R__b >> ViewStepY;
      R__b >> Nx;
      R__b >> Ny;
      R__b >> ST;
      R__b >> FG;
      R__b.CheckByteCount(R__s, R__c, AcqTrackScanner::IsA());
   } else {
      R__c = R__b.WriteVersion(AcqTrackScanner::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << Layers;
      R__b << FPS;
      R__b << XYViewToViewSpeed;
      R__b << ZBackStrokeSpeed;
      R__b << ViewStepX;
      R__b << ViewStepY;
      R__b << Nx;
      R__b << Ny;
      R__b << ST;
      R__b << FG;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AcqTrackScanner::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AcqTrackScanner.
      typedef ::AcqTrackScanner msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Layers", &Layers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FPS", &FPS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XYViewToViewSpeed", &XYViewToViewSpeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZBackStrokeSpeed", &ZBackStrokeSpeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ViewStepX", &ViewStepX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ViewStepY", &ViewStepY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Nx", &Nx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ny", &Ny);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ST", &ST);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*FG", &FG);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AcqTrackScanner(void *p) {
      return  p ? new(p) ::AcqTrackScanner : new ::AcqTrackScanner;
   }
   static void *newArray_AcqTrackScanner(Long_t nElements, void *p) {
      return p ? new(p) ::AcqTrackScanner[nElements] : new ::AcqTrackScanner[nElements];
   }
   // Wrapper around operator delete
   static void delete_AcqTrackScanner(void *p) {
      delete ((::AcqTrackScanner*)p);
   }
   static void deleteArray_AcqTrackScanner(void *p) {
      delete [] ((::AcqTrackScanner*)p);
   }
   static void destruct_AcqTrackScanner(void *p) {
      typedef ::AcqTrackScanner current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AcqTrackScanner(TBuffer &buf, void *obj) {
      ((::AcqTrackScanner*)obj)->::AcqTrackScanner::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AcqTrackScanner

//______________________________________________________________________________
void AcqTrackReconstructor::Streamer(TBuffer &R__b)
{
   // Stream an object of class AcqTrackReconstructor.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, AcqTrackReconstructor::IsA());
   } else {
      R__c = R__b.WriteVersion(AcqTrackReconstructor::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AcqTrackReconstructor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AcqTrackReconstructor.
      typedef ::AcqTrackReconstructor msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AcqTrackReconstructor(void *p) {
      return  p ? new(p) ::AcqTrackReconstructor : new ::AcqTrackReconstructor;
   }
   static void *newArray_AcqTrackReconstructor(Long_t nElements, void *p) {
      return p ? new(p) ::AcqTrackReconstructor[nElements] : new ::AcqTrackReconstructor[nElements];
   }
   // Wrapper around operator delete
   static void delete_AcqTrackReconstructor(void *p) {
      delete ((::AcqTrackReconstructor*)p);
   }
   static void deleteArray_AcqTrackReconstructor(void *p) {
      delete [] ((::AcqTrackReconstructor*)p);
   }
   static void destruct_AcqTrackReconstructor(void *p) {
      typedef ::AcqTrackReconstructor current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AcqTrackReconstructor(TBuffer &buf, void *obj) {
      ((::AcqTrackReconstructor*)obj)->::AcqTrackReconstructor::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AcqTrackReconstructor

//______________________________________________________________________________
void AcqSerialPlateChanger::Streamer(TBuffer &R__b)
{
   // Stream an object of class AcqSerialPlateChanger.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> StX;
      R__b >> StY;
      R__b >> StZ;
      R__b >> port;
      R__b >> VacRegister;
      R__b >> ComPort;
      R__b >> ComBaud;
      R__b >> InitDone;
      R__b >> Ready;
      R__b >> StageError;
      R__b >> SourceBank;
      R__b >> DestinationBank;
      R__b >> PositionTimeout;
      R__b >> VacuumTimeout;
      R__b >> NumberOfBanks;
      R__b >> LiftCorners;
      R__b >> NumberOfAttempt;
      R__b >> SeparationAttempts;
      R__b >> XLoadPosition;
      R__b >> YLoadPosition;
      R__b >> ZLoadPosition;
      R__b >> ST;
      R__b >> Debug;
      R__b.CheckByteCount(R__s, R__c, AcqSerialPlateChanger::IsA());
   } else {
      R__c = R__b.WriteVersion(AcqSerialPlateChanger::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << StX;
      R__b << StY;
      R__b << StZ;
      R__b << port;
      R__b << VacRegister;
      R__b << ComPort;
      R__b << ComBaud;
      R__b << InitDone;
      R__b << Ready;
      R__b << StageError;
      R__b << SourceBank;
      R__b << DestinationBank;
      R__b << PositionTimeout;
      R__b << VacuumTimeout;
      R__b << NumberOfBanks;
      R__b << LiftCorners;
      R__b << NumberOfAttempt;
      R__b << SeparationAttempts;
      R__b << XLoadPosition;
      R__b << YLoadPosition;
      R__b << ZLoadPosition;
      R__b << ST;
      R__b << Debug;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AcqSerialPlateChanger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AcqSerialPlateChanger.
      typedef ::AcqSerialPlateChanger msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StX", &StX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StY", &StY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StZ", &StZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*port", &port);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VacRegister", &VacRegister);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ComPort", &ComPort);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ComBaud", &ComBaud);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "InitDone", &InitDone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ready", &Ready);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StageError", &StageError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SourceBank", &SourceBank);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DestinationBank", &DestinationBank);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PositionTimeout", &PositionTimeout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VacuumTimeout", &VacuumTimeout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NumberOfBanks", &NumberOfBanks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LiftCorners", &LiftCorners);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NumberOfAttempt", &NumberOfAttempt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SeparationAttempts", &SeparationAttempts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XLoadPosition", &XLoadPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "YLoadPosition", &YLoadPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZLoadPosition", &ZLoadPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ST", &ST);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Debug", &Debug);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AcqSerialPlateChanger(void *p) {
      return  p ? new(p) ::AcqSerialPlateChanger : new ::AcqSerialPlateChanger;
   }
   static void *newArray_AcqSerialPlateChanger(Long_t nElements, void *p) {
      return p ? new(p) ::AcqSerialPlateChanger[nElements] : new ::AcqSerialPlateChanger[nElements];
   }
   // Wrapper around operator delete
   static void delete_AcqSerialPlateChanger(void *p) {
      delete ((::AcqSerialPlateChanger*)p);
   }
   static void deleteArray_AcqSerialPlateChanger(void *p) {
      delete [] ((::AcqSerialPlateChanger*)p);
   }
   static void destruct_AcqSerialPlateChanger(void *p) {
      typedef ::AcqSerialPlateChanger current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AcqSerialPlateChanger(TBuffer &buf, void *obj) {
      ((::AcqSerialPlateChanger*)obj)->::AcqSerialPlateChanger::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AcqSerialPlateChanger

//______________________________________________________________________________
void AcqCOM::Streamer(TBuffer &R__b)
{
   // Stream an object of class AcqCOM.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, AcqCOM::IsA());
   } else {
      R__c = R__b.WriteVersion(AcqCOM::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void AcqCOM::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AcqCOM.
      typedef ::AcqCOM msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AcqCOM(void *p) {
      return  p ? new(p) ::AcqCOM : new ::AcqCOM;
   }
   static void *newArray_AcqCOM(Long_t nElements, void *p) {
      return p ? new(p) ::AcqCOM[nElements] : new ::AcqCOM[nElements];
   }
   // Wrapper around operator delete
   static void delete_AcqCOM(void *p) {
      delete ((::AcqCOM*)p);
   }
   static void deleteArray_AcqCOM(void *p) {
      delete [] ((::AcqCOM*)p);
   }
   static void destruct_AcqCOM(void *p) {
      typedef ::AcqCOM current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AcqCOM(TBuffer &buf, void *obj) {
      ((::AcqCOM*)obj)->::AcqCOM::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::AcqCOM

/********************************************************
* ACQDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableACQDict();

extern "C" void G__set_cpp_environmentACQDict() {
  G__add_ipath(".");
  G__add_ipath("..\\..\\include");
  G__cpp_reset_tagtableACQDict();
}
#include <new>
extern "C" int G__cpp_dllrevACQDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* AcqAxis */
static int G__ACQDict_291_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqAxis* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqAxis[n];
     } else {
       p = new((void*) gvp) AcqAxis[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqAxis;
     } else {
       p = new((void*) gvp) AcqAxis;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqAxis));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqAxis* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AcqAxis((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) AcqAxis((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqAxis));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqAxis*) G__getstructoffset())->Initialize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->PosMove((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->Move((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->Stop();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqAxis*) G__getstructoffset())->FindHome((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqAxis*) G__getstructoffset())->WaitForHome((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqAxis*) G__getstructoffset())->WaitForMoveComplete((u32) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((AcqAxis*) G__getstructoffset())->GetPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqAxis*) G__getstructoffset())->GetLimiter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqAxis*) G__getstructoffset())->IsMoveComplete());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->LoadMoveCompleteCriteria(
(bool) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->ArmBreakpoint((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->LoadBreakpointSequence((float*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->DumpBreakpointSequence();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->DisarmBreakpointSequence();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->ArmBreakpointSequence();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqAxis*) G__getstructoffset())->IsBreakpointSequenceArmed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->DisarmBreakpoint();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqAxis*) G__getstructoffset())->IsBreakpointOccured());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->Test((float*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->SetFilterFrequency((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqAxis*) G__getstructoffset())->ReadFollowingError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->SetFollowingError((u16) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AcqAxis::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqAxis::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AcqAxis::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AcqAxis::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqAxis*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqAxis::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqAxis::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqAxis::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_291_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqAxis::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ACQDict_291_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AcqAxis* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AcqAxis(*(AcqAxis*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqAxis));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AcqAxis G__TAcqAxis;
static int G__ACQDict_291_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AcqAxis*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AcqAxis*) (soff+(sizeof(AcqAxis)*i)))->~G__TAcqAxis();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AcqAxis*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AcqAxis*) (soff))->~G__TAcqAxis();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ACQDict_291_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqAxis* dest = (AcqAxis*) G__getstructoffset();
   *dest = *(AcqAxis*) libp->para[0].ref;
   const AcqAxis& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AcqLight */
static int G__ACQDict_292_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqLight* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqLight[n];
     } else {
       p = new((void*) gvp) AcqLight[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqLight;
     } else {
       p = new((void*) gvp) AcqLight;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqLight));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqLight*) G__getstructoffset())->Initialize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqLight*) G__getstructoffset())->ResetTimer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqLight*) G__getstructoffset())->ON();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqLight*) G__getstructoffset())->OFF();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqLight*) G__getstructoffset())->ReadTemperature());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqLight*) G__getstructoffset())->ReadLightLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AcqLight::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqLight::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AcqLight::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AcqLight::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqLight*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqLight::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqLight::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqLight::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_292_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqLight::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ACQDict_292_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AcqLight* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AcqLight(*(AcqLight*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqLight));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AcqLight G__TAcqLight;
static int G__ACQDict_292_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AcqLight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AcqLight*) (soff+(sizeof(AcqLight)*i)))->~G__TAcqLight();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AcqLight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AcqLight*) (soff))->~G__TAcqLight();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ACQDict_292_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqLight* dest = (AcqLight*) G__getstructoffset();
   *dest = *(AcqLight*) libp->para[0].ref;
   const AcqLight& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AcqStage1 */
static int G__ACQDict_293_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqStage1* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqStage1[n];
     } else {
       p = new((void*) gvp) AcqStage1[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqStage1;
     } else {
       p = new((void*) gvp) AcqStage1;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqStage1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqStage1*) G__getstructoffset())->Initialize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqStage1*) G__getstructoffset())->Stop();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqStage1*) G__getstructoffset())->GetLastError((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqStage1*) G__getstructoffset())->GetLastModalError((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqStage1*) G__getstructoffset())->Monitor();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqStage1*) G__getstructoffset())->ScanToZ0AndGotoXYZ(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (float) G__double(libp->para[8]), (float) G__double(libp->para[9])
, (u32) G__int(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AcqStage1::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqStage1::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AcqStage1::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AcqStage1::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqStage1*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqStage1::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqStage1::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqStage1::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_293_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqStage1::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ACQDict_293_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AcqStage1* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AcqStage1(*(AcqStage1*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqStage1));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AcqStage1 G__TAcqStage1;
static int G__ACQDict_293_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AcqStage1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AcqStage1*) (soff+(sizeof(AcqStage1)*i)))->~G__TAcqStage1();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AcqStage1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AcqStage1*) (soff))->~G__TAcqStage1();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ACQDict_293_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqStage1* dest = (AcqStage1*) G__getstructoffset();
   *dest = *(AcqStage1*) libp->para[0].ref;
   const AcqStage1& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AcqOdyssey */
static int G__ACQDict_343_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqOdyssey* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqOdyssey[n];
     } else {
       p = new((void*) gvp) AcqOdyssey[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqOdyssey;
     } else {
       p = new((void*) gvp) AcqOdyssey;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqOdyssey*) G__getstructoffset())->Initialize((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->FreeResources();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->GetImage((int) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->GetImageFast((int) G__int(libp->para[0]), (unsigned char**) G__int(libp->para[1])
, (long*) G__int(libp->para[2]), (long*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AcqOdyssey*) G__getstructoffset())->GetEdbImage((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AcqOdyssey*) G__getstructoffset())->GetEdbFrame((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AcqOdyssey*) G__getstructoffset())->GetEdbClustersBox((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->PutImage((int) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->CopyImageToBG((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AcqOdyssey*) G__getstructoffset())->CopyImageToGC((int) G__int(libp->para[0]), (long) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AcqOdyssey*) G__getstructoffset())->CopyImageToGC((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->PutBGImage((short*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->GetBGImage((short*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->PutGCImage((short*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->GetGCImage((short*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->ShowImage((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->ShowBGImage();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->ShowGCImage();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AcqOdyssey*) G__getstructoffset())->PlotImage1D((int) G__int(libp->para[0]), (TH1F*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AcqOdyssey*) G__getstructoffset())->PlotImage1D((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->PlotImage2D((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->PlotBGImage();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->PlotGCImage();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->ShowImages((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->DrawTrack((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AcqOdyssey*) G__getstructoffset())->DrawClusters((TClonesArray*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AcqOdyssey*) G__getstructoffset())->DrawClusters();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->DrawText((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (char*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((AcqOdyssey*) G__getstructoffset())->DrawGrid((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AcqOdyssey*) G__getstructoffset())->DrawGrid((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AcqOdyssey*) G__getstructoffset())->DrawGrid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((AcqOdyssey*) G__getstructoffset())->DrawCircles((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((AcqOdyssey*) G__getstructoffset())->DrawCircles();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->DrawClear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->SetFIRFKernel((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->SetFIRFNorm((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((AcqOdyssey*) G__getstructoffset())->GrabImagesONL((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((AcqOdyssey*) G__getstructoffset())->GrabImagesONL((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((AcqOdyssey*) G__getstructoffset())->GrabImagesONL((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((AcqOdyssey*) G__getstructoffset())->GrabRawImagesONL((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((AcqOdyssey*) G__getstructoffset())->GrabRawImagesONL((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((AcqOdyssey*) G__getstructoffset())->GrabRawImagesONL((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->GrabAndFillView((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (EdbView*) G__int(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->GrabAndFillView((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (EdbView*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->GrabAndFillView((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->GrabAndFillView((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->GrabAndFillView((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->GrabAndFillView((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqOdyssey*) G__getstructoffset())->IsGrabComplete());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((AcqOdyssey*) G__getstructoffset())->GrabOneImage((float) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((AcqOdyssey*) G__getstructoffset())->GrabOneImage((float) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->StartLiveGrab();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->StopLiveGrab();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->XProjectImage((int) G__int(libp->para[0]), (long*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->YProjectImage((int) G__int(libp->para[0]), (long*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqOdyssey*) G__getstructoffset())->VFindEdge((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqOdyssey*) G__getstructoffset())->HFindEdge((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->TracksFromNImages((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->FindClusters((int) G__int(libp->para[0]), (TClonesArray*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->FindClusters((int) G__int(libp->para[0]), (TClonesArray*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->FindClusters((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->Clusterize((int) G__int(libp->para[0]), (TClonesArray*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->Clusterize((int) G__int(libp->para[0]), (TClonesArray*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->Clusterize((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->Clusterize((int) G__int(libp->para[0]), (unsigned char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (TClonesArray*) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->Clusterize((int) G__int(libp->para[0]), (unsigned char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (TClonesArray*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->Clusterize((int) G__int(libp->para[0]), (unsigned char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->FillView((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (EdbView*) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->FillView((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (EdbView*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->FillView((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) ((AcqOdyssey*) G__getstructoffset())->FillView((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->UARTSendString((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AcqOdyssey::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqOdyssey::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AcqOdyssey::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AcqOdyssey::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqOdyssey*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqOdyssey::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqOdyssey::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqOdyssey::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_343_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqOdyssey::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ACQDict_343_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AcqOdyssey* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AcqOdyssey(*(AcqOdyssey*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AcqOdyssey G__TAcqOdyssey;
static int G__ACQDict_343_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AcqOdyssey*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AcqOdyssey*) (soff+(sizeof(AcqOdyssey)*i)))->~G__TAcqOdyssey();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AcqOdyssey*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AcqOdyssey*) (soff))->~G__TAcqOdyssey();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ACQDict_343_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqOdyssey* dest = (AcqOdyssey*) G__getstructoffset();
   *dest = *(AcqOdyssey*) libp->para[0].ref;
   const AcqOdyssey& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AcqMarksScanner */
static int G__ACQDict_344_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqMarksScanner* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqMarksScanner[n];
     } else {
       p = new((void*) gvp) AcqMarksScanner[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqMarksScanner;
     } else {
       p = new((void*) gvp) AcqMarksScanner;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqMarksScanner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->SetPointers((AcqStage1*) G__int(libp->para[0]), (AcqOdyssey*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->SetMapext((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->GotoMark((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqMarksScanner*) G__getstructoffset())->ScanView((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->SearchMark((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->SearchMark((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->SearchMark((float*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->SearchMark());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->SearchMarkFast((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->SearchMarkFast((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->SearchMarkFast((float*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->SearchMarkFast());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->ScanMark((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->ScanMark((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->ScanMark((float*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->ScanMark());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqMarksScanner*) G__getstructoffset())->ScanMarks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AcqMarksScanner::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqMarksScanner::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AcqMarksScanner::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AcqMarksScanner::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqMarksScanner*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqMarksScanner::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqMarksScanner::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqMarksScanner::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_344_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqMarksScanner::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ACQDict_344_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AcqMarksScanner* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AcqMarksScanner(*(AcqMarksScanner*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqMarksScanner));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AcqMarksScanner G__TAcqMarksScanner;
static int G__ACQDict_344_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AcqMarksScanner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AcqMarksScanner*) (soff+(sizeof(AcqMarksScanner)*i)))->~G__TAcqMarksScanner();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AcqMarksScanner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AcqMarksScanner*) (soff))->~G__TAcqMarksScanner();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ACQDict_344_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqMarksScanner* dest = (AcqMarksScanner*) G__getstructoffset();
   *dest = *(AcqMarksScanner*) libp->para[0].ref;
   const AcqMarksScanner& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AcqTrackScanner */
static int G__ACQDict_678_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqTrackScanner* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqTrackScanner[n];
     } else {
       p = new((void*) gvp) AcqTrackScanner[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqTrackScanner;
     } else {
       p = new((void*) gvp) AcqTrackScanner;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqTrackScanner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((AcqTrackScanner*) G__getstructoffset())->SetPointers((AcqStage1*) G__int(libp->para[0]), (AcqOdyssey*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((AcqTrackScanner*) G__getstructoffset())->ScanView((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((AcqTrackScanner*) G__getstructoffset())->ScanView((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((AcqTrackScanner*) G__getstructoffset())->ScanView((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((AcqTrackScanner*) G__getstructoffset())->ScanView((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 108, (long) ((AcqTrackScanner*) G__getstructoffset())->ScanAndFillView(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (EdbView*) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 108, (long) ((AcqTrackScanner*) G__getstructoffset())->ScanAndFillView((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (EdbView*) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (float) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 108, (long) ((AcqTrackScanner*) G__getstructoffset())->ScanAndFillView((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (EdbView*) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 108, (long) ((AcqTrackScanner*) G__getstructoffset())->ScanAndFillView((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (EdbView*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 108, (long) ((AcqTrackScanner*) G__getstructoffset())->ScanAndFillView((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((AcqTrackScanner*) G__getstructoffset())->ScanAndFillView((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqTrackScanner*) G__getstructoffset())->FindLayer((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 105, (long) ((AcqTrackScanner*) G__getstructoffset())->FastScanFragment(
(bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (EdbRun*) G__int(libp->para[5])
, (bool) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) ((AcqTrackScanner*) G__getstructoffset())->FastScanFragment((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (EdbRun*) G__int(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AcqTrackScanner::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqTrackScanner::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AcqTrackScanner::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AcqTrackScanner::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqTrackScanner*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqTrackScanner::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqTrackScanner::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqTrackScanner::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_678_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqTrackScanner::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ACQDict_678_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AcqTrackScanner* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AcqTrackScanner(*(AcqTrackScanner*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqTrackScanner));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AcqTrackScanner G__TAcqTrackScanner;
static int G__ACQDict_678_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AcqTrackScanner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AcqTrackScanner*) (soff+(sizeof(AcqTrackScanner)*i)))->~G__TAcqTrackScanner();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AcqTrackScanner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AcqTrackScanner*) (soff))->~G__TAcqTrackScanner();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ACQDict_678_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqTrackScanner* dest = (AcqTrackScanner*) G__getstructoffset();
   *dest = *(AcqTrackScanner*) libp->para[0].ref;
   const AcqTrackScanner& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AcqTrackReconstructor */
static int G__ACQDict_679_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqTrackReconstructor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqTrackReconstructor[n];
     } else {
       p = new((void*) gvp) AcqTrackReconstructor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqTrackReconstructor;
     } else {
       p = new((void*) gvp) AcqTrackReconstructor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqTrackReconstructor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqTrackReconstructor*) G__getstructoffset())->RecRating((EdbView*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqTrackReconstructor*) G__getstructoffset())->RecNetscan((EdbView*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqTrackReconstructor*) G__getstructoffset())->RecSySal((EdbView*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqTrackReconstructor*) G__getstructoffset())->RecValeri((EdbView*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AcqTrackReconstructor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqTrackReconstructor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AcqTrackReconstructor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AcqTrackReconstructor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqTrackReconstructor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqTrackReconstructor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqTrackReconstructor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqTrackReconstructor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_679_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqTrackReconstructor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ACQDict_679_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AcqTrackReconstructor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AcqTrackReconstructor(*(AcqTrackReconstructor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqTrackReconstructor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AcqTrackReconstructor G__TAcqTrackReconstructor;
static int G__ACQDict_679_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AcqTrackReconstructor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AcqTrackReconstructor*) (soff+(sizeof(AcqTrackReconstructor)*i)))->~G__TAcqTrackReconstructor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AcqTrackReconstructor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AcqTrackReconstructor*) (soff))->~G__TAcqTrackReconstructor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ACQDict_679_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqTrackReconstructor* dest = (AcqTrackReconstructor*) G__getstructoffset();
   *dest = *(AcqTrackReconstructor*) libp->para[0].ref;
   const AcqTrackReconstructor& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AcqCOM */
static int G__ACQDict_680_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqCOM* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqCOM[n];
     } else {
       p = new((void*) gvp) AcqCOM[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqCOM;
     } else {
       p = new((void*) gvp) AcqCOM;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqCOM));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqCOM*) G__getstructoffset())->Open((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqCOM*) G__getstructoffset())->Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqCOM*) G__getstructoffset())->SendString((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqCOM*) G__getstructoffset())->RecvString((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqCOM*) G__getstructoffset())->Flush();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqCOM*) G__getstructoffset())->CleanAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AcqCOM::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqCOM::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AcqCOM::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AcqCOM::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqCOM*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqCOM::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqCOM::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqCOM::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_680_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqCOM::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ACQDict_680_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AcqCOM* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AcqCOM(*(AcqCOM*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqCOM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AcqCOM G__TAcqCOM;
static int G__ACQDict_680_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AcqCOM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AcqCOM*) (soff+(sizeof(AcqCOM)*i)))->~G__TAcqCOM();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AcqCOM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AcqCOM*) (soff))->~G__TAcqCOM();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ACQDict_680_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqCOM* dest = (AcqCOM*) G__getstructoffset();
   *dest = *(AcqCOM*) libp->para[0].ref;
   const AcqCOM& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AcqSerialPlateChanger */
static int G__ACQDict_684_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqSerialPlateChanger* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqSerialPlateChanger[n];
     } else {
       p = new((void*) gvp) AcqSerialPlateChanger[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AcqSerialPlateChanger;
     } else {
       p = new((void*) gvp) AcqSerialPlateChanger;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqSerialPlateChanger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqSerialPlateChanger*) G__getstructoffset())->OnReset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->Initialize((AcqStage1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->Initialize());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->PowerON((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->PowerON());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->PowerOFF((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->PowerOFF());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->ArmVacuumControl((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->TableVacuumControl((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->TableVacuumControl((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->GoOnHAxis((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->GoOnVAxis((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->ReadStatusFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqSerialPlateChanger*) G__getstructoffset())->UpdateStatusFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqSerialPlateChanger*) G__getstructoffset())->ResetBanks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqSerialPlateChanger*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->TakeFromBank((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqSerialPlateChanger*) G__getstructoffset())->AddToBank((int) G__int(libp->para[0]), (TPlateS*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->FindEmulsion(*((IdentifierS*) G__int(libp->para[0])), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((AcqSerialPlateChanger*) G__getstructoffset())->LoadBrick((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((AcqSerialPlateChanger*) G__getstructoffset())->LoadBrick((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((AcqSerialPlateChanger*) G__getstructoffset())->LoadBrick((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((AcqSerialPlateChanger*) G__getstructoffset())->LoadBrick((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((AcqSerialPlateChanger*) G__getstructoffset())->LoadBrick((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((AcqSerialPlateChanger*) G__getstructoffset())->LoadBrick((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqSerialPlateChanger*) G__getstructoffset())->UnloadBrick();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->GetLoadedId((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]), (int*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->GetLoadedId((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->GetLoadedId((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->GetLoadedId((int*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->GetLoadedId());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->Park((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->MoveEmulsion((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->UnloadPlate((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->UnloadPlate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->LoadPlate(*((IdentifierS*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->LoadPlate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->LoadPlate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((AcqSerialPlateChanger*) G__getstructoffset())->LoadPlate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AcqSerialPlateChanger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqSerialPlateChanger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AcqSerialPlateChanger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AcqSerialPlateChanger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AcqSerialPlateChanger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqSerialPlateChanger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqSerialPlateChanger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AcqSerialPlateChanger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ACQDict_684_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AcqSerialPlateChanger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ACQDict_684_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AcqSerialPlateChanger* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AcqSerialPlateChanger(*(AcqSerialPlateChanger*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ACQDictLN_AcqSerialPlateChanger));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AcqSerialPlateChanger G__TAcqSerialPlateChanger;
static int G__ACQDict_684_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AcqSerialPlateChanger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AcqSerialPlateChanger*) (soff+(sizeof(AcqSerialPlateChanger)*i)))->~G__TAcqSerialPlateChanger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AcqSerialPlateChanger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AcqSerialPlateChanger*) (soff))->~G__TAcqSerialPlateChanger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ACQDict_684_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AcqSerialPlateChanger* dest = (AcqSerialPlateChanger*) G__getstructoffset();
   *dest = *(AcqSerialPlateChanger*) libp->para[0].ref;
   const AcqSerialPlateChanger& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* AcqAxis */

/* AcqLight */

/* AcqStage1 */

/* AcqOdyssey */

/* AcqMarksScanner */

/* AcqTrackScanner */

/* AcqTrackReconstructor */

/* AcqCOM */

/* AcqSerialPlateChanger */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncACQDict {
 public:
  G__Sizep2memfuncACQDict(): p(&G__Sizep2memfuncACQDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncACQDict::*p)();
};

size_t G__get_sizep2memfuncACQDict()
{
  G__Sizep2memfuncACQDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceACQDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ACQDictLN_AcqAxis))) {
     AcqAxis *G__Lderived;
     G__Lderived=(AcqAxis*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqAxis),G__get_linked_tagnum(&G__ACQDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ACQDictLN_AcqLight))) {
     AcqLight *G__Lderived;
     G__Lderived=(AcqLight*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqLight),G__get_linked_tagnum(&G__ACQDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ACQDictLN_AcqStage1))) {
     AcqStage1 *G__Lderived;
     G__Lderived=(AcqStage1*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqStage1),G__get_linked_tagnum(&G__ACQDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey))) {
     AcqOdyssey *G__Lderived;
     G__Lderived=(AcqOdyssey*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey),G__get_linked_tagnum(&G__ACQDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ACQDictLN_AcqMarksScanner))) {
     AcqMarksScanner *G__Lderived;
     G__Lderived=(AcqMarksScanner*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqMarksScanner),G__get_linked_tagnum(&G__ACQDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ACQDictLN_AcqTrackScanner))) {
     AcqTrackScanner *G__Lderived;
     G__Lderived=(AcqTrackScanner*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqTrackScanner),G__get_linked_tagnum(&G__ACQDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ACQDictLN_AcqTrackReconstructor))) {
     AcqTrackReconstructor *G__Lderived;
     G__Lderived=(AcqTrackReconstructor*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqTrackReconstructor),G__get_linked_tagnum(&G__ACQDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ACQDictLN_AcqCOM))) {
     AcqCOM *G__Lderived;
     G__Lderived=(AcqCOM*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqCOM),G__get_linked_tagnum(&G__ACQDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ACQDictLN_AcqSerialPlateChanger))) {
     AcqSerialPlateChanger *G__Lderived;
     G__Lderived=(AcqSerialPlateChanger*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqSerialPlateChanger),G__get_linked_tagnum(&G__ACQDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableACQDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("iterator<iterator_traits<string::iterator>::iterator_category,iterator_traits<string::iterator>::value_type,iterator_traits<string::iterator>::difference_type,iterator_traits<string::iterator>::pointer,iterator_traits<string::iterator>::reference>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long,char*>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<string::const_iterator>::iterator_category,iterator_traits<string::const_iterator>::value_type,iterator_traits<string::const_iterator>::difference_type,iterator_traits<string::const_iterator>::pointer,iterator_traits<string::const_iterator>::reference>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ACQDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ACQDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ACQDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ACQDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ACQDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__ACQDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ACQDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ACQDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ACQDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ACQDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ACQDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__ACQDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ACQDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("u16",114,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("u32",107,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__ACQDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__ACQDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__ACQDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__ACQDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__ACQDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__ACQDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* AcqAxis */
static void G__setup_memvarAcqAxis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqAxis));
   { AcqAxis *p; p=(AcqAxis*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Axis)-(long)(p)),105,0,0,-1,-1,-1,1,"Axis=",0,"Axis number (1 to 3)");
   G__memvar_setup((void*)((long)(&p->BoardId)-(long)(p)),105,0,0,-1,-1,-1,1,"BoardId=",0,"NI7344 Board number (Default is 0)");
   G__memvar_setup((void*)((long)(&p->StepsRev)-(long)(p)),105,0,0,-1,-1,-1,1,"StepsRev=",0,"Step motor parameter : steps per revolution");
   G__memvar_setup((void*)((long)(&p->LinesRev)-(long)(p)),105,0,0,-1,-1,-1,1,"LinesRev=",0,"Encoder parameter : lines per revolution (in case of linear encoder defines line-to-step ratio only).");
   G__memvar_setup((void*)((long)(&p->EncoderToMicrons)-(long)(p)),102,0,0,-1,-1,-1,1,"EncoderToMicrons=",0,"Microns per one line of encoder");
   G__memvar_setup((void*)((long)(&p->MicronsToSteps)-(long)(p)),102,0,0,-1,-1,-1,1,"MicronsToSteps=",0,"Microns per one step of step motor");
   G__memvar_setup((void*)((long)(&p->Accel)-(long)(p)),102,0,0,-1,-1,-1,1,"Accel=",0,"Max acceleration [mic/s2]");
   G__memvar_setup((void*)((long)(&p->MaxSpeed)-(long)(p)),102,0,0,-1,-1,-1,1,"MaxSpeed=",0,"Max speed [mic/s]");
   G__memvar_setup((void*)((long)(&p->LimPol)-(long)(p)),105,0,0,-1,-1,-1,1,"LimPol=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HomePol)-(long)(p)),105,0,0,-1,-1,-1,1,"HomePol=",0,"Limiter switch and Home switch polarities");
   G__memvar_setup((void*)((long)(&p->CtlModeIsCWCCW)-(long)(p)),105,0,0,-1,-1,-1,1,"CtlModeIsCWCCW=",0,"Stepper control mode: Step/Direction (0) or Clockwise/Counterclockwise (1)");
   G__memvar_setup((void*)((long)(&p->TurnOffLightTime)-(long)(p)),105,0,0,-1,-1,-1,1,"TurnOffLightTime=",0,"Not implemented yet!");
   G__memvar_setup((void*)((long)(&p->Invert)-(long)(p)),105,0,0,-1,-1,-1,1,"Invert=",0,"defines axis direction inversion");
   G__memvar_setup((void*)((long)(&p->HomingSpeed)-(long)(p)),102,0,0,-1,-1,-1,1,"HomingSpeed=",0,"Speed when perfoming home finding");
   G__memvar_setup((void*)((long)(&p->Reference)-(long)(p)),102,0,0,-1,-1,-1,1,"Reference=",0,"user derived Reference value (usually emulsion corner position for X,Y and glass surface for Z)");
   G__memvar_setup((void*)((long)(&p->NominalReference)-(long)(p)),102,0,0,-1,-1,-1,1,"NominalReference=",0,"Nominal Reference value (usually emulsion corner position for X,Y and glass surface for Z)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ACQDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AcqLight */
static void G__setup_memvarAcqLight(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqLight));
   { AcqLight *p; p=(AcqLight*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->BoardId)-(long)(p)),105,0,0,-1,-1,-1,1,"BoardId=",0,"NI7344 Board number (0)");
   G__memvar_setup((void*)((long)(&p->TurnOffLightTime)-(long)(p)),105,0,0,-1,-1,-1,1,"TurnOffLightTime=",0,"Light must be turned off if system is idle for a given time (Not implemented)");
   G__memvar_setup((void*)((long)(&p->LightLevel)-(long)(p)),105,0,0,-1,-1,-1,1,"LightLevel=",0,"Light level (0-32767)");
   G__memvar_setup((void*)((long)(&p->IsON)-(long)(p)),103,0,0,-1,-1,-1,1,"IsON=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ACQDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AcqStage1 */
static void G__setup_memvarAcqStage1(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqStage1));
   { AcqStage1 *p; p=(AcqStage1*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->BoardId)-(long)(p)),105,0,0,-1,-1,-1,1,"BoardId=",0,"NI7344 Board number (0)");
   G__memvar_setup((void*)((long)(&p->ZHomingXPos)-(long)(p)),102,0,0,-1,-1,-1,1,"ZHomingXPos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ZHomingYPos)-(long)(p)),102,0,0,-1,-1,-1,1,"ZHomingYPos=",0,"Positions on X and Y where Z homing can be made safely.");
   G__memvar_setup((void*)((long)(&p->EmTopLayer)-(long)(p)),102,0,0,-1,-1,-1,1,"EmTopLayer=",0,"user measured Thickness of top emulsion layer (by focusing procedure)");
   G__memvar_setup((void*)((long)(&p->EmBotLayer)-(long)(p)),102,0,0,-1,-1,-1,1,"EmBotLayer=",0,"user measured Thickness of bottom emulsion layer (by focusing procedure)");
   G__memvar_setup((void*)((long)(&p->EmBase)-(long)(p)),102,0,0,-1,-1,-1,1,"EmBase=",0,"user measured Thickness of emulsion base [mic]");
   G__memvar_setup((void*)((long)(&p->NominalEmLayer)-(long)(p)),102,0,0,-1,-1,-1,1,"NominalEmLayer=",0,"nominal Thickness of emulsion layer");
   G__memvar_setup((void*)((long)(&p->NominalEmBase)-(long)(p)),102,0,0,-1,-1,-1,1,"NominalEmBase=",0,"nominal Thickness of emulsion base [mic]");
   G__memvar_setup((void*)((long)(&p->X)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_AcqAxis),-1,-1,1,"X=",0,"Pointers to Axes and light controller");
   G__memvar_setup((void*)((long)(&p->Y)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_AcqAxis),-1,-1,1,"Y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_AcqAxis),-1,-1,1,"Z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->L)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_AcqLight),-1,-1,1,"L=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eAffine)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_EdbAffine2D),-1,-1,1,"eAffine=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->AbsCoords)-(long)(p)),103,0,0,-1,-1,-1,1,"AbsCoords=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ACQDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AcqOdyssey */
static void G__setup_memvarAcqOdyssey(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey));
   { AcqOdyssey *p; p=(AcqOdyssey*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilApplication=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilSystem=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilDigitizer=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilDisplay=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilOverlayImage=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"TransparentColor=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilImage[50]=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilImageN=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilBGImage=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilGCImage=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilConvImage=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilConvImage2=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilConvImage32=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilImageDisp=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilGCKernel=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilProjResX=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("MIL_ID"),-1,4,"MilProjResY=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"System=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Device=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Camera=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Digitizer=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Control=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"BufferN=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Overlay=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"ConvImage=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"ConvImage2=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"ConvImage32=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Kernel=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"BGImage=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"GCImage=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Buffer[50]=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"HostBuffer[50]=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"HostBufferPitch=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"HostBufferLines=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"ShiftBuffer[50]=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"ShiftList=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Thread=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"GrabThread=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"SeqThread=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"ControlBuf=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"GrabOSB=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"CopyOSB=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"CopyOSB1=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,4,"bNorm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SizeX)-(long)(p)),105,0,0,-1,-1,-1,1,"SizeX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SizeY)-(long)(p)),105,0,0,-1,-1,-1,1,"SizeY=",0,"Image size, aquired from digitizer settings");
   G__memvar_setup((void*)((long)(&p->BGImageValid)-(long)(p)),103,0,0,-1,-1,-1,1,"BGImageValid=",0,"Flag set when BG is taken");
   G__memvar_setup((void*)((long)(&p->GCImageValid)-(long)(p)),103,0,0,-1,-1,-1,1,"GCImageValid=",0,"Flag set when Gain Correction image is taken");
   G__memvar_setup((void*)((long)(&p->SubtractBG)-(long)(p)),103,0,0,-1,-1,-1,1,"SubtractBG=",0,"Flag to be set by user, controls BG subtraction");
   G__memvar_setup((void*)((long)(&p->ApplyFIRF)-(long)(p)),103,0,0,-1,-1,-1,1,"ApplyFIRF=",0,"Flag to be set by user, controls FIR filtering");
   G__memvar_setup((void*)((long)(&p->ApplyGainCorr)-(long)(p)),103,0,0,-1,-1,-1,1,"ApplyGainCorr=",0,"Flag to be set by user, controls gain correction");
   G__memvar_setup((void*)((long)(&p->Threshold)-(long)(p)),105,0,0,-1,-1,-1,1,"Threshold=",0,"Parameter to be set by user, controls threshold cut on the image");
   G__memvar_setup((void*)((long)(&p->ZBuffer)-(long)(p)),102,0,0,-1,-1,-1,1,"ZBuffer[50]=",0,"Contains Z coordinates of images after scan");
   G__memvar_setup((void*)((long)(&p->eEdbClusters)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_TClonesArray),-1,-1,1,"eEdbClusters=",0,"Contains clusters when FindClusters() or Clusterise() executed");
   G__memvar_setup((void*)((long)(&p->eEdbView)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_EdbView),-1,-1,1,"eEdbView=",0,"contains EdbView when FillView() is executed");
   G__memvar_setup((void*)((long)(&p->PixelToMicronX)-(long)(p)),102,0,0,-1,-1,-1,1,"PixelToMicronX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PixelToMicronY)-(long)(p)),102,0,0,-1,-1,-1,1,"PixelToMicronY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->OpticalShrinkage)-(long)(p)),102,0,0,-1,-1,-1,1,"OpticalShrinkage=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MaxNbGrab)-(long)(p)),105,0,0,-1,-1,-1,1,"MaxNbGrab=",0,"set to MAX_NB_GRAB, don't modify!!!!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ACQDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AcqMarksScanner */
static void G__setup_memvarAcqMarksScanner(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqMarksScanner));
   { AcqMarksScanner *p; p=(AcqMarksScanner*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eArea)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_EdbArea),-1,-1,1,"eArea=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eMarksSet)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_EdbMarksSet),-1,-1,1,"eMarksSet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eFoundMarksSet)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_EdbMarksSet),-1,-1,1,"eFoundMarksSet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eAffine2D)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_EdbAffine2D),-1,-1,1,"eAffine2D=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ST)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_AcqStage1),-1,-1,1,"ST=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FG)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey),-1,-1,1,"FG=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Side)-(long)(p)),105,0,0,-1,-1,-1,1,"Side=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsValid)-(long)(p)),103,0,0,-1,-1,-1,1,"IsValid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FPS)-(long)(p)),102,0,0,-1,-1,-1,1,"FPS=",0,"Frames per second to use when scanning FM's (max ~220 presently, 200 is safe)");
   G__memvar_setup((void*)((long)(&p->Layers)-(long)(p)),105,0,0,-1,-1,-1,1,"Layers=",0,"Layers to scan ( default 10)");
   G__memvar_setup((void*)((long)(&p->Threshold)-(long)(p)),105,0,0,-1,-1,-1,1,"Threshold=",0,"Pixel pulsehight threshold to use for clustering (0-255)");
   G__memvar_setup((void*)((long)(&p->MarkDiameter)-(long)(p)),102,0,0,-1,-1,-1,1,"MarkDiameter=",0,"Nominal mark diameter [mic]");
   G__memvar_setup((void*)((long)(&p->MarkDiameterTolerance)-(long)(p)),102,0,0,-1,-1,-1,1,"MarkDiameterTolerance=",0,"tolerance [mic]");
   G__memvar_setup((void*)((long)(&p->ViewsToScan)-(long)(p)),105,0,0,-1,-1,-1,1,"ViewsToScan=",0,"Number ov views to scan when searching for FM (in spiral pattern)");
   G__memvar_setup((void*)((long)(&p->StepX)-(long)(p)),102,0,0,-1,-1,-1,1,"StepX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->StepY)-(long)(p)),102,0,0,-1,-1,-1,1,"StepY=",0,"steps between adjacent views in spiral pattern");
   G__memvar_setup((void*)((long)(&p->XYScanSpeed)-(long)(p)),102,0,0,-1,-1,-1,1,"XYScanSpeed=",0,"view-to-view move speed [mic/s]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ACQDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AcqTrackScanner */
static void G__setup_memvarAcqTrackScanner(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqTrackScanner));
   { AcqTrackScanner *p; p=(AcqTrackScanner*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Layers)-(long)(p)),105,0,0,-1,-1,-1,1,"Layers=",0,"Number of layers to scan");
   G__memvar_setup((void*)((long)(&p->FPS)-(long)(p)),105,0,0,-1,-1,-1,1,"FPS=",0,"Frames per second for Z scan (200 is safe so far)");
   G__memvar_setup((void*)((long)(&p->XYViewToViewSpeed)-(long)(p)),102,0,0,-1,-1,-1,1,"XYViewToViewSpeed=",0,"[mic/s]");
   G__memvar_setup((void*)((long)(&p->ZBackStrokeSpeed)-(long)(p)),102,0,0,-1,-1,-1,1,"ZBackStrokeSpeed=",0,"[mic/s]");
   G__memvar_setup((void*)((long)(&p->ViewStepX)-(long)(p)),102,0,0,-1,-1,-1,1,"ViewStepX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ViewStepY)-(long)(p)),102,0,0,-1,-1,-1,1,"ViewStepY=",0,"step between views in [mic]");
   G__memvar_setup((void*)((long)(&p->Nx)-(long)(p)),105,0,0,-1,-1,-1,1,"Nx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ny)-(long)(p)),105,0,0,-1,-1,-1,1,"Ny=",0,"Fragment size in views");
   G__memvar_setup((void*)((long)(&p->ST)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_AcqStage1),-1,-1,1,"ST=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FG)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey),-1,-1,1,"FG=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ACQDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AcqTrackReconstructor */
static void G__setup_memvarAcqTrackReconstructor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqTrackReconstructor));
   { AcqTrackReconstructor *p; p=(AcqTrackReconstructor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ACQDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AcqCOM */
static void G__setup_memvarAcqCOM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqCOM));
   { AcqCOM *p; p=(AcqCOM*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ACQDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AcqSerialPlateChanger */
static void G__setup_memvarAcqSerialPlateChanger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqSerialPlateChanger));
   { AcqSerialPlateChanger *p; p=(AcqSerialPlateChanger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"StX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"StY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"StZ=",0,"stage coordinates to save before arm power-on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ACQDictLN_AcqCOM),-1,-1,4,"port=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,4,"VacRegister=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ComPort)-(long)(p)),105,0,0,-1,-1,-1,1,"ComPort=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ComBaud)-(long)(p)),105,0,0,-1,-1,-1,1,"ComBaud=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->InitDone)-(long)(p)),103,0,0,-1,-1,-1,1,"InitDone=",0,"flag set when Initialize() is done");
   G__memvar_setup((void*)((long)(&p->Ready)-(long)(p)),103,0,0,-1,-1,-1,1,"Ready=",0,"flag set when banks are filled from status file ");
   G__memvar_setup((void*)((long)(&p->StageError)-(long)(p)),103,0,0,-1,-1,-1,1,"StageError=",0,"flag is set if the stage position changed during robot operation");
   G__memvar_setup((void*)((long)(&p->SourceBank)-(long)(p)),105,0,0,-1,-1,-1,1,"SourceBank=",0,"source bank (1 to NumberOfBanks) ");
   G__memvar_setup((void*)((long)(&p->DestinationBank)-(long)(p)),105,0,0,-1,-1,-1,1,"DestinationBank=",0,"source bank (1 to NumberOfBanks   ");
   G__memvar_setup((void*)((long)(&p->PositionTimeout)-(long)(p)),105,0,0,-1,-1,-1,1,"PositionTimeout=",0,"Timeout in x100ms to position the arm");
   G__memvar_setup((void*)((long)(&p->VacuumTimeout)-(long)(p)),105,0,0,-1,-1,-1,1,"VacuumTimeout=",0,"Timeout in x100ms to reach the vacuum on table or arm");
   G__memvar_setup((void*)((long)(&p->NumberOfBanks)-(long)(p)),105,0,0,-1,-1,-1,1,"NumberOfBanks=",0,"Number of banks on the table");
   G__memvar_setup((void*)((long)(&p->LiftCorners)-(long)(p)),103,0,0,-1,-1,-1,1,"LiftCorners=",0,"if set - arm tries first to lift corners of the emulsion");
   G__memvar_setup((void*)((long)(&p->NumberOfAttempt)-(long)(p)),105,0,0,-1,-1,-1,1,"NumberOfAttempt=",0,"max number of attempts to take emulsion from the plate");
   G__memvar_setup((void*)((long)(&p->SeparationAttempts)-(long)(p)),105,0,0,-1,-1,-1,1,"SeparationAttempts=",0,"number of up-down movements against brushes in bank ");
   G__memvar_setup((void*)((long)(&p->XLoadPosition)-(long)(p)),102,0,0,-1,-1,-1,1,"XLoadPosition=",0,"stage positions for safe emulsion load/unload");
   G__memvar_setup((void*)((long)(&p->YLoadPosition)-(long)(p)),102,0,0,-1,-1,-1,1,"YLoadPosition=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ZLoadPosition)-(long)(p)),102,0,0,-1,-1,-1,1,"ZLoadPosition=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ST)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ACQDictLN_AcqStage1),-1,-1,1,"ST=",0,"pointer to stage");
   G__memvar_setup((void*)((long)(&p->Debug)-(long)(p)),103,0,0,-1,-1,-1,1,"Debug=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ACQDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarACQDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncAcqAxis(void) {
   /* AcqAxis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqAxis));
   G__memfunc_setup("AcqAxis",682,G__ACQDict_291_0_1, 105, G__get_linked_tagnum(&G__ACQDictLN_AcqAxis), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AcqAxis",682,G__ACQDict_291_0_2, 105, G__get_linked_tagnum(&G__ACQDictLN_AcqAxis), -1, 0, 1, 1, 1, 0, "i - - 0 - Ax", "Main constructor, Ax is from 1 to 3", (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__ACQDict_291_0_3, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PosMove",713,G__ACQDict_291_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - Pos f - - 0 - Speed "
"f - - 0 - Acc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Move",407,G__ACQDict_291_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - Speed f - - 0 - Acc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stop",422,G__ACQDict_291_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__ACQDict_291_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindHome",778,G__ACQDict_291_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - Direction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WaitForHome",1093,G__ACQDict_291_0_9, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - Timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WaitForMoveComplete",1932,G__ACQDict_291_0_10, 105, -1, -1, 0, 1, 1, 1, 0, "k - 'u32' 0 - Timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPos",594,G__ACQDict_291_0_11, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLimiter",1014,G__ACQDict_291_0_12, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMoveComplete",1420,G__ACQDict_291_0_13, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadMoveCompleteCriteria",2435,G__ACQDict_291_0_14, 121, -1, -1, 0, 7, 1, 1, 0, 
"g - - 0 - MotorOff g - - 0 - Stop "
"g - - 0 - Delay g - - 0 - InPosition "
"f - - 0 - DeadBand i - - 0 - sdelay "
"i - - 0 - minPulse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ArmBreakpoint",1327,G__ACQDict_291_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - Pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadBreakpointSequence",2248,G__ACQDict_291_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - - 0 - Pos i - - 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpBreakpointSequence",2270,G__ACQDict_291_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisarmBreakpointSequence",2472,G__ACQDict_291_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ArmBreakpointSequence",2152,G__ACQDict_291_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBreakpointSequenceArmed",2541,G__ACQDict_291_0_20, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisarmBreakpoint",1647,G__ACQDict_291_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBreakpointOccured",1936,G__ACQDict_291_0_22, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Test",416,G__ACQDict_291_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - - 0 - Pos i - - 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFilterFrequency",1860,G__ACQDict_291_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - Freq", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFollowingError",1847,G__ACQDict_291_0_25, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFollowingError",1767,G__ACQDict_291_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'u16' 0 - Error", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ACQDict_291_0_27, 85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AcqAxis::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ACQDict_291_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqAxis::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ACQDict_291_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AcqAxis::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ACQDict_291_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AcqAxis::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ACQDict_291_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ACQDict_291_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqAxis::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ACQDict_291_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqAxis::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ACQDict_291_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqAxis::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ACQDict_291_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqAxis::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AcqAxis", 682, G__ACQDict_291_0_39, (int) ('i'), G__get_linked_tagnum(&G__ACQDictLN_AcqAxis), -1, 0, 1, 1, 1, 0, "u 'AcqAxis' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AcqAxis", 808, G__ACQDict_291_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ACQDict_291_0_41, (int) ('u'), G__get_linked_tagnum(&G__ACQDictLN_AcqAxis), -1, 1, 1, 1, 1, 0, "u 'AcqAxis' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAcqLight(void) {
   /* AcqLight */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqLight));
   G__memfunc_setup("AcqLight",781,G__ACQDict_292_0_1, 105, G__get_linked_tagnum(&G__ACQDictLN_AcqLight), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__ACQDict_292_0_2, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetTimer",1028,G__ACQDict_292_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", "Not implemented yet", (void*) NULL, 0);
   G__memfunc_setup("ON",157,G__ACQDict_292_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OFF",219,G__ACQDict_292_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadTemperature",1546,G__ACQDict_292_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadLightLevel",1388,G__ACQDict_292_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ACQDict_292_0_8, 85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AcqLight::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ACQDict_292_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqLight::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ACQDict_292_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AcqLight::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ACQDict_292_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AcqLight::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ACQDict_292_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ACQDict_292_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqLight::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ACQDict_292_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqLight::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ACQDict_292_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqLight::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ACQDict_292_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqLight::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AcqLight", 781, G__ACQDict_292_0_20, (int) ('i'), G__get_linked_tagnum(&G__ACQDictLN_AcqLight), -1, 0, 1, 1, 1, 0, "u 'AcqLight' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AcqLight", 907, G__ACQDict_292_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ACQDict_292_0_22, (int) ('u'), G__get_linked_tagnum(&G__ACQDictLN_AcqLight), -1, 1, 1, 1, 1, 0, "u 'AcqLight' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAcqStage1(void) {
   /* AcqStage1 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqStage1));
   G__memfunc_setup("AcqStage1",826,G__ACQDict_293_0_1, 105, G__get_linked_tagnum(&G__ACQDictLN_AcqStage1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__ACQDict_293_0_2, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stop",422,G__ACQDict_293_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastError",1214,G__ACQDict_293_0_4, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - Description i - - 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastModalError",1707,G__ACQDict_293_0_5, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - Description i - - 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Monitor",744,G__ACQDict_293_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanToZ0AndGotoXYZ",1673,G__ACQDict_293_0_7, 121, -1, -1, 0, 11, 1, 1, 0, 
"f - - 0 - Z0 f - - 0 - Z0speed "
"f - - 0 - Z0acc f - - 0 - X "
"f - - 0 - Y f - - 0 - XYSpeed "
"f - - 0 - XYAcc f - - 0 - Z "
"f - - 0 - Zspeed f - - 0 - Zacc "
"k - 'u32' 0 - Timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ACQDict_293_0_8, 85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AcqStage1::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ACQDict_293_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqStage1::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ACQDict_293_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AcqStage1::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ACQDict_293_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AcqStage1::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ACQDict_293_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ACQDict_293_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqStage1::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ACQDict_293_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqStage1::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ACQDict_293_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqStage1::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ACQDict_293_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqStage1::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AcqStage1", 826, G__ACQDict_293_0_20, (int) ('i'), G__get_linked_tagnum(&G__ACQDictLN_AcqStage1), -1, 0, 1, 1, 1, 0, "u 'AcqStage1' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AcqStage1", 952, G__ACQDict_293_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ACQDict_293_0_22, (int) ('u'), G__get_linked_tagnum(&G__ACQDictLN_AcqStage1), -1, 1, 1, 1, 1, 0, "u 'AcqStage1' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAcqOdyssey(void) {
   /* AcqOdyssey */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey));
   G__memfunc_setup("AcqOdyssey",1029,G__ACQDict_343_0_1, 105, G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__ACQDict_343_0_2, 103, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - DCF i - - 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FreeResources",1341,G__ACQDict_343_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImage",771,G__ACQDict_343_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - N C - - 0 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImageFast",1169,G__ACQDict_343_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - N B - - 2 - buf "
"L - - 0 - Pitch L - - 0 - Lines", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEdbImage",1038,G__ACQDict_343_0_6, 85, G__get_linked_tagnum(&G__ACQDictLN_EdbImage), -1, 0, 1, 1, 1, 0, "i - - 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEdbFrame",1046,G__ACQDict_343_0_7, 85, G__get_linked_tagnum(&G__ACQDictLN_EdbFrame), -1, 0, 1, 1, 1, 0, "i - - 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEdbClustersBox",1705,G__ACQDict_343_0_8, 85, G__get_linked_tagnum(&G__ACQDictLN_EdbClustersBox), -1, 0, 2, 1, 1, 0, 
"i - - 0 - N1 i - - 0 - N2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutImage",796,G__ACQDict_343_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - N C - - 0 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyImageToBG",1226,G__ACQDict_343_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyImageToGC",1227,G__ACQDict_343_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - N l - - 0 '0' ConstBG", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutBGImage",933,G__ACQDict_343_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "S - - 0 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBGImage",908,G__ACQDict_343_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "S - - 0 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutGCImage",934,G__ACQDict_343_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "S - - 0 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGCImage",909,G__ACQDict_343_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "S - - 0 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowImage",900,G__ACQDict_343_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowBGImage",1037,G__ACQDict_343_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowGCImage",1038,G__ACQDict_343_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PlotImage1D",1015,G__ACQDict_343_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - N U 'TH1F' - 0 '0' hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PlotImage2D",1016,G__ACQDict_343_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PlotBGImage",1035,G__ACQDict_343_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PlotGCImage",1036,G__ACQDict_343_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowImages",1015,G__ACQDict_343_0_23, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - N1 i - - 0 - N2 "
"i - - 0 - TimeInterval i - - 0 - Times", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawTrack",899,G__ACQDict_343_0_24, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - N f - - 0 - X "
"f - - 0 - Y f - - 0 - TX "
"f - - 0 - TY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawClusters",1251,G__ACQDict_343_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TClonesArray' - 0 '0' Clusters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawText",819,G__ACQDict_343_0_26, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - Layer i - - 0 - X "
"i - - 0 - Y C - - 0 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawGrid",788,G__ACQDict_343_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 '100.' MajorPitch f - - 0 '10.' MinorPitch", "pitches are in microns!", (void*) NULL, 0);
   G__memfunc_setup("DrawCircles",1107,G__ACQDict_343_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 '100.' RadPitch", "pitches are in microns!", (void*) NULL, 0);
   G__memfunc_setup("DrawClear",885,G__ACQDict_343_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFIRFKernel",1204,G__ACQDict_343_0_30, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 0 - Kern i - - 0 - W "
"i - - 0 - H", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFIRFNorm",1007,G__ACQDict_343_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - Norm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GrabImagesONL",1211,G__ACQDict_343_0_32, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - N F - - 0 '0' Zs "
"d - - 0 '0' Timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GrabRawImagesONL",1509,G__ACQDict_343_0_33, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - N F - - 0 '0' Zs "
"d - - 0 '0' Timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GrabAndFillView",1457,G__ACQDict_343_0_34, 108, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - N F - - 0 '0' Zs "
"d - - 0 '0' Timeout i - - 0 '0' Side "
"U 'EdbView' - 0 '0' View g - - 0 'false' FillImages", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsGrabComplete",1393,G__ACQDict_343_0_35, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GrabOneImage",1153,G__ACQDict_343_0_36, 105, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - Z d - - 0 '0' Timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StartLiveGrab",1306,G__ACQDict_343_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StopLiveGrab",1202,G__ACQDict_343_0_38, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("XProjectImage",1298,G__ACQDict_343_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - N L - - 0 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("YProjectImage",1299,G__ACQDict_343_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - N L - - 0 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VFindEdge",844,G__ACQDict_343_0_41, 105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - N i - - 0 - Thresh "
"i - - 0 - MinWidth i - - 0 - MaxWidth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HFindEdge",830,G__ACQDict_343_0_42, 105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - N i - - 0 - Thresh "
"i - - 0 - MinWidth i - - 0 - MaxWidth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TracksFromNImages",1696,G__ACQDict_343_0_43, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - N i - - 0 - DX "
"i - - 0 - DY f - - 0 - TX "
"f - - 0 - TY i - - 0 - Dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindClusters",1238,G__ACQDict_343_0_44, 108, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - N U 'TClonesArray' - 0 '0' Clusters "
"i - - 0 '0' Side", "clusterisation is made onboard of Odyssey", (void*) NULL, 0);
   G__memfunc_setup("Clusterize",1066,G__ACQDict_343_0_45, 108, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - N U 'TClonesArray' - 0 '0' Clusters "
"i - - 0 '0' Side", "clusterisation is made by host processor", (void*) NULL, 0);
   G__memfunc_setup("Clusterize",1066,G__ACQDict_343_0_46, 108, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - N B - - 0 - buf "
"i - - 0 - nc i - - 0 - nr "
"U 'TClonesArray' - 0 '0' Clusters i - - 0 '0' Side", "clusterisation is made by host processor", (void*) NULL, 0);
   G__memfunc_setup("FillView",802,G__ACQDict_343_0_47, 108, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - N i - - 0 '0' Side "
"U 'EdbView' - 0 '0' View g - - 0 'false' FillImages", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UARTSendString",1341,G__ACQDict_343_0_48, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - s i - - 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ACQDict_343_0_49, 85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AcqOdyssey::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ACQDict_343_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqOdyssey::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ACQDict_343_0_51, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AcqOdyssey::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ACQDict_343_0_52, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AcqOdyssey::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ACQDict_343_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ACQDict_343_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqOdyssey::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ACQDict_343_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqOdyssey::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ACQDict_343_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqOdyssey::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ACQDict_343_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqOdyssey::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AcqOdyssey", 1029, G__ACQDict_343_0_61, (int) ('i'), G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey), -1, 0, 1, 1, 1, 0, "u 'AcqOdyssey' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AcqOdyssey", 1155, G__ACQDict_343_0_62, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ACQDict_343_0_63, (int) ('u'), G__get_linked_tagnum(&G__ACQDictLN_AcqOdyssey), -1, 1, 1, 1, 1, 0, "u 'AcqOdyssey' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAcqMarksScanner(void) {
   /* AcqMarksScanner */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqMarksScanner));
   G__memfunc_setup("AcqMarksScanner",1501,G__ACQDict_344_0_1, 105, G__get_linked_tagnum(&G__ACQDictLN_AcqMarksScanner), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPointers",1152,G__ACQDict_344_0_2, 103, -1, -1, 0, 2, 1, 1, 0, 
"U 'AcqStage1' - 0 - stg U 'AcqOdyssey' - 0 - ody", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMapext",923,G__ACQDict_344_0_3, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - mapext", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GotoMark",804,G__ACQDict_344_0_4, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - Id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanView",800,G__ACQDict_344_0_5, 105, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - Z0 f - - 0 - DZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SearchMark",993,G__ACQDict_344_0_6, 103, -1, -1, 0, 3, 1, 1, 0, 
"F - - 0 '0' X F - - 0 '0' Y "
"F - - 0 '0' Z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SearchMarkFast",1391,G__ACQDict_344_0_7, 103, -1, -1, 0, 3, 1, 1, 0, 
"F - - 0 '0' X F - - 0 '0' Y "
"F - - 0 '0' Z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanMark",784,G__ACQDict_344_0_8, 103, -1, -1, 0, 3, 1, 1, 0, 
"F - - 0 '0' X F - - 0 '0' Y "
"F - - 0 '0' Z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanMarks",899,G__ACQDict_344_0_9, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ACQDict_344_0_10, 85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AcqMarksScanner::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ACQDict_344_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqMarksScanner::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ACQDict_344_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AcqMarksScanner::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ACQDict_344_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AcqMarksScanner::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ACQDict_344_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ACQDict_344_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqMarksScanner::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ACQDict_344_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqMarksScanner::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ACQDict_344_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqMarksScanner::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ACQDict_344_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqMarksScanner::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AcqMarksScanner", 1501, G__ACQDict_344_0_22, (int) ('i'), G__get_linked_tagnum(&G__ACQDictLN_AcqMarksScanner), -1, 0, 1, 1, 1, 0, "u 'AcqMarksScanner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AcqMarksScanner", 1627, G__ACQDict_344_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ACQDict_344_0_24, (int) ('u'), G__get_linked_tagnum(&G__ACQDictLN_AcqMarksScanner), -1, 1, 1, 1, 1, 0, "u 'AcqMarksScanner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAcqTrackScanner(void) {
   /* AcqTrackScanner */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqTrackScanner));
   G__memfunc_setup("AcqTrackScanner",1492,G__ACQDict_678_0_1, 105, G__get_linked_tagnum(&G__ACQDictLN_AcqTrackScanner), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPointers",1152,G__ACQDict_678_0_2, 103, -1, -1, 0, 2, 1, 1, 0, 
"U 'AcqStage1' - 0 - stg U 'AcqOdyssey' - 0 - ody", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanView",800,G__ACQDict_678_0_3, 105, -1, -1, 0, 5, 1, 1, 0, 
"f - - 0 - Z0 f - - 0 - DZ "
"f - - 0 '0' GotoX f - - 0 '0' GotoY "
"g - - 0 'false' RawImages", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanAndFillView",1466,G__ACQDict_678_0_4, 108, -1, -1, 0, 7, 1, 1, 0, 
"f - - 0 - Z0 f - - 0 - DZ "
"i - - 0 '0' Side U 'EdbView' - 0 '0' View "
"g - - 0 'false' FillImages f - - 0 '0' GotoX "
"f - - 0 '0' GotoY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindLayer",894,G__ACQDict_678_0_5, 105, -1, -1, 0, 5, 1, 1, 0, 
"f - - 0 - Z0 f - - 0 - DZ "
"i - - 0 - ClusterThreshold F - - 0 - z0 "
"F - - 0 - z1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FastScanFragment",1607,G__ACQDict_678_0_6, 105, -1, -1, 0, 7, 1, 1, 0, 
"g - - 0 - IsTop i - - 0 - AreaId "
"g - - 0 - AbsCoord f - - 0 - X0 "
"f - - 0 - Y0 U 'EdbRun' - 0 - run "
"g - - 0 'false' RawImages", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ACQDict_678_0_7, 85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AcqTrackScanner::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ACQDict_678_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqTrackScanner::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ACQDict_678_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AcqTrackScanner::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ACQDict_678_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AcqTrackScanner::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ACQDict_678_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ACQDict_678_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqTrackScanner::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ACQDict_678_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqTrackScanner::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ACQDict_678_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqTrackScanner::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ACQDict_678_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqTrackScanner::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AcqTrackScanner", 1492, G__ACQDict_678_0_19, (int) ('i'), G__get_linked_tagnum(&G__ACQDictLN_AcqTrackScanner), -1, 0, 1, 1, 1, 0, "u 'AcqTrackScanner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AcqTrackScanner", 1618, G__ACQDict_678_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ACQDict_678_0_21, (int) ('u'), G__get_linked_tagnum(&G__ACQDictLN_AcqTrackScanner), -1, 1, 1, 1, 1, 0, "u 'AcqTrackScanner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAcqTrackReconstructor(void) {
   /* AcqTrackReconstructor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqTrackReconstructor));
   G__memfunc_setup("AcqTrackReconstructor",2183,G__ACQDict_679_0_1, 105, G__get_linked_tagnum(&G__ACQDictLN_AcqTrackReconstructor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecRating",895,G__ACQDict_679_0_2, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbView' - 0 - View", "reconstruction based on rating propagation", (void*) NULL, 0);
   G__memfunc_setup("RecNetscan",998,G__ACQDict_679_0_3, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbView' - 0 - View", "reconstruction a la Netscan (slow)", (void*) NULL, 0);
   G__memfunc_setup("RecSySal",774,G__ACQDict_679_0_4, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbView' - 0 - View", "reconstruction a la SySal ", (void*) NULL, 0);
   G__memfunc_setup("RecValeri",893,G__ACQDict_679_0_5, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbView' - 0 - View", "reconstruction a'la V. Tiukov", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ACQDict_679_0_6, 85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AcqTrackReconstructor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ACQDict_679_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqTrackReconstructor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ACQDict_679_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AcqTrackReconstructor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ACQDict_679_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AcqTrackReconstructor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ACQDict_679_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ACQDict_679_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqTrackReconstructor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ACQDict_679_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqTrackReconstructor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ACQDict_679_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqTrackReconstructor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ACQDict_679_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqTrackReconstructor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AcqTrackReconstructor", 2183, G__ACQDict_679_0_18, (int) ('i'), 
G__get_linked_tagnum(&G__ACQDictLN_AcqTrackReconstructor), -1, 0, 1, 1, 1, 0, "u 'AcqTrackReconstructor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AcqTrackReconstructor", 2309, G__ACQDict_679_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ACQDict_679_0_20, (int) ('u'), G__get_linked_tagnum(&G__ACQDictLN_AcqTrackReconstructor), -1, 1, 1, 1, 1, 0, "u 'AcqTrackReconstructor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAcqCOM(void) {
   /* AcqCOM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqCOM));
   G__memfunc_setup("AcqCOM",500,G__ACQDict_680_0_1, 105, G__get_linked_tagnum(&G__ACQDictLN_AcqCOM), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__ACQDict_680_0_2, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - port i - - 0 - baud", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__ACQDict_680_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SendString",1025,G__ACQDict_680_0_4, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - string i - - 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecvString",1031,G__ACQDict_680_0_5, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - string i - - 0 - N", "nonblocking call!, returns number of received chars", (void*) NULL, 0);
   G__memfunc_setup("Flush",514,G__ACQDict_680_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanAll",764,G__ACQDict_680_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ACQDict_680_0_8, 85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AcqCOM::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ACQDict_680_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqCOM::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ACQDict_680_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AcqCOM::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ACQDict_680_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AcqCOM::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ACQDict_680_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ACQDict_680_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqCOM::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ACQDict_680_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqCOM::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ACQDict_680_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqCOM::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ACQDict_680_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqCOM::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AcqCOM", 500, G__ACQDict_680_0_20, (int) ('i'), G__get_linked_tagnum(&G__ACQDictLN_AcqCOM), -1, 0, 1, 1, 1, 0, "u 'AcqCOM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AcqCOM", 626, G__ACQDict_680_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ACQDict_680_0_22, (int) ('u'), G__get_linked_tagnum(&G__ACQDictLN_AcqCOM), -1, 1, 1, 1, 1, 0, "u 'AcqCOM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAcqSerialPlateChanger(void) {
   /* AcqSerialPlateChanger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ACQDictLN_AcqSerialPlateChanger));
   G__memfunc_setup("AcqSerialPlateChanger",2083,G__ACQDict_684_0_1, 105, G__get_linked_tagnum(&G__ACQDictLN_AcqSerialPlateChanger), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OnReset",704,G__ACQDict_684_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", "Here we write all 0 in ports P4 and P5", (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__ACQDict_684_0_3, 105, -1, -1, 0, 1, 1, 1, 0, "U 'AcqStage1' - 0 '0' Stage", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerON",682,G__ACQDict_684_0_4, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '100' timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerOFF",744,G__ACQDict_684_0_5, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '100' timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ArmVacuumControl",1650,G__ACQDict_684_0_6, 105, -1, -1, 0, 2, 1, 1, 0, 
"g - - 0 - VacOn i - - 0 - timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TableVacuumControl",1850,G__ACQDict_684_0_7, 105, -1, -1, 0, 3, 1, 1, 0, 
"g - - 0 - VacOn i - - 0 - timeout "
"g - - 0 'false' BlowOn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GoOnHAxis",848,G__ACQDict_684_0_8, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - position i - - 0 - timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GoOnVAxis",862,G__ACQDict_684_0_9, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - position i - - 0 - timeout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadStatusFile",1408,G__ACQDict_684_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateStatusFile",1639,G__ACQDict_684_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetBanks",1010,G__ACQDict_684_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__ACQDict_684_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TakeFromBank",1173,G__ACQDict_684_0_14, 85, G__get_linked_tagnum(&G__ACQDictLN_TPlateS), -1, 0, 1, 1, 1, 0, "i - - 0 - bnk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddToBank",840,G__ACQDict_684_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - bnk U 'TPlateS' - 0 - plate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindEmulsion",1229,G__ACQDict_684_0_16, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'IdentifierS' - 0 - id i - - 0 - Bank", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadBrick",875,G__ACQDict_684_0_17, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - Brick i - - 0 '57' Nemulsions "
"i - - 0 '1' SrcBank i - - 0 '2' DestBank "
"g - - 0 'true' Separators g - - 0 'true' FirstIsSeparator", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnloadBrick",1102,G__ACQDict_684_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLoadedId",1046,G__ACQDict_684_0_19, 105, -1, -1, 0, 4, 1, 1, 0, 
"I - - 0 '0' id0 I - - 0 '0' id1 "
"I - - 0 '0' id2 I - - 0 '0' id3", "returns 0 if not loaded", (void*) NULL, 0);
   G__memfunc_setup("Park",398,G__ACQDict_684_0_20, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - idst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MoveEmulsion",1251,G__ACQDict_684_0_21, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - isrc i - - 0 - idst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnloadPlate",1113,G__ACQDict_684_0_22, 105, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' TurnPowerOff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadPlate",886,G__ACQDict_684_0_23, 105, -1, -1, 0, 1, 1, 1, 0, "u 'IdentifierS' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadPlate",886,G__ACQDict_684_0_24, 105, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - id0 i - - 0 - id1 "
"i - - 0 '0' id2 i - - 0 '0' id3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ACQDict_684_0_25, 85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AcqSerialPlateChanger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ACQDict_684_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqSerialPlateChanger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ACQDict_684_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AcqSerialPlateChanger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ACQDict_684_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AcqSerialPlateChanger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ACQDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ACQDict_684_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ACQDict_684_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqSerialPlateChanger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ACQDict_684_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqSerialPlateChanger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ACQDict_684_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AcqSerialPlateChanger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ACQDict_684_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AcqSerialPlateChanger::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AcqSerialPlateChanger", 2083, G__ACQDict_684_0_37, (int) ('i'), 
G__get_linked_tagnum(&G__ACQDictLN_AcqSerialPlateChanger), -1, 0, 1, 1, 1, 0, "u 'AcqSerialPlateChanger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AcqSerialPlateChanger", 2209, G__ACQDict_684_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ACQDict_684_0_39, (int) ('u'), G__get_linked_tagnum(&G__ACQDictLN_AcqSerialPlateChanger), -1, 1, 1, 1, 1, 0, "u 'AcqSerialPlateChanger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncACQDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalACQDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcACQDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ACQDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR = { "iterator<random_access_iterator_tag,char,long,char*,char&>" , 115 , -1 };
G__linked_taginfo G__ACQDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__ACQDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__ACQDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_EdbAffine2D = { "EdbAffine2D" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ACQDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_EdbMarksSet = { "EdbMarksSet" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_EdbArea = { "EdbArea" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_AcqAxis = { "AcqAxis" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_AcqLight = { "AcqLight" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_AcqStage1 = { "AcqStage1" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_EdbClustersBox = { "EdbClustersBox" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_EdbFrame = { "EdbFrame" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_EdbView = { "EdbView" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_EdbImage = { "EdbImage" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_AcqOdyssey = { "AcqOdyssey" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_AcqMarksScanner = { "AcqMarksScanner" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_EdbRun = { "EdbRun" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_AcqTrackScanner = { "AcqTrackScanner" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_AcqTrackReconstructor = { "AcqTrackReconstructor" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_AcqCOM = { "AcqCOM" , 99 , -1 };
G__linked_taginfo G__ACQDictLN_IdentifierS = { "IdentifierS" , 115 , -1 };
G__linked_taginfo G__ACQDictLN_TPlateS = { "TPlateS" , 115 , -1 };
G__linked_taginfo G__ACQDictLN_AcqSerialPlateChanger = { "AcqSerialPlateChanger" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableACQDict() {
  G__ACQDictLN_TClass.tagnum = -1 ;
  G__ACQDictLN_TBuffer.tagnum = -1 ;
  G__ACQDictLN_TMemberInspector.tagnum = -1 ;
  G__ACQDictLN_TObject.tagnum = -1 ;
  G__ACQDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR.tagnum = -1 ;
  G__ACQDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ACQDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ACQDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__ACQDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__ACQDictLN_TClonesArray.tagnum = -1 ;
  G__ACQDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ACQDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ACQDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__ACQDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__ACQDictLN_EdbAffine2D.tagnum = -1 ;
  G__ACQDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ACQDictLN_TH1F.tagnum = -1 ;
  G__ACQDictLN_EdbMarksSet.tagnum = -1 ;
  G__ACQDictLN_EdbArea.tagnum = -1 ;
  G__ACQDictLN_AcqAxis.tagnum = -1 ;
  G__ACQDictLN_AcqLight.tagnum = -1 ;
  G__ACQDictLN_AcqStage1.tagnum = -1 ;
  G__ACQDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__ACQDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__ACQDictLN_EdbClustersBox.tagnum = -1 ;
  G__ACQDictLN_EdbFrame.tagnum = -1 ;
  G__ACQDictLN_EdbView.tagnum = -1 ;
  G__ACQDictLN_EdbImage.tagnum = -1 ;
  G__ACQDictLN_AcqOdyssey.tagnum = -1 ;
  G__ACQDictLN_AcqMarksScanner.tagnum = -1 ;
  G__ACQDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__ACQDictLN_EdbRun.tagnum = -1 ;
  G__ACQDictLN_AcqTrackScanner.tagnum = -1 ;
  G__ACQDictLN_AcqTrackReconstructor.tagnum = -1 ;
  G__ACQDictLN_AcqCOM.tagnum = -1 ;
  G__ACQDictLN_IdentifierS.tagnum = -1 ;
  G__ACQDictLN_TPlateS.tagnum = -1 ;
  G__ACQDictLN_AcqSerialPlateChanger.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableACQDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ACQDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_EdbAffine2D);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_EdbMarksSet);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_EdbArea);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ACQDictLN_AcqAxis),sizeof(AcqAxis),-1,62720,(char*)NULL,G__setup_memvarAcqAxis,G__setup_memfuncAcqAxis);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ACQDictLN_AcqLight),sizeof(AcqLight),-1,29952,(char*)NULL,G__setup_memvarAcqLight,G__setup_memfuncAcqLight);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ACQDictLN_AcqStage1),sizeof(AcqStage1),-1,29952,(char*)NULL,G__setup_memvarAcqStage1,G__setup_memfuncAcqStage1);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_EdbClustersBox);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_EdbFrame);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_EdbView);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_EdbImage);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ACQDictLN_AcqOdyssey),sizeof(AcqOdyssey),-1,29952,(char*)NULL,G__setup_memvarAcqOdyssey,G__setup_memfuncAcqOdyssey);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ACQDictLN_AcqMarksScanner),sizeof(AcqMarksScanner),-1,29952,(char*)NULL,G__setup_memvarAcqMarksScanner,G__setup_memfuncAcqMarksScanner);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_EdbRun);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ACQDictLN_AcqTrackScanner),sizeof(AcqTrackScanner),-1,29952,(char*)NULL,G__setup_memvarAcqTrackScanner,G__setup_memfuncAcqTrackScanner);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ACQDictLN_AcqTrackReconstructor),sizeof(AcqTrackReconstructor),-1,29952,(char*)NULL,G__setup_memvarAcqTrackReconstructor,G__setup_memfuncAcqTrackReconstructor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ACQDictLN_AcqCOM),sizeof(AcqCOM),-1,29952,(char*)NULL,G__setup_memvarAcqCOM,G__setup_memfuncAcqCOM);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_IdentifierS);
   G__get_linked_tagnum_fwd(&G__ACQDictLN_TPlateS);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ACQDictLN_AcqSerialPlateChanger),sizeof(AcqSerialPlateChanger),-1,29952,(char*)NULL,G__setup_memvarAcqSerialPlateChanger,G__setup_memfuncAcqSerialPlateChanger);
}
extern "C" void G__cpp_setupACQDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupACQDict()");
  G__set_cpp_environmentACQDict();
  G__cpp_setup_tagtableACQDict();

  G__cpp_setup_inheritanceACQDict();

  G__cpp_setup_typetableACQDict();

  G__cpp_setup_memvarACQDict();

  G__cpp_setup_memfuncACQDict();
  G__cpp_setup_globalACQDict();
  G__cpp_setup_funcACQDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncACQDict();
  return;
}
class G__cpp_setup_initACQDict {
  public:
    G__cpp_setup_initACQDict() { G__add_setup_func("ACQDict",(G__incsetup)(&G__cpp_setupACQDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initACQDict() { G__remove_setup_func("ACQDict"); }
};
G__cpp_setup_initACQDict G__cpp_setup_initializerACQDict;

