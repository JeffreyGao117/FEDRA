//
// File generated by C:\root_v5.34.26\bin\rootcint.EXE at Fri Sep 04 22:31:35 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME EMCDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "EMCDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void EdbPVGen_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbPVGen(void *p = 0);
   static void *newArray_EdbPVGen(Long_t size, void *p);
   static void delete_EdbPVGen(void *p);
   static void deleteArray_EdbPVGen(void *p);
   static void destruct_EdbPVGen(void *p);
   static void streamer_EdbPVGen(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbPVGen*)
   {
      ::EdbPVGen *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbPVGen >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbPVGen", ::EdbPVGen::Class_Version(), "./EdbPVGen.h", 18,
                  typeid(::EdbPVGen), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbPVGen::Dictionary, isa_proxy, 0,
                  sizeof(::EdbPVGen) );
      instance.SetNew(&new_EdbPVGen);
      instance.SetNewArray(&newArray_EdbPVGen);
      instance.SetDelete(&delete_EdbPVGen);
      instance.SetDeleteArray(&deleteArray_EdbPVGen);
      instance.SetDestructor(&destruct_EdbPVGen);
      instance.SetStreamerFunc(&streamer_EdbPVGen);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbPVGen*)
   {
      return GenerateInitInstanceLocal((::EdbPVGen*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbPVGen*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbBeamGen_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbBeamGen(void *p = 0);
   static void *newArray_EdbBeamGen(Long_t size, void *p);
   static void delete_EdbBeamGen(void *p);
   static void deleteArray_EdbBeamGen(void *p);
   static void destruct_EdbBeamGen(void *p);
   static void streamer_EdbBeamGen(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbBeamGen*)
   {
      ::EdbBeamGen *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbBeamGen >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbBeamGen", ::EdbBeamGen::Class_Version(), "./EdbBrickGen.h", 14,
                  typeid(::EdbBeamGen), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbBeamGen::Dictionary, isa_proxy, 0,
                  sizeof(::EdbBeamGen) );
      instance.SetNew(&new_EdbBeamGen);
      instance.SetNewArray(&newArray_EdbBeamGen);
      instance.SetDelete(&delete_EdbBeamGen);
      instance.SetDeleteArray(&deleteArray_EdbBeamGen);
      instance.SetDestructor(&destruct_EdbBeamGen);
      instance.SetStreamerFunc(&streamer_EdbBeamGen);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbBeamGen*)
   {
      return GenerateInitInstanceLocal((::EdbBeamGen*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbBeamGen*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbBrickGen_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbBrickGen(void *p = 0);
   static void *newArray_EdbBrickGen(Long_t size, void *p);
   static void delete_EdbBrickGen(void *p);
   static void deleteArray_EdbBrickGen(void *p);
   static void destruct_EdbBrickGen(void *p);
   static void streamer_EdbBrickGen(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbBrickGen*)
   {
      ::EdbBrickGen *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbBrickGen >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbBrickGen", ::EdbBrickGen::Class_Version(), "./EdbBrickGen.h", 49,
                  typeid(::EdbBrickGen), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbBrickGen::Dictionary, isa_proxy, 0,
                  sizeof(::EdbBrickGen) );
      instance.SetNew(&new_EdbBrickGen);
      instance.SetNewArray(&newArray_EdbBrickGen);
      instance.SetDelete(&delete_EdbBrickGen);
      instance.SetDeleteArray(&deleteArray_EdbBrickGen);
      instance.SetDestructor(&destruct_EdbBrickGen);
      instance.SetStreamerFunc(&streamer_EdbBrickGen);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbBrickGen*)
   {
      return GenerateInitInstanceLocal((::EdbBrickGen*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbBrickGen*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbViewDef_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbViewDef(void *p = 0);
   static void *newArray_EdbViewDef(Long_t size, void *p);
   static void delete_EdbViewDef(void *p);
   static void deleteArray_EdbViewDef(void *p);
   static void destruct_EdbViewDef(void *p);
   static void streamer_EdbViewDef(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbViewDef*)
   {
      ::EdbViewDef *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbViewDef >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbViewDef", ::EdbViewDef::Class_Version(), "./EdbViewDef.h", 12,
                  typeid(::EdbViewDef), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbViewDef::Dictionary, isa_proxy, 0,
                  sizeof(::EdbViewDef) );
      instance.SetNew(&new_EdbViewDef);
      instance.SetNewArray(&newArray_EdbViewDef);
      instance.SetDelete(&delete_EdbViewDef);
      instance.SetDeleteArray(&deleteArray_EdbViewDef);
      instance.SetDestructor(&destruct_EdbViewDef);
      instance.SetStreamerFunc(&streamer_EdbViewDef);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbViewDef*)
   {
      return GenerateInitInstanceLocal((::EdbViewDef*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbViewDef*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbViewGen_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbViewGen(void *p = 0);
   static void *newArray_EdbViewGen(Long_t size, void *p);
   static void delete_EdbViewGen(void *p);
   static void deleteArray_EdbViewGen(void *p);
   static void destruct_EdbViewGen(void *p);
   static void streamer_EdbViewGen(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbViewGen*)
   {
      ::EdbViewGen *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbViewGen >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbViewGen", ::EdbViewGen::Class_Version(), "./EdbViewGen.h", 13,
                  typeid(::EdbViewGen), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbViewGen::Dictionary, isa_proxy, 0,
                  sizeof(::EdbViewGen) );
      instance.SetNew(&new_EdbViewGen);
      instance.SetNewArray(&newArray_EdbViewGen);
      instance.SetDelete(&delete_EdbViewGen);
      instance.SetDeleteArray(&deleteArray_EdbViewGen);
      instance.SetDestructor(&destruct_EdbViewGen);
      instance.SetStreamerFunc(&streamer_EdbViewGen);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbViewGen*)
   {
      return GenerateInitInstanceLocal((::EdbViewGen*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbViewGen*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbViewCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbViewCell(void *p = 0);
   static void *newArray_EdbViewCell(Long_t size, void *p);
   static void delete_EdbViewCell(void *p);
   static void deleteArray_EdbViewCell(void *p);
   static void destruct_EdbViewCell(void *p);
   static void streamer_EdbViewCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbViewCell*)
   {
      ::EdbViewCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbViewCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbViewCell", ::EdbViewCell::Class_Version(), "./EdbViewRec.h", 20,
                  typeid(::EdbViewCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbViewCell::Dictionary, isa_proxy, 0,
                  sizeof(::EdbViewCell) );
      instance.SetNew(&new_EdbViewCell);
      instance.SetNewArray(&newArray_EdbViewCell);
      instance.SetDelete(&delete_EdbViewCell);
      instance.SetDeleteArray(&deleteArray_EdbViewCell);
      instance.SetDestructor(&destruct_EdbViewCell);
      instance.SetStreamerFunc(&streamer_EdbViewCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbViewCell*)
   {
      return GenerateInitInstanceLocal((::EdbViewCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbViewCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbViewRec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbViewRec(void *p = 0);
   static void *newArray_EdbViewRec(Long_t size, void *p);
   static void delete_EdbViewRec(void *p);
   static void deleteArray_EdbViewRec(void *p);
   static void destruct_EdbViewRec(void *p);
   static void streamer_EdbViewRec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbViewRec*)
   {
      ::EdbViewRec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbViewRec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbViewRec", ::EdbViewRec::Class_Version(), "./EdbViewRec.h", 102,
                  typeid(::EdbViewRec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbViewRec::Dictionary, isa_proxy, 0,
                  sizeof(::EdbViewRec) );
      instance.SetNew(&new_EdbViewRec);
      instance.SetNewArray(&newArray_EdbViewRec);
      instance.SetDelete(&delete_EdbViewRec);
      instance.SetDeleteArray(&deleteArray_EdbViewRec);
      instance.SetDestructor(&destruct_EdbViewRec);
      instance.SetStreamerFunc(&streamer_EdbViewRec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbViewRec*)
   {
      return GenerateInitInstanceLocal((::EdbViewRec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbViewRec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbClMatch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbClMatch(void *p = 0);
   static void *newArray_EdbClMatch(Long_t size, void *p);
   static void delete_EdbClMatch(void *p);
   static void deleteArray_EdbClMatch(void *p);
   static void destruct_EdbClMatch(void *p);
   static void streamer_EdbClMatch(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbClMatch*)
   {
      ::EdbClMatch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbClMatch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbClMatch", ::EdbClMatch::Class_Version(), "./EdbViewMatch.h", 16,
                  typeid(::EdbClMatch), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbClMatch::Dictionary, isa_proxy, 0,
                  sizeof(::EdbClMatch) );
      instance.SetNew(&new_EdbClMatch);
      instance.SetNewArray(&newArray_EdbClMatch);
      instance.SetDelete(&delete_EdbClMatch);
      instance.SetDeleteArray(&deleteArray_EdbClMatch);
      instance.SetDestructor(&destruct_EdbClMatch);
      instance.SetStreamerFunc(&streamer_EdbClMatch);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbClMatch*)
   {
      return GenerateInitInstanceLocal((::EdbClMatch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbClMatch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbViewMatch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbViewMatch(void *p = 0);
   static void *newArray_EdbViewMatch(Long_t size, void *p);
   static void delete_EdbViewMatch(void *p);
   static void deleteArray_EdbViewMatch(void *p);
   static void destruct_EdbViewMatch(void *p);
   static void streamer_EdbViewMatch(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbViewMatch*)
   {
      ::EdbViewMatch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbViewMatch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbViewMatch", ::EdbViewMatch::Class_Version(), "./EdbViewMatch.h", 32,
                  typeid(::EdbViewMatch), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbViewMatch::Dictionary, isa_proxy, 0,
                  sizeof(::EdbViewMatch) );
      instance.SetNew(&new_EdbViewMatch);
      instance.SetNewArray(&newArray_EdbViewMatch);
      instance.SetDelete(&delete_EdbViewMatch);
      instance.SetDeleteArray(&deleteArray_EdbViewMatch);
      instance.SetDestructor(&destruct_EdbViewMatch);
      instance.SetStreamerFunc(&streamer_EdbViewMatch);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbViewMatch*)
   {
      return GenerateInitInstanceLocal((::EdbViewMatch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbViewMatch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbDataStore_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbDataStore(void *p = 0);
   static void *newArray_EdbDataStore(Long_t size, void *p);
   static void delete_EdbDataStore(void *p);
   static void deleteArray_EdbDataStore(void *p);
   static void destruct_EdbDataStore(void *p);
   static void streamer_EdbDataStore(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbDataStore*)
   {
      ::EdbDataStore *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbDataStore >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbDataStore", ::EdbDataStore::Class_Version(), "./EdbDataStore.h", 15,
                  typeid(::EdbDataStore), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbDataStore::Dictionary, isa_proxy, 0,
                  sizeof(::EdbDataStore) );
      instance.SetNew(&new_EdbDataStore);
      instance.SetNewArray(&newArray_EdbDataStore);
      instance.SetDelete(&delete_EdbDataStore);
      instance.SetDeleteArray(&deleteArray_EdbDataStore);
      instance.SetDestructor(&destruct_EdbDataStore);
      instance.SetStreamerFunc(&streamer_EdbDataStore);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbDataStore*)
   {
      return GenerateInitInstanceLocal((::EdbDataStore*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbDataStore*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EdbDSRec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EdbDSRec(void *p = 0);
   static void *newArray_EdbDSRec(Long_t size, void *p);
   static void delete_EdbDSRec(void *p);
   static void deleteArray_EdbDSRec(void *p);
   static void destruct_EdbDSRec(void *p);
   static void streamer_EdbDSRec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EdbDSRec*)
   {
      ::EdbDSRec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EdbDSRec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EdbDSRec", ::EdbDSRec::Class_Version(), "./EdbDataStore.h", 90,
                  typeid(::EdbDSRec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EdbDSRec::Dictionary, isa_proxy, 0,
                  sizeof(::EdbDSRec) );
      instance.SetNew(&new_EdbDSRec);
      instance.SetNewArray(&newArray_EdbDSRec);
      instance.SetDelete(&delete_EdbDSRec);
      instance.SetDeleteArray(&deleteArray_EdbDSRec);
      instance.SetDestructor(&destruct_EdbDSRec);
      instance.SetStreamerFunc(&streamer_EdbDSRec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EdbDSRec*)
   {
      return GenerateInitInstanceLocal((::EdbDSRec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EdbDSRec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr EdbPVGen::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbPVGen::Class_Name()
{
   return "EdbPVGen";
}

//______________________________________________________________________________
const char *EdbPVGen::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPVGen*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbPVGen::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPVGen*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbPVGen::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPVGen*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbPVGen::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbPVGen*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbBeamGen::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbBeamGen::Class_Name()
{
   return "EdbBeamGen";
}

//______________________________________________________________________________
const char *EdbBeamGen::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBeamGen*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbBeamGen::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBeamGen*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbBeamGen::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBeamGen*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbBeamGen::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBeamGen*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbBrickGen::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbBrickGen::Class_Name()
{
   return "EdbBrickGen";
}

//______________________________________________________________________________
const char *EdbBrickGen::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBrickGen*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbBrickGen::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBrickGen*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbBrickGen::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBrickGen*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbBrickGen::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbBrickGen*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbViewDef::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbViewDef::Class_Name()
{
   return "EdbViewDef";
}

//______________________________________________________________________________
const char *EdbViewDef::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewDef*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbViewDef::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewDef*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbViewDef::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewDef*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbViewDef::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewDef*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbViewGen::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbViewGen::Class_Name()
{
   return "EdbViewGen";
}

//______________________________________________________________________________
const char *EdbViewGen::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewGen*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbViewGen::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewGen*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbViewGen::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewGen*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbViewGen::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewGen*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbViewCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbViewCell::Class_Name()
{
   return "EdbViewCell";
}

//______________________________________________________________________________
const char *EdbViewCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbViewCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbViewCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbViewCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbViewRec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbViewRec::Class_Name()
{
   return "EdbViewRec";
}

//______________________________________________________________________________
const char *EdbViewRec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewRec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbViewRec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewRec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbViewRec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewRec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbViewRec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewRec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbClMatch::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbClMatch::Class_Name()
{
   return "EdbClMatch";
}

//______________________________________________________________________________
const char *EdbClMatch::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClMatch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbClMatch::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClMatch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbClMatch::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClMatch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbClMatch::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbClMatch*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbViewMatch::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbViewMatch::Class_Name()
{
   return "EdbViewMatch";
}

//______________________________________________________________________________
const char *EdbViewMatch::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewMatch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbViewMatch::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewMatch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbViewMatch::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewMatch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbViewMatch::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbViewMatch*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbDataStore::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbDataStore::Class_Name()
{
   return "EdbDataStore";
}

//______________________________________________________________________________
const char *EdbDataStore::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataStore*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbDataStore::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataStore*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbDataStore::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataStore*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbDataStore::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDataStore*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EdbDSRec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EdbDSRec::Class_Name()
{
   return "EdbDSRec";
}

//______________________________________________________________________________
const char *EdbDSRec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDSRec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EdbDSRec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDSRec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EdbDSRec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDSRec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EdbDSRec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EdbDSRec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void EdbPVGen::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbPVGen.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> ePVolume;
      R__b >> eScanCond;
      R__b >> eTracks;
      R__b >> eVTX;
      R__b >> eEVR;
      R__b.CheckByteCount(R__s, R__c, EdbPVGen::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbPVGen::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << ePVolume;
      R__b << eScanCond;
      R__b << eTracks;
      R__b << eVTX;
      R__b << eEVR;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbPVGen::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbPVGen.
      typedef ::EdbPVGen msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePVolume", &ePVolume);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eScanCond", &eScanCond);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eTracks", &eTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVTX", &eVTX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eEVR", &eEVR);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbPVGen(void *p) {
      return  p ? new(p) ::EdbPVGen : new ::EdbPVGen;
   }
   static void *newArray_EdbPVGen(Long_t nElements, void *p) {
      return p ? new(p) ::EdbPVGen[nElements] : new ::EdbPVGen[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbPVGen(void *p) {
      delete ((::EdbPVGen*)p);
   }
   static void deleteArray_EdbPVGen(void *p) {
      delete [] ((::EdbPVGen*)p);
   }
   static void destruct_EdbPVGen(void *p) {
      typedef ::EdbPVGen current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbPVGen(TBuffer &buf, void *obj) {
      ((::EdbPVGen*)obj)->::EdbPVGen::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbPVGen

//______________________________________________________________________________
void EdbBrickGen::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbBrickGen.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eBrick;
      R__b >> ePVG;
      R__b.CheckByteCount(R__s, R__c, EdbBrickGen::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbBrickGen::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eBrick;
      R__b << ePVG;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbBrickGen::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbBrickGen.
      typedef ::EdbBrickGen msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eBrick", &eBrick);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ePVG", &ePVG);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbBrickGen(void *p) {
      return  p ? new(p) ::EdbBrickGen : new ::EdbBrickGen;
   }
   static void *newArray_EdbBrickGen(Long_t nElements, void *p) {
      return p ? new(p) ::EdbBrickGen[nElements] : new ::EdbBrickGen[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbBrickGen(void *p) {
      delete ((::EdbBrickGen*)p);
   }
   static void deleteArray_EdbBrickGen(void *p) {
      delete [] ((::EdbBrickGen*)p);
   }
   static void destruct_EdbBrickGen(void *p) {
      typedef ::EdbBrickGen current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbBrickGen(TBuffer &buf, void *obj) {
      ((::EdbBrickGen*)obj)->::EdbBrickGen::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbBrickGen

//______________________________________________________________________________
void EdbBeamGen::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbBeamGen.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eMass;
      R__b >> eLimits;
      R__b >> eX0;
      R__b >> eSigmaX;
      R__b >> eY0;
      R__b >> eSigmaY;
      R__b >> eZ0;
      R__b >> eSigmaZ;
      R__b >> eTX0;
      R__b >> eSigmaTX;
      R__b >> eTY0;
      R__b >> eSigmaTY;
      R__b >> eP0;
      R__b >> eSigmaP;
      R__b.CheckByteCount(R__s, R__c, EdbBeamGen::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbBeamGen::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eMass;
      R__b << eLimits;
      R__b << eX0;
      R__b << eSigmaX;
      R__b << eY0;
      R__b << eSigmaY;
      R__b << eZ0;
      R__b << eSigmaZ;
      R__b << eTX0;
      R__b << eSigmaTX;
      R__b << eTY0;
      R__b << eSigmaTY;
      R__b << eP0;
      R__b << eSigmaP;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbBeamGen::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbBeamGen.
      typedef ::EdbBeamGen msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMass", &eMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eLimits", &eLimits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX0", &eX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaX", &eSigmaX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY0", &eY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaY", &eSigmaY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ0", &eZ0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaZ", &eSigmaZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTX0", &eTX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaTX", &eSigmaTX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTY0", &eTY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaTY", &eSigmaTY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eP0", &eP0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaP", &eSigmaP);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbBeamGen(void *p) {
      return  p ? new(p) ::EdbBeamGen : new ::EdbBeamGen;
   }
   static void *newArray_EdbBeamGen(Long_t nElements, void *p) {
      return p ? new(p) ::EdbBeamGen[nElements] : new ::EdbBeamGen[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbBeamGen(void *p) {
      delete ((::EdbBeamGen*)p);
   }
   static void deleteArray_EdbBeamGen(void *p) {
      delete [] ((::EdbBeamGen*)p);
   }
   static void destruct_EdbBeamGen(void *p) {
      typedef ::EdbBeamGen current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbBeamGen(TBuffer &buf, void *obj) {
      ((::EdbBeamGen*)obj)->::EdbBeamGen::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbBeamGen

//______________________________________________________________________________
void EdbViewDef::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbViewDef.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eNframes;
      R__b >> eZmin;
      R__b >> eZmax;
      R__b >> eZxy;
      R__b >> eXmin;
      R__b >> eXmax;
      R__b >> eYmin;
      R__b >> eYmax;
      R__b >> eX0;
      R__b >> eY0;
      R__b >> eX0opt;
      R__b >> eY0opt;
      R__b >> eTXopt;
      R__b >> eTYopt;
      R__b >> eClaSX;
      R__b >> eClaSY;
      R__b >> eClaSZ;
      R__b >> eClaSZvar;
      R__b >> eGrainSX;
      R__b >> eGrainSY;
      R__b >> eGrainSZ;
      R__b >> eFogDens;
      R__b >> eFogGrainArea;
      R__b >> eGrainArea;
      R__b >> eZdead;
      R__b >> eDZdead;
      R__b.CheckByteCount(R__s, R__c, EdbViewDef::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbViewDef::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eNframes;
      R__b << eZmin;
      R__b << eZmax;
      R__b << eZxy;
      R__b << eXmin;
      R__b << eXmax;
      R__b << eYmin;
      R__b << eYmax;
      R__b << eX0;
      R__b << eY0;
      R__b << eX0opt;
      R__b << eY0opt;
      R__b << eTXopt;
      R__b << eTYopt;
      R__b << eClaSX;
      R__b << eClaSY;
      R__b << eClaSZ;
      R__b << eClaSZvar;
      R__b << eGrainSX;
      R__b << eGrainSY;
      R__b << eGrainSZ;
      R__b << eFogDens;
      R__b << eFogGrainArea;
      R__b << eGrainArea;
      R__b << eZdead;
      R__b << eDZdead;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbViewDef::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbViewDef.
      typedef ::EdbViewDef msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNframes", &eNframes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZmin", &eZmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZmax", &eZmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZxy", &eZxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmin", &eXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmax", &eXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmin", &eYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmax", &eYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX0", &eX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY0", &eY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX0opt", &eX0opt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY0opt", &eY0opt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTXopt", &eTXopt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTYopt", &eTYopt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eClaSX", &eClaSX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eClaSY", &eClaSY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eClaSZ", &eClaSZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eClaSZvar", &eClaSZvar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eGrainSX", &eGrainSX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eGrainSY", &eGrainSY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eGrainSZ", &eGrainSZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFogDens", &eFogDens);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFogGrainArea", &eFogGrainArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eGrainArea", &eGrainArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZdead", &eZdead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZdead", &eDZdead);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbViewDef(void *p) {
      return  p ? new(p) ::EdbViewDef : new ::EdbViewDef;
   }
   static void *newArray_EdbViewDef(Long_t nElements, void *p) {
      return p ? new(p) ::EdbViewDef[nElements] : new ::EdbViewDef[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbViewDef(void *p) {
      delete ((::EdbViewDef*)p);
   }
   static void deleteArray_EdbViewDef(void *p) {
      delete [] ((::EdbViewDef*)p);
   }
   static void destruct_EdbViewDef(void *p) {
      typedef ::EdbViewDef current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbViewDef(TBuffer &buf, void *obj) {
      ((::EdbViewDef*)obj)->::EdbViewDef::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbViewDef

//______________________________________________________________________________
void EdbViewGen::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbViewGen.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbViewDef::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbViewGen::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbViewGen::IsA(), kTRUE);
      EdbViewDef::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbViewGen::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbViewGen.
      typedef ::EdbViewGen msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      EdbViewDef::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbViewGen(void *p) {
      return  p ? new(p) ::EdbViewGen : new ::EdbViewGen;
   }
   static void *newArray_EdbViewGen(Long_t nElements, void *p) {
      return p ? new(p) ::EdbViewGen[nElements] : new ::EdbViewGen[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbViewGen(void *p) {
      delete ((::EdbViewGen*)p);
   }
   static void deleteArray_EdbViewGen(void *p) {
      delete [] ((::EdbViewGen*)p);
   }
   static void destruct_EdbViewGen(void *p) {
      typedef ::EdbViewGen current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbViewGen(TBuffer &buf, void *obj) {
      ((::EdbViewGen*)obj)->::EdbViewGen::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbViewGen

//______________________________________________________________________________
void EdbViewCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbViewCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eXmin;
      R__b >> eXmax;
      R__b >> eYmin;
      R__b >> eYmax;
      R__b >> eZmin;
      R__b >> eZmax;
      R__b >> eBinZ;
      R__b >> eBinX;
      R__b >> eBinY;
      R__b >> eNfr;
      R__b >> eNx;
      R__b >> eNy;
      R__b >> eNcellXY;
      R__b >> eNcell;
      R__b >> eNcl;
      R__b >> eIFZ;
      R__b >> eNcellsLim;
      R__b >> eCellLim;
      R__b.ReadStaticArray((int*)eNeib);
      R__b.CheckByteCount(R__s, R__c, EdbViewCell::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbViewCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eXmin;
      R__b << eXmax;
      R__b << eYmin;
      R__b << eYmax;
      R__b << eZmin;
      R__b << eZmax;
      R__b << eBinZ;
      R__b << eBinX;
      R__b << eBinY;
      R__b << eNfr;
      R__b << eNx;
      R__b << eNy;
      R__b << eNcellXY;
      R__b << eNcell;
      R__b << eNcl;
      R__b << eIFZ;
      R__b << eNcellsLim;
      R__b << eCellLim;
      R__b.WriteArray(eNeib, 9);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbViewCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbViewCell.
      typedef ::EdbViewCell msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmin", &eXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXmax", &eXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmin", &eYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYmax", &eYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZmin", &eZmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZmax", &eZmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinZ", &eBinZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinX", &eBinX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eBinY", &eBinY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNfr", &eNfr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNx", &eNx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNy", &eNy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNcellXY", &eNcellXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNcell", &eNcell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNcl", &eNcl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eIFZ", &eIFZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eNC", &eNC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNcellsLim", &eNcellsLim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCellLim", &eCellLim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*epC", &epC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*epCell", &epCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFrame", &eFrame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNeib[9]", eNeib);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbViewCell(void *p) {
      return  p ? new(p) ::EdbViewCell : new ::EdbViewCell;
   }
   static void *newArray_EdbViewCell(Long_t nElements, void *p) {
      return p ? new(p) ::EdbViewCell[nElements] : new ::EdbViewCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbViewCell(void *p) {
      delete ((::EdbViewCell*)p);
   }
   static void deleteArray_EdbViewCell(void *p) {
      delete [] ((::EdbViewCell*)p);
   }
   static void destruct_EdbViewCell(void *p) {
      typedef ::EdbViewCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbViewCell(TBuffer &buf, void *obj) {
      ((::EdbViewCell*)obj)->::EdbViewCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbViewCell

//______________________________________________________________________________
void EdbViewRec::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbViewRec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbViewDef::Streamer(R__b);
      R__b >> eAddGrainsToView;
      R__b >> eDoGrainsProcessing;
      R__b >> eCheckSeedThres;
      R__b >> ePropagateToBase;
      R__b >> eGrainNbin;
      R__b >> eNgrMax;
      R__b >> eNsegMax;
      R__b >> eClMinA;
      R__b >> eClMaxA;
      R__b >> eNgr;
      R__b >> eNclGrMin;
      R__b >> eNclGrMax;
      R__b >> eDZmin;
      R__b >> eThetaLim;
      R__b >> eStep;
      R__b >> eStepFrom;
      R__b >> eStepTo;
      R__b >> eSeedThres0;
      eSeedThres.Streamer(R__b);
      eR.Streamer(R__b);
      R__b >> enSeedsLim;
      R__b >> eSeedLim;
      R__b >> eNseedMax0;
      eNseedMax.Streamer(R__b);
      R__b >> ePulsMin;
      R__b >> ePulsMax;
      R__b >> eSigmaMin;
      R__b >> eSigmaMax;
      R__b >> eZcenter;
      R__b >> enT;
      enP.Streamer(R__b);
      R__b >> enPtot;
      enY.Streamer(R__b);
      R__b >> enYtot;
      enX.Streamer(R__b);
      R__b >> enXtot;
      eTheta.Streamer(R__b);
      esP.Streamer(R__b);
      esY.Streamer(R__b);
      esX.Streamer(R__b);
      R__b >> eDmax;
      R__b >> eFact;
      R__b >> eRmax;
      R__b.CheckByteCount(R__s, R__c, EdbViewRec::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbViewRec::IsA(), kTRUE);
      EdbViewDef::Streamer(R__b);
      R__b << eAddGrainsToView;
      R__b << eDoGrainsProcessing;
      R__b << eCheckSeedThres;
      R__b << ePropagateToBase;
      R__b << eGrainNbin;
      R__b << eNgrMax;
      R__b << eNsegMax;
      R__b << eClMinA;
      R__b << eClMaxA;
      R__b << eNgr;
      R__b << eNclGrMin;
      R__b << eNclGrMax;
      R__b << eDZmin;
      R__b << eThetaLim;
      R__b << eStep;
      R__b << eStepFrom;
      R__b << eStepTo;
      R__b << eSeedThres0;
      eSeedThres.Streamer(R__b);
      eR.Streamer(R__b);
      R__b << enSeedsLim;
      R__b << eSeedLim;
      R__b << eNseedMax0;
      eNseedMax.Streamer(R__b);
      R__b << ePulsMin;
      R__b << ePulsMax;
      R__b << eSigmaMin;
      R__b << eSigmaMax;
      R__b << eZcenter;
      R__b << enT;
      enP.Streamer(R__b);
      R__b << enPtot;
      enY.Streamer(R__b);
      R__b << enYtot;
      enX.Streamer(R__b);
      R__b << enXtot;
      eTheta.Streamer(R__b);
      esP.Streamer(R__b);
      esY.Streamer(R__b);
      esX.Streamer(R__b);
      R__b << eDmax;
      R__b << eFact;
      R__b << eRmax;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbViewRec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbViewRec.
      typedef ::EdbViewRec msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eAddGrainsToView", &eAddGrainsToView);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDoGrainsProcessing", &eDoGrainsProcessing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCheckSeedThres", &eCheckSeedThres);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePropagateToBase", &ePropagateToBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eGrainNbin", &eGrainNbin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eView", &eView);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNgrMax", &eNgrMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNsegMax", &eNsegMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVC", &eVC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVCC", &eVCC);
      R__insp.InspectMember(eVCC, "eVCC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVCG", &eVCG);
      R__insp.InspectMember(eVCG, "eVCG.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eG", &eG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGCla", &eGCla);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCL", &eCL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eSA", &eSA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eClMinA", &eClMinA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eClMaxA", &eClMaxA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNgr", &eNgr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eGrainsTree", &eGrainsTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNclGrMin", &eNclGrMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNclGrMax", &eNclGrMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDZmin", &eDZmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eThetaLim", &eThetaLim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStep", &eStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStepFrom", &eStepFrom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eStepTo", &eStepTo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSeedThres0", &eSeedThres0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSeedThres", &eSeedThres);
      R__insp.InspectMember(eSeedThres, "eSeedThres.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eR", &eR);
      R__insp.InspectMember(eR, "eR.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enSeedsLim", &enSeedsLim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSeedLim", &eSeedLim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNseedMax0", &eNseedMax0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNseedMax", &eNseedMax);
      R__insp.InspectMember(eNseedMax, "eNseedMax.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePulsMin", &ePulsMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePulsMax", &ePulsMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaMin", &eSigmaMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSigmaMax", &eSigmaMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZcenter", &eZcenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enT", &enT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enP", &enP);
      R__insp.InspectMember(enP, "enP.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enPtot", &enPtot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enY", &enY);
      R__insp.InspectMember(enY, "enY.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enYtot", &enYtot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enX", &enX);
      R__insp.InspectMember(enX, "enX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enXtot", &enXtot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTheta", &eTheta);
      R__insp.InspectMember(eTheta, "eTheta.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "esP", &esP);
      R__insp.InspectMember(esP, "esP.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "esY", &esY);
      R__insp.InspectMember(esY, "esY.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "esX", &esX);
      R__insp.InspectMember(esX, "esX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*epT", &epT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*epP", &epP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*epY", &epY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ehX", &ehX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*epS", &epS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*epC", &epC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDmax", &eDmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFact", &eFact);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRmax", &eRmax);
      EdbViewDef::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbViewRec(void *p) {
      return  p ? new(p) ::EdbViewRec : new ::EdbViewRec;
   }
   static void *newArray_EdbViewRec(Long_t nElements, void *p) {
      return p ? new(p) ::EdbViewRec[nElements] : new ::EdbViewRec[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbViewRec(void *p) {
      delete ((::EdbViewRec*)p);
   }
   static void deleteArray_EdbViewRec(void *p) {
      delete [] ((::EdbViewRec*)p);
   }
   static void destruct_EdbViewRec(void *p) {
      typedef ::EdbViewRec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbViewRec(TBuffer &buf, void *obj) {
      ((::EdbViewRec*)obj)->::EdbViewRec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbViewRec

//______________________________________________________________________________
void EdbViewMatch::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbViewMatch.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eNClMin;
      R__b >> eR2CenterMax;
      R__b >> eRmax;
      eCl.Streamer(R__b);
      eGr.Streamer(R__b);
      eGMap.Streamer(R__b);
      eCorrMap.Streamer(R__b);
      R__b >> eXpix;
      R__b >> eYpix;
      R__b >> eNXpix;
      R__b >> eNYpix;
      R__b >> eCorrectionMatrixStepX;
      R__b >> eCorrectionMatrixStepY;
      R__b >> eOutputFile;
      R__b.CheckByteCount(R__s, R__c, EdbViewMatch::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbViewMatch::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eNClMin;
      R__b << eR2CenterMax;
      R__b << eRmax;
      eCl.Streamer(R__b);
      eGr.Streamer(R__b);
      eGMap.Streamer(R__b);
      eCorrMap.Streamer(R__b);
      R__b << eXpix;
      R__b << eYpix;
      R__b << eNXpix;
      R__b << eNYpix;
      R__b << eCorrectionMatrixStepX;
      R__b << eCorrectionMatrixStepY;
      R__b << eOutputFile;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbViewMatch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbViewMatch.
      typedef ::EdbViewMatch msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNClMin", &eNClMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eR2CenterMax", &eR2CenterMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRmax", &eRmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCl", &eCl);
      R__insp.InspectMember(eCl, "eCl.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eGr", &eGr);
      R__insp.InspectMember(eGr, "eGr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eGMap", &eGMap);
      R__insp.InspectMember(eGMap, "eGMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCorrMap", &eCorrMap);
      R__insp.InspectMember(eCorrMap, "eCorrMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXpix", &eXpix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYpix", &eYpix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNXpix", &eNXpix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eNYpix", &eNYpix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCorrectionMatrixStepX", &eCorrectionMatrixStepX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCorrectionMatrixStepY", &eCorrectionMatrixStepY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eOutputFile", &eOutputFile);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbViewMatch(void *p) {
      return  p ? new(p) ::EdbViewMatch : new ::EdbViewMatch;
   }
   static void *newArray_EdbViewMatch(Long_t nElements, void *p) {
      return p ? new(p) ::EdbViewMatch[nElements] : new ::EdbViewMatch[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbViewMatch(void *p) {
      delete ((::EdbViewMatch*)p);
   }
   static void deleteArray_EdbViewMatch(void *p) {
      delete [] ((::EdbViewMatch*)p);
   }
   static void destruct_EdbViewMatch(void *p) {
      typedef ::EdbViewMatch current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbViewMatch(TBuffer &buf, void *obj) {
      ((::EdbViewMatch*)obj)->::EdbViewMatch::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbViewMatch

//______________________________________________________________________________
void EdbClMatch::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbClMatch.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eX;
      R__b >> eY;
      R__b >> eZ;
      R__b >> eXv;
      R__b >> eYv;
      R__b >> eView;
      R__b >> eFrame;
      R__b.CheckByteCount(R__s, R__c, EdbClMatch::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbClMatch::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eX;
      R__b << eY;
      R__b << eZ;
      R__b << eXv;
      R__b << eYv;
      R__b << eView;
      R__b << eFrame;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbClMatch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbClMatch.
      typedef ::EdbClMatch msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eX", &eX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eY", &eY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eZ", &eZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eXv", &eXv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eYv", &eYv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eView", &eView);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFrame", &eFrame);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbClMatch(void *p) {
      return  p ? new(p) ::EdbClMatch : new ::EdbClMatch;
   }
   static void *newArray_EdbClMatch(Long_t nElements, void *p) {
      return p ? new(p) ::EdbClMatch[nElements] : new ::EdbClMatch[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbClMatch(void *p) {
      delete ((::EdbClMatch*)p);
   }
   static void deleteArray_EdbClMatch(void *p) {
      delete [] ((::EdbClMatch*)p);
   }
   static void destruct_EdbClMatch(void *p) {
      typedef ::EdbClMatch current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbClMatch(TBuffer &buf, void *obj) {
      ((::EdbClMatch*)obj)->::EdbClMatch::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbClMatch

//______________________________________________________________________________
void EdbDataStore::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbDataStore.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eBrick;
      eRawPV.Streamer(R__b);
      eSegPV.Streamer(R__b);
      eTracks.Streamer(R__b);
      eVTX.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbDataStore::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbDataStore::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eBrick;
      eRawPV.Streamer(R__b);
      eSegPV.Streamer(R__b);
      eTracks.Streamer(R__b);
      eVTX.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbDataStore::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbDataStore.
      typedef ::EdbDataStore msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eBrick", &eBrick);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRawPV", &eRawPV);
      R__insp.InspectMember(eRawPV, "eRawPV.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSegPV", &eSegPV);
      R__insp.InspectMember(eSegPV, "eSegPV.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTracks", &eTracks);
      R__insp.InspectMember(eTracks, "eTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVTX", &eVTX);
      R__insp.InspectMember(eVTX, "eVTX.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbDataStore(void *p) {
      return  p ? new(p) ::EdbDataStore : new ::EdbDataStore;
   }
   static void *newArray_EdbDataStore(Long_t nElements, void *p) {
      return p ? new(p) ::EdbDataStore[nElements] : new ::EdbDataStore[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbDataStore(void *p) {
      delete ((::EdbDataStore*)p);
   }
   static void deleteArray_EdbDataStore(void *p) {
      delete [] ((::EdbDataStore*)p);
   }
   static void destruct_EdbDataStore(void *p) {
      typedef ::EdbDataStore current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbDataStore(TBuffer &buf, void *obj) {
      ((::EdbDataStore*)obj)->::EdbDataStore::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbDataStore

//______________________________________________________________________________
void EdbDSRec::Streamer(TBuffer &R__b)
{
   // Stream an object of class EdbDSRec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      EdbDataStore::Streamer(R__b);
      eVRec.Streamer(R__b);
      eMomEst.Streamer(R__b);
      eCond_b.Streamer(R__b);
      eCond_m.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, EdbDSRec::IsA());
   } else {
      R__c = R__b.WriteVersion(EdbDSRec::IsA(), kTRUE);
      EdbDataStore::Streamer(R__b);
      eVRec.Streamer(R__b);
      eMomEst.Streamer(R__b);
      eCond_b.Streamer(R__b);
      eCond_m.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EdbDSRec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EdbDSRec.
      typedef ::EdbDSRec msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVRec", &eVRec);
      R__insp.InspectMember(eVRec, "eVRec.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMomEst", &eMomEst);
      R__insp.InspectMember(eMomEst, "eMomEst.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCond_b", &eCond_b);
      R__insp.InspectMember(eCond_b, "eCond_b.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCond_m", &eCond_m);
      R__insp.InspectMember(eCond_m, "eCond_m.");
      EdbDataStore::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EdbDSRec(void *p) {
      return  p ? new(p) ::EdbDSRec : new ::EdbDSRec;
   }
   static void *newArray_EdbDSRec(Long_t nElements, void *p) {
      return p ? new(p) ::EdbDSRec[nElements] : new ::EdbDSRec[nElements];
   }
   // Wrapper around operator delete
   static void delete_EdbDSRec(void *p) {
      delete ((::EdbDSRec*)p);
   }
   static void deleteArray_EdbDSRec(void *p) {
      delete [] ((::EdbDSRec*)p);
   }
   static void destruct_EdbDSRec(void *p) {
      typedef ::EdbDSRec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_EdbDSRec(TBuffer &buf, void *obj) {
      ((::EdbDSRec*)obj)->::EdbDSRec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::EdbDSRec

/********************************************************
* EMCDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableEMCDict();

extern "C" void G__set_cpp_environmentEMCDict() {
  G__add_ipath(".");
  G__add_ipath("..\\..\\include");
  G__cpp_reset_tagtableEMCDict();
}
#include <new>
extern "C" int G__cpp_dllrevEMCDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* EdbPVGen */
static int G__EMCDict_815_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPVGen* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPVGen[n];
     } else {
       p = new((void*) gvp) EdbPVGen[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbPVGen;
     } else {
       p = new((void*) gvp) EdbPVGen;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->SetVolume((EdbPatternsVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->SetScanCond((EdbScanCond*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbPVGen*) G__getstructoffset())->GetVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->SmearSegments();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->SmearPatterns((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((EdbPVGen*) G__getstructoffset())->GenerateBeam((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbPVGen*) G__getstructoffset())->GenerateBeam((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbPVGen*) G__getstructoffset())->GenerateBackground((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbPVGen*) G__getstructoffset())->GenerateBackground((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((EdbPVGen*) G__getstructoffset())->GeneratePulsPoisson((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbPVGen*) G__getstructoffset())->GeneratePulsPoisson((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbPVGen*) G__getstructoffset())->GeneratePulsPoisson((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbPVGen*) G__getstructoffset())->GeneratePulsPoisson((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbPVGen*) G__getstructoffset())->GeneratePulsPoisson((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((EdbPVGen*) G__getstructoffset())->GeneratePulsGaus((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbPVGen*) G__getstructoffset())->GeneratePulsGaus((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbPVGen*) G__getstructoffset())->GeneratePulsGaus((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbPVGen*) G__getstructoffset())->GeneratePulsGaus((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->AddTrack((EdbTrackP*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->AddVertex((EdbVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->SmearSegment(*(EdbSegP*) libp->para[0].ref, *(EdbScanCond*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbPVGen*) G__getstructoffset())->PropagateSegment(*(EdbSegP*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVGen*) G__getstructoffset())->TrackMC2(*(EdbTrackP*) libp->para[0].ref, *(EdbLayer*) libp->para[1].ref
, (int) G__int(libp->para[2]), (float) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((EdbPVGen*) G__getstructoffset())->TrackMC((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, *(EdbTrackP*) libp->para[2].ref, (int) G__int(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbPVGen*) G__getstructoffset())->TrackMC((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, *(EdbTrackP*) libp->para[2].ref, (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbPVGen*) G__getstructoffset())->TrackMC((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, *(EdbTrackP*) libp->para[2].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->GenerateUncorrelatedSegments((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->GenerateBackgroundTracks(
(int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->GeneratePhaseSpaceEvents(
(int) G__int(libp->para[0]), (TGenPhaseSpace*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (float) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (int*) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->GeneratePhaseSpaceEventsWithDecay(
(int) G__int(libp->para[0]), (TGenPhaseSpace*) G__int(libp->para[1])
, (TGenPhaseSpace*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (float*) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (int) G__int(libp->para[7])
, (int*) G__int(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbPVGen*) G__getstructoffset())->MakeTracksMC((int) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbPVGen::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPVGen::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbPVGen::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbPVGen::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbPVGen*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPVGen::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPVGen::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbPVGen::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_815_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbPVGen::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EMCDict_815_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbPVGen* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbPVGen(*(EdbPVGen*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbPVGen G__TEdbPVGen;
static int G__EMCDict_815_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbPVGen*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbPVGen*) (soff+(sizeof(EdbPVGen)*i)))->~G__TEdbPVGen();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbPVGen*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbPVGen*) (soff))->~G__TEdbPVGen();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EMCDict_815_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbPVGen* dest = (EdbPVGen*) G__getstructoffset();
   *dest = *(EdbPVGen*) libp->para[0].ref;
   const EdbPVGen& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbBeamGen */
static int G__EMCDict_818_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbBeamGen* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbBeamGen[n];
     } else {
       p = new((void*) gvp) EdbBeamGen[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbBeamGen;
     } else {
       p = new((void*) gvp) EdbBeamGen;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbBeamGen));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((EdbBeamGen*) G__getstructoffset())->SetPositionGaus((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbBeamGen*) G__getstructoffset())->SetPositionGaus((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbBeamGen*) G__getstructoffset())->SetPositionGaus((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBeamGen*) G__getstructoffset())->SetAngularGaus((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBeamGen*) G__getstructoffset())->SetM((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbBeamGen*) G__getstructoffset())->SetP((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbBeamGen*) G__getstructoffset())->SetP((float) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((EdbBeamGen*) G__getstructoffset())->NextTrack((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((EdbBeamGen*) G__getstructoffset())->NextTrack());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbBeamGen::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbBeamGen::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbBeamGen::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbBeamGen::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBeamGen*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbBeamGen::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbBeamGen::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbBeamGen::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_818_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbBeamGen::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EMCDict_818_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbBeamGen* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbBeamGen(*(EdbBeamGen*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbBeamGen));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbBeamGen G__TEdbBeamGen;
static int G__EMCDict_818_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbBeamGen*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbBeamGen*) (soff+(sizeof(EdbBeamGen)*i)))->~G__TEdbBeamGen();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbBeamGen*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbBeamGen*) (soff))->~G__TEdbBeamGen();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EMCDict_818_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbBeamGen* dest = (EdbBeamGen*) G__getstructoffset();
   *dest = *(EdbBeamGen*) libp->para[0].ref;
   const EdbBeamGen& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbBrickGen */
static int G__EMCDict_819_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbBrickGen* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbBrickGen[n];
     } else {
       p = new((void*) gvp) EdbBrickGen[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbBrickGen;
     } else {
       p = new((void*) gvp) EdbBrickGen;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbBrickGen));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbBrickGen*) G__getstructoffset())->Brick());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbBrickGen*) G__getstructoffset())->PVG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickGen*) G__getstructoffset())->Generate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (float) G__double(libp->para[8]), (float) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (float) G__double(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickGen*) G__getstructoffset())->GenerateOperaBrick(
*(EdbBrickP*) libp->para[0].ref, (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (float) G__double(libp->para[8]), (float) G__double(libp->para[9])
, (float) G__double(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickGen*) G__getstructoffset())->GeneratePatternsVolumeBT(*(EdbPatternsVolume*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbBrickGen*) G__getstructoffset())->GeneratePatternsVolumeBT((EdbPatternsVolume*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbBrickGen*) G__getstructoffset())->GeneratePatternsVolumeBT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickGen*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbBrickGen::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbBrickGen::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbBrickGen::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbBrickGen::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbBrickGen*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbBrickGen::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbBrickGen::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbBrickGen::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_819_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbBrickGen::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EMCDict_819_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbBrickGen* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbBrickGen(*(EdbBrickGen*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbBrickGen));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbBrickGen G__TEdbBrickGen;
static int G__EMCDict_819_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbBrickGen*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbBrickGen*) (soff+(sizeof(EdbBrickGen)*i)))->~G__TEdbBrickGen();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbBrickGen*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbBrickGen*) (soff))->~G__TEdbBrickGen();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EMCDict_819_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbBrickGen* dest = (EdbBrickGen*) G__getstructoffset();
   *dest = *(EdbBrickGen*) libp->para[0].ref;
   const EdbBrickGen& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbViewDef */
static int G__EMCDict_820_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewDef* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewDef[n];
     } else {
       p = new((void*) gvp) EdbViewDef[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewDef;
     } else {
       p = new((void*) gvp) EdbViewDef;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewDef*) G__getstructoffset())->SetDef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewDef*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbViewDef::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewDef::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbViewDef::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbViewDef::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewDef*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewDef::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewDef::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewDef::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_820_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewDef::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EMCDict_820_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbViewDef* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbViewDef(*(EdbViewDef*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbViewDef G__TEdbViewDef;
static int G__EMCDict_820_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbViewDef*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbViewDef*) (soff+(sizeof(EdbViewDef)*i)))->~G__TEdbViewDef();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbViewDef*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbViewDef*) (soff))->~G__TEdbViewDef();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EMCDict_820_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewDef* dest = (EdbViewDef*) G__getstructoffset();
   *dest = *(EdbViewDef*) libp->para[0].ref;
   const EdbViewDef& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbViewGen */
static int G__EMCDict_831_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewGen* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewGen[n];
     } else {
       p = new((void*) gvp) EdbViewGen[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewGen;
     } else {
       p = new((void*) gvp) EdbViewGen;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewGen* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbViewGen(*(EdbViewDef*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbViewGen(*(EdbViewDef*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewGen*) G__getstructoffset())->GenFrames(*(EdbView*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewGen*) G__getstructoffset())->GenGrains(*(EdbView*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewGen*) G__getstructoffset())->GenSegGrains(*(EdbSegment*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbViewGen*) G__getstructoffset())->GenFogGrains((int) G__int(libp->para[0]), *(TObjArray*) libp->para[1].ref
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbViewGen*) G__getstructoffset())->GenFogGrains((int) G__int(libp->para[0]), *(TObjArray*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewGen*) G__getstructoffset())->GenAlfaGrains());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewGen*) G__getstructoffset())->GenDeltaGrains());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewGen*) G__getstructoffset())->GenGrainClusters(*(EdbView*) libp->para[0].ref, *(EdbCluster*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((EdbViewGen*) G__getstructoffset())->GrainPathMip((float) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((EdbViewGen*) G__getstructoffset())->GrainPathMip());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbViewGen::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewGen::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbViewGen::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbViewGen::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewGen*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewGen::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewGen::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewGen::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_831_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewGen::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EMCDict_831_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbViewGen* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbViewGen(*(EdbViewGen*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbViewGen G__TEdbViewGen;
static int G__EMCDict_831_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbViewGen*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbViewGen*) (soff+(sizeof(EdbViewGen)*i)))->~G__TEdbViewGen();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbViewGen*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbViewGen*) (soff))->~G__TEdbViewGen();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EMCDict_831_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewGen* dest = (EdbViewGen*) G__getstructoffset();
   *dest = *(EdbViewGen*) libp->para[0].ref;
   const EdbViewGen& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbViewCell */
static int G__EMCDict_832_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewCell[n];
     } else {
       p = new((void*) gvp) EdbViewCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewCell;
     } else {
       p = new((void*) gvp) EdbViewCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewCell*) G__getstructoffset())->SetLimits((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbViewCell*) G__getstructoffset())->SetBin((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbViewCell*) G__getstructoffset())->SetBin((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewCell*) G__getstructoffset())->SetCellLimits((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbViewCell*) G__getstructoffset())->SetNfr((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbViewCell*) G__getstructoffset())->SetNfr((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewCell*) G__getstructoffset())->CalcN();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewCell*) G__getstructoffset())->InitMem();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewCell*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewCell*) G__getstructoffset())->AddCluster((EdbCluster*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewCell*) G__getstructoffset())->FillCell(*(TClonesArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewCell*) G__getstructoffset())->CleanCell();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewCell*) G__getstructoffset())->Delete();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewCell*) G__getstructoffset())->CalcStat();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewCell*) G__getstructoffset())->IXcell((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewCell*) G__getstructoffset())->IYcell((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewCell*) G__getstructoffset())->JcellXY((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewCell*) G__getstructoffset())->Jcell((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewCell*) G__getstructoffset())->Jcell((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewCell*) G__getstructoffset())->Jcell((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewCell*) G__getstructoffset())->Jcell((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EdbViewCell*) G__getstructoffset())->Jneib((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EdbViewCell*) G__getstructoffset())->GetCell((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewCell*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbViewCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbViewCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbViewCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_832_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EMCDict_832_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbViewCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbViewCell(*(EdbViewCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbViewCell G__TEdbViewCell;
static int G__EMCDict_832_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbViewCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbViewCell*) (soff+(sizeof(EdbViewCell)*i)))->~G__TEdbViewCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbViewCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbViewCell*) (soff))->~G__TEdbViewCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EMCDict_832_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewCell* dest = (EdbViewCell*) G__getstructoffset();
   *dest = *(EdbViewCell*) libp->para[0].ref;
   const EdbViewCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbViewRec */
static int G__EMCDict_833_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewRec[n];
     } else {
       p = new((void*) gvp) EdbViewRec[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewRec;
     } else {
       p = new((void*) gvp) EdbViewRec;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbViewRec(*(EdbViewDef*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EdbViewRec(*(EdbViewDef*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetPrimary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbViewRec*) G__getstructoffset())->Init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetNclGrLim((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbViewRec*) G__getstructoffset())->SetPulsThres((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbViewRec*) G__getstructoffset())->SetPulsThres((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetSigmaThres((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetNgrMax0((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetAddGrainsToView((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->InitR();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EdbViewRec*) G__getstructoffset())->SetView((EdbView*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetClThres((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbViewRec*) G__getstructoffset())->SetSeedsLim((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbViewRec*) G__getstructoffset())->SetSeedsLim((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbViewRec*) G__getstructoffset())->SetSeedsLim();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->SetStep((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->SetStep((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetRmax((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetThetaLim((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetNSeedMax0((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetNSeedMax((int) G__int(libp->para[0]), (int*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetSeedThres0((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->SetSeedThres((int) G__int(libp->para[0]), (int*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->ResetClustersSeg();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->FindGrains((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->FindGrains());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) EdbViewRec::FitSegment(*(EdbSegment*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) EdbViewRec::FitSegment(*(EdbSegment*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) EdbViewRec::FitSegmentToCl(*(EdbSegment*) libp->para[0].ref, *(EdbCluster*) libp->para[1].ref
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) EdbViewRec::FitSegmentToCl(*(EdbSegment*) libp->para[0].ref, *(EdbCluster*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbViewRec*) G__getstructoffset())->CalculateSegmentChi2(*(EdbSegment*) libp->para[0].ref, (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->CheckFramesShift());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbViewRec*) G__getstructoffset())->InitGrainsTree((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbViewRec*) G__getstructoffset())->InitGrainsTree();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->FillGrainsTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->FindSeeds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->CheckSeedThres());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((EdbViewRec*) G__getstructoffset())->GoodSegment(*(EdbSegment*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbViewRec*) G__getstructoffset())->GoodSegment(*(EdbSegment*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbViewRec*) G__getstructoffset())->Chi2Seg(*(EdbSegment*) libp->para[0].ref, *(EdbSegment*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->SelectSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->MergeSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->RefillSegment(*(EdbSegment*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->RefitSegments((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->RefitSegments());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->ReconstructGrains());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbViewRec*) G__getstructoffset())->ReconstructSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((EdbViewRec*) G__getstructoffset())->SaveToOutputView(*(EdbView*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((EdbViewRec*) G__getstructoffset())->SaveToOutputView(*(EdbView*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((EdbViewRec*) G__getstructoffset())->SaveToOutputView(*(EdbView*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((EdbViewRec*) G__getstructoffset())->SaveToOutputView(*(EdbView*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((EdbViewRec*) G__getstructoffset())->SaveToOutputView(*(EdbView*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((EdbViewRec*) G__getstructoffset())->SaveToOutputView(*(EdbView*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbViewRec*) G__getstructoffset())->SThetaGr((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((EdbViewRec*) G__getstructoffset())->SPhiGr((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (float) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbViewRec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewRec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbViewRec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbViewRec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewRec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewRec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewRec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewRec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_833_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewRec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EMCDict_833_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbViewRec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbViewRec(*(EdbViewRec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbViewRec G__TEdbViewRec;
static int G__EMCDict_833_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbViewRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbViewRec*) (soff+(sizeof(EdbViewRec)*i)))->~G__TEdbViewRec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbViewRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbViewRec*) (soff))->~G__TEdbViewRec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EMCDict_833_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewRec* dest = (EdbViewRec*) G__getstructoffset();
   *dest = *(EdbViewRec*) libp->para[0].ref;
   const EdbViewRec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbClMatch */
static int G__EMCDict_864_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbClMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbClMatch[n];
     } else {
       p = new((void*) gvp) EdbClMatch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbClMatch;
     } else {
       p = new((void*) gvp) EdbClMatch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_864_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbClMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EdbClMatch(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) EdbClMatch(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_864_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbClMatch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_864_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbClMatch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_864_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbClMatch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_864_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbClMatch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_864_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbClMatch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_864_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbClMatch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_864_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbClMatch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_864_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbClMatch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_864_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbClMatch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EMCDict_864_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EdbClMatch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EdbClMatch(*(EdbClMatch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbClMatch G__TEdbClMatch;
static int G__EMCDict_864_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbClMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbClMatch*) (soff+(sizeof(EdbClMatch)*i)))->~G__TEdbClMatch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbClMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbClMatch*) (soff))->~G__TEdbClMatch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EMCDict_864_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbClMatch* dest = (EdbClMatch*) G__getstructoffset();
   *dest = *(EdbClMatch*) libp->para[0].ref;
   const EdbClMatch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbViewMatch */
static int G__EMCDict_865_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbViewMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewMatch[n];
     } else {
       p = new((void*) gvp) EdbViewMatch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbViewMatch;
     } else {
       p = new((void*) gvp) EdbViewMatch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbViewMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->InitGMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->InitCorrMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->AddCluster(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->CalculateGrRef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->CalculateCorr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->DrawCorrMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->GenerateCorrectionMatrix((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->SetPar(*(TEnv*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->SetPixelSize((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbViewMatch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewMatch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbViewMatch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbViewMatch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbViewMatch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewMatch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewMatch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbViewMatch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_865_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbViewMatch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbViewMatch G__TEdbViewMatch;
static int G__EMCDict_865_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbViewMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbViewMatch*) (soff+(sizeof(EdbViewMatch)*i)))->~G__TEdbViewMatch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbViewMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbViewMatch*) (soff))->~G__TEdbViewMatch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbDataStore */
static int G__EMCDict_993_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbDataStore* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbDataStore[n];
     } else {
       p = new((void*) gvp) EdbDataStore[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbDataStore;
     } else {
       p = new((void*) gvp) EdbDataStore;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbDataStore));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((EdbDataStore*) G__getstructoffset())->TransferTo((EdbDataStore*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (EdbSegmentCut*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((EdbDataStore*) G__getstructoffset())->TransferTo((EdbDataStore*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (EdbSegmentCut*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbDataStore*) G__getstructoffset())->TransferTo((EdbDataStore*) G__int(libp->para[0]), (char) G__int(libp->para[1])
, (EdbSegmentCut*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbDataStore*) G__getstructoffset())->TransferTo((EdbDataStore*) G__int(libp->para[0]), (char) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->TransferGeometry((EdbDataStore*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      EdbDataStore::TransferSegs((EdbPatternsVolume*) G__int(libp->para[0]), (EdbPatternsVolume*) G__int(libp->para[1])
, (EdbSegmentCut*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      EdbDataStore::TransferSegs((EdbPatternsVolume*) G__int(libp->para[0]), (EdbPatternsVolume*) G__int(libp->para[1])
, (EdbSegmentCut*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      EdbDataStore::TransferSegs((EdbPatternsVolume*) G__int(libp->para[0]), (EdbPatternsVolume*) G__int(libp->para[1])
, (EdbSegmentCut*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      EdbDataStore::TransferSegs((EdbPatternsVolume*) G__int(libp->para[0]), (EdbPatternsVolume*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->LoadMCVertices((TObjArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->Restore_PIDFromID();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbDataStore*) G__getstructoffset())->Restore_PatFromGeom((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbDataStore*) G__getstructoffset())->Restore_PatFromGeom((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataStore*) G__getstructoffset())->Restore_PatFromGeom();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->Restore_TrxFromVtx();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbDataStore*) G__getstructoffset())->Restore_SegFromTrx((EdbSegmentCut*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbDataStore*) G__getstructoffset())->Restore_SegFromTrx((EdbSegmentCut*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbDataStore*) G__getstructoffset())->Restore_SegFromTrx((EdbSegmentCut*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataStore*) G__getstructoffset())->Restore_SegFromTrx();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbDataStore*) G__getstructoffset())->Clear((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataStore*) G__getstructoffset())->Clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbDataStore*) G__getstructoffset())->ClearTracks((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataStore*) G__getstructoffset())->ClearTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbDataStore*) G__getstructoffset())->ClearRaw((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataStore*) G__getstructoffset())->ClearRaw();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbDataStore*) G__getstructoffset())->ClearSeg((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataStore*) G__getstructoffset())->ClearSeg();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->ClearVTX();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->ClearGeom();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataStore*) G__getstructoffset())->Nt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataStore*) G__getstructoffset())->Nv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDataStore*) G__getstructoffset())->Nplt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbDataStore*) G__getstructoffset())->SetOwnTracks((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataStore*) G__getstructoffset())->SetOwnTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbDataStore*) G__getstructoffset())->SetOwnVertices((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataStore*) G__getstructoffset())->SetOwnVertices();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->SetOwnTrkSegs();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->GetTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->GetVertex((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->GetSegPat((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->GetRawPat((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->GetPattern((int) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->GetPattern((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->GetPV((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->GetPV());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->FindTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->FindVertex((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->FindPattern((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->FindPattern((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->FindLayer((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->FindLayer((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->FindLongTrk((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->FindLongTrk());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->FindPrimVtx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->AddSegment((EdbSegP*) G__int(libp->para[0]), (EdbSegmentCut*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->AddSegment((EdbSegP*) G__int(libp->para[0]), (EdbSegmentCut*) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->AddSegment((EdbSegP*) G__int(libp->para[0]), (EdbSegmentCut*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((EdbDataStore*) G__getstructoffset())->AddSegment((EdbSegP*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->AddTrack((EdbTrackP*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->AddVertex((EdbVertex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->AddPattern((EdbPattern*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->MakePattern((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->PrintBrief();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->PrintPatterns();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbDataStore*) G__getstructoffset())->PrintTracks((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataStore*) G__getstructoffset())->PrintTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((EdbDataStore*) G__getstructoffset())->SaveToRaw((const char*) G__int(libp->para[0]), *(EdbID*) libp->para[1].ref
, (Option_t*) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((EdbDataStore*) G__getstructoffset())->SaveToRaw((const char*) G__int(libp->para[0]), *(EdbID*) libp->para[1].ref
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbDataStore*) G__getstructoffset())->SaveToRaw((const char*) G__int(libp->para[0]), *(EdbID*) libp->para[1].ref);
      G__setnull(result7);
      break;
   case 1:
      ((EdbDataStore*) G__getstructoffset())->SaveToRaw((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDataStore*) G__getstructoffset())->SaveToRaw();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((EdbDataStore*) G__getstructoffset())->SavePlateToRaw((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((EdbDataStore*) G__getstructoffset())->SavePlateToRaw((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbDataStore*) G__getstructoffset())->DoSmearing((EdbScanCond*) G__int(libp->para[0]), (EdbScanCond*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbDataStore*) G__getstructoffset())->DoSmearing((EdbScanCond*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->DoEfficiency((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 108, (long) ((EdbDataStore*) G__getstructoffset())->Gen_mtk_BG((long) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (TH2*) G__int(libp->para[3])
, (TH2*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 108, (long) ((EdbDataStore*) G__getstructoffset())->Gen_mtk_BG((long) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (TH2*) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbDataStore::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataStore::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbDataStore::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbDataStore::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDataStore*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataStore::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbDataStore::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDataStore::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_993_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbDataStore::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbDataStore G__TEdbDataStore;
static int G__EMCDict_993_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbDataStore*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbDataStore*) (soff+(sizeof(EdbDataStore)*i)))->~G__TEdbDataStore();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbDataStore*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbDataStore*) (soff))->~G__TEdbDataStore();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EdbDSRec */
static int G__EMCDict_994_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EdbDSRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbDSRec[n];
     } else {
       p = new((void*) gvp) EdbDSRec[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EdbDSRec;
     } else {
       p = new((void*) gvp) EdbDSRec;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EMCDictLN_EdbDSRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EdbDSRec*) G__getstructoffset())->Clear((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EdbDSRec*) G__getstructoffset())->Clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoTracking((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoTracking((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoTracking((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoTracking());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoTracking0((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoTracking0((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoTracking0((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoTracking0());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoMomEst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoVertexing());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoDecaySearch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoFindBlkSeg((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoFindBlkSeg((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoFindBlkSeg((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((EdbDSRec*) G__getstructoffset())->DoFindBlkSeg((EdbVertex*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbDSRec*) G__getstructoffset())->FillECovPV((EdbPatternsVolume*) G__int(libp->para[0]), (EdbScanCond*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbDSRec*) G__getstructoffset())->FillECovPV((EdbPatternsVolume*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((EdbDSRec*) G__getstructoffset())->FillECovSeg((EdbSegP*) G__int(libp->para[0]), (EdbScanCond*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((EdbDSRec*) G__getstructoffset())->FillECovSeg((EdbSegP*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDSRec*) G__getstructoffset())->FillECovTrks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDSRec*) G__getstructoffset())->FillErrorsCOV();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EdbDSRec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDSRec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EdbDSRec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EdbDSRec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EdbDSRec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDSRec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbDSRec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EdbDSRec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EMCDict_994_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EdbDSRec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EdbDSRec G__TEdbDSRec;
static int G__EMCDict_994_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EdbDSRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EdbDSRec*) (soff+(sizeof(EdbDSRec)*i)))->~G__TEdbDSRec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EdbDSRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EdbDSRec*) (soff))->~G__TEdbDSRec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* EdbPVGen */

/* EdbBeamGen */

/* EdbBrickGen */

/* EdbViewDef */

/* EdbViewGen */

/* EdbViewCell */

/* EdbViewRec */

/* EdbClMatch */

/* EdbViewMatch */

/* EdbDataStore */

/* EdbDSRec */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncEMCDict {
 public:
  G__Sizep2memfuncEMCDict(): p(&G__Sizep2memfuncEMCDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncEMCDict::*p)();
};

size_t G__get_sizep2memfuncEMCDict()
{
  G__Sizep2memfuncEMCDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceEMCDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen))) {
     EdbPVGen *G__Lderived;
     G__Lderived=(EdbPVGen*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbBeamGen))) {
     EdbBeamGen *G__Lderived;
     G__Lderived=(EdbBeamGen*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbBeamGen),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbBrickGen))) {
     EdbBrickGen *G__Lderived;
     G__Lderived=(EdbBrickGen*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbBrickGen),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef))) {
     EdbViewDef *G__Lderived;
     G__Lderived=(EdbViewDef*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen))) {
     EdbViewGen *G__Lderived;
     G__Lderived=(EdbViewGen*)0x1000;
     {
       EdbViewDef *G__Lpbase=(EdbViewDef*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen),G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell))) {
     EdbViewCell *G__Lderived;
     G__Lderived=(EdbViewCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec))) {
     EdbViewRec *G__Lderived;
     G__Lderived=(EdbViewRec*)0x1000;
     {
       EdbViewDef *G__Lpbase=(EdbViewDef*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec),G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch))) {
     EdbClMatch *G__Lderived;
     G__Lderived=(EdbClMatch*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbViewMatch))) {
     EdbViewMatch *G__Lderived;
     G__Lderived=(EdbViewMatch*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewMatch),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbDataStore))) {
     EdbDataStore *G__Lderived;
     G__Lderived=(EdbDataStore*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbDataStore),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EMCDictLN_EdbDSRec))) {
     EdbDSRec *G__Lderived;
     G__Lderived=(EdbDSRec*)0x1000;
     {
       EdbDataStore *G__Lpbase=(EdbDataStore*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbDSRec),G__get_linked_tagnum(&G__EMCDictLN_EdbDataStore),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbDSRec),G__get_linked_tagnum(&G__EMCDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableEMCDict() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("iterator<iterator_traits<string::iterator>::iterator_category,iterator_traits<string::iterator>::value_type,iterator_traits<string::iterator>::difference_type,iterator_traits<string::iterator>::pointer,iterator_traits<string::iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,char,long,char*>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<string::const_iterator>::iterator_category,iterator_traits<string::const_iterator>::value_type,iterator_traits<string::const_iterator>::difference_type,iterator_traits<string::const_iterator>::pointer,iterator_traits<string::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EMCDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EMCDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EMCDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EMCDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EMCDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EMCDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EMCDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EMCDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__EMCDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EMCDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__EMCDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__EMCDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__EMCDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<Relation*>",117,G__get_linked_tagnum(&G__EMCDictLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<VERTEX::Relation*>",117,G__get_linked_tagnum(&G__EMCDictLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<MassC*>",117,G__get_linked_tagnum(&G__EMCDictLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<VERTEX::MassC*>",117,G__get_linked_tagnum(&G__EMCDictLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Track*>",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<VERTEX::Track*>",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EMCDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EMCDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::iterator_category,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::value_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::difference_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::pointer,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Track*>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Track*,long>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,VERTEX::Track*,long,VERTEX::Track**>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EMCDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EMCDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::iterator_category,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::value_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::difference_type,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::pointer,iterator_traits<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EMCDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EMCDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TString,allocator<TString> >::iterator>::iterator_category,iterator_traits<vector<TString,allocator<TString> >::iterator>::value_type,iterator_traits<vector<TString,allocator<TString> >::iterator>::difference_type,iterator_traits<vector<TString,allocator<TString> >::iterator>::pointer,iterator_traits<vector<TString,allocator<TString> >::iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TString>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TString,long>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TString,long,TString*>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EMCDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EMCDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TString,allocator<TString> >::const_iterator>::iterator_category,iterator_traits<vector<TString,allocator<TString> >::const_iterator>::value_type,iterator_traits<vector<TString,allocator<TString> >::const_iterator>::difference_type,iterator_traits<vector<TString,allocator<TString> >::const_iterator>::pointer,iterator_traits<vector<TString,allocator<TString> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__EMCDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__EMCDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EMCDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EMCDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>::iterator_category,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>::value_type,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>::difference_type,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>::pointer,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,pair<unsigned int,int>,long>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,pair<unsigned int,int>,long,pair<unsigned int,int>*>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EMCDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__EMCDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>::iterator_category,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>::value_type,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>::difference_type,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>::pointer,iterator_traits<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* EdbPVGen */
static void G__setup_memvarEdbPVGen(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen));
   { EdbPVGen *p; p=(EdbPVGen*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbPatternsVolume),-1,-1,4,"ePVolume=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbScanCond),-1,-1,4,"eScanCond=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eTracks)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TObjArray),-1,-1,1,"eTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eVTX)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TObjArray),-1,-1,1,"eVTX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eEVR)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbVertexRec),-1,-1,1,"eEVR=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbBeamGen */
static void G__setup_memvarEdbBeamGen(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbBeamGen));
   { EdbBeamGen *p; p=(EdbBeamGen*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eMass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eMass=",0,"particle mass to be generated");
   G__memvar_setup((void*)((long)(&p->eLimits)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbLayer),-1,-1,1,"eLimits=",0,"tracks will be generated inside this limits");
   G__memvar_setup((void*)((long)(&p->eX0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eX0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSigmaX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSigmaX=",0,"position Gaus");
   G__memvar_setup((void*)((long)(&p->eY0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eY0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSigmaY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSigmaY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZ0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSigmaZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSigmaZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eTX0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eTX0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSigmaTX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSigmaTX=",0,"angular Gaus");
   G__memvar_setup((void*)((long)(&p->eTY0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eTY0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSigmaTY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSigmaTY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eP0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eP0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSigmaP)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSigmaP=",0,"momentum smearing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbBrickGen */
static void G__setup_memvarEdbBrickGen(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbBrickGen));
   { EdbBrickGen *p; p=(EdbBrickGen*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbBrickP),-1,-1,4,"eBrick=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen),-1,-1,4,"ePVG=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbViewDef */
static void G__setup_memvarEdbViewDef(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef));
   { EdbViewDef *p; p=(EdbViewDef*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eNframes)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNframes=",0,"number of frames");
   G__memvar_setup((void*)((long)(&p->eZmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZmax=",0,"limits in z");
   G__memvar_setup((void*)((long)(&p->eZxy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZxy=",0,"intersect plane");
   G__memvar_setup((void*)((long)(&p->eXmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eXmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXmax=",0,"limits of the view");
   G__memvar_setup((void*)((long)(&p->eYmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYmax=",0,"limits of the view");
   G__memvar_setup((void*)((long)(&p->eX0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eX0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eY0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eY0=",0,"geometrical center of the view");
   G__memvar_setup((void*)((long)(&p->eX0opt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eX0opt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eY0opt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eY0opt=",0,"optical center of the view (the point vhere the grains are vertical)");
   G__memvar_setup((void*)((long)(&p->eTXopt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eTXopt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eTYopt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eTYopt=",0,"koeff of the slopes: t(x) = tx*(x-X0opt), ");
   G__memvar_setup((void*)((long)(&p->eClaSX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eClaSX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eClaSY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eClaSY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eClaSZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eClaSZ=",0,"smearing for clusters position inside grain");
   G__memvar_setup((void*)((long)(&p->eClaSZvar)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eClaSZvar=",0,"variation (sigma) of the vertical grain size");
   G__memvar_setup((void*)((long)(&p->eGrainSX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eGrainSX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eGrainSY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eGrainSY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eGrainSZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eGrainSZ=",0,"smearing og CoG of the grain in z (relevant for tracking!)");
   G__memvar_setup((void*)((long)(&p->eFogDens)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eFogDens=",0,"per 10x10x10 microns**3");
   G__memvar_setup((void*)((long)(&p->eFogGrainArea)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eFogGrainArea=",0,"mean area of the fog grain");
   G__memvar_setup((void*)((long)(&p->eGrainArea)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eGrainArea=",0,"mean area of the signal grain");
   G__memvar_setup((void*)((long)(&p->eZdead)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZdead=",0,"the center of the dead layer");
   G__memvar_setup((void*)((long)(&p->eDZdead)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDZdead=",0,"the thickness of the dead layer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbViewGen */
static void G__setup_memvarEdbViewGen(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen));
   { EdbViewGen *p; p=(EdbViewGen*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbViewCell */
static void G__setup_memvarEdbViewCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell));
   { EdbViewCell *p; p=(EdbViewCell*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eXmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eXmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBinZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eBinZ=",0,"the distance between layers: eBinZ = (eZmax-eZmin)/eNfr");
   G__memvar_setup((void*)((long)(&p->eBinX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eBinX=",0,"bin along x");
   G__memvar_setup((void*)((long)(&p->eBinY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eBinY=",0,"bin along y");
   G__memvar_setup((void*)((long)(&p->eNfr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNfr=",0,"number of frames (to be setted!)");
   G__memvar_setup((void*)((long)(&p->eNx)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNx=",0,"\"raw\"    - divisions along x");
   G__memvar_setup((void*)((long)(&p->eNy)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNy=",0,"\"column\" - divisions along y");
   G__memvar_setup((void*)((long)(&p->eNcellXY)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNcellXY=",0,"eNx*eNy");
   G__memvar_setup((void*)((long)(&p->eNcell)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNcell=",0,"eNfr*eNx*eNy");
   G__memvar_setup((void*)((long)(&p->eNcl)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNcl=",0,"total number of clusters");
   G__memvar_setup((void*)((long)(&p->eIFZ)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eIFZ=",0,"cell filling flag: if IFZ=0 (default) use c->eFrame else use c->eZ");
   G__memvar_setup((void*)((long)(&p->eNC)-(long)(p)),73,0,0,-1,G__defined_typename("Int_t"),-1,1,"eNC=",0,"! [eNcell] number of clusters/cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNcellsLim=",0,"max number of cells (need for memory allocation)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eCellLim=",0,"max number of clusters/cell");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__EMCDictLN_EdbCluster),-1,-1,4,"epC=",0,"! pointers to clusters [eNcellsLim*eCellLim]");
   G__memvar_setup((void*)0,85,3,0,G__get_linked_tagnum(&G__EMCDictLN_EdbCluster),-1,-1,4,"epCell=",0,"! pointers to cells    [eNcellsLim]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"eFrame=",0,"! index of the first cell of the frame in epCell array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNeib[9]=",0,"3x3 neighborhood");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbViewRec */
static void G__setup_memvarEdbViewRec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec));
   { EdbViewRec *p; p=(EdbViewRec*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eAddGrainsToView)-(long)(p)),103,0,0,-1,-1,-1,1,"eAddGrainsToView=",0,"if true: save grains to eView as a segments");
   G__memvar_setup((void*)((long)(&p->eDoGrainsProcessing)-(long)(p)),103,0,0,-1,-1,-1,1,"eDoGrainsProcessing=",0,"if true: when reconstruct segments first find grains ->(eGCla)");
   G__memvar_setup((void*)((long)(&p->eCheckSeedThres)-(long)(p)),103,0,0,-1,-1,-1,1,"eCheckSeedThres=",0,"if true: use adaptive seeds threshold (based on eNseedMax)");
   G__memvar_setup((void*)((long)(&p->ePropagateToBase)-(long)(p)),103,0,0,-1,-1,-1,1,"ePropagateToBase=",0,"if true: segments are propagated to base position");
   G__memvar_setup((void*)((long)(&p->eGrainNbin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eGrainNbin=",0,"acceptance for grain preprocessing = eGrainNbin*eGrainSX(Y)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbView),-1,-1,4,"eView=",0,"! pointer to the input  view currently in processing");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNgrMax=",0,"grains limit (for mem alloc)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNsegMax=",0,"segments limit (for mem alloc)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell),-1,-1,4,"eVC=",0,"! pointer to eVCC or eVCG");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell),-1,-1,4,"eVCC=",0,"! cells with raw clusters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell),-1,-1,4,"eVCG=",0,"! cells with grains");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClonesArray),-1,-1,4,"eG=",0,"! pointer to eView->GetSegments() or to eGSeg as the output for grain search");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClonesArray),-1,-1,4,"eGCla=",0,"! [eNgrMax] array of grains represented as clusters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClonesArray),-1,-1,4,"eCL=",0,"! pointer to eView->GetClusters() or to eGCla as the input for tracking");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClonesArray),-1,-1,4,"eSA=",0,"! pointer to array of segments (output of tracking)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eClMinA=",0,"rejected cl->eArea < eClMinA (image noise)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eClMaxA=",0,"rejected cl->eArea > eClMaxA (blobs)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNgr=",0,"grains counter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TTree),-1,-1,4,"eGrainsTree=",0,"! debug tree");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"eNclGrMin=",0,"min number of clusters/grain for saving it");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"eNclGrMax=",0,"max number of clusters/grain for consider it a single grain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDZmin=",0,"minimal dz - should be in agreement with eStepFrom");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eThetaLim=",0,"absolute theta limit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eStep=",0,"frame step size for seed search: default=1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eStepFrom=",0,"low   limit (ifr) for seed search");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eStepTo=",0,"upper limit (ifr) for seed search");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eSeedThres0=",0,"default threshold for the seed puls");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TArrayI),-1,-1,4,"eSeedThres=",0,"thresholds[enT] for the seed puls");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TArrayF),-1,-1,4,"eR=",0,"R(it) limits definition (may be setted manually?)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"enSeedsLim=",0,"limit for the number of seeds");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"eSeedLim=",0,"limit for the number of clusters/seed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"eNseedMax0=",0,"starting limit for the good seeds (segments) to be processed");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TArrayI),-1,-1,4,"eNseedMax=",0,"[enT] limit for the good seeds (segments) to be processed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ePulsMin=",0,"min threshold for the segment puls");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ePulsMax=",0,"max threshold for the segment puls");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaMin=",0,"min and max values for segment acceptance");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eSigmaMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eZcenter=",0,"estimated center of the emulsion layer (for segments rec)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"enT=",0,"number of Theta divisions");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TArrayI),-1,-1,4,"enP=",0,"number of Phi divisions [enT]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"enPtot=",0,"total number of phi divisions");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TArrayI),-1,-1,4,"enY=",0,"number of Y divisions [enPtot]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"enYtot=",0,"total number of Y divisions");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TArrayI),-1,-1,4,"enX=",0,"number of X divisions [enYtot]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"enXtot=",0,"total number of X divisions");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TArrayF),-1,-1,4,"eTheta=",0,"theta(it) mean value");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TArrayF),-1,-1,4,"esP=",0,"step of Phi   divisions [enT]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TArrayF),-1,-1,4,"esY=",0,"step of Y     divisions [enPtot]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TArrayF),-1,-1,4,"esX=",0,"step of X     divisions [enYtot]");
   G__memvar_setup((void*)0,83,4,0,-1,G__defined_typename("Short_t"),-1,4,"epT=",0,"! [enT]    - pointers to the first phi[it]");
   G__memvar_setup((void*)0,83,3,0,-1,G__defined_typename("Short_t"),-1,4,"epP=",0,"! [enPtot] - pointers to the first y[ip]");
   G__memvar_setup((void*)0,83,2,0,-1,G__defined_typename("Short_t"),-1,4,"epY=",0,"! [enYtot] - pointers to the first x[iy]");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,4,"ehX=",0,"! [enXtot] - phase histogram");
   G__memvar_setup((void*)0,85,3,0,G__get_linked_tagnum(&G__EMCDictLN_EdbCluster),-1,-1,4,"epS=",0,"! pointers to seeds list");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__EMCDictLN_EdbCluster),-1,-1,4,"epC=",0,"! pointers to clusters");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eDmax=",0,"max distance inside the view (diameter)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eFact=",0,"occupancy correction factor ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eRmax=",0,"limit for coupling (3-dim)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbClMatch */
static void G__setup_memvarEdbClMatch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch));
   { EdbClMatch *p; p=(EdbClMatch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eZ=",0,"cluster coords in view RS");
   G__memvar_setup((void*)((long)(&p->eXv)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eXv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eYv)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eYv=",0,"view coords");
   G__memvar_setup((void*)((long)(&p->eView)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eView=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eFrame)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eFrame=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbViewMatch */
static void G__setup_memvarEdbViewMatch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewMatch));
   { EdbViewMatch *p; p=(EdbViewMatch*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"eNClMin=",0,"minimal number of clusters inside grain to be used for corrections");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eR2CenterMax=",0,"the maximal distance to the matrix center for the reference cluster");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eRmax=",0,"acceptance for clusters matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClonesArray),-1,-1,4,"eCl=",0,"array of EdbClMatch objects");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClonesArray),-1,-1,4,"eGr=",0,"array of EdbSegment objects (cluster \"clouds\" in this case)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbCell2),-1,-1,4,"eGMap=",0,"map of grains (EdbSegments)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbCell2),-1,-1,4,"eCorrMap=",0,"map of corrections");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eXpix=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eYpix=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"eNXpix=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"eNYpix=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eCorrectionMatrixStepX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"eCorrectionMatrixStepY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eOutputFile)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TFile),-1,-1,1,"eOutputFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbDataStore */
static void G__setup_memvarEdbDataStore(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbDataStore));
   { EdbDataStore *p; p=(EdbDataStore*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eBrick)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbBrickP),-1,-1,1,"eBrick=",0,"/geometry");
   G__memvar_setup((void*)((long)(&p->eRawPV)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbPatternsVolume),-1,-1,1,"eRawPV=",0,"/");
   G__memvar_setup((void*)((long)(&p->eSegPV)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbPatternsVolume),-1,-1,1,"eSegPV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eTracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TObjArray),-1,-1,1,"eTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eVTX)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EMCDictLN_TObjArray),-1,-1,1,"eVTX=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EdbDSRec */
static void G__setup_memvarEdbDSRec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbDSRec));
   { EdbDSRec *p; p=(EdbDSRec*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->eVRec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbVertexRec),-1,-1,1,"eVRec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eMomEst)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbMomentumEstimator),-1,-1,1,"eMomEst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eCond_b)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbScanCond),-1,-1,1,"eCond_b=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eCond_m)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__EMCDictLN_EdbScanCond),-1,-1,1,"eCond_m=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EMCDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarEMCDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEdbPVGen(void) {
   /* EdbPVGen */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen));
   G__memfunc_setup("EdbPVGen",715,G__EMCDict_815_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVolume",932,G__EMCDict_815_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPatternsVolume' - 0 - pv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScanCond",1077,G__EMCDict_815_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbScanCond' - 0 - scan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolume",920,G__EMCDict_815_0_4, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbPatternsVolume), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmearSegments",1342,G__EMCDict_815_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmearPatterns",1353,G__EMCDict_815_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - shift f - - 0 - rot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateBeam",1184,G__EMCDict_815_0_7, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - n F - - 0 - x "
"F - - 0 - sx F - - 0 - lim "
"f - - 0 - z0 i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateBackground",1835,G__EMCDict_815_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - n F - - 0 - x "
"F - - 0 - sx i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneratePulsPoisson",1978,G__EMCDict_815_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - - 0 - mean f - - 0 '1.' amp "
"f - - 0 '0' wmin f - - 0 '0.' wmax "
"i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneratePulsGaus",1631,G__EMCDict_815_0_10, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - amp f - - 0 - mean "
"f - - 0 - sigma f - - 0 '0' wmin "
"f - - 0 '0.' wmax i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__EMCDict_815_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbTrackP' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVertex",903,G__EMCDict_815_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbVertex' - 0 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmearSegment",1227,G__EMCDict_815_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegP' - 1 - s u 'EdbScanCond' - 1 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateSegment",1654,G__EMCDict_815_0_14, 102, -1, -1, 0, 5, 1, 1, 0, 
"u 'EdbSegP' - 1 - s f - - 0 - dz "
"f - - 0 - X0 f - - 0 - m "
"i - - 0 - eloss_flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackMC2",695,G__EMCDict_815_0_15, 105, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbTrackP' - 1 - tr u 'EdbLayer' - 1 - lim "
"i - - 0 - eloss_flag f - - 0 - PGap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackMC",645,G__EMCDict_815_0_16, 121, -1, -1, 0, 5, 1, 1, 0, 
"F - - 0 - zlim F - - 0 - lim "
"u 'EdbTrackP' - 1 - tr i - - 0 '0' eloss_flag "
"f - - 0 '0.' PGap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateUncorrelatedSegments",2905,G__EMCDict_815_0_17, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - nb F - - 0 - lim "
"f - - 0 - TetaMax i - - 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateBackgroundTracks",2451,G__EMCDict_815_0_18, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 - nb F - - 0 - vlim "
"F - - 0 - lim F - - 0 - plim "
"f - - 0 - TetaMax f - - 0 - ProbGap "
"i - - 0 - eloss_flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneratePhaseSpaceEvents",2429,G__EMCDict_815_0_19, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - - 0 - nv U 'TGenPhaseSpace' - 0 - pDecay "
"F - - 0 - vzlim F - - 0 - vlim "
"F - - 0 - lim f - - 0 - ProbGap "
"i - - 0 - eloss_flag I - - 0 - charges", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneratePhaseSpaceEventsWithDecay",3327,G__EMCDict_815_0_20, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - - 0 - nv U 'TGenPhaseSpace' - 0 - pDecay "
"U 'TGenPhaseSpace' - 0 - pSecond F - - 0 - vzlim "
"F - - 0 - vlim F - - 0 - lim "
"f - - 0 - ProbGap i - - 0 - eloss_flag "
"I - - 0 - charges", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTracksMC",1142,G__EMCDict_815_0_21, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - nsegmin U 'TObjArray' - 0 - tracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_815_0_22, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbPVGen::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_815_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPVGen::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_815_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbPVGen::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_815_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbPVGen::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_815_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_815_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPVGen::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_815_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPVGen::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_815_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbPVGen::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_815_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbPVGen::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbPVGen", 715, G__EMCDict_815_0_34, (int) ('i'), G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen), -1, 0, 1, 1, 1, 0, "u 'EdbPVGen' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbPVGen", 841, G__EMCDict_815_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EMCDict_815_0_36, (int) ('u'), G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen), -1, 1, 1, 1, 1, 0, "u 'EdbPVGen' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbBeamGen(void) {
   /* EdbBeamGen */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbBeamGen));
   G__memfunc_setup("EdbBeamGen",922,G__EMCDict_818_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbBeamGen), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPositionGaus",1553,G__EMCDict_818_0_2, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - x0 f - - 0 - sx "
"f - - 0 - y0 f - - 0 - sy "
"f - - 0 '0' z0 f - - 0 '0' sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAngularGaus",1414,G__EMCDict_818_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - tx0 f - - 0 - stx "
"f - - 0 - ty0 f - - 0 - sty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetM",377,G__EMCDict_818_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetP",380,G__EMCDict_818_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - p f - - 0 '0' sp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NextTrack",916,G__EMCDict_818_0_6, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "i - - 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_818_0_7, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbBeamGen::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_818_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbBeamGen::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_818_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbBeamGen::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_818_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbBeamGen::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_818_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_818_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbBeamGen::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_818_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbBeamGen::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_818_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbBeamGen::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_818_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbBeamGen::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbBeamGen", 922, G__EMCDict_818_0_19, (int) ('i'), G__get_linked_tagnum(&G__EMCDictLN_EdbBeamGen), -1, 0, 1, 1, 1, 0, "u 'EdbBeamGen' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbBeamGen", 1048, G__EMCDict_818_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EMCDict_818_0_21, (int) ('u'), G__get_linked_tagnum(&G__EMCDictLN_EdbBeamGen), -1, 1, 1, 1, 1, 0, "u 'EdbBeamGen' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbBrickGen(void) {
   /* EdbBrickGen */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbBrickGen));
   G__memfunc_setup("EdbBrickGen",1040,G__EMCDict_819_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbBrickGen), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Brick",491,G__EMCDict_819_0_2, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbBrickP), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PVG",237,G__EMCDict_819_0_3, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbPVGen), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Generate",811,G__EMCDict_819_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateOperaBrick",1805,G__EMCDict_819_0_5, 121, -1, -1, 0, 10, 1, 1, 0, 
"i - - 0 '58' npl f - - 0 '60000.' dx "
"f - - 0 '50000.' dy f - - 0 '0.' x0 "
"f - - 0 '0.' y0 f - - 0 '0.' z0 "
"f - - 0 '210.' zbase f - - 0 '45.' zu "
"f - - 0 '45.' zd f - - 0 '1000.' zspacer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateOperaBrick",1805,G__EMCDict_819_0_6, 121, -1, -1, 0, 11, 1, 1, 0, 
"u 'EdbBrickP' - 1 - br i - - 0 - npl "
"f - - 0 - dx f - - 0 - dy "
"f - - 0 - x0 f - - 0 - y0 "
"f - - 0 - z0 f - - 0 - zbase "
"f - - 0 - zu f - - 0 - zd "
"f - - 0 - zspacer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneratePatternsVolumeBT",2442,G__EMCDict_819_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'EdbPatternsVolume' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneratePatternsVolumeBT",2442,G__EMCDict_819_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPatternsVolume' - 0 '0' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EMCDict_819_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_819_0_10, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbBrickGen::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_819_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbBrickGen::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_819_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbBrickGen::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_819_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbBrickGen::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_819_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_819_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbBrickGen::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_819_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbBrickGen::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_819_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbBrickGen::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_819_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbBrickGen::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbBrickGen", 1040, G__EMCDict_819_0_22, (int) ('i'), G__get_linked_tagnum(&G__EMCDictLN_EdbBrickGen), -1, 0, 1, 1, 1, 0, "u 'EdbBrickGen' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbBrickGen", 1166, G__EMCDict_819_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EMCDict_819_0_24, (int) ('u'), G__get_linked_tagnum(&G__EMCDictLN_EdbBrickGen), -1, 1, 1, 1, 1, 0, "u 'EdbBrickGen' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbViewDef(void) {
   /* EdbViewDef */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef));
   G__memfunc_setup("EdbViewDef",949,G__EMCDict_820_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDef",571,G__EMCDict_820_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EMCDict_820_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_820_0_4, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbViewDef::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_820_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewDef::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_820_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbViewDef::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_820_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbViewDef::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_820_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_820_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewDef::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_820_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewDef::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_820_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewDef::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_820_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewDef::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbViewDef", 949, G__EMCDict_820_0_16, (int) ('i'), G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef), -1, 0, 1, 1, 1, 0, "u 'EdbViewDef' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbViewDef", 1075, G__EMCDict_820_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EMCDict_820_0_18, (int) ('u'), G__get_linked_tagnum(&G__EMCDictLN_EdbViewDef), -1, 1, 1, 1, 1, 0, "u 'EdbViewDef' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbViewGen(void) {
   /* EdbViewGen */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen));
   G__memfunc_setup("EdbViewGen",960,G__EMCDict_831_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbViewGen",960,G__EMCDict_831_0_2, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen), -1, 0, 1, 1, 1, 0, "u 'EdbViewDef' - 1 - vd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenFrames",888,G__EMCDict_831_0_3, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbView' - 1 - v", "generate frames in the view", (void*) NULL, 0);
   G__memfunc_setup("GenGrains",894,G__EMCDict_831_0_4, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbView' - 1 - v", "generate grains in the view", (void*) NULL, 0);
   G__memfunc_setup("GenSegGrains",1181,G__EMCDict_831_0_5, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegment' - 1 - s", "generate grains for one segment", (void*) NULL, 0);
   G__memfunc_setup("GenFogGrains",1178,G__EMCDict_831_0_6, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - ngr u 'TObjArray' - 1 - grains "
"i - - 0 '0' side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenAlfaGrains",1266,G__EMCDict_831_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", "bg from alfa-particles", (void*) NULL, 0);
   G__memfunc_setup("GenDeltaGrains",1384,G__EMCDict_831_0_8, 105, -1, -1, 0, 0, 1, 1, 0, "", "bg from delta-electrons", (void*) NULL, 0);
   G__memfunc_setup("GenGrainClusters",1632,G__EMCDict_831_0_9, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbView' - 1 - v u 'EdbCluster' - 1 - g", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GrainPathMip",1188,G__EMCDict_831_0_10, 102, -1, -1, 0, 1, 1, 1, 0, "f - - 0 '2.' lambda", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_831_0_11, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbViewGen::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_831_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewGen::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_831_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbViewGen::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_831_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbViewGen::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_831_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_831_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewGen::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_831_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewGen::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_831_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewGen::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_831_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewGen::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbViewGen", 960, G__EMCDict_831_0_23, (int) ('i'), G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen), -1, 0, 1, 1, 1, 0, "u 'EdbViewGen' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbViewGen", 1086, G__EMCDict_831_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EMCDict_831_0_25, (int) ('u'), G__get_linked_tagnum(&G__EMCDictLN_EdbViewGen), -1, 1, 1, 1, 1, 0, "u 'EdbViewGen' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbViewCell(void) {
   /* EdbViewCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell));
   G__memfunc_setup("EdbViewCell",1062,G__EMCDict_832_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLimits",926,G__EMCDict_832_0_2, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - xmin f - - 0 - xmax "
"f - - 0 - ymin f - - 0 - ymax "
"f - - 0 - zmin f - - 0 - zmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBin",581,G__EMCDict_832_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - binx f - - 0 - biny "
"f - - 0 '-1' binz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCellLimits",1310,G__EMCDict_832_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ncell i - - 0 - ncl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNfr",594,G__EMCDict_832_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - nfr f - - 0 - zmin "
"f - - 0 - zmax i - - 0 '0' ifz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcN",449,G__EMCDict_832_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMem",691,G__EMCDict_832_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__EMCDict_832_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__EMCDict_832_0_9, 105, -1, -1, 0, 1, 1, 1, 0, "U 'EdbCluster' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCell",775,G__EMCDict_832_0_10, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanCell",867,G__EMCDict_832_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Delete",595,G__EMCDict_832_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcStat",783,G__EMCDict_832_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IXcell",577,G__EMCDict_832_0_14, 105, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IYcell",578,G__EMCDict_832_0_15, 105, -1, -1, 0, 1, 1, 1, 8, "f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JcellXY",667,G__EMCDict_832_0_16, 105, -1, -1, 0, 2, 1, 1, 8, 
"f - - 0 - x f - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Jcell",490,G__EMCDict_832_0_17, 105, -1, -1, 0, 3, 1, 1, 8, 
"f - - 0 - x f - - 0 - y "
"i - - 0 - ifr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Jcell",490,G__EMCDict_832_0_18, 105, -1, -1, 0, 3, 1, 1, 8, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Jcell",490,G__EMCDict_832_0_19, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - ixy i - - 0 - ifr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Jcell",490,G__EMCDict_832_0_20, 105, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - ix i - - 0 - iy "
"i - - 0 - ifr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Jneib",488,G__EMCDict_832_0_21, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCell",672,G__EMCDict_832_0_22, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbCluster), -1, 2, 1, 1, 1, 8, "i - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EMCDict_832_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_832_0_24, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbViewCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_832_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_832_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbViewCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_832_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbViewCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_832_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_832_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_832_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_832_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_832_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbViewCell", 1062, G__EMCDict_832_0_36, (int) ('i'), G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell), -1, 0, 1, 1, 1, 0, "u 'EdbViewCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbViewCell", 1188, G__EMCDict_832_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EMCDict_832_0_38, (int) ('u'), G__get_linked_tagnum(&G__EMCDictLN_EdbViewCell), -1, 1, 1, 1, 1, 0, "u 'EdbViewCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbViewRec(void) {
   /* EdbViewRec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec));
   G__memfunc_setup("EdbViewRec",960,G__EMCDict_833_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbViewRec",960,G__EMCDict_833_0_2, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec), -1, 0, 1, 1, 1, 0, "u 'EdbViewDef' - 1 - vd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimary",1040,G__EMCDict_833_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__EMCDict_833_0_4, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNclGrLim",1060,G__EMCDict_833_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - mincl i - - 0 - maxcl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulsThres",1238,G__EMCDict_833_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - minp i - - 0 '500' maxp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigmaThres",1315,G__EMCDict_833_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - smin f - - 0 - smax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNgrMax0",937,G__EMCDict_833_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ngr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAddGrainsToView",1783,G__EMCDict_833_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - yesno", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitR",486,G__EMCDict_833_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetView",711,G__EMCDict_833_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "U 'EdbView' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClThres",993,G__EMCDict_833_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - mina i - - 0 - maxa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSeedsLim",1090,G__EMCDict_833_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 '100000' nseedslim i - - 0 '48' seedlim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStep",712,G__EMCDict_833_0_14, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - sfrom i - - 0 - sto "
"i - - 0 '1' step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRmax",708,G__EMCDict_833_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - rmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaLim",1092,G__EMCDict_833_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNSeedMax0",1105,G__EMCDict_833_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNSeedMax",1057,G__EMCDict_833_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - nt I - - 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSeedThres0",1251,G__EMCDict_833_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - mins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSeedThres",1203,G__EMCDict_833_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - nt I - - 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetClustersSeg",1655,G__EMCDict_833_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindGrains",997,G__EMCDict_833_0_22, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitSegment",1014,G__EMCDict_833_0_23, 105, -1, -1, 0, 2, 3, 1, 0, 
"u 'EdbSegment' - 1 - s i - - 0 '0' wkey", (char*)NULL, (void*) G__func2void( (int (*)(EdbSegment&, int))(&EdbViewRec::FitSegment) ), 0);
   G__memfunc_setup("FitSegmentToCl",1384,G__EMCDict_833_0_24, 105, -1, -1, 0, 3, 3, 1, 0, 
"u 'EdbSegment' - 1 - s u 'EdbCluster' - 1 - c "
"i - - 0 '0' wkey", (char*)NULL, (void*) G__func2void( (int (*)(EdbSegment&, EdbCluster&, int))(&EdbViewRec::FitSegmentToCl) ), 0);
   G__memfunc_setup("CalculateSegmentChi2",1959,G__EMCDict_833_0_25, 102, -1, -1, 0, 4, 1, 1, 0, 
"u 'EdbSegment' - 1 - seg f - - 0 - sx "
"f - - 0 - sy f - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckFramesShift",1594,G__EMCDict_833_0_26, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitGrainsTree",1416,G__EMCDict_833_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"grains.root\"' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillGrainsTree",1403,G__EMCDict_833_0_28, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindSeeds",885,G__EMCDict_833_0_29, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckSeedThres",1381,G__EMCDict_833_0_30, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GoodSegment",1116,G__EMCDict_833_0_31, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegment' - 1 - s i - - 0 '0' wkey", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2Seg",613,G__EMCDict_833_0_32, 102, -1, -1, 0, 2, 1, 1, 0, 
"u 'EdbSegment' - 1 - s1 u 'EdbSegment' - 1 - s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectSegments",1446,G__EMCDict_833_0_33, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeSegments",1334,G__EMCDict_833_0_34, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RefillSegment",1329,G__EMCDict_833_0_35, 105, -1, -1, 0, 1, 1, 1, 0, "u 'EdbSegment' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RefitSegments",1344,G__EMCDict_833_0_36, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' wkey", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReconstructGrains",1792,G__EMCDict_833_0_37, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReconstructSegments",2018,G__EMCDict_833_0_38, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveToOutputView",1662,G__EMCDict_833_0_39, 103, -1, -1, 0, 6, 1, 1, 0, 
"u 'EdbView' - 1 - vout i - - 0 '1' do_h "
"i - - 0 '2' do_c i - - 0 '2' do_s "
"i - - 0 '0' do_tr i - - 0 '2' do_f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SThetaGr",770,G__EMCDict_833_0_40, 102, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - theta f - - 0 - phi "
"f - - 0 - dz f - - 0 - sx "
"f - - 0 - sy f - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SPhiGr",557,G__EMCDict_833_0_41, 102, -1, -1, 0, 6, 1, 1, 0, 
"f - - 0 - theta f - - 0 - phi "
"f - - 0 - dz f - - 0 - sx "
"f - - 0 - sy f - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_833_0_42, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbViewRec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_833_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewRec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_833_0_44, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbViewRec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_833_0_45, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbViewRec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_833_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_833_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewRec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_833_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewRec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_833_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewRec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_833_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewRec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbViewRec", 960, G__EMCDict_833_0_54, (int) ('i'), G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec), -1, 0, 1, 1, 1, 0, "u 'EdbViewRec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbViewRec", 1086, G__EMCDict_833_0_55, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EMCDict_833_0_56, (int) ('u'), G__get_linked_tagnum(&G__EMCDictLN_EdbViewRec), -1, 1, 1, 1, 1, 0, "u 'EdbViewRec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbClMatch(void) {
   /* EdbClMatch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch));
   G__memfunc_setup("EdbClMatch",935,G__EMCDict_864_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EdbClMatch",935,G__EMCDict_864_0_2, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch), -1, 0, 7, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - xv "
"f - - 0 - yv i - - 0 - view "
"i - - 0 - frame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_864_0_3, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbClMatch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_864_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbClMatch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_864_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbClMatch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_864_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbClMatch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_864_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_864_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbClMatch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_864_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbClMatch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_864_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbClMatch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_864_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbClMatch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EdbClMatch", 935, G__EMCDict_864_0_15, (int) ('i'), G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch), -1, 0, 1, 1, 1, 0, "u 'EdbClMatch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EdbClMatch", 1061, G__EMCDict_864_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EMCDict_864_0_17, (int) ('u'), G__get_linked_tagnum(&G__EMCDictLN_EdbClMatch), -1, 1, 1, 1, 1, 0, "u 'EdbClMatch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbViewMatch(void) {
   /* EdbViewMatch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbViewMatch));
   G__memfunc_setup("EdbViewMatch",1171,G__EMCDict_865_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbViewMatch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitGMap",761,G__EMCDict_865_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCorrMap",1096,G__EMCDict_865_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__EMCDict_865_0_4, 121, -1, -1, 0, 7, 1, 1, 0, 
"f - - 0 - x f - - 0 - y "
"f - - 0 - z f - - 0 - xv "
"f - - 0 - yv i - - 0 - view "
"i - - 0 - frame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateGrRef",1380,G__EMCDict_865_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateCorr",1316,G__EMCDict_865_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawCorrMap",1090,G__EMCDict_865_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateCorrectionMatrix",2488,G__EMCDict_865_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - addfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPar",591,G__EMCDict_865_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TEnv' - 1 - env", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPixelSize",1225,G__EMCDict_865_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - xpix f - - 0 - ypix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__EMCDict_865_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_865_0_12, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbViewMatch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_865_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewMatch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_865_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbViewMatch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_865_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbViewMatch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_865_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_865_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewMatch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_865_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewMatch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_865_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbViewMatch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_865_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbViewMatch::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbViewMatch", 1297, G__EMCDict_865_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbDataStore(void) {
   /* EdbDataStore */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbDataStore));
   G__memfunc_setup("EdbDataStore",1170,G__EMCDict_993_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbDataStore), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransferTo",1032,G__EMCDict_993_0_2, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'EdbDataStore' - 0 - ds c - - 0 - level "
"U 'EdbSegmentCut' - 0 '0' cut i - - 0 '0' FromPlate "
"i - - 0 '57' ToPlate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransferGeometry",1681,G__EMCDict_993_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbDataStore' - 0 - ds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransferSegs",1239,G__EMCDict_993_0_4, 121, -1, -1, 0, 5, 3, 1, 0, 
"U 'EdbPatternsVolume' - 0 - pv0 U 'EdbPatternsVolume' - 0 - pv1 "
"U 'EdbSegmentCut' - 0 '0' cut i - - 0 '0' FromPlate "
"i - - 0 '57' ToPlate", (char*)NULL, (void*) G__func2void( (void (*)(EdbPatternsVolume*, EdbPatternsVolume*, EdbSegmentCut*, int, int))(&EdbDataStore::TransferSegs) ), 0);
   G__memfunc_setup("LoadMCVertices",1365,G__EMCDict_993_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObjArray' - 0 - vtx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Restore_PIDFromID",1601,G__EMCDict_993_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Restore_PatFromGeom",1924,G__EMCDict_993_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 '0' np0 i - - 0 '1000' np1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Restore_TrxFromVtx",1879,G__EMCDict_993_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Restore_SegFromTrx",1844,G__EMCDict_993_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'EdbSegmentCut' - 0 '0' cut i - - 0 '0' Plt0 "
"i - - 0 '1000' Plt1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__EMCDict_993_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' hard", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearTracks",1103,G__EMCDict_993_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' hard", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearRaw",785,G__EMCDict_993_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' hard", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearSeg",774,G__EMCDict_993_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' hard", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearVTX",745,G__EMCDict_993_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearGeom",879,G__EMCDict_993_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nt",194,G__EMCDict_993_0_16, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nv",196,G__EMCDict_993_0_17, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nplt",414,G__EMCDict_993_0_18, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwnTracks",1224,G__EMCDict_993_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' own", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwnVertices",1445,G__EMCDict_993_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' own", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwnTrkSegs",1315,G__EMCDict_993_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__EMCDict_993_0_22, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__EMCDict_993_0_23, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbVertex), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegPat",868,G__EMCDict_993_0_24, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbPattern), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawPat",879,G__EMCDict_993_0_25, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbPattern), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPattern",1022,G__EMCDict_993_0_26, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbPattern), -1, 0, 2, 1, 1, 0, 
"i - - 0 - n g - - 0 'true' btk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPV",454,G__EMCDict_993_0_27, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbPatternsVolume), -1, 0, 1, 1, 1, 0, "g - - 0 'true' btk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTrack",886,G__EMCDict_993_0_28, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindVertex",1023,G__EMCDict_993_0_29, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbVertex), -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPattern",1119,G__EMCDict_993_0_30, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbPattern), -1, 0, 2, 1, 1, 0, 
"i - - 0 - plate i - - 0 '0' side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindLayer",894,G__EMCDict_993_0_31, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbLayer), -1, 0, 2, 1, 1, 0, 
"i - - 0 - plate i - - 0 '0' side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindLongTrk",1090,G__EMCDict_993_0_32, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbTrackP), -1, 0, 1, 1, 1, 0, "i - - 0 '8' nsmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPrimVtx",1115,G__EMCDict_993_0_33, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G__EMCDict_993_0_34, 85, G__get_linked_tagnum(&G__EMCDictLN_EdbSegP), -1, 0, 4, 1, 1, 0, 
"U 'EdbSegP' - 0 - seg U 'EdbSegmentCut' - 0 '0' cut "
"i - - 0 '0' Plt0 i - - 0 '100' Plt1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__EMCDict_993_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbTrackP' - 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVertex",903,G__EMCDict_993_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbVertex' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPattern",999,G__EMCDict_993_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "U 'EdbPattern' - 0 - pat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakePattern",1116,G__EMCDict_993_0_38, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - z i - - 0 - plate "
"i - - 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintBrief",1013,G__EMCDict_993_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintPatterns",1374,G__EMCDict_993_0_40, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintTracks",1141,G__EMCDict_993_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' vlev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveToRaw",892,G__EMCDict_993_0_42, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 '\"./\"' dir u 'EdbID' - 11 '\"0.0.0.0\"' idset "
"C - 'Option_t' 10 '\"RECREATE\"' option g - - 0 'true' doaff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SavePlateToRaw",1394,G__EMCDict_993_0_43, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - fname i - - 0 - PID "
"C - 'Option_t' 10 '\"RECREATE\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoSmearing",1001,G__EMCDict_993_0_44, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbScanCond' - 0 - cond_btk U 'EdbScanCond' - 0 '0' cond_mtk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoEfficiency",1192,G__EMCDict_993_0_45, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TF1' - 0 - eff_seg U 'TF1' - 0 - eff_mtk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Gen_mtk_BG",941,G__EMCDict_993_0_46, 108, -1, -1, 0, 5, 1, 1, 0, 
"l - - 0 - NBG i - - 0 - Plate "
"i - - 0 - Side U 'TH2' - 0 - pdf_Ang "
"U 'TH2' - 0 '0' pdf_WT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_993_0_47, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbDataStore::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_993_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataStore::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_993_0_49, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbDataStore::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_993_0_50, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbDataStore::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_993_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_993_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataStore::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_993_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbDataStore::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_993_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDataStore::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_993_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbDataStore::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbDataStore", 1296, G__EMCDict_993_0_59, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEdbDSRec(void) {
   /* EdbDSRec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EMCDictLN_EdbDSRec));
   G__memfunc_setup("EdbDSRec",700,G__EMCDict_994_0_1, 105, G__get_linked_tagnum(&G__EMCDictLN_EdbDSRec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__EMCDict_994_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' hard", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoTracking",998,G__EMCDict_994_0_3, 105, -1, -1, 0, 3, 1, 1, 0, 
"g - - 0 'true' use_btk i - - 0 '0' p0 "
"i - - 0 '100' p1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoTracking0",1046,G__EMCDict_994_0_4, 105, -1, -1, 0, 3, 1, 1, 0, 
"g - - 0 'true' use_btk i - - 0 '0' p0 "
"i - - 0 '100' p1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoMomEst",776,G__EMCDict_994_0_5, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoVertexing",1135,G__EMCDict_994_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoDecaySearch",1263,G__EMCDict_994_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", "/TODO", (void*) NULL, 0);
   G__memfunc_setup("DoFindBlkSeg",1132,G__EMCDict_994_0_8, 105, -1, -1, 0, 5, 1, 1, 0, 
"U 'EdbVertex' - 0 - v i - - 0 - w0 "
"d - - 0 '50.' ImpMax d - - 0 '3000' RMax "
"i - - 0 '1' Dpat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillECovPV",922,G__EMCDict_994_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbPatternsVolume' - 0 - - U 'EdbScanCond' - 0 '0' cnd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillECovSeg",1043,G__EMCDict_994_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'EdbSegP' - 0 - seg U 'EdbScanCond' - 0 '0' cnd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillECovTrks",1176,G__EMCDict_994_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillErrorsCOV",1260,G__EMCDict_994_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EMCDict_994_0_13, 85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EdbDSRec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EMCDict_994_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDSRec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EMCDict_994_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EdbDSRec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EMCDict_994_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EdbDSRec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EMCDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EMCDict_994_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EMCDict_994_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDSRec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EMCDict_994_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbDSRec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EMCDict_994_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EdbDSRec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EMCDict_994_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EdbDSRec::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~EdbDSRec", 826, G__EMCDict_994_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncEMCDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalEMCDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcEMCDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__EMCDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR = { "iterator<random_access_iterator_tag,char,long,char*,char&>" , 115 , -1 };
G__linked_taginfo G__EMCDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__EMCDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__EMCDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__EMCDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TGenPhaseSpace = { "TGenPhaseSpace" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbID = { "EdbID" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbSegP = { "EdbSegP" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbVertex = { "EdbVertex" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbTrackP = { "EdbTrackP" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbPattern = { "EdbPattern" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbPatternsVolume = { "EdbPatternsVolume" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbCell2 = { "EdbCell2" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbLayer = { "EdbLayer" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbScanCond = { "EdbScanCond" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR = { "list<VERTEX::Relation*,allocator<VERTEX::Relation*> >" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR = { "list<VERTEX::MassC*,allocator<VERTEX::MassC*> >" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR = { "vector<VERTEX::Track*,allocator<VERTEX::Track*> >" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR = { "iterator<random_access_iterator_tag,VERTEX::Track*,long,VERTEX::Track**,VERTEX::Track*&>" , 115 , -1 };
G__linked_taginfo G__EMCDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<VERTEX::Track*,allocator<VERTEX::Track*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbVertexRec = { "EdbVertexRec" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbPVGen = { "EdbPVGen" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbBrickP = { "EdbBrickP" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbBeamGen = { "EdbBeamGen" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbBrickGen = { "EdbBrickGen" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbViewDef = { "EdbViewDef" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbCluster = { "EdbCluster" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbSegment = { "EdbSegment" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbView = { "EdbView" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbViewGen = { "EdbViewGen" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbViewCell = { "EdbViewCell" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbViewRec = { "EdbViewRec" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbClMatch = { "EdbClMatch" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbViewMatch = { "EdbViewMatch" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbSegmentCut = { "EdbSegmentCut" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR = { "iterator<random_access_iterator_tag,TString,long,TString*,TString&>" , 115 , -1 };
G__linked_taginfo G__EMCDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__EMCDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR = { "iterator<random_access_iterator_tag,pair<unsigned int,int>,long,pair<unsigned int,int>*,pair<unsigned int,int>&>" , 115 , -1 };
G__linked_taginfo G__EMCDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbMomentumEstimator = { "EdbMomentumEstimator" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbDataStore = { "EdbDataStore" , 99 , -1 };
G__linked_taginfo G__EMCDictLN_EdbDSRec = { "EdbDSRec" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableEMCDict() {
  G__EMCDictLN_TClass.tagnum = -1 ;
  G__EMCDictLN_TBuffer.tagnum = -1 ;
  G__EMCDictLN_TMemberInspector.tagnum = -1 ;
  G__EMCDictLN_TObject.tagnum = -1 ;
  G__EMCDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR.tagnum = -1 ;
  G__EMCDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__EMCDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__EMCDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EMCDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__EMCDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EMCDictLN_TObjArray.tagnum = -1 ;
  G__EMCDictLN_TClonesArray.tagnum = -1 ;
  G__EMCDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__EMCDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__EMCDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EMCDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__EMCDictLN_TFile.tagnum = -1 ;
  G__EMCDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__EMCDictLN_TGenPhaseSpace.tagnum = -1 ;
  G__EMCDictLN_TTree.tagnum = -1 ;
  G__EMCDictLN_TArrayI.tagnum = -1 ;
  G__EMCDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__EMCDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__EMCDictLN_EdbID.tagnum = -1 ;
  G__EMCDictLN_EdbSegP.tagnum = -1 ;
  G__EMCDictLN_EdbVertex.tagnum = -1 ;
  G__EMCDictLN_EdbTrackP.tagnum = -1 ;
  G__EMCDictLN_EdbPattern.tagnum = -1 ;
  G__EMCDictLN_EdbPatternsVolume.tagnum = -1 ;
  G__EMCDictLN_TArrayF.tagnum = -1 ;
  G__EMCDictLN_TF1.tagnum = -1 ;
  G__EMCDictLN_TH2.tagnum = -1 ;
  G__EMCDictLN_EdbCell2.tagnum = -1 ;
  G__EMCDictLN_EdbLayer.tagnum = -1 ;
  G__EMCDictLN_EdbScanCond.tagnum = -1 ;
  G__EMCDictLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR.tagnum = -1 ;
  G__EMCDictLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR.tagnum = -1 ;
  G__EMCDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR.tagnum = -1 ;
  G__EMCDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EMCDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR.tagnum = -1 ;
  G__EMCDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EMCDictLN_EdbVertexRec.tagnum = -1 ;
  G__EMCDictLN_EdbPVGen.tagnum = -1 ;
  G__EMCDictLN_EdbBrickP.tagnum = -1 ;
  G__EMCDictLN_EdbBeamGen.tagnum = -1 ;
  G__EMCDictLN_EdbBrickGen.tagnum = -1 ;
  G__EMCDictLN_EdbViewDef.tagnum = -1 ;
  G__EMCDictLN_EdbCluster.tagnum = -1 ;
  G__EMCDictLN_EdbSegment.tagnum = -1 ;
  G__EMCDictLN_EdbView.tagnum = -1 ;
  G__EMCDictLN_EdbViewGen.tagnum = -1 ;
  G__EMCDictLN_EdbViewCell.tagnum = -1 ;
  G__EMCDictLN_EdbViewRec.tagnum = -1 ;
  G__EMCDictLN_TEnv.tagnum = -1 ;
  G__EMCDictLN_EdbClMatch.tagnum = -1 ;
  G__EMCDictLN_EdbViewMatch.tagnum = -1 ;
  G__EMCDictLN_EdbSegmentCut.tagnum = -1 ;
  G__EMCDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__EMCDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR.tagnum = -1 ;
  G__EMCDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EMCDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__EMCDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__EMCDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EMCDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR.tagnum = -1 ;
  G__EMCDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__EMCDictLN_EdbMomentumEstimator.tagnum = -1 ;
  G__EMCDictLN_EdbDataStore.tagnum = -1 ;
  G__EMCDictLN_EdbDSRec.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableEMCDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOcharcOlongcOcharmUcOcharaNgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TGenPhaseSpace);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbID);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbSegP);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbVertex);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbTrackP);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbPattern);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbPatternsVolume);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TH2);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbCell2);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbLayer);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbScanCond);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_listlEVERTEXcLcLRelationmUcOallocatorlEVERTEXcLcLRelationmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_listlEVERTEXcLcLMassCmUcOallocatorlEVERTEXcLcLMassCmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_vectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOVERTEXcLcLTrackmUcOlongcOVERTEXcLcLTrackmUmUcOVERTEXcLcLTrackmUaNgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_reverse_iteratorlEvectorlEVERTEXcLcLTrackmUcOallocatorlEVERTEXcLcLTrackmUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbVertexRec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbPVGen),sizeof(EdbPVGen),-1,29952,"PatternsVolume Generator",G__setup_memvarEdbPVGen,G__setup_memfuncEdbPVGen);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbBrickP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbBeamGen),sizeof(EdbBeamGen),-1,29952,"Beam Generator",G__setup_memvarEdbBeamGen,G__setup_memfuncEdbBeamGen);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbBrickGen),sizeof(EdbBrickGen),-1,29952,"OPERA simulation",G__setup_memvarEdbBrickGen,G__setup_memfuncEdbBrickGen);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbViewDef),sizeof(EdbViewDef),-1,29952,"Definition of microscope view parameters",G__setup_memvarEdbViewDef,G__setup_memfuncEdbViewDef);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbCluster);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbSegment);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbView);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbViewGen),sizeof(EdbViewGen),-1,62720,"Generation of one microscope view",G__setup_memvarEdbViewGen,G__setup_memfuncEdbViewGen);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbViewCell),sizeof(EdbViewCell),-1,29952,"service class for view reconstruction",G__setup_memvarEdbViewCell,G__setup_memfuncEdbViewCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbViewRec),sizeof(EdbViewRec),-1,62720,"Generation of one microscope view",G__setup_memvarEdbViewRec,G__setup_memfuncEdbViewRec);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_TEnv);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbClMatch),sizeof(EdbClMatch),-1,62720,"service structure for views matching",G__setup_memvarEdbClMatch,G__setup_memfuncEdbClMatch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbViewMatch),sizeof(EdbViewMatch),-1,29952,(char*)NULL,G__setup_memvarEdbViewMatch,G__setup_memfuncEdbViewMatch);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbSegmentCut);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOTStringcOlongcOTStringmUcOTStringaNgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_iteratorlErandom_access_iterator_tagcOpairlEunsignedsPintcOintgRcOlongcOpairlEunsignedsPintcOintgRmUcOpairlEunsignedsPintcOintgRaNgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbMomentumEstimator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbDataStore),sizeof(EdbDataStore),-1,29952,"OPERA Brick data container",G__setup_memvarEdbDataStore,G__setup_memfuncEdbDataStore);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EMCDictLN_EdbDSRec),sizeof(EdbDSRec),-1,29952,"OPERA event reconstruction",G__setup_memvarEdbDSRec,G__setup_memfuncEdbDSRec);
}
extern "C" void G__cpp_setupEMCDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupEMCDict()");
  G__set_cpp_environmentEMCDict();
  G__cpp_setup_tagtableEMCDict();

  G__cpp_setup_inheritanceEMCDict();

  G__cpp_setup_typetableEMCDict();

  G__cpp_setup_memvarEMCDict();

  G__cpp_setup_memfuncEMCDict();
  G__cpp_setup_globalEMCDict();
  G__cpp_setup_funcEMCDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncEMCDict();
  return;
}
class G__cpp_setup_initEMCDict {
  public:
    G__cpp_setup_initEMCDict() { G__add_setup_func("EMCDict",(G__incsetup)(&G__cpp_setupEMCDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initEMCDict() { G__remove_setup_func("EMCDict"); }
};
G__cpp_setup_initEMCDict G__cpp_setup_initializerEMCDict;

